
Magnetometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800a7e8  0800a7e8  0001a7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acc8  0800acc8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800acc8  0800acc8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acc8  0800acc8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc8  0800acc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800acd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001f8  0800aec8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800aec8  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f096  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ee4  00000000  00000000  0002f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c34  00000000  00000000  00032140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b17  00000000  00000000  00032d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001154e  00000000  00000000  0004b88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f0b0  00000000  00000000  0005cdd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000592c  00000000  00000000  000ebe8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f17b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a7cc 	.word	0x0800a7cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800a7cc 	.word	0x0800a7cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <MPU_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_init(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af04      	add	r7, sp, #16
	/*IMU 60050 configuration*/
	uint8_t check, data;

	/*WHO_AM_I register, returns 0x58 if connected*/
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x75, 1, &check, 1, 100);
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <MPU_init+0x120>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b299      	uxth	r1, r3
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1d7b      	adds	r3, r7, #5
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2275      	movs	r2, #117	; 0x75
 800119c:	4841      	ldr	r0, [pc, #260]	; (80012a4 <MPU_init+0x124>)
 800119e:	f001 ff7b 	bl	8003098 <HAL_I2C_Mem_Read>

	if(check == 104){
 80011a2:	797b      	ldrb	r3, [r7, #5]
 80011a4:	2b68      	cmp	r3, #104	; 0x68
 80011a6:	d177      	bne.n	8001298 <MPU_init+0x118>
		/*PWR_MGMT_1 register. Write 0 for normal use*/
		data = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x6B, 1, &data, 1, 100);
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <MPU_init+0x120>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b299      	uxth	r1, r3
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	226b      	movs	r2, #107	; 0x6b
 80011c2:	4838      	ldr	r0, [pc, #224]	; (80012a4 <MPU_init+0x124>)
 80011c4:	f001 fe6e 	bl	8002ea4 <HAL_I2C_Mem_Write>

		/*SMPRT_DIV register*/
		data = 0x07;
 80011c8:	2307      	movs	r3, #7
 80011ca:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x19, 1, &data, 1, 100);
 80011cc:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <MPU_init+0x120>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b299      	uxth	r1, r3
 80011d2:	2364      	movs	r3, #100	; 0x64
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2219      	movs	r2, #25
 80011e2:	4830      	ldr	r0, [pc, #192]	; (80012a4 <MPU_init+0x124>)
 80011e4:	f001 fe5e 	bl	8002ea4 <HAL_I2C_Mem_Write>

		/*Acceleration Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <MPU_init+0x120>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b299      	uxth	r1, r3
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	221c      	movs	r2, #28
 80011fe:	4829      	ldr	r0, [pc, #164]	; (80012a4 <MPU_init+0x124>)
 8001200:	f001 ff4a 	bl	8003098 <HAL_I2C_Mem_Read>

		uint8_t precission_selector = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	71fb      	strb	r3, [r7, #7]
		 * 0 for +- 2g
		 * 1 for +- 4g
		 * 2 for +- 8g
		 * 3 for +- 16g
		 */
		data = (data & ~(0b11<<3));
 8001208:	793b      	ldrb	r3, [r7, #4]
 800120a:	f023 0318 	bic.w	r3, r3, #24
 800120e:	b2db      	uxtb	r3, r3
 8001210:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector << 3));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	b25a      	sxtb	r2, r3
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	b25b      	sxtb	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b25b      	sxtb	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MPU_init+0x120>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b299      	uxth	r1, r3
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	221c      	movs	r2, #28
 800123a:	481a      	ldr	r0, [pc, #104]	; (80012a4 <MPU_init+0x124>)
 800123c:	f001 fe32 	bl	8002ea4 <HAL_I2C_Mem_Write>


		/*Gyro Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1B, 1, &data, 1, 100);
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MPU_init+0x120>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b299      	uxth	r1, r3
 8001246:	2364      	movs	r3, #100	; 0x64
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	221b      	movs	r2, #27
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <MPU_init+0x124>)
 8001258:	f001 ff1e 	bl	8003098 <HAL_I2C_Mem_Read>

		uint8_t precission_selector_gyro = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	71bb      	strb	r3, [r7, #6]
		 * 0 for +- 250 deg/s
		 * 1 for +- 500 deg/s
		 * 2 for +- 1000 deg/s
		 * 3 for +- 2000 deg/s
		 */
		data = (data & ~(0b11<<3));
 8001260:	793b      	ldrb	r3, [r7, #4]
 8001262:	f023 0318 	bic.w	r3, r3, #24
 8001266:	b2db      	uxtb	r3, r3
 8001268:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector_gyro << 3));
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	b25a      	sxtb	r2, r3
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1B, 1,&data, 1, 100);
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MPU_init+0x120>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b299      	uxth	r1, r3
 8001282:	2364      	movs	r3, #100	; 0x64
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	221b      	movs	r2, #27
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MPU_init+0x124>)
 8001294:	f001 fe06 	bl	8002ea4 <HAL_I2C_Mem_Write>

	}

}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000214 	.word	0x20000214

080012a8 <MPU_Read_gyro>:
	 accel_x = accel_x * 9.81;
	 accel_y = accel_y * 9.81;
	 accel_z = accel_z * 9.81;
	}

void MPU_Read_gyro(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af04      	add	r7, sp, #16
	 * 0x46 ACCEL_YOUT_L
	 * 0x47 ACCEL_ZOUT_H
	 * 0x48 ACCEL_ZOUT_L
	 * */

	if(count < 5){
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <MPU_Read_gyro+0x1a0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	f200 8094 	bhi.w	80013e0 <MPU_Read_gyro+0x138>

		/*Read registers in order*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x43, 1, gyro_raw_data, 6, 1000);
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <MPU_Read_gyro+0x1a4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b299      	uxth	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2306      	movs	r3, #6
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	4b61      	ldr	r3, [pc, #388]	; (8001450 <MPU_Read_gyro+0x1a8>)
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	2243      	movs	r2, #67	; 0x43
 80012d0:	4860      	ldr	r0, [pc, #384]	; (8001454 <MPU_Read_gyro+0x1ac>)
 80012d2:	f001 fee1 	bl	8003098 <HAL_I2C_Mem_Read>
		 * 250
		 * 500
		 * 1000
		 * 2000
		 * */
		float gyro_Precission = 250;
 80012d6:	4b60      	ldr	r3, [pc, #384]	; (8001458 <MPU_Read_gyro+0x1b0>)
 80012d8:	607b      	str	r3, [r7, #4]

		 gyro_x = (float)(((int16_t)(gyro_raw_data[0] << 8 | gyro_raw_data[1])) * gyro_Precission/32768);
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <MPU_Read_gyro+0x1a8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <MPU_Read_gyro+0x1a8>)
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fcf5 	bl	8000cdc <__aeabi_i2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fd44 	bl	8000d84 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fdf2 	bl	8000eec <__aeabi_fdiv>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <MPU_Read_gyro+0x1b4>)
 800130e:	601a      	str	r2, [r3, #0]
		 gyro_y = (float)(((int16_t)(gyro_raw_data[2] << 8 | gyro_raw_data[3])) * gyro_Precission/32768);
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <MPU_Read_gyro+0x1a8>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <MPU_Read_gyro+0x1a8>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fcda 	bl	8000cdc <__aeabi_i2f>
 8001328:	4603      	mov	r3, r0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fd29 	bl	8000d84 <__aeabi_fmul>
 8001332:	4603      	mov	r3, r0
 8001334:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fdd7 	bl	8000eec <__aeabi_fdiv>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b47      	ldr	r3, [pc, #284]	; (8001460 <MPU_Read_gyro+0x1b8>)
 8001344:	601a      	str	r2, [r3, #0]
		 gyro_z = (float)(((int16_t)(gyro_raw_data[4] << 8 | gyro_raw_data[5])) * gyro_Precission/32768);
 8001346:	4b42      	ldr	r3, [pc, #264]	; (8001450 <MPU_Read_gyro+0x1a8>)
 8001348:	791b      	ldrb	r3, [r3, #4]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	4b40      	ldr	r3, [pc, #256]	; (8001450 <MPU_Read_gyro+0x1a8>)
 8001350:	795b      	ldrb	r3, [r3, #5]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fcbf 	bl	8000cdc <__aeabi_i2f>
 800135e:	4603      	mov	r3, r0
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fd0e 	bl	8000d84 <__aeabi_fmul>
 8001368:	4603      	mov	r3, r0
 800136a:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fdbc 	bl	8000eec <__aeabi_fdiv>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <MPU_Read_gyro+0x1bc>)
 800137a:	601a      	str	r2, [r3, #0]

		 /*Gyro values adjusted with calibration values*/
		 gyro_x += Gyro_X_calibration;
 800137c:	4b37      	ldr	r3, [pc, #220]	; (800145c <MPU_Read_gyro+0x1b4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a39      	ldr	r2, [pc, #228]	; (8001468 <MPU_Read_gyro+0x1c0>)
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fbf4 	bl	8000b74 <__addsf3>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <MPU_Read_gyro+0x1b4>)
 8001392:	601a      	str	r2, [r3, #0]
		 gyro_y += Gyro_Y_calibration;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <MPU_Read_gyro+0x1b8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a34      	ldr	r2, [pc, #208]	; (800146c <MPU_Read_gyro+0x1c4>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fbe8 	bl	8000b74 <__addsf3>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MPU_Read_gyro+0x1b8>)
 80013aa:	601a      	str	r2, [r3, #0]
		 gyro_z += Gyro_Z_calibration;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <MPU_Read_gyro+0x1bc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <MPU_Read_gyro+0x1c8>)
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fbdc 	bl	8000b74 <__addsf3>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MPU_Read_gyro+0x1bc>)
 80013c2:	601a      	str	r2, [r3, #0]

		 GyroMean[count] = gyro_z;
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <MPU_Read_gyro+0x1a0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MPU_Read_gyro+0x1bc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a29      	ldr	r2, [pc, #164]	; (8001474 <MPU_Read_gyro+0x1cc>)
 80013d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		 count++;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MPU_Read_gyro+0x1a0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MPU_Read_gyro+0x1a0>)
 80013de:	701a      	strb	r2, [r3, #0]
	}

	if(count == 5){
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MPU_Read_gyro+0x1a0>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d12b      	bne.n	8001440 <MPU_Read_gyro+0x198>
		/*Moving average of 5*/
		gyro_mean = (GyroMean[0]+GyroMean[1]+GyroMean[2]+GyroMean[3]+GyroMean[4])/5;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MPU_Read_gyro+0x1cc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <MPU_Read_gyro+0x1cc>)
 80013ee:	6852      	ldr	r2, [r2, #4]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fbbe 	bl	8000b74 <__addsf3>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MPU_Read_gyro+0x1cc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f7ff fbb6 	bl	8000b74 <__addsf3>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MPU_Read_gyro+0x1cc>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4619      	mov	r1, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f7ff fbae 	bl	8000b74 <__addsf3>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MPU_Read_gyro+0x1cc>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff fba6 	bl	8000b74 <__addsf3>
 8001428:	4603      	mov	r3, r0
 800142a:	4913      	ldr	r1, [pc, #76]	; (8001478 <MPU_Read_gyro+0x1d0>)
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fd5d 	bl	8000eec <__aeabi_fdiv>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MPU_Read_gyro+0x1d4>)
 8001438:	601a      	str	r2, [r3, #0]
		count = 0;
 800143a:	4b03      	ldr	r3, [pc, #12]	; (8001448 <MPU_Read_gyro+0x1a0>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
	}
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200004a0 	.word	0x200004a0
 800144c:	20000000 	.word	0x20000000
 8001450:	200003d0 	.word	0x200003d0
 8001454:	20000214 	.word	0x20000214
 8001458:	437a0000 	.word	0x437a0000
 800145c:	200003d8 	.word	0x200003d8
 8001460:	200003dc 	.word	0x200003dc
 8001464:	200003e0 	.word	0x200003e0
 8001468:	200003fc 	.word	0x200003fc
 800146c:	20000400 	.word	0x20000400
 8001470:	20000404 	.word	0x20000404
 8001474:	200003e4 	.word	0x200003e4
 8001478:	40a00000 	.word	0x40a00000
 800147c:	200003f8 	.word	0x200003f8

08001480 <MPU_GetYaw>:
	Gyro_Y_calibration = -1 * GyroValuesy/counter;
	Gyro_Z_calibration = -1 * GyroValuesz/counter;

}

void MPU_GetYaw(uint8_t elapsed){
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	uint8_t alfa = 0.98;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
	yawangle = alfa * prev_yaw + (1-alfa) * yawangle_new;
`
	prev_yaw = yawangle_new;
*/

	filteredYaw = alfa*(filteredYaw + gyro_z * elapsed/1000) + (1-alfa)*YawMag;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc23 	bl	8000cdc <__aeabi_i2f>
 8001496:	4604      	mov	r4, r0
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fc1e 	bl	8000cdc <__aeabi_i2f>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MPU_GetYaw+0x8c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	4610      	mov	r0, r2
 80014aa:	f7ff fc6b 	bl	8000d84 <__aeabi_fmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4917      	ldr	r1, [pc, #92]	; (8001510 <MPU_GetYaw+0x90>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd1a 	bl	8000eec <__aeabi_fdiv>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MPU_GetYaw+0x94>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fb56 	bl	8000b74 <__addsf3>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fc59 	bl	8000d84 <__aeabi_fmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461c      	mov	r4, r3
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	f1c3 0301 	rsb	r3, r3, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fbfd 	bl	8000cdc <__aeabi_i2f>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MPU_GetYaw+0x98>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f7ff fc4a 	bl	8000d84 <__aeabi_fmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff fb3d 	bl	8000b74 <__addsf3>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <MPU_GetYaw+0x94>)
 8001500:	601a      	str	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	200003e0 	.word	0x200003e0
 8001510:	447a0000 	.word	0x447a0000
 8001514:	20000408 	.word	0x20000408
 8001518:	2000048c 	.word	0x2000048c

0800151c <Mag_init>:

void Mag_init(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af04      	add	r7, sp, #16

	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x08,1, &array[0], 1, 100);
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <Mag_init+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b299      	uxth	r1, r3
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <Mag_init+0x48>)
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	2208      	movs	r2, #8
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <Mag_init+0x4c>)
 800153a:	f001 fcb3 	bl	8002ea4 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x09,1, &array[1], 1, 100);
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <Mag_init+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b299      	uxth	r1, r3
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2301      	movs	r3, #1
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <Mag_init+0x50>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2301      	movs	r3, #1
 8001552:	2209      	movs	r2, #9
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <Mag_init+0x4c>)
 8001556:	f001 fca5 	bl	8002ea4 <HAL_I2C_Mem_Write>
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000001 	.word	0x20000001
 8001564:	20000004 	.word	0x20000004
 8001568:	20000214 	.word	0x20000214
 800156c:	20000005 	.word	0x20000005

08001570 <Mag_read>:

void Mag_read(void){
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read(&hi2c1, MAG_ADDRESS, 0x06,1, array2, 1, 100);
 8001576:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <Mag_read+0x260>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b299      	uxth	r1, r3
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	4b93      	ldr	r3, [pc, #588]	; (80017d4 <Mag_read+0x264>)
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	2206      	movs	r2, #6
 800158c:	4892      	ldr	r0, [pc, #584]	; (80017d8 <Mag_read+0x268>)
 800158e:	f001 fd83 	bl	8003098 <HAL_I2C_Mem_Read>
	  if(array2[0]&0x01){
 8001592:	4b90      	ldr	r3, [pc, #576]	; (80017d4 <Mag_read+0x264>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d02e      	beq.n	80015fc <Mag_read+0x8c>
		  HAL_I2C_Mem_Read(&hi2c1, MAG_ADDRESS, 0x00,1, array2, 6, 100);
 800159e:	4b8c      	ldr	r3, [pc, #560]	; (80017d0 <Mag_read+0x260>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b299      	uxth	r1, r3
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2306      	movs	r3, #6
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <Mag_read+0x264>)
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	2200      	movs	r2, #0
 80015b4:	4888      	ldr	r0, [pc, #544]	; (80017d8 <Mag_read+0x268>)
 80015b6:	f001 fd6f 	bl	8003098 <HAL_I2C_Mem_Read>
		  MagX = array2[1] << 8 | array2[0];
 80015ba:	4b86      	ldr	r3, [pc, #536]	; (80017d4 <Mag_read+0x264>)
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <Mag_read+0x264>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	4b83      	ldr	r3, [pc, #524]	; (80017dc <Mag_read+0x26c>)
 80015ce:	801a      	strh	r2, [r3, #0]
		  MagY = array2[3] << 8 | array2[2];
 80015d0:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <Mag_read+0x264>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b7e      	ldr	r3, [pc, #504]	; (80017d4 <Mag_read+0x264>)
 80015da:	789b      	ldrb	r3, [r3, #2]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <Mag_read+0x270>)
 80015e4:	801a      	strh	r2, [r3, #0]
		  MagZ = array2[5] << 8 | array2[4];
 80015e6:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <Mag_read+0x264>)
 80015e8:	795b      	ldrb	r3, [r3, #5]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	4b79      	ldr	r3, [pc, #484]	; (80017d4 <Mag_read+0x264>)
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <Mag_read+0x274>)
 80015fa:	801a      	strh	r2, [r3, #0]
	  }
	  float x_cent = (float)MagX - x_center;
 80015fc:	4b77      	ldr	r3, [pc, #476]	; (80017dc <Mag_read+0x26c>)
 80015fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb6a 	bl	8000cdc <__aeabi_i2f>
 8001608:	4602      	mov	r2, r0
 800160a:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <Mag_read+0x278>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f7ff faad 	bl	8000b70 <__aeabi_fsub>
 8001616:	4603      	mov	r3, r0
 8001618:	60fb      	str	r3, [r7, #12]
	  float y_cent = (float)MagY - y_center;
 800161a:	4b71      	ldr	r3, [pc, #452]	; (80017e0 <Mag_read+0x270>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb5b 	bl	8000cdc <__aeabi_i2f>
 8001626:	4602      	mov	r2, r0
 8001628:	4b70      	ldr	r3, [pc, #448]	; (80017ec <Mag_read+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7ff fa9e 	bl	8000b70 <__aeabi_fsub>
 8001634:	4603      	mov	r3, r0
 8001636:	60bb      	str	r3, [r7, #8]
	  float z_cent = (float)MagZ - z_center;
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <Mag_read+0x274>)
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fb4c 	bl	8000cdc <__aeabi_i2f>
 8001644:	4602      	mov	r2, r0
 8001646:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <Mag_read+0x280>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f7ff fa8f 	bl	8000b70 <__aeabi_fsub>
 8001652:	4603      	mov	r3, r0
 8001654:	607b      	str	r3, [r7, #4]

	  distancia = sqrt(x_cent * x_cent + y_cent * y_cent + z_cent * z_cent);
 8001656:	68f9      	ldr	r1, [r7, #12]
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fb93 	bl	8000d84 <__aeabi_fmul>
 800165e:	4603      	mov	r3, r0
 8001660:	461c      	mov	r4, r3
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff fb8d 	bl	8000d84 <__aeabi_fmul>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fa80 	bl	8000b74 <__addsf3>
 8001674:	4603      	mov	r3, r0
 8001676:	461c      	mov	r4, r3
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fb82 	bl	8000d84 <__aeabi_fmul>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fa75 	bl	8000b74 <__addsf3>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fecb 	bl	8000428 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f008 fd3d 	bl	800a118 <sqrt>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa0f 	bl	8000ac8 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <Mag_read+0x284>)
 80016ae:	6013      	str	r3, [r2, #0]
	  if (distancia != 0) { // Evitar división por cero
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <Mag_read+0x284>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fcf7 	bl	80010ac <__aeabi_fcmpeq>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11d      	bne.n	8001700 <Mag_read+0x190>
		  x_norm = (x_cent / distancia); //* radio_promedio;
 80016c4:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <Mag_read+0x284>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f7ff fc0e 	bl	8000eec <__aeabi_fdiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <Mag_read+0x288>)
 80016d6:	601a      	str	r2, [r3, #0]
		  y_norm = (y_cent / distancia); //* radio_promedio;
 80016d8:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <Mag_read+0x284>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f7ff fc04 	bl	8000eec <__aeabi_fdiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b44      	ldr	r3, [pc, #272]	; (80017fc <Mag_read+0x28c>)
 80016ea:	601a      	str	r2, [r3, #0]
		  z_norm = (z_cent / distancia); //* radio_promedio;
 80016ec:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <Mag_read+0x284>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fbfa 	bl	8000eec <__aeabi_fdiv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b40      	ldr	r3, [pc, #256]	; (8001800 <Mag_read+0x290>)
 80016fe:	601a      	str	r2, [r3, #0]
	  }
	  distancia = sqrt(x_norm * x_norm + y_norm * y_norm + z_norm * z_norm);
 8001700:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <Mag_read+0x288>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a3c      	ldr	r2, [pc, #240]	; (80017f8 <Mag_read+0x288>)
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fb3a 	bl	8000d84 <__aeabi_fmul>
 8001710:	4603      	mov	r3, r0
 8001712:	461c      	mov	r4, r3
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <Mag_read+0x28c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a38      	ldr	r2, [pc, #224]	; (80017fc <Mag_read+0x28c>)
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb30 	bl	8000d84 <__aeabi_fmul>
 8001724:	4603      	mov	r3, r0
 8001726:	4619      	mov	r1, r3
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff fa23 	bl	8000b74 <__addsf3>
 800172e:	4603      	mov	r3, r0
 8001730:	461c      	mov	r4, r3
 8001732:	4b33      	ldr	r3, [pc, #204]	; (8001800 <Mag_read+0x290>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a32      	ldr	r2, [pc, #200]	; (8001800 <Mag_read+0x290>)
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fb21 	bl	8000d84 <__aeabi_fmul>
 8001742:	4603      	mov	r3, r0
 8001744:	4619      	mov	r1, r3
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fa14 	bl	8000b74 <__addsf3>
 800174c:	4603      	mov	r3, r0
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe6a 	bl	8000428 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f008 fcdc 	bl	800a118 <sqrt>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9ae 	bl	8000ac8 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <Mag_read+0x284>)
 8001770:	6013      	str	r3, [r2, #0]
	  YawMag = atan2(y_cent,x_cent)*180/M_PI;
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f7fe fe58 	bl	8000428 <__aeabi_f2d>
 8001778:	4604      	mov	r4, r0
 800177a:	460d      	mov	r5, r1
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7fe fe53 	bl	8000428 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f008 fcc3 	bl	800a114 <atan2>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <Mag_read+0x294>)
 8001794:	f7fe fea0 	bl	80004d8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a309      	add	r3, pc, #36	; (adr r3, 80017c8 <Mag_read+0x258>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe ffc1 	bl	800072c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f989 	bl	8000ac8 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <Mag_read+0x298>)
 80017ba:	6013      	str	r3, [r2, #0]




}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bdb0      	pop	{r4, r5, r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	54442d18 	.word	0x54442d18
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	20000001 	.word	0x20000001
 80017d4:	20000480 	.word	0x20000480
 80017d8:	20000214 	.word	0x20000214
 80017dc:	20000486 	.word	0x20000486
 80017e0:	20000488 	.word	0x20000488
 80017e4:	2000048a 	.word	0x2000048a
 80017e8:	20000008 	.word	0x20000008
 80017ec:	2000000c 	.word	0x2000000c
 80017f0:	20000010 	.word	0x20000010
 80017f4:	2000049c 	.word	0x2000049c
 80017f8:	20000490 	.word	0x20000490
 80017fc:	20000494 	.word	0x20000494
 8001800:	20000498 	.word	0x20000498
 8001804:	40668000 	.word	0x40668000
 8001808:	2000048c 	.word	0x2000048c

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001812:	f000 fedf 	bl	80025d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001816:	f000 f88d 	bl	8001934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181a:	f000 faab 	bl	8001d74 <MX_GPIO_Init>
  MX_I2C1_Init();
 800181e:	f000 f8eb 	bl	80019f8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001822:	f000 f9b5 	bl	8001b90 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001826:	f000 fa7b 	bl	8001d20 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800182a:	f000 fa2b 	bl	8001c84 <MX_TIM4_Init>
  MX_TIM2_Init();
 800182e:	f000 f961 	bl	8001af4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001832:	f000 f90f 	bl	8001a54 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001836:	f000 f8c2 	bl	80019be <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*Check if MPU6050 is connected*/
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDRESS, 10, 100);
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <main+0xf8>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b299      	uxth	r1, r3
 8001840:	2364      	movs	r3, #100	; 0x64
 8001842:	220a      	movs	r2, #10
 8001844:	4830      	ldr	r0, [pc, #192]	; (8001908 <main+0xfc>)
 8001846:	f001 fe8f 	bl	8003568 <HAL_I2C_IsDeviceReady>
 800184a:	4603      	mov	r3, r0
 800184c:	75fb      	strb	r3, [r7, #23]
  /*Check if QMC5883 is connected*/
  HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c1, MAG_ADDRESS, 10, 1000);
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <main+0x100>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b299      	uxth	r1, r3
 8001854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001858:	220a      	movs	r2, #10
 800185a:	482b      	ldr	r0, [pc, #172]	; (8001908 <main+0xfc>)
 800185c:	f001 fe84 	bl	8003568 <HAL_I2C_IsDeviceReady>
 8001860:	4603      	mov	r3, r0
 8001862:	75bb      	strb	r3, [r7, #22]

  if(ready == HAL_OK){
 8001864:	7dbb      	ldrb	r3, [r7, #22]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d115      	bne.n	8001896 <main+0x8a>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001870:	4827      	ldr	r0, [pc, #156]	; (8001910 <main+0x104>)
 8001872:	f001 f9a3 	bl	8002bbc <HAL_GPIO_WritePin>
	  char transmission_buffer[17];
	  uint8_t transmission_size = sprintf(transmission_buffer,"Device connected \n");
 8001876:	463b      	mov	r3, r7
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <main+0x108>)
 800187a:	4618      	mov	r0, r3
 800187c:	f004 ffc2 	bl	8006804 <siprintf>
 8001880:	4603      	mov	r3, r0
 8001882:	757b      	strb	r3, [r7, #21]

	  HAL_UART_Transmit(&huart1,&transmission_buffer,transmission_size, 500);
 8001884:	7d7b      	ldrb	r3, [r7, #21]
 8001886:	b29a      	uxth	r2, r3
 8001888:	4639      	mov	r1, r7
 800188a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800188e:	4822      	ldr	r0, [pc, #136]	; (8001918 <main+0x10c>)
 8001890:	f003 ff0a 	bl	80056a8 <HAL_UART_Transmit>
 8001894:	e005      	b.n	80018a2 <main+0x96>
  }
  else{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189c:	481c      	ldr	r0, [pc, #112]	; (8001910 <main+0x104>)
 800189e:	f001 f98d 	bl	8002bbc <HAL_GPIO_WritePin>
  }

  Mag_init();
 80018a2:	f7ff fe3b 	bl	800151c <Mag_init>
  MPU_init();
 80018a6:	f7ff fc6b 	bl	8001180 <MPU_init>


  HAL_TIM_Base_Start_IT(&htim4);
 80018aa:	481c      	ldr	r0, [pc, #112]	; (800191c <main+0x110>)
 80018ac:	f002 ff9e 	bl	80047ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80018b0:	481b      	ldr	r0, [pc, #108]	; (8001920 <main+0x114>)
 80018b2:	f002 ff9b 	bl	80047ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018b6:	2100      	movs	r1, #0
 80018b8:	481a      	ldr	r0, [pc, #104]	; (8001924 <main+0x118>)
 80018ba:	f003 f839 	bl	8004930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018be:	2104      	movs	r1, #4
 80018c0:	4818      	ldr	r0, [pc, #96]	; (8001924 <main+0x118>)
 80018c2:	f003 f835 	bl	8004930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80018c6:	2108      	movs	r1, #8
 80018c8:	4816      	ldr	r0, [pc, #88]	; (8001924 <main+0x118>)
 80018ca:	f003 f831 	bl	8004930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80018ce:	210c      	movs	r1, #12
 80018d0:	4814      	ldr	r0, [pc, #80]	; (8001924 <main+0x118>)
 80018d2:	f003 f82d 	bl	8004930 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Mag_read();
 80018d6:	f7ff fe4b 	bl	8001570 <Mag_read>

	  uint8_t MagData = sprintf(rpmdata,",%.2f\n",YawMag);
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <main+0x11c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fda2 	bl	8000428 <__aeabi_f2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4910      	ldr	r1, [pc, #64]	; (800192c <main+0x120>)
 80018ea:	4811      	ldr	r0, [pc, #68]	; (8001930 <main+0x124>)
 80018ec:	f004 ff8a 	bl	8006804 <siprintf>
 80018f0:	4603      	mov	r3, r0
 80018f2:	753b      	strb	r3, [r7, #20]
	  HAL_UART_Transmit(&huart1, &rpmdata, MagData, 100);
 80018f4:	7d3b      	ldrb	r3, [r7, #20]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <main+0x124>)
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <main+0x10c>)
 80018fe:	f003 fed3 	bl	80056a8 <HAL_UART_Transmit>
  {
 8001902:	e7e8      	b.n	80018d6 <main+0xca>
 8001904:	20000000 	.word	0x20000000
 8001908:	20000214 	.word	0x20000214
 800190c:	20000001 	.word	0x20000001
 8001910:	40011000 	.word	0x40011000
 8001914:	0800a7e8 	.word	0x0800a7e8
 8001918:	20000388 	.word	0x20000388
 800191c:	20000340 	.word	0x20000340
 8001920:	200002b0 	.word	0x200002b0
 8001924:	200002f8 	.word	0x200002f8
 8001928:	2000048c 	.word	0x2000048c
 800192c:	0800a7fc 	.word	0x0800a7fc
 8001930:	2000041c 	.word	0x2000041c

08001934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b090      	sub	sp, #64	; 0x40
 8001938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	2228      	movs	r2, #40	; 0x28
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f004 ffc1 	bl	80068ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800195a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800195e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001964:	2301      	movs	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001972:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001976:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fad5 	bl	8003f2c <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001988:	f000 fb78 	bl	800207c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198c:	230f      	movs	r3, #15
 800198e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001990:	2302      	movs	r3, #2
 8001992:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2102      	movs	r1, #2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fd42 	bl	8004430 <HAL_RCC_ClockConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019b2:	f000 fb63 	bl	800207c <Error_Handler>
  }
}
 80019b6:	bf00      	nop
 80019b8:	3740      	adds	r7, #64	; 0x40
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2028      	movs	r0, #40	; 0x28
 80019c8:	f000 ff3d 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019cc:	2028      	movs	r0, #40	; 0x28
 80019ce:	f000 ff56 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201e      	movs	r0, #30
 80019d8:	f000 ff35 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019dc:	201e      	movs	r0, #30
 80019de:	f000 ff4e 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	201c      	movs	r0, #28
 80019e8:	f000 ff2d 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ec:	201c      	movs	r0, #28
 80019ee:	f000 ff46 	bl	800287e <HAL_NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C1_Init+0x50>)
 80019fe:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <MX_I2C1_Init+0x54>)
 8001a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_I2C1_Init+0x58>)
 8001a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a36:	f001 f8f1 	bl	8002c1c <HAL_I2C_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a40:	f000 fb1c 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000214 	.word	0x20000214
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	000186a0 	.word	0x000186a0

08001a54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <MX_TIM1_Init+0x9c>)
 8001a74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a9c:	4813      	ldr	r0, [pc, #76]	; (8001aec <MX_TIM1_Init+0x98>)
 8001a9e:	f002 fe55 	bl	800474c <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001aa8:	f000 fae8 	bl	800207c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM1_Init+0x98>)
 8001aba:	f003 f9a5 	bl	8004e08 <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ac4:	f000 fada 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM1_Init+0x98>)
 8001ad6:	f003 fd27 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ae0:	f000 facc 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000268 	.word	0x20000268
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b1a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b3a:	4814      	ldr	r0, [pc, #80]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b3c:	f002 fe06 	bl	800474c <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b46:	f000 fa99 	bl	800207c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b58:	f003 f956 	bl	8004e08 <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b62:	f000 fa8b 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b74:	f003 fcd8 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b7e:	f000 fa7d 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200002b0 	.word	0x200002b0

08001b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b96:	f107 0320 	add.w	r3, r7, #32
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	615a      	str	r2, [r3, #20]
 8001bb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <MX_TIM3_Init+0xf0>)
 8001bb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bc6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bd8:	4828      	ldr	r0, [pc, #160]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bda:	f002 fe59 	bl	8004890 <HAL_TIM_PWM_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001be4:	f000 fa4a 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf0:	f107 0320 	add.w	r3, r7, #32
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4821      	ldr	r0, [pc, #132]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001bf8:	f003 fc96 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c02:	f000 fa3b 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c06:	2360      	movs	r3, #96	; 0x60
 8001c08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4817      	ldr	r0, [pc, #92]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001c1e:	f003 f831 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c28:	f000 fa28 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4812      	ldr	r0, [pc, #72]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001c34:	f003 f826 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c3e:	f000 fa1d 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2208      	movs	r2, #8
 8001c46:	4619      	mov	r1, r3
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001c4a:	f003 f81b 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c54:	f000 fa12 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001c60:	f003 f810 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c6a:	f000 fa07 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c6e:	4803      	ldr	r0, [pc, #12]	; (8001c7c <MX_TIM3_Init+0xec>)
 8001c70:	f000 fadc 	bl	800222c <HAL_TIM_MspPostInit>

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200002f8 	.word	0x200002f8
 8001c80:	40000400 	.word	0x40000400

08001c84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <MX_TIM4_Init+0x98>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001ca8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001cac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001cb6:	2263      	movs	r2, #99	; 0x63
 8001cb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cc6:	4814      	ldr	r0, [pc, #80]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001cc8:	f002 fd40 	bl	800474c <HAL_TIM_Base_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f000 f9d3 	bl	800207c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001ce4:	f003 f890 	bl	8004e08 <HAL_TIM_ConfigClockSource>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f000 f9c5 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_TIM4_Init+0x94>)
 8001d00:	f003 fc12 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d0a:	f000 f9b7 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000340 	.word	0x20000340
 8001d1c:	40000800 	.word	0x40000800

08001d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <MX_USART1_UART_Init+0x50>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d58:	f003 fc56 	bl	8005608 <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d62:	f000 f98b 	bl	800207c <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000388 	.word	0x20000388
 8001d70:	40013800 	.word	0x40013800

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d88:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a44      	ldr	r2, [pc, #272]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001d8e:	f043 0310 	orr.w	r3, r3, #16
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a3e      	ldr	r2, [pc, #248]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dee:	482d      	ldr	r0, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001df0:	f000 fee4 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001df4:	2200      	movs	r2, #0
 8001df6:	f248 010f 	movw	r1, #32783	; 0x800f
 8001dfa:	482b      	ldr	r0, [pc, #172]	; (8001ea8 <MX_GPIO_Init+0x134>)
 8001dfc:	f000 fede 	bl	8002bbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2138      	movs	r1, #56	; 0x38
 8001e04:	4829      	ldr	r0, [pc, #164]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e06:	f000 fed9 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	4820      	ldr	r0, [pc, #128]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e24:	f000 fd46 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e28:	f248 030f 	movw	r3, #32783	; 0x800f
 8001e2c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4819      	ldr	r0, [pc, #100]	; (8001ea8 <MX_GPIO_Init+0x134>)
 8001e42:	f000 fd37 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e46:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <MX_GPIO_Init+0x13c>)
 8001e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4814      	ldr	r0, [pc, #80]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e5c:	f000 fd2a 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <MX_GPIO_Init+0x134>)
 8001e76:	f000 fd1d 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e7a:	2338      	movs	r3, #56	; 0x38
 8001e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e92:	f000 fd0f 	bl	80028b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40011000 	.word	0x40011000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	10110000 	.word	0x10110000

08001eb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]


	if(htim -> Instance  == TIM2){
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d153      	bne.n	8001f6e <HAL_TIM_PeriodElapsedCallback+0xba>



		rpm_rf =  (current_tick_rf * 1000 * 60) / (pulsesperturn * 100);
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001ed0:	fb03 f202 	mul.w	r2, r3, r2
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001ee8:	801a      	strh	r2, [r3, #0]
	    rpm_lf =  (current_tick_lf * 1000 * 60) / (pulsesperturn * 100);
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001ef4:	fb03 f202 	mul.w	r2, r3, r2
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	2364      	movs	r3, #100	; 0x64
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001f0c:	801a      	strh	r2, [r3, #0]
	    rpm_rb =  (current_tick_rb * 1000 * 60) / (pulsesperturn * 100);
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001f18:	fb03 f202 	mul.w	r2, r3, r2
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	2364      	movs	r3, #100	; 0x64
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001f30:	801a      	strh	r2, [r3, #0]
	    rpm_lb =  (current_tick_lb * 1000 * 60) / (pulsesperturn * 100);
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001f3c:	fb03 f202 	mul.w	r2, r3, r2
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001f54:	801a      	strh	r2, [r3, #0]

		current_tick_rf = 0;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
		current_tick_lf = 0;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
		current_tick_rb = 0;
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
		current_tick_lb = 0;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]


	}


	if(htim -> Instance == TIM4){
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <HAL_TIM_PeriodElapsedCallback+0xd6>


		if(count == 4){
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d102      	bne.n	8001f86 <HAL_TIM_PeriodElapsedCallback+0xd2>
			/*Integrate  every 50ms*/
			MPU_GetYaw(50);
 8001f80:	2032      	movs	r0, #50	; 0x32
 8001f82:	f7ff fa7d 	bl	8001480 <MPU_GetYaw>
			//count = 0;
		}

		/*Readd gyro value every 10ms*/
		MPU_Read_gyro();
 8001f86:	f7ff f98f 	bl	80012a8 <MPU_Read_gyro>
	}

}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000418 	.word	0x20000418
 8001f98:	20000002 	.word	0x20000002
 8001f9c:	20000410 	.word	0x20000410
 8001fa0:	20000419 	.word	0x20000419
 8001fa4:	20000412 	.word	0x20000412
 8001fa8:	2000041a 	.word	0x2000041a
 8001fac:	20000414 	.word	0x20000414
 8001fb0:	2000041b 	.word	0x2000041b
 8001fb4:	20000416 	.word	0x20000416
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	200004a0 	.word	0x200004a0

08001fc0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
 * @pin 14 Left front wheel
 * @pin 13 Right back wheel
 * @pin 12 Left back wheel
 */

  if(GPIO_Pin == GPIO_PIN_15){
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd0:	d10c      	bne.n	8001fec <HAL_GPIO_EXTI_Callback+0x2c>
	  //Right front wheel
	  pulses_rf++;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001fde:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001fea:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_14){
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ff2:	d10c      	bne.n	800200e <HAL_GPIO_EXTI_Callback+0x4e>
	  //Left front wheel
	  pulses_lf++;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002000:	701a      	strb	r2, [r3, #0]
	  current_tick_lf++;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_GPIO_EXTI_Callback+0xa8>)
 800200c:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_13){
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002014:	d10c      	bne.n	8002030 <HAL_GPIO_EXTI_Callback+0x70>
	  //Right back wheel
	  pulses_lb++;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_GPIO_EXTI_Callback+0xac>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_GPIO_EXTI_Callback+0xac>)
 8002022:	701a      	strb	r2, [r3, #0]
	  current_tick_lb++;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_GPIO_EXTI_Callback+0xb0>)
 800202e:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_12){
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002036:	d10c      	bne.n	8002052 <HAL_GPIO_EXTI_Callback+0x92>
	  //Left back wheel
	  pulses_rb++;
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_GPIO_EXTI_Callback+0xb4>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	3301      	adds	r3, #1
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002044:	701a      	strb	r2, [r3, #0]
	  current_tick_rb++;
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002050:	701a      	strb	r2, [r3, #0]

  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	2000040c 	.word	0x2000040c
 8002060:	20000418 	.word	0x20000418
 8002064:	2000040d 	.word	0x2000040d
 8002068:	20000419 	.word	0x20000419
 800206c:	2000040f 	.word	0x2000040f
 8002070:	2000041b 	.word	0x2000041b
 8002074:	2000040e 	.word	0x2000040e
 8002078:	2000041a 	.word	0x2000041a

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002084:	e7fe      	b.n	8002084 <Error_Handler+0x8>
	...

08002088 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_MspInit+0x5c>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_MspInit+0x5c>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_MspInit+0x5c>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_MspInit+0x5c>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_MspInit+0x5c>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_MspInit+0x5c>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_MspInit+0x60>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_MspInit+0x60>)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000

080020ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <HAL_I2C_MspInit+0x70>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d123      	bne.n	8002154 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_I2C_MspInit+0x74>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002124:	23c0      	movs	r3, #192	; 0xc0
 8002126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002128:	2312      	movs	r3, #18
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <HAL_I2C_MspInit+0x78>)
 8002138:	f000 fbbc 	bl	80028b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_I2C_MspInit+0x74>)
 8002142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002146:	61d3      	str	r3, [r2, #28]
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40005400 	.word	0x40005400
 8002160:	40021000 	.word	0x40021000
 8002164:	40010c00 	.word	0x40010c00

08002168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <HAL_TIM_Base_MspInit+0x7c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10c      	bne.n	8002194 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 8002180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002184:	6193      	str	r3, [r2, #24]
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002192:	e022      	b.n	80021da <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d10c      	bne.n	80021b8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
}
 80021b6:	e010      	b.n	80021da <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_TIM_Base_MspInit+0x84>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10b      	bne.n	80021da <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_TIM_Base_MspInit+0x80>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40012c00 	.word	0x40012c00
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40000800 	.word	0x40000800

080021f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_TIM_PWM_MspInit+0x34>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10b      	bne.n	800221a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_TIM_PWM_MspInit+0x38>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_TIM_PWM_MspInit+0x38>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_TIM_PWM_MspInit+0x38>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40000400 	.word	0x40000400
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_TIM_MspPostInit+0x88>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d12f      	bne.n	80022ac <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_TIM_MspPostInit+0x8c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_TIM_MspPostInit+0x8c>)
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_TIM_MspPostInit+0x8c>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_TIM_MspPostInit+0x8c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_TIM_MspPostInit+0x8c>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_TIM_MspPostInit+0x8c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800227c:	23c0      	movs	r3, #192	; 0xc0
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2302      	movs	r3, #2
 8002286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	480b      	ldr	r0, [pc, #44]	; (80022bc <HAL_TIM_MspPostInit+0x90>)
 8002290:	f000 fb10 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002294:	2303      	movs	r3, #3
 8002296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2302      	movs	r3, #2
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	4806      	ldr	r0, [pc, #24]	; (80022c0 <HAL_TIM_MspPostInit+0x94>)
 80022a8:	f000 fb04 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022ac:	bf00      	nop
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010800 	.word	0x40010800
 80022c0:	40010c00 	.word	0x40010c00

080022c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_UART_MspInit+0x8c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d131      	bne.n	8002348 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_UART_MspInit+0x90>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_UART_MspInit+0x90>)
 80022ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_UART_MspInit+0x90>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_MspInit+0x90>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HAL_UART_MspInit+0x90>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_UART_MspInit+0x90>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002318:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	4619      	mov	r1, r3
 8002328:	480b      	ldr	r0, [pc, #44]	; (8002358 <HAL_UART_MspInit+0x94>)
 800232a:	f000 fac3 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800232e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_UART_MspInit+0x94>)
 8002344:	f000 fab6 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013800 	.word	0x40013800
 8002354:	40021000 	.word	0x40021000
 8002358:	40010800 	.word	0x40010800

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <MemManage_Handler+0x4>

0800236e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <BusFault_Handler+0x4>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <UsageFault_Handler+0x4>

0800237a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a2:	f000 f95d 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <TIM2_IRQHandler+0x10>)
 80023b2:	f002 fb5f 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002b0 	.word	0x200002b0

080023c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <TIM4_IRQHandler+0x10>)
 80023c6:	f002 fb55 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000340 	.word	0x20000340

080023d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80023d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023dc:	f000 fc06 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023e4:	f000 fc02 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80023e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023ec:	f000 fbfe 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80023f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023f4:	f000 fbfa 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return 1;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <_kill>:

int _kill(int pid, int sig)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002414:	f004 faac 	bl	8006970 <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	2216      	movs	r2, #22
 800241c:	601a      	str	r2, [r3, #0]
  return -1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_exit>:

void _exit (int status)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002432:	f04f 31ff 	mov.w	r1, #4294967295
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffe7 	bl	800240a <_kill>
  while (1) {}    /* Make sure we hang here */
 800243c:	e7fe      	b.n	800243c <_exit+0x12>

0800243e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e00a      	b.n	8002466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002450:	f3af 8000 	nop.w
 8002454:	4601      	mov	r1, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	b2ca      	uxtb	r2, r1
 800245e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	dbf0      	blt.n	8002450 <_read+0x12>
  }

  return len;
 800246e:	687b      	ldr	r3, [r7, #4]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e009      	b.n	800249e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	60ba      	str	r2, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbf1      	blt.n	800248a <_write+0x12>
  }
  return len;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_close>:

int _close(int file)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d6:	605a      	str	r2, [r3, #4]
  return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <_isatty>:

int _isatty(int file)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <_sbrk+0x5c>)
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <_sbrk+0x60>)
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <_sbrk+0x64>)
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <_sbrk+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d207      	bcs.n	8002550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002540:	f004 fa16 	bl	8006970 <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	220c      	movs	r2, #12
 8002548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	e009      	b.n	8002564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <_sbrk+0x64>)
 8002560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20005000 	.word	0x20005000
 8002570:	00000400 	.word	0x00000400
 8002574:	200004a4 	.word	0x200004a4
 8002578:	200005f8 	.word	0x200005f8

0800257c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002588:	f7ff fff8 	bl	800257c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800258c:	480b      	ldr	r0, [pc, #44]	; (80025bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800258e:	490c      	ldr	r1, [pc, #48]	; (80025c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025a4:	4c09      	ldr	r4, [pc, #36]	; (80025cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b2:	f004 f9e3 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025b6:	f7ff f929 	bl	800180c <main>
  bx lr
 80025ba:	4770      	bx	lr
  ldr r0, =_sdata
 80025bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80025c4:	0800acd0 	.word	0x0800acd0
  ldr r2, =_sbss
 80025c8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80025cc:	200005f8 	.word	0x200005f8

080025d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC1_2_IRQHandler>
	...

080025d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_Init+0x28>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_Init+0x28>)
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f923 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ea:	200f      	movs	r0, #15
 80025ec:	f000 f808 	bl	8002600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f0:	f7ff fd4a 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40022000 	.word	0x40022000

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x54>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_InitTick+0x58>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002616:	fbb3 f3f1 	udiv	r3, r3, r1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f93b 	bl	800289a <HAL_SYSTICK_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00e      	b.n	800264c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d80a      	bhi.n	800264a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f000 f903 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <HAL_InitTick+0x5c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000014 	.word	0x20000014
 8002658:	2000001c 	.word	0x2000001c
 800265c:	20000018 	.word	0x20000018

08002660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_IncTick+0x1c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_IncTick+0x20>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_IncTick+0x20>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	2000001c 	.word	0x2000001c
 8002680:	200004a8 	.word	0x200004a8

08002684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b02      	ldr	r3, [pc, #8]	; (8002694 <HAL_GetTick+0x10>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	200004a8 	.word	0x200004a8

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0b      	blt.n	8002726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	4906      	ldr	r1, [pc, #24]	; (8002730 <__NVIC_EnableIRQ+0x34>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff90 	bl	8002734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff2d 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff42 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff90 	bl	8002788 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5f 	bl	8002734 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff35 	bl	80026fc <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b08b      	sub	sp, #44	; 0x2c
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c6:	e169      	b.n	8002b9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c8:	2201      	movs	r2, #1
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 8158 	bne.w	8002b96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a9a      	ldr	r2, [pc, #616]	; (8002b54 <HAL_GPIO_Init+0x2a0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d05e      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 80028f0:	4a98      	ldr	r2, [pc, #608]	; (8002b54 <HAL_GPIO_Init+0x2a0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d875      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 80028f6:	4a98      	ldr	r2, [pc, #608]	; (8002b58 <HAL_GPIO_Init+0x2a4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d058      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 80028fc:	4a96      	ldr	r2, [pc, #600]	; (8002b58 <HAL_GPIO_Init+0x2a4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d86f      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 8002902:	4a96      	ldr	r2, [pc, #600]	; (8002b5c <HAL_GPIO_Init+0x2a8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d052      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 8002908:	4a94      	ldr	r2, [pc, #592]	; (8002b5c <HAL_GPIO_Init+0x2a8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d869      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 800290e:	4a94      	ldr	r2, [pc, #592]	; (8002b60 <HAL_GPIO_Init+0x2ac>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04c      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 8002914:	4a92      	ldr	r2, [pc, #584]	; (8002b60 <HAL_GPIO_Init+0x2ac>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d863      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 800291a:	4a92      	ldr	r2, [pc, #584]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d046      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 8002920:	4a90      	ldr	r2, [pc, #576]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d85d      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 8002926:	2b12      	cmp	r3, #18
 8002928:	d82a      	bhi.n	8002980 <HAL_GPIO_Init+0xcc>
 800292a:	2b12      	cmp	r3, #18
 800292c:	d859      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_GPIO_Init+0x80>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	080029af 	.word	0x080029af
 8002938:	08002989 	.word	0x08002989
 800293c:	0800299b 	.word	0x0800299b
 8002940:	080029dd 	.word	0x080029dd
 8002944:	080029e3 	.word	0x080029e3
 8002948:	080029e3 	.word	0x080029e3
 800294c:	080029e3 	.word	0x080029e3
 8002950:	080029e3 	.word	0x080029e3
 8002954:	080029e3 	.word	0x080029e3
 8002958:	080029e3 	.word	0x080029e3
 800295c:	080029e3 	.word	0x080029e3
 8002960:	080029e3 	.word	0x080029e3
 8002964:	080029e3 	.word	0x080029e3
 8002968:	080029e3 	.word	0x080029e3
 800296c:	080029e3 	.word	0x080029e3
 8002970:	080029e3 	.word	0x080029e3
 8002974:	080029e3 	.word	0x080029e3
 8002978:	08002991 	.word	0x08002991
 800297c:	080029a5 	.word	0x080029a5
 8002980:	4a79      	ldr	r2, [pc, #484]	; (8002b68 <HAL_GPIO_Init+0x2b4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002986:	e02c      	b.n	80029e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	623b      	str	r3, [r7, #32]
          break;
 800298e:	e029      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	3304      	adds	r3, #4
 8002996:	623b      	str	r3, [r7, #32]
          break;
 8002998:	e024      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	3308      	adds	r3, #8
 80029a0:	623b      	str	r3, [r7, #32]
          break;
 80029a2:	e01f      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	330c      	adds	r3, #12
 80029aa:	623b      	str	r3, [r7, #32]
          break;
 80029ac:	e01a      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029b6:	2304      	movs	r3, #4
 80029b8:	623b      	str	r3, [r7, #32]
          break;
 80029ba:	e013      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	611a      	str	r2, [r3, #16]
          break;
 80029ce:	e009      	b.n	80029e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d0:	2308      	movs	r3, #8
 80029d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	615a      	str	r2, [r3, #20]
          break;
 80029da:	e003      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029dc:	2300      	movs	r3, #0
 80029de:	623b      	str	r3, [r7, #32]
          break;
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          break;
 80029e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d801      	bhi.n	80029ee <HAL_GPIO_Init+0x13a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	e001      	b.n	80029f2 <HAL_GPIO_Init+0x13e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2bff      	cmp	r3, #255	; 0xff
 80029f8:	d802      	bhi.n	8002a00 <HAL_GPIO_Init+0x14c>
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x152>
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	3b08      	subs	r3, #8
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	210f      	movs	r1, #15
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	6a39      	ldr	r1, [r7, #32]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80b1 	beq.w	8002b96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a34:	4b4d      	ldr	r3, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x2b8>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_GPIO_Init+0x2b8>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <HAL_GPIO_Init+0x2b8>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a4c:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_GPIO_Init+0x2bc>)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	220f      	movs	r2, #15
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a40      	ldr	r2, [pc, #256]	; (8002b74 <HAL_GPIO_Init+0x2c0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_GPIO_Init+0x1ec>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_GPIO_Init+0x2c4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00d      	beq.n	8002a9c <HAL_GPIO_Init+0x1e8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3e      	ldr	r2, [pc, #248]	; (8002b7c <HAL_GPIO_Init+0x2c8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d007      	beq.n	8002a98 <HAL_GPIO_Init+0x1e4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <HAL_GPIO_Init+0x2cc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_GPIO_Init+0x1e0>
 8002a90:	2303      	movs	r3, #3
 8002a92:	e006      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e004      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e002      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	f002 0203 	and.w	r2, r2, #3
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	4093      	lsls	r3, r2
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ab2:	492f      	ldr	r1, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x2bc>)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	492c      	ldr	r1, [pc, #176]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ada:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4928      	ldr	r1, [pc, #160]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	4922      	ldr	r1, [pc, #136]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60cb      	str	r3, [r1, #12]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	491e      	ldr	r1, [pc, #120]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4918      	ldr	r1, [pc, #96]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4914      	ldr	r1, [pc, #80]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d021      	beq.n	8002b88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	490e      	ldr	r1, [pc, #56]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e021      	b.n	8002b96 <HAL_GPIO_Init+0x2e2>
 8002b52:	bf00      	nop
 8002b54:	10320000 	.word	0x10320000
 8002b58:	10310000 	.word	0x10310000
 8002b5c:	10220000 	.word	0x10220000
 8002b60:	10210000 	.word	0x10210000
 8002b64:	10120000 	.word	0x10120000
 8002b68:	10110000 	.word	0x10110000
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40010800 	.word	0x40010800
 8002b78:	40010c00 	.word	0x40010c00
 8002b7c:	40011000 	.word	0x40011000
 8002b80:	40011400 	.word	0x40011400
 8002b84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_GPIO_Init+0x304>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	4909      	ldr	r1, [pc, #36]	; (8002bb8 <HAL_GPIO_Init+0x304>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3301      	adds	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f47f ae8e 	bne.w	80028c8 <HAL_GPIO_Init+0x14>
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	372c      	adds	r7, #44	; 0x2c
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40010400 	.word	0x40010400

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f9d8 	bl	8001fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e12b      	b.n	8002e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fa52 	bl	80020ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c80:	f001 fd1e 	bl	80046c0 <HAL_RCC_GetPCLK1Freq>
 8002c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4a81      	ldr	r2, [pc, #516]	; (8002e90 <HAL_I2C_Init+0x274>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d807      	bhi.n	8002ca0 <HAL_I2C_Init+0x84>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a80      	ldr	r2, [pc, #512]	; (8002e94 <HAL_I2C_Init+0x278>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e006      	b.n	8002cae <HAL_I2C_Init+0x92>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a7d      	ldr	r2, [pc, #500]	; (8002e98 <HAL_I2C_Init+0x27c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0e7      	b.n	8002e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a78      	ldr	r2, [pc, #480]	; (8002e9c <HAL_I2C_Init+0x280>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0c9b      	lsrs	r3, r3, #18
 8002cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a6a      	ldr	r2, [pc, #424]	; (8002e90 <HAL_I2C_Init+0x274>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d802      	bhi.n	8002cf0 <HAL_I2C_Init+0xd4>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3301      	adds	r3, #1
 8002cee:	e009      	b.n	8002d04 <HAL_I2C_Init+0xe8>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a69      	ldr	r2, [pc, #420]	; (8002ea0 <HAL_I2C_Init+0x284>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	3301      	adds	r3, #1
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	495c      	ldr	r1, [pc, #368]	; (8002e90 <HAL_I2C_Init+0x274>)
 8002d20:	428b      	cmp	r3, r1
 8002d22:	d819      	bhi.n	8002d58 <HAL_I2C_Init+0x13c>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1e59      	subs	r1, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d38:	400b      	ands	r3, r1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_I2C_Init+0x138>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e59      	subs	r1, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d52:	e051      	b.n	8002df8 <HAL_I2C_Init+0x1dc>
 8002d54:	2304      	movs	r3, #4
 8002d56:	e04f      	b.n	8002df8 <HAL_I2C_Init+0x1dc>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d111      	bne.n	8002d84 <HAL_I2C_Init+0x168>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e012      	b.n	8002daa <HAL_I2C_Init+0x18e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	0099      	lsls	r1, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Init+0x196>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e022      	b.n	8002df8 <HAL_I2C_Init+0x1dc>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10e      	bne.n	8002dd8 <HAL_I2C_Init+0x1bc>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1e58      	subs	r0, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	440b      	add	r3, r1
 8002dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd6:	e00f      	b.n	8002df8 <HAL_I2C_Init+0x1dc>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	0099      	lsls	r1, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	6809      	ldr	r1, [r1, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6911      	ldr	r1, [r2, #16]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	000186a0 	.word	0x000186a0
 8002e94:	001e847f 	.word	0x001e847f
 8002e98:	003d08ff 	.word	0x003d08ff
 8002e9c:	431bde83 	.word	0x431bde83
 8002ea0:	10624dd3 	.word	0x10624dd3

08002ea4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	813b      	strh	r3, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ebe:	f7ff fbe1 	bl	8002684 <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	f040 80d9 	bne.w	8003084 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2319      	movs	r3, #25
 8002ed8:	2201      	movs	r2, #1
 8002eda:	496d      	ldr	r1, [pc, #436]	; (8003090 <HAL_I2C_Mem_Write+0x1ec>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fdef 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0cc      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2C_Mem_Write+0x56>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0c5      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d007      	beq.n	8002f20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2221      	movs	r2, #33	; 0x21
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a3a      	ldr	r2, [r7, #32]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a4d      	ldr	r2, [pc, #308]	; (8003094 <HAL_I2C_Mem_Write+0x1f0>)
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f62:	88f8      	ldrh	r0, [r7, #6]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	4603      	mov	r3, r0
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fc26 	bl	80037c4 <I2C_RequestMemoryWrite>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d052      	beq.n	8003024 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e081      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 feb4 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d107      	bne.n	8002faa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06b      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d11b      	bne.n	8003024 <HAL_I2C_Mem_Write+0x180>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d017      	beq.n	8003024 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1aa      	bne.n	8002f82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fea7 	bl	8003d84 <I2C_WaitOnBTFFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00d      	beq.n	8003058 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2b04      	cmp	r3, #4
 8003042:	d107      	bne.n	8003054 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e016      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	00100002 	.word	0x00100002
 8003094:	ffff0000 	.word	0xffff0000

08003098 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08c      	sub	sp, #48	; 0x30
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	817b      	strh	r3, [r7, #10]
 80030aa:	460b      	mov	r3, r1
 80030ac:	813b      	strh	r3, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b6:	f7ff fae5 	bl	8002684 <HAL_GetTick>
 80030ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	f040 8244 	bne.w	8003552 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2319      	movs	r3, #25
 80030d0:	2201      	movs	r2, #1
 80030d2:	4982      	ldr	r1, [pc, #520]	; (80032dc <HAL_I2C_Mem_Read+0x244>)
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fcf3 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
 80030e2:	e237      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Mem_Read+0x5a>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e230      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d007      	beq.n	8003118 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2222      	movs	r2, #34	; 0x22
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2240      	movs	r2, #64	; 0x40
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a62      	ldr	r2, [pc, #392]	; (80032e0 <HAL_I2C_Mem_Read+0x248>)
 8003158:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800315a:	88f8      	ldrh	r0, [r7, #6]
 800315c:	893a      	ldrh	r2, [r7, #8]
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fbc0 	bl	80038f0 <I2C_RequestMemoryRead>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1ec      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d113      	bne.n	80031aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e1c0      	b.n	800352c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d11e      	bne.n	80031f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031c2:	b672      	cpsid	i
}
 80031c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031ec:	b662      	cpsie	i
}
 80031ee:	e035      	b.n	800325c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d11e      	bne.n	8003236 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003208:	b672      	cpsid	i
}
 800320a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003230:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003232:	b662      	cpsie	i
}
 8003234:	e012      	b.n	800325c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003244:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800325c:	e166      	b.n	800352c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	2b03      	cmp	r3, #3
 8003264:	f200 811f 	bhi.w	80034a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b01      	cmp	r3, #1
 800326e:	d123      	bne.n	80032b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fdcd 	bl	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e167      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b6:	e139      	b.n	800352c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d152      	bne.n	8003366 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	2200      	movs	r2, #0
 80032c8:	4906      	ldr	r1, [pc, #24]	; (80032e4 <HAL_I2C_Mem_Read+0x24c>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fbf8 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e13c      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
 80032da:	bf00      	nop
 80032dc:	00100002 	.word	0x00100002
 80032e0:	ffff0000 	.word	0xffff0000
 80032e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032e8:	b672      	cpsid	i
}
 80032ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800332e:	b662      	cpsie	i
}
 8003330:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003364:	e0e2      	b.n	800352c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2200      	movs	r2, #0
 800336e:	497b      	ldr	r1, [pc, #492]	; (800355c <HAL_I2C_Mem_Read+0x4c4>)
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fba5 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0e9      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003390:	b672      	cpsid	i
}
 8003392:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033c6:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_I2C_Mem_Read+0x4c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	4a65      	ldr	r2, [pc, #404]	; (8003564 <HAL_I2C_Mem_Read+0x4cc>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0a1a      	lsrs	r2, r3, #8
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00da      	lsls	r2, r3, #3
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d118      	bne.n	800341e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800340e:	b662      	cpsie	i
}
 8003410:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e09a      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d1d9      	bne.n	80033e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800346e:	b662      	cpsie	i
}
 8003470:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a4:	e042      	b.n	800352c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fcb2 	bl	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e04c      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d118      	bne.n	800352c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	f47f ae94 	bne.w	800325e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3728      	adds	r7, #40	; 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00010004 	.word	0x00010004
 8003560:	20000014 	.word	0x20000014
 8003564:	14f8b589 	.word	0x14f8b589

08003568 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	460b      	mov	r3, r1
 8003576:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003578:	f7ff f884 	bl	8002684 <HAL_GetTick>
 800357c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b20      	cmp	r3, #32
 800358c:	f040 8111 	bne.w	80037b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	4988      	ldr	r1, [pc, #544]	; (80037bc <HAL_I2C_IsDeviceReady+0x254>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fa90 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
 80035a8:	e104      	b.n	80037b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_I2C_IsDeviceReady+0x50>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0fd      	b.n	80037b4 <HAL_I2C_IsDeviceReady+0x24c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d007      	beq.n	80035de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2224      	movs	r2, #36	; 0x24
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a70      	ldr	r2, [pc, #448]	; (80037c0 <HAL_I2C_IsDeviceReady+0x258>)
 8003600:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003610:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2200      	movs	r2, #0
 800361a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fa4e 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	d103      	bne.n	8003642 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0b6      	b.n	80037b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003646:	897b      	ldrh	r3, [r7, #10]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003654:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003656:	f7ff f815 	bl	8002684 <HAL_GetTick>
 800365a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800368a:	e025      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fe fffa 	bl	8002684 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <HAL_I2C_IsDeviceReady+0x13a>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	22a0      	movs	r2, #160	; 0xa0
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2ba0      	cmp	r3, #160	; 0xa0
 80036e2:	d005      	beq.n	80036f0 <HAL_I2C_IsDeviceReady+0x188>
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <HAL_I2C_IsDeviceReady+0x188>
 80036ea:	7dbb      	ldrb	r3, [r7, #22]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0cd      	beq.n	800368c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d129      	bne.n	800375a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003714:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2319      	movs	r3, #25
 8003732:	2201      	movs	r2, #1
 8003734:	4921      	ldr	r1, [pc, #132]	; (80037bc <HAL_I2C_IsDeviceReady+0x254>)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f9c2 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e036      	b.n	80037b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e02c      	b.n	80037b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003768:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003772:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2319      	movs	r3, #25
 800377a:	2201      	movs	r2, #1
 800377c:	490f      	ldr	r1, [pc, #60]	; (80037bc <HAL_I2C_IsDeviceReady+0x254>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f99e 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e012      	b.n	80037b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	3301      	adds	r3, #1
 8003792:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	f4ff af32 	bcc.w	8003602 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	00100002 	.word	0x00100002
 80037c0:	ffff0000 	.word	0xffff0000

080037c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	817b      	strh	r3, [r7, #10]
 80037d6:	460b      	mov	r3, r1
 80037d8:	813b      	strh	r3, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f960 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003814:	d103      	bne.n	800381e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e05f      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6a3a      	ldr	r2, [r7, #32]
 8003836:	492d      	ldr	r1, [pc, #180]	; (80038ec <I2C_RequestMemoryWrite+0x128>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f9bb 	bl	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e04c      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	6a39      	ldr	r1, [r7, #32]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa46 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b04      	cmp	r3, #4
 8003874:	d107      	bne.n	8003886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02b      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	611a      	str	r2, [r3, #16]
 800389a:	e021      	b.n	80038e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fa20 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d107      	bne.n	80038d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e005      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038d6:	893b      	ldrh	r3, [r7, #8]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	00010002 	.word	0x00010002

080038f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003918:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	2200      	movs	r2, #0
 8003932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8c2 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003950:	d103      	bne.n	800395a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0aa      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800396c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	4952      	ldr	r1, [pc, #328]	; (8003abc <I2C_RequestMemoryRead+0x1cc>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f91d 	bl	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e097      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f9a8 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e076      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039cc:	893b      	ldrh	r3, [r7, #8]
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	611a      	str	r2, [r3, #16]
 80039d6:	e021      	b.n	8003a1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	6a39      	ldr	r1, [r7, #32]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f982 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d107      	bne.n	8003a0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e050      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a12:	893b      	ldrh	r3, [r7, #8]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	6a39      	ldr	r1, [r7, #32]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f967 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00d      	beq.n	8003a48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d107      	bne.n	8003a44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e035      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f82b 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7e:	d103      	bne.n	8003a88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e013      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	6a3a      	ldr	r2, [r7, #32]
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <I2C_RequestMemoryRead+0x1cc>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f886 	bl	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	00010002 	.word	0x00010002

08003ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad0:	e048      	b.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d044      	beq.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fe fdd3 	bl	8002684 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d139      	bne.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	0c1b      	lsrs	r3, r3, #16
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10d      	bne.n	8003b16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	43da      	mvns	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4013      	ands	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	e00c      	b.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4013      	ands	r3, r2
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d116      	bne.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e023      	b.n	8003bac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10d      	bne.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	43da      	mvns	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	e00c      	b.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	43da      	mvns	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d093      	beq.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc2:	e071      	b.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd2:	d123      	bne.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0204 	orr.w	r2, r3, #4
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e067      	b.n	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d041      	beq.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7fe fd2e 	bl	8002684 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d136      	bne.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10c      	bne.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	e00b      	b.n	8003c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e021      	b.n	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10c      	bne.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e00b      	b.n	8003ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f47f af6d 	bne.w	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d00:	e034      	b.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f8e3 	bl	8003ece <I2C_IsAcknowledgeFailed>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e034      	b.n	8003d7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d028      	beq.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fe fcb3 	bl	8002684 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11d      	bne.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b80      	cmp	r3, #128	; 0x80
 8003d3c:	d016      	beq.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e007      	b.n	8003d7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d1c3      	bne.n	8003d02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d90:	e034      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f89b 	bl	8003ece <I2C_IsAcknowledgeFailed>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e034      	b.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d028      	beq.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe fc6b 	bl	8002684 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11d      	bne.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d016      	beq.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e007      	b.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d1c3      	bne.n	8003d92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e20:	e049      	b.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d119      	bne.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0210 	mvn.w	r2, #16
 8003e38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e030      	b.n	8003ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7fe fc0e 	bl	8002684 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d016      	beq.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e007      	b.n	8003ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d1ae      	bne.n	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee4:	d11b      	bne.n	8003f1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e272      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8087 	beq.w	800405a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f4c:	4b92      	ldr	r3, [pc, #584]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d00c      	beq.n	8003f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f58:	4b8f      	ldr	r3, [pc, #572]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d112      	bne.n	8003f8a <HAL_RCC_OscConfig+0x5e>
 8003f64:	4b8c      	ldr	r3, [pc, #560]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d10b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f72:	4b89      	ldr	r3, [pc, #548]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d06c      	beq.n	8004058 <HAL_RCC_OscConfig+0x12c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d168      	bne.n	8004058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e24c      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x76>
 8003f94:	4b80      	ldr	r3, [pc, #512]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a7f      	ldr	r2, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e02e      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x98>
 8003faa:	4b7b      	ldr	r3, [pc, #492]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7a      	ldr	r2, [pc, #488]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b78      	ldr	r3, [pc, #480]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a77      	ldr	r2, [pc, #476]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xbc>
 8003fce:	4b72      	ldr	r3, [pc, #456]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a71      	ldr	r2, [pc, #452]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fe8:	4b6b      	ldr	r3, [pc, #428]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6a      	ldr	r2, [pc, #424]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b68      	ldr	r3, [pc, #416]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a67      	ldr	r2, [pc, #412]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe fb3c 	bl	8002684 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe fb38 	bl	8002684 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e200      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xe4>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fb28 	bl	8002684 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fb24 	bl	8002684 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1ec      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x10c>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004066:	4b4c      	ldr	r3, [pc, #304]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004072:	4b49      	ldr	r3, [pc, #292]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x18c>
 800407e:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	4b43      	ldr	r3, [pc, #268]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x176>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1c0      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4939      	ldr	r1, [pc, #228]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	e03a      	b.n	800412e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fe fadd 	bl	8002684 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fe fad9 	bl	8002684 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1a1      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4927      	ldr	r1, [pc, #156]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	e015      	b.n	800412e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fe fabc 	bl	8002684 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004110:	f7fe fab8 	bl	8002684 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e180      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d03a      	beq.n	80041b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d019      	beq.n	8004176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004148:	f7fe fa9c 	bl	8002684 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004150:	f7fe fa98 	bl	8002684 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e160      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_RCC_OscConfig+0x26c>)
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800416e:	2001      	movs	r0, #1
 8004170:	f000 face 	bl	8004710 <RCC_Delay>
 8004174:	e01c      	b.n	80041b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fe fa82 	bl	8002684 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004182:	e00f      	b.n	80041a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fe fa7e 	bl	8002684 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d908      	bls.n	80041a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e146      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	42420000 	.word	0x42420000
 80041a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a4:	4b92      	ldr	r3, [pc, #584]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e9      	bne.n	8004184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80a6 	beq.w	800430a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b8b      	ldr	r3, [pc, #556]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4a87      	ldr	r2, [pc, #540]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	61d3      	str	r3, [r2, #28]
 80041da:	4b85      	ldr	r3, [pc, #532]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b82      	ldr	r3, [pc, #520]	; (80043f4 <HAL_RCC_OscConfig+0x4c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x4c8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7e      	ldr	r2, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x4c8>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fe fa3f 	bl	8002684 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fe fa3b 	bl	8002684 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	; 0x64
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e103      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <HAL_RCC_OscConfig+0x4c8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x312>
 8004230:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	4a6e      	ldr	r2, [pc, #440]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6213      	str	r3, [r2, #32]
 800423c:	e02d      	b.n	800429a <HAL_RCC_OscConfig+0x36e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x334>
 8004246:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4a69      	ldr	r2, [pc, #420]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6213      	str	r3, [r2, #32]
 8004252:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	4a66      	ldr	r2, [pc, #408]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	6213      	str	r3, [r2, #32]
 800425e:	e01c      	b.n	800429a <HAL_RCC_OscConfig+0x36e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d10c      	bne.n	8004282 <HAL_RCC_OscConfig+0x356>
 8004268:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4a60      	ldr	r2, [pc, #384]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6213      	str	r3, [r2, #32]
 8004274:	4b5e      	ldr	r3, [pc, #376]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	4a5d      	ldr	r2, [pc, #372]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6213      	str	r3, [r2, #32]
 8004280:	e00b      	b.n	800429a <HAL_RCC_OscConfig+0x36e>
 8004282:	4b5b      	ldr	r3, [pc, #364]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4a5a      	ldr	r2, [pc, #360]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6213      	str	r3, [r2, #32]
 800428e:	4b58      	ldr	r3, [pc, #352]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d015      	beq.n	80042ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a2:	f7fe f9ef 	bl	8002684 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fe f9eb 	bl	8002684 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e0b1      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	4b4b      	ldr	r3, [pc, #300]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ee      	beq.n	80042aa <HAL_RCC_OscConfig+0x37e>
 80042cc:	e014      	b.n	80042f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ce:	f7fe f9d9 	bl	8002684 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fe f9d5 	bl	8002684 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e09b      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ec:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ee      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d105      	bne.n	800430a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fe:	4b3c      	ldr	r3, [pc, #240]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4a3b      	ldr	r2, [pc, #236]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8087 	beq.w	8004422 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d061      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d146      	bne.n	80043b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <HAL_RCC_OscConfig+0x4cc>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432e:	f7fe f9a9 	bl	8002684 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004336:	f7fe f9a5 	bl	8002684 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e06d      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435c:	d108      	bne.n	8004370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4921      	ldr	r1, [pc, #132]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004370:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a19      	ldr	r1, [r3, #32]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	430b      	orrs	r3, r1
 8004382:	491b      	ldr	r1, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x4cc>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe f979 	bl	8002684 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004396:	f7fe f975 	bl	8002684 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e03d      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x46a>
 80043b4:	e035      	b.n	8004422 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCC_OscConfig+0x4cc>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe f962 	bl	8002684 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fe f95e 	bl	8002684 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e026      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x498>
 80043e2:	e01e      	b.n	8004422 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e019      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40007000 	.word	0x40007000
 80043f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_OscConfig+0x500>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	429a      	cmp	r2, r3
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d001      	beq.n	8004422 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0d0      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b6a      	ldr	r3, [pc, #424]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d910      	bls.n	8004474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b67      	ldr	r3, [pc, #412]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 0207 	bic.w	r2, r3, #7
 800445a:	4965      	ldr	r1, [pc, #404]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b63      	ldr	r3, [pc, #396]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0b8      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d020      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800448c:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a4:	4b53      	ldr	r3, [pc, #332]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a52      	ldr	r2, [pc, #328]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b0:	4b50      	ldr	r3, [pc, #320]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	494d      	ldr	r1, [pc, #308]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d040      	beq.n	8004550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d115      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07f      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ee:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e073      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fe:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06b      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450e:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f023 0203 	bic.w	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4936      	ldr	r1, [pc, #216]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004520:	f7fe f8b0 	bl	8002684 <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	e00a      	b.n	800453e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004528:	f7fe f8ac 	bl	8002684 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e053      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 020c 	and.w	r2, r3, #12
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	429a      	cmp	r2, r3
 800454e:	d1eb      	bne.n	8004528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d210      	bcs.n	8004580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 0207 	bic.w	r2, r3, #7
 8004566:	4922      	ldr	r1, [pc, #136]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e032      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800458c:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4916      	ldr	r1, [pc, #88]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	490e      	ldr	r1, [pc, #56]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045be:	f000 f821 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045c2:	4602      	mov	r2, r0
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	490a      	ldr	r1, [pc, #40]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80045d0:	5ccb      	ldrb	r3, [r1, r3]
 80045d2:	fa22 f303 	lsr.w	r3, r2, r3
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1cc>)
 80045d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_ClockConfig+0x1d0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe f80e 	bl	8002600 <HAL_InitTick>

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40022000 	.word	0x40022000
 80045f4:	40021000 	.word	0x40021000
 80045f8:	0800a804 	.word	0x0800a804
 80045fc:	20000014 	.word	0x20000014
 8004600:	20000018 	.word	0x20000018

08004604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_RCC_GetSysClockFreq+0x94>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b04      	cmp	r3, #4
 800462c:	d002      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x30>
 800462e:	2b08      	cmp	r3, #8
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x36>
 8004632:	e027      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_RCC_GetSysClockFreq+0x98>)
 8004636:	613b      	str	r3, [r7, #16]
      break;
 8004638:	e027      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	0c9b      	lsrs	r3, r3, #18
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
 8004646:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <HAL_RCC_GetSysClockFreq+0x94>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	0c5b      	lsrs	r3, r3, #17
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800465e:	5cd3      	ldrb	r3, [r2, r3]
 8004660:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a0d      	ldr	r2, [pc, #52]	; (800469c <HAL_RCC_GetSysClockFreq+0x98>)
 8004666:	fb03 f202 	mul.w	r2, r3, r2
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e004      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004678:	fb02 f303 	mul.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	613b      	str	r3, [r7, #16]
      break;
 8004682:	e002      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_GetSysClockFreq+0x98>)
 8004686:	613b      	str	r3, [r7, #16]
      break;
 8004688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468a:	693b      	ldr	r3, [r7, #16]
}
 800468c:	4618      	mov	r0, r3
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	007a1200 	.word	0x007a1200
 80046a0:	0800a81c 	.word	0x0800a81c
 80046a4:	0800a82c 	.word	0x0800a82c
 80046a8:	003d0900 	.word	0x003d0900

080046ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <HAL_RCC_GetHCLKFreq+0x10>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	20000014 	.word	0x20000014

080046c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046c4:	f7ff fff2 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	0800a814 	.word	0x0800a814

080046e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046ec:	f7ff ffde 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	0adb      	lsrs	r3, r3, #11
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	; (800470c <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	0800a814 	.word	0x0800a814

08004710 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <RCC_Delay+0x34>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <RCC_Delay+0x38>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	0a5b      	lsrs	r3, r3, #9
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800472c:	bf00      	nop
  }
  while (Delay --);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1e5a      	subs	r2, r3, #1
 8004732:	60fa      	str	r2, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f9      	bne.n	800472c <RCC_Delay+0x1c>
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	20000014 	.word	0x20000014
 8004748:	10624dd3 	.word	0x10624dd3

0800474c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e041      	b.n	80047e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd fcf8 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 fc28 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e03a      	b.n	800487a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <HAL_TIM_Base_Start_IT+0x98>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x58>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482e:	d009      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x58>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a14      	ldr	r2, [pc, #80]	; (8004888 <HAL_TIM_Base_Start_IT+0x9c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x58>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a13      	ldr	r2, [pc, #76]	; (800488c <HAL_TIM_Base_Start_IT+0xa0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d010      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	e007      	b.n	8004878 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800

08004890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e041      	b.n	8004926 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd fc9a 	bl	80021f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 fb86 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <HAL_TIM_PWM_Start+0x24>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e022      	b.n	800499a <HAL_TIM_PWM_Start+0x6a>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b04      	cmp	r3, #4
 8004958:	d109      	bne.n	800496e <HAL_TIM_PWM_Start+0x3e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e015      	b.n	800499a <HAL_TIM_PWM_Start+0x6a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d109      	bne.n	8004988 <HAL_TIM_PWM_Start+0x58>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e008      	b.n	800499a <HAL_TIM_PWM_Start+0x6a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e05e      	b.n	8004a60 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x82>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	e013      	b.n	80049da <HAL_TIM_PWM_Start+0xaa>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x92>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c0:	e00b      	b.n	80049da <HAL_TIM_PWM_Start+0xaa>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Start+0xa2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d0:	e003      	b.n	80049da <HAL_TIM_PWM_Start+0xaa>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2201      	movs	r2, #1
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fd7c 	bl	80054e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <HAL_TIM_PWM_Start+0x138>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d107      	bne.n	8004a02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_TIM_PWM_Start+0x138>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_TIM_PWM_Start+0xfa>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a14:	d009      	beq.n	8004a2a <HAL_TIM_PWM_Start+0xfa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <HAL_TIM_PWM_Start+0x13c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_TIM_PWM_Start+0xfa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <HAL_TIM_PWM_Start+0x140>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d111      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d010      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	e007      	b.n	8004a5e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800

08004a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d122      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0202 	mvn.w	r2, #2
 8004aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa76 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa69 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa78 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0204 	mvn.w	r2, #4
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa4c 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa3f 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa4e 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0208 	mvn.w	r2, #8
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa22 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa15 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa24 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0210 	mvn.w	r2, #16
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9f8 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f9eb 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f9fa 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0201 	mvn.w	r2, #1
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd f95e 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fce9 	bl	80055f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f9be 	bl	8004fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0220 	mvn.w	r2, #32
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fcb4 	bl	80055e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0ae      	b.n	8004e00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	f200 809f 	bhi.w	8004df0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004df1 	.word	0x08004df1
 8004cc0:	08004df1 	.word	0x08004df1
 8004cc4:	08004df1 	.word	0x08004df1
 8004cc8:	08004d2d 	.word	0x08004d2d
 8004ccc:	08004df1 	.word	0x08004df1
 8004cd0:	08004df1 	.word	0x08004df1
 8004cd4:	08004df1 	.word	0x08004df1
 8004cd8:	08004d6f 	.word	0x08004d6f
 8004cdc:	08004df1 	.word	0x08004df1
 8004ce0:	08004df1 	.word	0x08004df1
 8004ce4:	08004df1 	.word	0x08004df1
 8004ce8:	08004daf 	.word	0x08004daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f9d6 	bl	80050a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	619a      	str	r2, [r3, #24]
      break;
 8004d2a:	e064      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa1c 	bl	8005170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]
      break;
 8004d6c:	e043      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fa65 	bl	8005244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0208 	orr.w	r2, r2, #8
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0204 	bic.w	r2, r2, #4
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
      break;
 8004dac:	e023      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 faaf 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	021a      	lsls	r2, r3, #8
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	61da      	str	r2, [r3, #28]
      break;
 8004dee:	e002      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
      break;
 8004df4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIM_ConfigClockSource+0x1c>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0b4      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x186>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5c:	d03e      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0xd4>
 8004e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e62:	f200 8087 	bhi.w	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6a:	f000 8086 	beq.w	8004f7a <HAL_TIM_ConfigClockSource+0x172>
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	d87f      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b70      	cmp	r3, #112	; 0x70
 8004e76:	d01a      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0xa6>
 8004e78:	2b70      	cmp	r3, #112	; 0x70
 8004e7a:	d87b      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b60      	cmp	r3, #96	; 0x60
 8004e7e:	d050      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x11a>
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d877      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b50      	cmp	r3, #80	; 0x50
 8004e86:	d03c      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0xfa>
 8004e88:	2b50      	cmp	r3, #80	; 0x50
 8004e8a:	d873      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d058      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x13a>
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d86f      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b30      	cmp	r3, #48	; 0x30
 8004e96:	d064      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004e98:	2b30      	cmp	r3, #48	; 0x30
 8004e9a:	d86b      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d060      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d867      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05c      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d05a      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	e062      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ebe:	f000 faf0 	bl	80054a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	609a      	str	r2, [r3, #8]
      break;
 8004eda:	e04f      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eec:	f000 fad9 	bl	80054a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004efe:	609a      	str	r2, [r3, #8]
      break;
 8004f00:	e03c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f000 fa50 	bl	80053b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2150      	movs	r1, #80	; 0x50
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 faa7 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f20:	e02c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f000 fa6e 	bl	8005410 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2160      	movs	r1, #96	; 0x60
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fa97 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f40:	e01c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f000 fa30 	bl	80053b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fa87 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f60:	e00c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 fa7e 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f72:	e003      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
      break;
 8004f78:	e000      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr
	...

08004fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a29      	ldr	r2, [pc, #164]	; (8005098 <TIM_Base_SetConfig+0xb8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <TIM_Base_SetConfig+0x30>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d007      	beq.n	8005010 <TIM_Base_SetConfig+0x30>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a26      	ldr	r2, [pc, #152]	; (800509c <TIM_Base_SetConfig+0xbc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0x30>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <TIM_Base_SetConfig+0xc0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <TIM_Base_SetConfig+0xb8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00b      	beq.n	8005042 <TIM_Base_SetConfig+0x62>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d007      	beq.n	8005042 <TIM_Base_SetConfig+0x62>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <TIM_Base_SetConfig+0xbc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_Base_SetConfig+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <TIM_Base_SetConfig+0xc0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d108      	bne.n	8005054 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <TIM_Base_SetConfig+0xb8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d103      	bne.n	8005088 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	615a      	str	r2, [r3, #20]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800

080050a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 0201 	bic.w	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1c      	ldr	r2, [pc, #112]	; (800516c <TIM_OC1_SetConfig+0xc8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10c      	bne.n	800511a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0308 	bic.w	r3, r3, #8
 8005106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a13      	ldr	r2, [pc, #76]	; (800516c <TIM_OC1_SetConfig+0xc8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d111      	bne.n	8005146 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	621a      	str	r2, [r3, #32]
}
 8005160:	bf00      	nop
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40012c00 	.word	0x40012c00

08005170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f023 0210 	bic.w	r2, r3, #16
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0320 	bic.w	r3, r3, #32
 80051ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <TIM_OC2_SetConfig+0xd0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10d      	bne.n	80051ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a14      	ldr	r2, [pc, #80]	; (8005240 <TIM_OC2_SetConfig+0xd0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d113      	bne.n	800521c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00

08005244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <TIM_OC3_SetConfig+0xd0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10d      	bne.n	80052be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a14      	ldr	r2, [pc, #80]	; (8005314 <TIM_OC3_SetConfig+0xd0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d113      	bne.n	80052ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <TIM_OC4_SetConfig+0x98>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d109      	bne.n	800538c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800537e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	40012c00 	.word	0x40012c00

080053b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 030a 	bic.w	r3, r3, #10
 80053f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0210 	bic.w	r2, r3, #16
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800543a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	031b      	lsls	r3, r3, #12
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800544c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	f043 0307 	orr.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b087      	sub	sp, #28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	021a      	lsls	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	609a      	str	r2, [r3, #8]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2201      	movs	r2, #1
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e046      	b.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d009      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a12      	ldr	r2, [pc, #72]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a10      	ldr	r2, [pc, #64]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10c      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800

080055e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr

08005608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e042      	b.n	80056a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc fe48 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2224      	movs	r2, #36	; 0x24
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f91d 	bl	800588c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d16d      	bne.n	80057a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_UART_Transmit+0x2c>
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e066      	b.n	80057a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2221      	movs	r2, #33	; 0x21
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056e6:	f7fc ffcd 	bl	8002684 <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	88fa      	ldrh	r2, [r7, #6]
 80056f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	d108      	bne.n	8005714 <HAL_UART_Transmit+0x6c>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	e003      	b.n	800571c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800571c:	e02a      	b.n	8005774 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2200      	movs	r2, #0
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f840 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e036      	b.n	80057a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800574c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	3302      	adds	r3, #2
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e007      	b.n	8005766 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	3301      	adds	r3, #1
 8005764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1cf      	bne.n	800571e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	2140      	movs	r1, #64	; 0x40
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f810 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e006      	b.n	80057a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b090      	sub	sp, #64	; 0x40
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057be:	e050      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d04c      	beq.n	8005862 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <UART_WaitOnFlagUntilTimeout+0x30>
 80057ce:	f7fc ff59 	bl	8002684 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057da:	429a      	cmp	r2, r3
 80057dc:	d241      	bcs.n	8005862 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005800:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e5      	bne.n	80057de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	613b      	str	r3, [r7, #16]
   return(result);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005832:	623a      	str	r2, [r7, #32]
 8005834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	69f9      	ldr	r1, [r7, #28]
 8005838:	6a3a      	ldr	r2, [r7, #32]
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e00f      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	429a      	cmp	r2, r3
 800587e:	d09f      	beq.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3740      	adds	r7, #64	; 0x40
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058c6:	f023 030c 	bic.w	r3, r3, #12
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	430b      	orrs	r3, r1
 80058d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <UART_SetConfig+0x114>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d103      	bne.n	80058fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fe fef8 	bl	80046e8 <HAL_RCC_GetPCLK2Freq>
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	e002      	b.n	8005902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058fc:	f7fe fee0 	bl	80046c0 <HAL_RCC_GetPCLK1Freq>
 8005900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009a      	lsls	r2, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <UART_SetConfig+0x118>)
 800591a:	fba2 2303 	umull	r2, r3, r2, r3
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	0119      	lsls	r1, r3, #4
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009a      	lsls	r2, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	fbb2 f2f3 	udiv	r2, r2, r3
 8005938:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <UART_SetConfig+0x118>)
 800593a:	fba3 0302 	umull	r0, r3, r3, r2
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	2064      	movs	r0, #100	; 0x64
 8005942:	fb00 f303 	mul.w	r3, r0, r3
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	3332      	adds	r3, #50	; 0x32
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <UART_SetConfig+0x118>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005958:	4419      	add	r1, r3
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009a      	lsls	r2, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <UART_SetConfig+0x118>)
 8005972:	fba3 0302 	umull	r0, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2064      	movs	r0, #100	; 0x64
 800597a:	fb00 f303 	mul.w	r3, r0, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	3332      	adds	r3, #50	; 0x32
 8005984:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <UART_SetConfig+0x118>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	440a      	add	r2, r1
 8005996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40013800 	.word	0x40013800
 80059a4:	51eb851f 	.word	0x51eb851f

080059a8 <__cvt>:
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ae:	461f      	mov	r7, r3
 80059b0:	bfbb      	ittet	lt
 80059b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80059b6:	461f      	movlt	r7, r3
 80059b8:	2300      	movge	r3, #0
 80059ba:	232d      	movlt	r3, #45	; 0x2d
 80059bc:	b088      	sub	sp, #32
 80059be:	4614      	mov	r4, r2
 80059c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80059c4:	7013      	strb	r3, [r2, #0]
 80059c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80059cc:	f023 0820 	bic.w	r8, r3, #32
 80059d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059d4:	d005      	beq.n	80059e2 <__cvt+0x3a>
 80059d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059da:	d100      	bne.n	80059de <__cvt+0x36>
 80059dc:	3501      	adds	r5, #1
 80059de:	2302      	movs	r3, #2
 80059e0:	e000      	b.n	80059e4 <__cvt+0x3c>
 80059e2:	2303      	movs	r3, #3
 80059e4:	aa07      	add	r2, sp, #28
 80059e6:	9204      	str	r2, [sp, #16]
 80059e8:	aa06      	add	r2, sp, #24
 80059ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80059ee:	e9cd 3500 	strd	r3, r5, [sp]
 80059f2:	4622      	mov	r2, r4
 80059f4:	463b      	mov	r3, r7
 80059f6:	f001 f887 	bl	8006b08 <_dtoa_r>
 80059fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059fe:	4606      	mov	r6, r0
 8005a00:	d102      	bne.n	8005a08 <__cvt+0x60>
 8005a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a04:	07db      	lsls	r3, r3, #31
 8005a06:	d522      	bpl.n	8005a4e <__cvt+0xa6>
 8005a08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a0c:	eb06 0905 	add.w	r9, r6, r5
 8005a10:	d110      	bne.n	8005a34 <__cvt+0x8c>
 8005a12:	7833      	ldrb	r3, [r6, #0]
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d10a      	bne.n	8005a2e <__cvt+0x86>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	4639      	mov	r1, r7
 8005a20:	f7fa ffc2 	bl	80009a8 <__aeabi_dcmpeq>
 8005a24:	b918      	cbnz	r0, 8005a2e <__cvt+0x86>
 8005a26:	f1c5 0501 	rsb	r5, r5, #1
 8005a2a:	f8ca 5000 	str.w	r5, [sl]
 8005a2e:	f8da 3000 	ldr.w	r3, [sl]
 8005a32:	4499      	add	r9, r3
 8005a34:	2200      	movs	r2, #0
 8005a36:	2300      	movs	r3, #0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	f7fa ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8005a40:	b108      	cbz	r0, 8005a46 <__cvt+0x9e>
 8005a42:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a46:	2230      	movs	r2, #48	; 0x30
 8005a48:	9b07      	ldr	r3, [sp, #28]
 8005a4a:	454b      	cmp	r3, r9
 8005a4c:	d307      	bcc.n	8005a5e <__cvt+0xb6>
 8005a4e:	4630      	mov	r0, r6
 8005a50:	9b07      	ldr	r3, [sp, #28]
 8005a52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a54:	1b9b      	subs	r3, r3, r6
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	b008      	add	sp, #32
 8005a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5e:	1c59      	adds	r1, r3, #1
 8005a60:	9107      	str	r1, [sp, #28]
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e7f0      	b.n	8005a48 <__cvt+0xa0>

08005a66 <__exponent>:
 8005a66:	4603      	mov	r3, r0
 8005a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a6a:	2900      	cmp	r1, #0
 8005a6c:	f803 2b02 	strb.w	r2, [r3], #2
 8005a70:	bfb6      	itet	lt
 8005a72:	222d      	movlt	r2, #45	; 0x2d
 8005a74:	222b      	movge	r2, #43	; 0x2b
 8005a76:	4249      	neglt	r1, r1
 8005a78:	2909      	cmp	r1, #9
 8005a7a:	7042      	strb	r2, [r0, #1]
 8005a7c:	dd2a      	ble.n	8005ad4 <__exponent+0x6e>
 8005a7e:	f10d 0207 	add.w	r2, sp, #7
 8005a82:	4617      	mov	r7, r2
 8005a84:	260a      	movs	r6, #10
 8005a86:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a8a:	4694      	mov	ip, r2
 8005a8c:	fb06 1415 	mls	r4, r6, r5, r1
 8005a90:	3430      	adds	r4, #48	; 0x30
 8005a92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005a96:	460c      	mov	r4, r1
 8005a98:	2c63      	cmp	r4, #99	; 0x63
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005aa0:	dcf1      	bgt.n	8005a86 <__exponent+0x20>
 8005aa2:	3130      	adds	r1, #48	; 0x30
 8005aa4:	f1ac 0402 	sub.w	r4, ip, #2
 8005aa8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005aac:	4622      	mov	r2, r4
 8005aae:	1c41      	adds	r1, r0, #1
 8005ab0:	42ba      	cmp	r2, r7
 8005ab2:	d30a      	bcc.n	8005aca <__exponent+0x64>
 8005ab4:	f10d 0209 	add.w	r2, sp, #9
 8005ab8:	eba2 020c 	sub.w	r2, r2, ip
 8005abc:	42bc      	cmp	r4, r7
 8005abe:	bf88      	it	hi
 8005ac0:	2200      	movhi	r2, #0
 8005ac2:	4413      	add	r3, r2
 8005ac4:	1a18      	subs	r0, r3, r0
 8005ac6:	b003      	add	sp, #12
 8005ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005ace:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005ad2:	e7ed      	b.n	8005ab0 <__exponent+0x4a>
 8005ad4:	2330      	movs	r3, #48	; 0x30
 8005ad6:	3130      	adds	r1, #48	; 0x30
 8005ad8:	7083      	strb	r3, [r0, #2]
 8005ada:	70c1      	strb	r1, [r0, #3]
 8005adc:	1d03      	adds	r3, r0, #4
 8005ade:	e7f1      	b.n	8005ac4 <__exponent+0x5e>

08005ae0 <_printf_float>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	b091      	sub	sp, #68	; 0x44
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005aec:	4616      	mov	r6, r2
 8005aee:	461f      	mov	r7, r3
 8005af0:	4605      	mov	r5, r0
 8005af2:	f000 fef3 	bl	80068dc <_localeconv_r>
 8005af6:	6803      	ldr	r3, [r0, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	9309      	str	r3, [sp, #36]	; 0x24
 8005afc:	f7fa fb28 	bl	8000150 <strlen>
 8005b00:	2300      	movs	r3, #0
 8005b02:	930e      	str	r3, [sp, #56]	; 0x38
 8005b04:	f8d8 3000 	ldr.w	r3, [r8]
 8005b08:	900a      	str	r0, [sp, #40]	; 0x28
 8005b0a:	3307      	adds	r3, #7
 8005b0c:	f023 0307 	bic.w	r3, r3, #7
 8005b10:	f103 0208 	add.w	r2, r3, #8
 8005b14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005b18:	f8d4 b000 	ldr.w	fp, [r4]
 8005b1c:	f8c8 2000 	str.w	r2, [r8]
 8005b20:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005b24:	4652      	mov	r2, sl
 8005b26:	4643      	mov	r3, r8
 8005b28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b2c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	4650      	mov	r0, sl
 8005b38:	4b9c      	ldr	r3, [pc, #624]	; (8005dac <_printf_float+0x2cc>)
 8005b3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b3c:	f7fa ff66 	bl	8000a0c <__aeabi_dcmpun>
 8005b40:	bb70      	cbnz	r0, 8005ba0 <_printf_float+0xc0>
 8005b42:	f04f 32ff 	mov.w	r2, #4294967295
 8005b46:	4650      	mov	r0, sl
 8005b48:	4b98      	ldr	r3, [pc, #608]	; (8005dac <_printf_float+0x2cc>)
 8005b4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b4c:	f7fa ff40 	bl	80009d0 <__aeabi_dcmple>
 8005b50:	bb30      	cbnz	r0, 8005ba0 <_printf_float+0xc0>
 8005b52:	2200      	movs	r2, #0
 8005b54:	2300      	movs	r3, #0
 8005b56:	4650      	mov	r0, sl
 8005b58:	4641      	mov	r1, r8
 8005b5a:	f7fa ff2f 	bl	80009bc <__aeabi_dcmplt>
 8005b5e:	b110      	cbz	r0, 8005b66 <_printf_float+0x86>
 8005b60:	232d      	movs	r3, #45	; 0x2d
 8005b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b66:	4a92      	ldr	r2, [pc, #584]	; (8005db0 <_printf_float+0x2d0>)
 8005b68:	4b92      	ldr	r3, [pc, #584]	; (8005db4 <_printf_float+0x2d4>)
 8005b6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005b6e:	bf94      	ite	ls
 8005b70:	4690      	movls	r8, r2
 8005b72:	4698      	movhi	r8, r3
 8005b74:	2303      	movs	r3, #3
 8005b76:	f04f 0a00 	mov.w	sl, #0
 8005b7a:	6123      	str	r3, [r4, #16]
 8005b7c:	f02b 0304 	bic.w	r3, fp, #4
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	4633      	mov	r3, r6
 8005b84:	4621      	mov	r1, r4
 8005b86:	4628      	mov	r0, r5
 8005b88:	9700      	str	r7, [sp, #0]
 8005b8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005b8c:	f000 f9d6 	bl	8005f3c <_printf_common>
 8005b90:	3001      	adds	r0, #1
 8005b92:	f040 8090 	bne.w	8005cb6 <_printf_float+0x1d6>
 8005b96:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9a:	b011      	add	sp, #68	; 0x44
 8005b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba0:	4652      	mov	r2, sl
 8005ba2:	4643      	mov	r3, r8
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	f7fa ff30 	bl	8000a0c <__aeabi_dcmpun>
 8005bac:	b148      	cbz	r0, 8005bc2 <_printf_float+0xe2>
 8005bae:	f1b8 0f00 	cmp.w	r8, #0
 8005bb2:	bfb8      	it	lt
 8005bb4:	232d      	movlt	r3, #45	; 0x2d
 8005bb6:	4a80      	ldr	r2, [pc, #512]	; (8005db8 <_printf_float+0x2d8>)
 8005bb8:	bfb8      	it	lt
 8005bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bbe:	4b7f      	ldr	r3, [pc, #508]	; (8005dbc <_printf_float+0x2dc>)
 8005bc0:	e7d3      	b.n	8005b6a <_printf_float+0x8a>
 8005bc2:	6863      	ldr	r3, [r4, #4]
 8005bc4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	d142      	bne.n	8005c52 <_printf_float+0x172>
 8005bcc:	2306      	movs	r3, #6
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	9206      	str	r2, [sp, #24]
 8005bd4:	aa0e      	add	r2, sp, #56	; 0x38
 8005bd6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005bda:	aa0d      	add	r2, sp, #52	; 0x34
 8005bdc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005be0:	9203      	str	r2, [sp, #12]
 8005be2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005be6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	4652      	mov	r2, sl
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	4643      	mov	r3, r8
 8005bf6:	910b      	str	r1, [sp, #44]	; 0x2c
 8005bf8:	f7ff fed6 	bl	80059a8 <__cvt>
 8005bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bfe:	4680      	mov	r8, r0
 8005c00:	2947      	cmp	r1, #71	; 0x47
 8005c02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c04:	d108      	bne.n	8005c18 <_printf_float+0x138>
 8005c06:	1cc8      	adds	r0, r1, #3
 8005c08:	db02      	blt.n	8005c10 <_printf_float+0x130>
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	dd40      	ble.n	8005c92 <_printf_float+0x1b2>
 8005c10:	f1a9 0902 	sub.w	r9, r9, #2
 8005c14:	fa5f f989 	uxtb.w	r9, r9
 8005c18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c1c:	d81f      	bhi.n	8005c5e <_printf_float+0x17e>
 8005c1e:	464a      	mov	r2, r9
 8005c20:	3901      	subs	r1, #1
 8005c22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c26:	910d      	str	r1, [sp, #52]	; 0x34
 8005c28:	f7ff ff1d 	bl	8005a66 <__exponent>
 8005c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c2e:	4682      	mov	sl, r0
 8005c30:	1813      	adds	r3, r2, r0
 8005c32:	2a01      	cmp	r2, #1
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	dc02      	bgt.n	8005c3e <_printf_float+0x15e>
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	07d2      	lsls	r2, r2, #31
 8005c3c:	d501      	bpl.n	8005c42 <_printf_float+0x162>
 8005c3e:	3301      	adds	r3, #1
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d09b      	beq.n	8005b82 <_printf_float+0xa2>
 8005c4a:	232d      	movs	r3, #45	; 0x2d
 8005c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c50:	e797      	b.n	8005b82 <_printf_float+0xa2>
 8005c52:	2947      	cmp	r1, #71	; 0x47
 8005c54:	d1bc      	bne.n	8005bd0 <_printf_float+0xf0>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1ba      	bne.n	8005bd0 <_printf_float+0xf0>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e7b7      	b.n	8005bce <_printf_float+0xee>
 8005c5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005c62:	d118      	bne.n	8005c96 <_printf_float+0x1b6>
 8005c64:	2900      	cmp	r1, #0
 8005c66:	6863      	ldr	r3, [r4, #4]
 8005c68:	dd0b      	ble.n	8005c82 <_printf_float+0x1a2>
 8005c6a:	6121      	str	r1, [r4, #16]
 8005c6c:	b913      	cbnz	r3, 8005c74 <_printf_float+0x194>
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	07d0      	lsls	r0, r2, #31
 8005c72:	d502      	bpl.n	8005c7a <_printf_float+0x19a>
 8005c74:	3301      	adds	r3, #1
 8005c76:	440b      	add	r3, r1
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	f04f 0a00 	mov.w	sl, #0
 8005c7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c80:	e7df      	b.n	8005c42 <_printf_float+0x162>
 8005c82:	b913      	cbnz	r3, 8005c8a <_printf_float+0x1aa>
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	07d2      	lsls	r2, r2, #31
 8005c88:	d501      	bpl.n	8005c8e <_printf_float+0x1ae>
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	e7f4      	b.n	8005c78 <_printf_float+0x198>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e7f2      	b.n	8005c78 <_printf_float+0x198>
 8005c92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	db05      	blt.n	8005ca8 <_printf_float+0x1c8>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	6121      	str	r1, [r4, #16]
 8005ca0:	07d8      	lsls	r0, r3, #31
 8005ca2:	d5ea      	bpl.n	8005c7a <_printf_float+0x19a>
 8005ca4:	1c4b      	adds	r3, r1, #1
 8005ca6:	e7e7      	b.n	8005c78 <_printf_float+0x198>
 8005ca8:	2900      	cmp	r1, #0
 8005caa:	bfcc      	ite	gt
 8005cac:	2201      	movgt	r2, #1
 8005cae:	f1c1 0202 	rsble	r2, r1, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	e7e0      	b.n	8005c78 <_printf_float+0x198>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	055a      	lsls	r2, r3, #21
 8005cba:	d407      	bmi.n	8005ccc <_printf_float+0x1ec>
 8005cbc:	6923      	ldr	r3, [r4, #16]
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d12b      	bne.n	8005d22 <_printf_float+0x242>
 8005cca:	e764      	b.n	8005b96 <_printf_float+0xb6>
 8005ccc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cd0:	f240 80dd 	bls.w	8005e8e <_printf_float+0x3ae>
 8005cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f7fa fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d033      	beq.n	8005d4c <_printf_float+0x26c>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	4a35      	ldr	r2, [pc, #212]	; (8005dc0 <_printf_float+0x2e0>)
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f af51 	beq.w	8005b96 <_printf_float+0xb6>
 8005cf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	db02      	blt.n	8005d02 <_printf_float+0x222>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	07d8      	lsls	r0, r3, #31
 8005d00:	d50f      	bpl.n	8005d22 <_printf_float+0x242>
 8005d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f43f af42 	beq.w	8005b96 <_printf_float+0xb6>
 8005d12:	f04f 0800 	mov.w	r8, #0
 8005d16:	f104 091a 	add.w	r9, r4, #26
 8005d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	4543      	cmp	r3, r8
 8005d20:	dc09      	bgt.n	8005d36 <_printf_float+0x256>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	079b      	lsls	r3, r3, #30
 8005d26:	f100 8104 	bmi.w	8005f32 <_printf_float+0x452>
 8005d2a:	68e0      	ldr	r0, [r4, #12]
 8005d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	bfb8      	it	lt
 8005d32:	4618      	movlt	r0, r3
 8005d34:	e731      	b.n	8005b9a <_printf_float+0xba>
 8005d36:	2301      	movs	r3, #1
 8005d38:	464a      	mov	r2, r9
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f af28 	beq.w	8005b96 <_printf_float+0xb6>
 8005d46:	f108 0801 	add.w	r8, r8, #1
 8005d4a:	e7e6      	b.n	8005d1a <_printf_float+0x23a>
 8005d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dc38      	bgt.n	8005dc4 <_printf_float+0x2e4>
 8005d52:	2301      	movs	r3, #1
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <_printf_float+0x2e0>)
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f43f af1a 	beq.w	8005b96 <_printf_float+0xb6>
 8005d62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d102      	bne.n	8005d70 <_printf_float+0x290>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	07d9      	lsls	r1, r3, #31
 8005d6e:	d5d8      	bpl.n	8005d22 <_printf_float+0x242>
 8005d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f af0b 	beq.w	8005b96 <_printf_float+0xb6>
 8005d80:	f04f 0900 	mov.w	r9, #0
 8005d84:	f104 0a1a 	add.w	sl, r4, #26
 8005d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d8a:	425b      	negs	r3, r3
 8005d8c:	454b      	cmp	r3, r9
 8005d8e:	dc01      	bgt.n	8005d94 <_printf_float+0x2b4>
 8005d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d92:	e794      	b.n	8005cbe <_printf_float+0x1de>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4652      	mov	r2, sl
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f43f aef9 	beq.w	8005b96 <_printf_float+0xb6>
 8005da4:	f109 0901 	add.w	r9, r9, #1
 8005da8:	e7ee      	b.n	8005d88 <_printf_float+0x2a8>
 8005daa:	bf00      	nop
 8005dac:	7fefffff 	.word	0x7fefffff
 8005db0:	0800a82e 	.word	0x0800a82e
 8005db4:	0800a832 	.word	0x0800a832
 8005db8:	0800a836 	.word	0x0800a836
 8005dbc:	0800a83a 	.word	0x0800a83a
 8005dc0:	0800a83e 	.word	0x0800a83e
 8005dc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	bfa8      	it	ge
 8005dcc:	461a      	movge	r2, r3
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	dc37      	bgt.n	8005e44 <_printf_float+0x364>
 8005dd4:	f04f 0b00 	mov.w	fp, #0
 8005dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ddc:	f104 021a 	add.w	r2, r4, #26
 8005de0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005de4:	ebaa 0309 	sub.w	r3, sl, r9
 8005de8:	455b      	cmp	r3, fp
 8005dea:	dc33      	bgt.n	8005e54 <_printf_float+0x374>
 8005dec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005df0:	429a      	cmp	r2, r3
 8005df2:	db3b      	blt.n	8005e6c <_printf_float+0x38c>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07da      	lsls	r2, r3, #31
 8005df8:	d438      	bmi.n	8005e6c <_printf_float+0x38c>
 8005dfa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005dfe:	eba2 0903 	sub.w	r9, r2, r3
 8005e02:	eba2 020a 	sub.w	r2, r2, sl
 8005e06:	4591      	cmp	r9, r2
 8005e08:	bfa8      	it	ge
 8005e0a:	4691      	movge	r9, r2
 8005e0c:	f1b9 0f00 	cmp.w	r9, #0
 8005e10:	dc34      	bgt.n	8005e7c <_printf_float+0x39c>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e1a:	f104 0a1a 	add.w	sl, r4, #26
 8005e1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	eba3 0309 	sub.w	r3, r3, r9
 8005e28:	4543      	cmp	r3, r8
 8005e2a:	f77f af7a 	ble.w	8005d22 <_printf_float+0x242>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4652      	mov	r2, sl
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f43f aeac 	beq.w	8005b96 <_printf_float+0xb6>
 8005e3e:	f108 0801 	add.w	r8, r8, #1
 8005e42:	e7ec      	b.n	8005e1e <_printf_float+0x33e>
 8005e44:	4613      	mov	r3, r2
 8005e46:	4631      	mov	r1, r6
 8005e48:	4642      	mov	r2, r8
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d1c0      	bne.n	8005dd4 <_printf_float+0x2f4>
 8005e52:	e6a0      	b.n	8005b96 <_printf_float+0xb6>
 8005e54:	2301      	movs	r3, #1
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f ae99 	beq.w	8005b96 <_printf_float+0xb6>
 8005e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e66:	f10b 0b01 	add.w	fp, fp, #1
 8005e6a:	e7b9      	b.n	8005de0 <_printf_float+0x300>
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	d1bf      	bne.n	8005dfa <_printf_float+0x31a>
 8005e7a:	e68c      	b.n	8005b96 <_printf_float+0xb6>
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	eb08 020a 	add.w	r2, r8, sl
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d1c2      	bne.n	8005e12 <_printf_float+0x332>
 8005e8c:	e683      	b.n	8005b96 <_printf_float+0xb6>
 8005e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e90:	2a01      	cmp	r2, #1
 8005e92:	dc01      	bgt.n	8005e98 <_printf_float+0x3b8>
 8005e94:	07db      	lsls	r3, r3, #31
 8005e96:	d539      	bpl.n	8005f0c <_printf_float+0x42c>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f ae77 	beq.w	8005b96 <_printf_float+0xb6>
 8005ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eac:	4631      	mov	r1, r6
 8005eae:	4628      	mov	r0, r5
 8005eb0:	47b8      	blx	r7
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f43f ae6f 	beq.w	8005b96 <_printf_float+0xb6>
 8005eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005ec4:	f7fa fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ec8:	b9d8      	cbnz	r0, 8005f02 <_printf_float+0x422>
 8005eca:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ece:	f108 0201 	add.w	r2, r8, #1
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	47b8      	blx	r7
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d10e      	bne.n	8005efa <_printf_float+0x41a>
 8005edc:	e65b      	b.n	8005b96 <_printf_float+0xb6>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	464a      	mov	r2, r9
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f ae54 	beq.w	8005b96 <_printf_float+0xb6>
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	4543      	cmp	r3, r8
 8005ef8:	dcf1      	bgt.n	8005ede <_printf_float+0x3fe>
 8005efa:	4653      	mov	r3, sl
 8005efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f00:	e6de      	b.n	8005cc0 <_printf_float+0x1e0>
 8005f02:	f04f 0800 	mov.w	r8, #0
 8005f06:	f104 091a 	add.w	r9, r4, #26
 8005f0a:	e7f2      	b.n	8005ef2 <_printf_float+0x412>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4642      	mov	r2, r8
 8005f10:	e7df      	b.n	8005ed2 <_printf_float+0x3f2>
 8005f12:	2301      	movs	r3, #1
 8005f14:	464a      	mov	r2, r9
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae3a 	beq.w	8005b96 <_printf_float+0xb6>
 8005f22:	f108 0801 	add.w	r8, r8, #1
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f2a:	1a5b      	subs	r3, r3, r1
 8005f2c:	4543      	cmp	r3, r8
 8005f2e:	dcf0      	bgt.n	8005f12 <_printf_float+0x432>
 8005f30:	e6fb      	b.n	8005d2a <_printf_float+0x24a>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	f104 0919 	add.w	r9, r4, #25
 8005f3a:	e7f4      	b.n	8005f26 <_printf_float+0x446>

08005f3c <_printf_common>:
 8005f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	4616      	mov	r6, r2
 8005f42:	4699      	mov	r9, r3
 8005f44:	688a      	ldr	r2, [r1, #8]
 8005f46:	690b      	ldr	r3, [r1, #16]
 8005f48:	4607      	mov	r7, r0
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	bfb8      	it	lt
 8005f4e:	4613      	movlt	r3, r2
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f56:	460c      	mov	r4, r1
 8005f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f5c:	b10a      	cbz	r2, 8005f62 <_printf_common+0x26>
 8005f5e:	3301      	adds	r3, #1
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	0699      	lsls	r1, r3, #26
 8005f66:	bf42      	ittt	mi
 8005f68:	6833      	ldrmi	r3, [r6, #0]
 8005f6a:	3302      	addmi	r3, #2
 8005f6c:	6033      	strmi	r3, [r6, #0]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	f015 0506 	ands.w	r5, r5, #6
 8005f74:	d106      	bne.n	8005f84 <_printf_common+0x48>
 8005f76:	f104 0a19 	add.w	sl, r4, #25
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	6832      	ldr	r2, [r6, #0]
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dc2b      	bgt.n	8005fdc <_printf_common+0xa0>
 8005f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f88:	1e13      	subs	r3, r2, #0
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	bf18      	it	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	0692      	lsls	r2, r2, #26
 8005f92:	d430      	bmi.n	8005ff6 <_printf_common+0xba>
 8005f94:	4649      	mov	r1, r9
 8005f96:	4638      	mov	r0, r7
 8005f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f9c:	47c0      	blx	r8
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d023      	beq.n	8005fea <_printf_common+0xae>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	6922      	ldr	r2, [r4, #16]
 8005fa6:	f003 0306 	and.w	r3, r3, #6
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	bf14      	ite	ne
 8005fae:	2500      	movne	r5, #0
 8005fb0:	6833      	ldreq	r3, [r6, #0]
 8005fb2:	f04f 0600 	mov.w	r6, #0
 8005fb6:	bf08      	it	eq
 8005fb8:	68e5      	ldreq	r5, [r4, #12]
 8005fba:	f104 041a 	add.w	r4, r4, #26
 8005fbe:	bf08      	it	eq
 8005fc0:	1aed      	subeq	r5, r5, r3
 8005fc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005fc6:	bf08      	it	eq
 8005fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	bfc4      	itt	gt
 8005fd0:	1a9b      	subgt	r3, r3, r2
 8005fd2:	18ed      	addgt	r5, r5, r3
 8005fd4:	42b5      	cmp	r5, r6
 8005fd6:	d11a      	bne.n	800600e <_printf_common+0xd2>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	e008      	b.n	8005fee <_printf_common+0xb2>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4652      	mov	r2, sl
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	47c0      	blx	r8
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d103      	bne.n	8005ff2 <_printf_common+0xb6>
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
 8005fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff2:	3501      	adds	r5, #1
 8005ff4:	e7c1      	b.n	8005f7a <_printf_common+0x3e>
 8005ff6:	2030      	movs	r0, #48	; 0x30
 8005ff8:	18e1      	adds	r1, r4, r3
 8005ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006004:	4422      	add	r2, r4
 8006006:	3302      	adds	r3, #2
 8006008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800600c:	e7c2      	b.n	8005f94 <_printf_common+0x58>
 800600e:	2301      	movs	r3, #1
 8006010:	4622      	mov	r2, r4
 8006012:	4649      	mov	r1, r9
 8006014:	4638      	mov	r0, r7
 8006016:	47c0      	blx	r8
 8006018:	3001      	adds	r0, #1
 800601a:	d0e6      	beq.n	8005fea <_printf_common+0xae>
 800601c:	3601      	adds	r6, #1
 800601e:	e7d9      	b.n	8005fd4 <_printf_common+0x98>

08006020 <_printf_i>:
 8006020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	7e0f      	ldrb	r7, [r1, #24]
 8006026:	4691      	mov	r9, r2
 8006028:	2f78      	cmp	r7, #120	; 0x78
 800602a:	4680      	mov	r8, r0
 800602c:	460c      	mov	r4, r1
 800602e:	469a      	mov	sl, r3
 8006030:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006036:	d807      	bhi.n	8006048 <_printf_i+0x28>
 8006038:	2f62      	cmp	r7, #98	; 0x62
 800603a:	d80a      	bhi.n	8006052 <_printf_i+0x32>
 800603c:	2f00      	cmp	r7, #0
 800603e:	f000 80d5 	beq.w	80061ec <_printf_i+0x1cc>
 8006042:	2f58      	cmp	r7, #88	; 0x58
 8006044:	f000 80c1 	beq.w	80061ca <_printf_i+0x1aa>
 8006048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800604c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006050:	e03a      	b.n	80060c8 <_printf_i+0xa8>
 8006052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006056:	2b15      	cmp	r3, #21
 8006058:	d8f6      	bhi.n	8006048 <_printf_i+0x28>
 800605a:	a101      	add	r1, pc, #4	; (adr r1, 8006060 <_printf_i+0x40>)
 800605c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006060:	080060b9 	.word	0x080060b9
 8006064:	080060cd 	.word	0x080060cd
 8006068:	08006049 	.word	0x08006049
 800606c:	08006049 	.word	0x08006049
 8006070:	08006049 	.word	0x08006049
 8006074:	08006049 	.word	0x08006049
 8006078:	080060cd 	.word	0x080060cd
 800607c:	08006049 	.word	0x08006049
 8006080:	08006049 	.word	0x08006049
 8006084:	08006049 	.word	0x08006049
 8006088:	08006049 	.word	0x08006049
 800608c:	080061d3 	.word	0x080061d3
 8006090:	080060f9 	.word	0x080060f9
 8006094:	0800618d 	.word	0x0800618d
 8006098:	08006049 	.word	0x08006049
 800609c:	08006049 	.word	0x08006049
 80060a0:	080061f5 	.word	0x080061f5
 80060a4:	08006049 	.word	0x08006049
 80060a8:	080060f9 	.word	0x080060f9
 80060ac:	08006049 	.word	0x08006049
 80060b0:	08006049 	.word	0x08006049
 80060b4:	08006195 	.word	0x08006195
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	1d1a      	adds	r2, r3, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0a0      	b.n	800620e <_printf_i+0x1ee>
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	0607      	lsls	r7, r0, #24
 80060d2:	f103 0104 	add.w	r1, r3, #4
 80060d6:	6029      	str	r1, [r5, #0]
 80060d8:	d501      	bpl.n	80060de <_printf_i+0xbe>
 80060da:	681e      	ldr	r6, [r3, #0]
 80060dc:	e003      	b.n	80060e6 <_printf_i+0xc6>
 80060de:	0646      	lsls	r6, r0, #25
 80060e0:	d5fb      	bpl.n	80060da <_printf_i+0xba>
 80060e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060e6:	2e00      	cmp	r6, #0
 80060e8:	da03      	bge.n	80060f2 <_printf_i+0xd2>
 80060ea:	232d      	movs	r3, #45	; 0x2d
 80060ec:	4276      	negs	r6, r6
 80060ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f2:	230a      	movs	r3, #10
 80060f4:	4859      	ldr	r0, [pc, #356]	; (800625c <_printf_i+0x23c>)
 80060f6:	e012      	b.n	800611e <_printf_i+0xfe>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	6820      	ldr	r0, [r4, #0]
 80060fc:	1d19      	adds	r1, r3, #4
 80060fe:	6029      	str	r1, [r5, #0]
 8006100:	0605      	lsls	r5, r0, #24
 8006102:	d501      	bpl.n	8006108 <_printf_i+0xe8>
 8006104:	681e      	ldr	r6, [r3, #0]
 8006106:	e002      	b.n	800610e <_printf_i+0xee>
 8006108:	0641      	lsls	r1, r0, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0xe4>
 800610c:	881e      	ldrh	r6, [r3, #0]
 800610e:	2f6f      	cmp	r7, #111	; 0x6f
 8006110:	bf0c      	ite	eq
 8006112:	2308      	moveq	r3, #8
 8006114:	230a      	movne	r3, #10
 8006116:	4851      	ldr	r0, [pc, #324]	; (800625c <_printf_i+0x23c>)
 8006118:	2100      	movs	r1, #0
 800611a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800611e:	6865      	ldr	r5, [r4, #4]
 8006120:	2d00      	cmp	r5, #0
 8006122:	bfa8      	it	ge
 8006124:	6821      	ldrge	r1, [r4, #0]
 8006126:	60a5      	str	r5, [r4, #8]
 8006128:	bfa4      	itt	ge
 800612a:	f021 0104 	bicge.w	r1, r1, #4
 800612e:	6021      	strge	r1, [r4, #0]
 8006130:	b90e      	cbnz	r6, 8006136 <_printf_i+0x116>
 8006132:	2d00      	cmp	r5, #0
 8006134:	d04b      	beq.n	80061ce <_printf_i+0x1ae>
 8006136:	4615      	mov	r5, r2
 8006138:	fbb6 f1f3 	udiv	r1, r6, r3
 800613c:	fb03 6711 	mls	r7, r3, r1, r6
 8006140:	5dc7      	ldrb	r7, [r0, r7]
 8006142:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006146:	4637      	mov	r7, r6
 8006148:	42bb      	cmp	r3, r7
 800614a:	460e      	mov	r6, r1
 800614c:	d9f4      	bls.n	8006138 <_printf_i+0x118>
 800614e:	2b08      	cmp	r3, #8
 8006150:	d10b      	bne.n	800616a <_printf_i+0x14a>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	07de      	lsls	r6, r3, #31
 8006156:	d508      	bpl.n	800616a <_printf_i+0x14a>
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	6861      	ldr	r1, [r4, #4]
 800615c:	4299      	cmp	r1, r3
 800615e:	bfde      	ittt	le
 8006160:	2330      	movle	r3, #48	; 0x30
 8006162:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006166:	f105 35ff 	addle.w	r5, r5, #4294967295
 800616a:	1b52      	subs	r2, r2, r5
 800616c:	6122      	str	r2, [r4, #16]
 800616e:	464b      	mov	r3, r9
 8006170:	4621      	mov	r1, r4
 8006172:	4640      	mov	r0, r8
 8006174:	f8cd a000 	str.w	sl, [sp]
 8006178:	aa03      	add	r2, sp, #12
 800617a:	f7ff fedf 	bl	8005f3c <_printf_common>
 800617e:	3001      	adds	r0, #1
 8006180:	d14a      	bne.n	8006218 <_printf_i+0x1f8>
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	b004      	add	sp, #16
 8006188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	f043 0320 	orr.w	r3, r3, #32
 8006192:	6023      	str	r3, [r4, #0]
 8006194:	2778      	movs	r7, #120	; 0x78
 8006196:	4832      	ldr	r0, [pc, #200]	; (8006260 <_printf_i+0x240>)
 8006198:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	6829      	ldr	r1, [r5, #0]
 80061a0:	061f      	lsls	r7, r3, #24
 80061a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80061a6:	d402      	bmi.n	80061ae <_printf_i+0x18e>
 80061a8:	065f      	lsls	r7, r3, #25
 80061aa:	bf48      	it	mi
 80061ac:	b2b6      	uxthmi	r6, r6
 80061ae:	07df      	lsls	r7, r3, #31
 80061b0:	bf48      	it	mi
 80061b2:	f043 0320 	orrmi.w	r3, r3, #32
 80061b6:	6029      	str	r1, [r5, #0]
 80061b8:	bf48      	it	mi
 80061ba:	6023      	strmi	r3, [r4, #0]
 80061bc:	b91e      	cbnz	r6, 80061c6 <_printf_i+0x1a6>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	f023 0320 	bic.w	r3, r3, #32
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	2310      	movs	r3, #16
 80061c8:	e7a6      	b.n	8006118 <_printf_i+0xf8>
 80061ca:	4824      	ldr	r0, [pc, #144]	; (800625c <_printf_i+0x23c>)
 80061cc:	e7e4      	b.n	8006198 <_printf_i+0x178>
 80061ce:	4615      	mov	r5, r2
 80061d0:	e7bd      	b.n	800614e <_printf_i+0x12e>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	6826      	ldr	r6, [r4, #0]
 80061d6:	1d18      	adds	r0, r3, #4
 80061d8:	6961      	ldr	r1, [r4, #20]
 80061da:	6028      	str	r0, [r5, #0]
 80061dc:	0635      	lsls	r5, r6, #24
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	d501      	bpl.n	80061e6 <_printf_i+0x1c6>
 80061e2:	6019      	str	r1, [r3, #0]
 80061e4:	e002      	b.n	80061ec <_printf_i+0x1cc>
 80061e6:	0670      	lsls	r0, r6, #25
 80061e8:	d5fb      	bpl.n	80061e2 <_printf_i+0x1c2>
 80061ea:	8019      	strh	r1, [r3, #0]
 80061ec:	2300      	movs	r3, #0
 80061ee:	4615      	mov	r5, r2
 80061f0:	6123      	str	r3, [r4, #16]
 80061f2:	e7bc      	b.n	800616e <_printf_i+0x14e>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	2100      	movs	r1, #0
 80061f8:	1d1a      	adds	r2, r3, #4
 80061fa:	602a      	str	r2, [r5, #0]
 80061fc:	681d      	ldr	r5, [r3, #0]
 80061fe:	6862      	ldr	r2, [r4, #4]
 8006200:	4628      	mov	r0, r5
 8006202:	f000 fbe2 	bl	80069ca <memchr>
 8006206:	b108      	cbz	r0, 800620c <_printf_i+0x1ec>
 8006208:	1b40      	subs	r0, r0, r5
 800620a:	6060      	str	r0, [r4, #4]
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	2300      	movs	r3, #0
 8006212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006216:	e7aa      	b.n	800616e <_printf_i+0x14e>
 8006218:	462a      	mov	r2, r5
 800621a:	4649      	mov	r1, r9
 800621c:	4640      	mov	r0, r8
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	47d0      	blx	sl
 8006222:	3001      	adds	r0, #1
 8006224:	d0ad      	beq.n	8006182 <_printf_i+0x162>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	079b      	lsls	r3, r3, #30
 800622a:	d413      	bmi.n	8006254 <_printf_i+0x234>
 800622c:	68e0      	ldr	r0, [r4, #12]
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	4298      	cmp	r0, r3
 8006232:	bfb8      	it	lt
 8006234:	4618      	movlt	r0, r3
 8006236:	e7a6      	b.n	8006186 <_printf_i+0x166>
 8006238:	2301      	movs	r3, #1
 800623a:	4632      	mov	r2, r6
 800623c:	4649      	mov	r1, r9
 800623e:	4640      	mov	r0, r8
 8006240:	47d0      	blx	sl
 8006242:	3001      	adds	r0, #1
 8006244:	d09d      	beq.n	8006182 <_printf_i+0x162>
 8006246:	3501      	adds	r5, #1
 8006248:	68e3      	ldr	r3, [r4, #12]
 800624a:	9903      	ldr	r1, [sp, #12]
 800624c:	1a5b      	subs	r3, r3, r1
 800624e:	42ab      	cmp	r3, r5
 8006250:	dcf2      	bgt.n	8006238 <_printf_i+0x218>
 8006252:	e7eb      	b.n	800622c <_printf_i+0x20c>
 8006254:	2500      	movs	r5, #0
 8006256:	f104 0619 	add.w	r6, r4, #25
 800625a:	e7f5      	b.n	8006248 <_printf_i+0x228>
 800625c:	0800a840 	.word	0x0800a840
 8006260:	0800a851 	.word	0x0800a851

08006264 <_scanf_float>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	b087      	sub	sp, #28
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	688b      	ldr	r3, [r1, #8]
 800626e:	4617      	mov	r7, r2
 8006270:	1e5a      	subs	r2, r3, #1
 8006272:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006276:	bf85      	ittet	hi
 8006278:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800627c:	195b      	addhi	r3, r3, r5
 800627e:	2300      	movls	r3, #0
 8006280:	9302      	strhi	r3, [sp, #8]
 8006282:	bf88      	it	hi
 8006284:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006288:	468b      	mov	fp, r1
 800628a:	f04f 0500 	mov.w	r5, #0
 800628e:	bf8c      	ite	hi
 8006290:	608b      	strhi	r3, [r1, #8]
 8006292:	9302      	strls	r3, [sp, #8]
 8006294:	680b      	ldr	r3, [r1, #0]
 8006296:	4680      	mov	r8, r0
 8006298:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800629c:	f84b 3b1c 	str.w	r3, [fp], #28
 80062a0:	460c      	mov	r4, r1
 80062a2:	465e      	mov	r6, fp
 80062a4:	46aa      	mov	sl, r5
 80062a6:	46a9      	mov	r9, r5
 80062a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80062ac:	9501      	str	r5, [sp, #4]
 80062ae:	68a2      	ldr	r2, [r4, #8]
 80062b0:	b152      	cbz	r2, 80062c8 <_scanf_float+0x64>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b4e      	cmp	r3, #78	; 0x4e
 80062b8:	d864      	bhi.n	8006384 <_scanf_float+0x120>
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d83c      	bhi.n	8006338 <_scanf_float+0xd4>
 80062be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80062c2:	b2c8      	uxtb	r0, r1
 80062c4:	280e      	cmp	r0, #14
 80062c6:	d93a      	bls.n	800633e <_scanf_float+0xda>
 80062c8:	f1b9 0f00 	cmp.w	r9, #0
 80062cc:	d003      	beq.n	80062d6 <_scanf_float+0x72>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062da:	f1ba 0f01 	cmp.w	sl, #1
 80062de:	f200 8113 	bhi.w	8006508 <_scanf_float+0x2a4>
 80062e2:	455e      	cmp	r6, fp
 80062e4:	f200 8105 	bhi.w	80064f2 <_scanf_float+0x28e>
 80062e8:	2501      	movs	r5, #1
 80062ea:	4628      	mov	r0, r5
 80062ec:	b007      	add	sp, #28
 80062ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80062f6:	2a0d      	cmp	r2, #13
 80062f8:	d8e6      	bhi.n	80062c8 <_scanf_float+0x64>
 80062fa:	a101      	add	r1, pc, #4	; (adr r1, 8006300 <_scanf_float+0x9c>)
 80062fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006300:	0800643f 	.word	0x0800643f
 8006304:	080062c9 	.word	0x080062c9
 8006308:	080062c9 	.word	0x080062c9
 800630c:	080062c9 	.word	0x080062c9
 8006310:	0800649f 	.word	0x0800649f
 8006314:	08006477 	.word	0x08006477
 8006318:	080062c9 	.word	0x080062c9
 800631c:	080062c9 	.word	0x080062c9
 8006320:	0800644d 	.word	0x0800644d
 8006324:	080062c9 	.word	0x080062c9
 8006328:	080062c9 	.word	0x080062c9
 800632c:	080062c9 	.word	0x080062c9
 8006330:	080062c9 	.word	0x080062c9
 8006334:	08006405 	.word	0x08006405
 8006338:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800633c:	e7db      	b.n	80062f6 <_scanf_float+0x92>
 800633e:	290e      	cmp	r1, #14
 8006340:	d8c2      	bhi.n	80062c8 <_scanf_float+0x64>
 8006342:	a001      	add	r0, pc, #4	; (adr r0, 8006348 <_scanf_float+0xe4>)
 8006344:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006348:	080063f7 	.word	0x080063f7
 800634c:	080062c9 	.word	0x080062c9
 8006350:	080063f7 	.word	0x080063f7
 8006354:	0800648b 	.word	0x0800648b
 8006358:	080062c9 	.word	0x080062c9
 800635c:	080063a5 	.word	0x080063a5
 8006360:	080063e1 	.word	0x080063e1
 8006364:	080063e1 	.word	0x080063e1
 8006368:	080063e1 	.word	0x080063e1
 800636c:	080063e1 	.word	0x080063e1
 8006370:	080063e1 	.word	0x080063e1
 8006374:	080063e1 	.word	0x080063e1
 8006378:	080063e1 	.word	0x080063e1
 800637c:	080063e1 	.word	0x080063e1
 8006380:	080063e1 	.word	0x080063e1
 8006384:	2b6e      	cmp	r3, #110	; 0x6e
 8006386:	d809      	bhi.n	800639c <_scanf_float+0x138>
 8006388:	2b60      	cmp	r3, #96	; 0x60
 800638a:	d8b2      	bhi.n	80062f2 <_scanf_float+0x8e>
 800638c:	2b54      	cmp	r3, #84	; 0x54
 800638e:	d077      	beq.n	8006480 <_scanf_float+0x21c>
 8006390:	2b59      	cmp	r3, #89	; 0x59
 8006392:	d199      	bne.n	80062c8 <_scanf_float+0x64>
 8006394:	2d07      	cmp	r5, #7
 8006396:	d197      	bne.n	80062c8 <_scanf_float+0x64>
 8006398:	2508      	movs	r5, #8
 800639a:	e029      	b.n	80063f0 <_scanf_float+0x18c>
 800639c:	2b74      	cmp	r3, #116	; 0x74
 800639e:	d06f      	beq.n	8006480 <_scanf_float+0x21c>
 80063a0:	2b79      	cmp	r3, #121	; 0x79
 80063a2:	e7f6      	b.n	8006392 <_scanf_float+0x12e>
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	05c8      	lsls	r0, r1, #23
 80063a8:	d51a      	bpl.n	80063e0 <_scanf_float+0x17c>
 80063aa:	9b02      	ldr	r3, [sp, #8]
 80063ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80063b0:	6021      	str	r1, [r4, #0]
 80063b2:	f109 0901 	add.w	r9, r9, #1
 80063b6:	b11b      	cbz	r3, 80063c0 <_scanf_float+0x15c>
 80063b8:	3b01      	subs	r3, #1
 80063ba:	3201      	adds	r2, #1
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	60a2      	str	r2, [r4, #8]
 80063c0:	68a3      	ldr	r3, [r4, #8]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	f340 8084 	ble.w	80064e0 <_scanf_float+0x27c>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	e766      	b.n	80062ae <_scanf_float+0x4a>
 80063e0:	eb1a 0f05 	cmn.w	sl, r5
 80063e4:	f47f af70 	bne.w	80062c8 <_scanf_float+0x64>
 80063e8:	6822      	ldr	r2, [r4, #0]
 80063ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80063ee:	6022      	str	r2, [r4, #0]
 80063f0:	f806 3b01 	strb.w	r3, [r6], #1
 80063f4:	e7e4      	b.n	80063c0 <_scanf_float+0x15c>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	0610      	lsls	r0, r2, #24
 80063fa:	f57f af65 	bpl.w	80062c8 <_scanf_float+0x64>
 80063fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006402:	e7f4      	b.n	80063ee <_scanf_float+0x18a>
 8006404:	f1ba 0f00 	cmp.w	sl, #0
 8006408:	d10e      	bne.n	8006428 <_scanf_float+0x1c4>
 800640a:	f1b9 0f00 	cmp.w	r9, #0
 800640e:	d10e      	bne.n	800642e <_scanf_float+0x1ca>
 8006410:	6822      	ldr	r2, [r4, #0]
 8006412:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006416:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800641a:	d108      	bne.n	800642e <_scanf_float+0x1ca>
 800641c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006420:	f04f 0a01 	mov.w	sl, #1
 8006424:	6022      	str	r2, [r4, #0]
 8006426:	e7e3      	b.n	80063f0 <_scanf_float+0x18c>
 8006428:	f1ba 0f02 	cmp.w	sl, #2
 800642c:	d055      	beq.n	80064da <_scanf_float+0x276>
 800642e:	2d01      	cmp	r5, #1
 8006430:	d002      	beq.n	8006438 <_scanf_float+0x1d4>
 8006432:	2d04      	cmp	r5, #4
 8006434:	f47f af48 	bne.w	80062c8 <_scanf_float+0x64>
 8006438:	3501      	adds	r5, #1
 800643a:	b2ed      	uxtb	r5, r5
 800643c:	e7d8      	b.n	80063f0 <_scanf_float+0x18c>
 800643e:	f1ba 0f01 	cmp.w	sl, #1
 8006442:	f47f af41 	bne.w	80062c8 <_scanf_float+0x64>
 8006446:	f04f 0a02 	mov.w	sl, #2
 800644a:	e7d1      	b.n	80063f0 <_scanf_float+0x18c>
 800644c:	b97d      	cbnz	r5, 800646e <_scanf_float+0x20a>
 800644e:	f1b9 0f00 	cmp.w	r9, #0
 8006452:	f47f af3c 	bne.w	80062ce <_scanf_float+0x6a>
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800645c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006460:	f47f af39 	bne.w	80062d6 <_scanf_float+0x72>
 8006464:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006468:	2501      	movs	r5, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	e7c0      	b.n	80063f0 <_scanf_float+0x18c>
 800646e:	2d03      	cmp	r5, #3
 8006470:	d0e2      	beq.n	8006438 <_scanf_float+0x1d4>
 8006472:	2d05      	cmp	r5, #5
 8006474:	e7de      	b.n	8006434 <_scanf_float+0x1d0>
 8006476:	2d02      	cmp	r5, #2
 8006478:	f47f af26 	bne.w	80062c8 <_scanf_float+0x64>
 800647c:	2503      	movs	r5, #3
 800647e:	e7b7      	b.n	80063f0 <_scanf_float+0x18c>
 8006480:	2d06      	cmp	r5, #6
 8006482:	f47f af21 	bne.w	80062c8 <_scanf_float+0x64>
 8006486:	2507      	movs	r5, #7
 8006488:	e7b2      	b.n	80063f0 <_scanf_float+0x18c>
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	0591      	lsls	r1, r2, #22
 800648e:	f57f af1b 	bpl.w	80062c8 <_scanf_float+0x64>
 8006492:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006496:	6022      	str	r2, [r4, #0]
 8006498:	f8cd 9004 	str.w	r9, [sp, #4]
 800649c:	e7a8      	b.n	80063f0 <_scanf_float+0x18c>
 800649e:	6822      	ldr	r2, [r4, #0]
 80064a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80064a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80064a8:	d006      	beq.n	80064b8 <_scanf_float+0x254>
 80064aa:	0550      	lsls	r0, r2, #21
 80064ac:	f57f af0c 	bpl.w	80062c8 <_scanf_float+0x64>
 80064b0:	f1b9 0f00 	cmp.w	r9, #0
 80064b4:	f43f af0f 	beq.w	80062d6 <_scanf_float+0x72>
 80064b8:	0591      	lsls	r1, r2, #22
 80064ba:	bf58      	it	pl
 80064bc:	9901      	ldrpl	r1, [sp, #4]
 80064be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064c2:	bf58      	it	pl
 80064c4:	eba9 0101 	subpl.w	r1, r9, r1
 80064c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80064cc:	f04f 0900 	mov.w	r9, #0
 80064d0:	bf58      	it	pl
 80064d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80064d6:	6022      	str	r2, [r4, #0]
 80064d8:	e78a      	b.n	80063f0 <_scanf_float+0x18c>
 80064da:	f04f 0a03 	mov.w	sl, #3
 80064de:	e787      	b.n	80063f0 <_scanf_float+0x18c>
 80064e0:	4639      	mov	r1, r7
 80064e2:	4640      	mov	r0, r8
 80064e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064e8:	4798      	blx	r3
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f43f aedf 	beq.w	80062ae <_scanf_float+0x4a>
 80064f0:	e6ea      	b.n	80062c8 <_scanf_float+0x64>
 80064f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064f6:	463a      	mov	r2, r7
 80064f8:	4640      	mov	r0, r8
 80064fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064fe:	4798      	blx	r3
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	3b01      	subs	r3, #1
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	e6ec      	b.n	80062e2 <_scanf_float+0x7e>
 8006508:	1e6b      	subs	r3, r5, #1
 800650a:	2b06      	cmp	r3, #6
 800650c:	d825      	bhi.n	800655a <_scanf_float+0x2f6>
 800650e:	2d02      	cmp	r5, #2
 8006510:	d836      	bhi.n	8006580 <_scanf_float+0x31c>
 8006512:	455e      	cmp	r6, fp
 8006514:	f67f aee8 	bls.w	80062e8 <_scanf_float+0x84>
 8006518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800651c:	463a      	mov	r2, r7
 800651e:	4640      	mov	r0, r8
 8006520:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006524:	4798      	blx	r3
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	3b01      	subs	r3, #1
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	e7f1      	b.n	8006512 <_scanf_float+0x2ae>
 800652e:	9802      	ldr	r0, [sp, #8]
 8006530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006534:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006538:	463a      	mov	r2, r7
 800653a:	9002      	str	r0, [sp, #8]
 800653c:	4640      	mov	r0, r8
 800653e:	4798      	blx	r3
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	3b01      	subs	r3, #1
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800654a:	fa5f fa8a 	uxtb.w	sl, sl
 800654e:	f1ba 0f02 	cmp.w	sl, #2
 8006552:	d1ec      	bne.n	800652e <_scanf_float+0x2ca>
 8006554:	3d03      	subs	r5, #3
 8006556:	b2ed      	uxtb	r5, r5
 8006558:	1b76      	subs	r6, r6, r5
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	05da      	lsls	r2, r3, #23
 800655e:	d52f      	bpl.n	80065c0 <_scanf_float+0x35c>
 8006560:	055b      	lsls	r3, r3, #21
 8006562:	d510      	bpl.n	8006586 <_scanf_float+0x322>
 8006564:	455e      	cmp	r6, fp
 8006566:	f67f aebf 	bls.w	80062e8 <_scanf_float+0x84>
 800656a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800656e:	463a      	mov	r2, r7
 8006570:	4640      	mov	r0, r8
 8006572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006576:	4798      	blx	r3
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	3b01      	subs	r3, #1
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	e7f1      	b.n	8006564 <_scanf_float+0x300>
 8006580:	46aa      	mov	sl, r5
 8006582:	9602      	str	r6, [sp, #8]
 8006584:	e7df      	b.n	8006546 <_scanf_float+0x2e2>
 8006586:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	2965      	cmp	r1, #101	; 0x65
 800658e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006592:	f106 35ff 	add.w	r5, r6, #4294967295
 8006596:	6123      	str	r3, [r4, #16]
 8006598:	d00c      	beq.n	80065b4 <_scanf_float+0x350>
 800659a:	2945      	cmp	r1, #69	; 0x45
 800659c:	d00a      	beq.n	80065b4 <_scanf_float+0x350>
 800659e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065a2:	463a      	mov	r2, r7
 80065a4:	4640      	mov	r0, r8
 80065a6:	4798      	blx	r3
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	1eb5      	subs	r5, r6, #2
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	463a      	mov	r2, r7
 80065b6:	4640      	mov	r0, r8
 80065b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065bc:	4798      	blx	r3
 80065be:	462e      	mov	r6, r5
 80065c0:	6825      	ldr	r5, [r4, #0]
 80065c2:	f015 0510 	ands.w	r5, r5, #16
 80065c6:	d155      	bne.n	8006674 <_scanf_float+0x410>
 80065c8:	7035      	strb	r5, [r6, #0]
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d4:	d11d      	bne.n	8006612 <_scanf_float+0x3ae>
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	454b      	cmp	r3, r9
 80065da:	eba3 0209 	sub.w	r2, r3, r9
 80065de:	d125      	bne.n	800662c <_scanf_float+0x3c8>
 80065e0:	2200      	movs	r2, #0
 80065e2:	4659      	mov	r1, fp
 80065e4:	4640      	mov	r0, r8
 80065e6:	f002 fc23 	bl	8008e30 <_strtod_r>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	f8d4 c000 	ldr.w	ip, [r4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f01c 0f02 	tst.w	ip, #2
 80065f6:	4606      	mov	r6, r0
 80065f8:	460f      	mov	r7, r1
 80065fa:	f103 0204 	add.w	r2, r3, #4
 80065fe:	d020      	beq.n	8006642 <_scanf_float+0x3de>
 8006600:	9903      	ldr	r1, [sp, #12]
 8006602:	600a      	str	r2, [r1, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	e9c3 6700 	strd	r6, r7, [r3]
 800660a:	68e3      	ldr	r3, [r4, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60e3      	str	r3, [r4, #12]
 8006610:	e66b      	b.n	80062ea <_scanf_float+0x86>
 8006612:	9b04      	ldr	r3, [sp, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0e3      	beq.n	80065e0 <_scanf_float+0x37c>
 8006618:	9905      	ldr	r1, [sp, #20]
 800661a:	230a      	movs	r3, #10
 800661c:	462a      	mov	r2, r5
 800661e:	4640      	mov	r0, r8
 8006620:	3101      	adds	r1, #1
 8006622:	f002 fc89 	bl	8008f38 <_strtol_r>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	9e05      	ldr	r6, [sp, #20]
 800662a:	1ac2      	subs	r2, r0, r3
 800662c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006630:	429e      	cmp	r6, r3
 8006632:	bf28      	it	cs
 8006634:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006638:	4630      	mov	r0, r6
 800663a:	490f      	ldr	r1, [pc, #60]	; (8006678 <_scanf_float+0x414>)
 800663c:	f000 f8e2 	bl	8006804 <siprintf>
 8006640:	e7ce      	b.n	80065e0 <_scanf_float+0x37c>
 8006642:	f01c 0f04 	tst.w	ip, #4
 8006646:	d1db      	bne.n	8006600 <_scanf_float+0x39c>
 8006648:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800664c:	f8cc 2000 	str.w	r2, [ip]
 8006650:	f8d3 8000 	ldr.w	r8, [r3]
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	f7fa f9d8 	bl	8000a0c <__aeabi_dcmpun>
 800665c:	b128      	cbz	r0, 800666a <_scanf_float+0x406>
 800665e:	4807      	ldr	r0, [pc, #28]	; (800667c <_scanf_float+0x418>)
 8006660:	f000 f9c2 	bl	80069e8 <nanf>
 8006664:	f8c8 0000 	str.w	r0, [r8]
 8006668:	e7cf      	b.n	800660a <_scanf_float+0x3a6>
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7fa fa2b 	bl	8000ac8 <__aeabi_d2f>
 8006672:	e7f7      	b.n	8006664 <_scanf_float+0x400>
 8006674:	2500      	movs	r5, #0
 8006676:	e638      	b.n	80062ea <_scanf_float+0x86>
 8006678:	0800a862 	.word	0x0800a862
 800667c:	0800abf5 	.word	0x0800abf5

08006680 <std>:
 8006680:	2300      	movs	r3, #0
 8006682:	b510      	push	{r4, lr}
 8006684:	4604      	mov	r4, r0
 8006686:	e9c0 3300 	strd	r3, r3, [r0]
 800668a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800668e:	6083      	str	r3, [r0, #8]
 8006690:	8181      	strh	r1, [r0, #12]
 8006692:	6643      	str	r3, [r0, #100]	; 0x64
 8006694:	81c2      	strh	r2, [r0, #14]
 8006696:	6183      	str	r3, [r0, #24]
 8006698:	4619      	mov	r1, r3
 800669a:	2208      	movs	r2, #8
 800669c:	305c      	adds	r0, #92	; 0x5c
 800669e:	f000 f914 	bl	80068ca <memset>
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <std+0x58>)
 80066a4:	6224      	str	r4, [r4, #32]
 80066a6:	6263      	str	r3, [r4, #36]	; 0x24
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <std+0x5c>)
 80066aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <std+0x60>)
 80066ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066b0:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <std+0x64>)
 80066b2:	6323      	str	r3, [r4, #48]	; 0x30
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <std+0x68>)
 80066b6:	429c      	cmp	r4, r3
 80066b8:	d006      	beq.n	80066c8 <std+0x48>
 80066ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80066be:	4294      	cmp	r4, r2
 80066c0:	d002      	beq.n	80066c8 <std+0x48>
 80066c2:	33d0      	adds	r3, #208	; 0xd0
 80066c4:	429c      	cmp	r4, r3
 80066c6:	d105      	bne.n	80066d4 <std+0x54>
 80066c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f000 b978 	b.w	80069c4 <__retarget_lock_init_recursive>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	08006845 	.word	0x08006845
 80066dc:	08006867 	.word	0x08006867
 80066e0:	0800689f 	.word	0x0800689f
 80066e4:	080068c3 	.word	0x080068c3
 80066e8:	200004ac 	.word	0x200004ac

080066ec <stdio_exit_handler>:
 80066ec:	4a02      	ldr	r2, [pc, #8]	; (80066f8 <stdio_exit_handler+0xc>)
 80066ee:	4903      	ldr	r1, [pc, #12]	; (80066fc <stdio_exit_handler+0x10>)
 80066f0:	4803      	ldr	r0, [pc, #12]	; (8006700 <stdio_exit_handler+0x14>)
 80066f2:	f000 b869 	b.w	80067c8 <_fwalk_sglue>
 80066f6:	bf00      	nop
 80066f8:	20000020 	.word	0x20000020
 80066fc:	080092f1 	.word	0x080092f1
 8006700:	2000002c 	.word	0x2000002c

08006704 <cleanup_stdio>:
 8006704:	6841      	ldr	r1, [r0, #4]
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <cleanup_stdio+0x34>)
 8006708:	b510      	push	{r4, lr}
 800670a:	4299      	cmp	r1, r3
 800670c:	4604      	mov	r4, r0
 800670e:	d001      	beq.n	8006714 <cleanup_stdio+0x10>
 8006710:	f002 fdee 	bl	80092f0 <_fflush_r>
 8006714:	68a1      	ldr	r1, [r4, #8]
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <cleanup_stdio+0x38>)
 8006718:	4299      	cmp	r1, r3
 800671a:	d002      	beq.n	8006722 <cleanup_stdio+0x1e>
 800671c:	4620      	mov	r0, r4
 800671e:	f002 fde7 	bl	80092f0 <_fflush_r>
 8006722:	68e1      	ldr	r1, [r4, #12]
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <cleanup_stdio+0x3c>)
 8006726:	4299      	cmp	r1, r3
 8006728:	d004      	beq.n	8006734 <cleanup_stdio+0x30>
 800672a:	4620      	mov	r0, r4
 800672c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006730:	f002 bdde 	b.w	80092f0 <_fflush_r>
 8006734:	bd10      	pop	{r4, pc}
 8006736:	bf00      	nop
 8006738:	200004ac 	.word	0x200004ac
 800673c:	20000514 	.word	0x20000514
 8006740:	2000057c 	.word	0x2000057c

08006744 <global_stdio_init.part.0>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <global_stdio_init.part.0+0x30>)
 8006748:	4c0b      	ldr	r4, [pc, #44]	; (8006778 <global_stdio_init.part.0+0x34>)
 800674a:	4a0c      	ldr	r2, [pc, #48]	; (800677c <global_stdio_init.part.0+0x38>)
 800674c:	4620      	mov	r0, r4
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	2104      	movs	r1, #4
 8006752:	2200      	movs	r2, #0
 8006754:	f7ff ff94 	bl	8006680 <std>
 8006758:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800675c:	2201      	movs	r2, #1
 800675e:	2109      	movs	r1, #9
 8006760:	f7ff ff8e 	bl	8006680 <std>
 8006764:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006768:	2202      	movs	r2, #2
 800676a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800676e:	2112      	movs	r1, #18
 8006770:	f7ff bf86 	b.w	8006680 <std>
 8006774:	200005e4 	.word	0x200005e4
 8006778:	200004ac 	.word	0x200004ac
 800677c:	080066ed 	.word	0x080066ed

08006780 <__sfp_lock_acquire>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__sfp_lock_acquire+0x8>)
 8006782:	f000 b920 	b.w	80069c6 <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	200005ed 	.word	0x200005ed

0800678c <__sfp_lock_release>:
 800678c:	4801      	ldr	r0, [pc, #4]	; (8006794 <__sfp_lock_release+0x8>)
 800678e:	f000 b91b 	b.w	80069c8 <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	200005ed 	.word	0x200005ed

08006798 <__sinit>:
 8006798:	b510      	push	{r4, lr}
 800679a:	4604      	mov	r4, r0
 800679c:	f7ff fff0 	bl	8006780 <__sfp_lock_acquire>
 80067a0:	6a23      	ldr	r3, [r4, #32]
 80067a2:	b11b      	cbz	r3, 80067ac <__sinit+0x14>
 80067a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a8:	f7ff bff0 	b.w	800678c <__sfp_lock_release>
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <__sinit+0x28>)
 80067ae:	6223      	str	r3, [r4, #32]
 80067b0:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <__sinit+0x2c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f5      	bne.n	80067a4 <__sinit+0xc>
 80067b8:	f7ff ffc4 	bl	8006744 <global_stdio_init.part.0>
 80067bc:	e7f2      	b.n	80067a4 <__sinit+0xc>
 80067be:	bf00      	nop
 80067c0:	08006705 	.word	0x08006705
 80067c4:	200005e4 	.word	0x200005e4

080067c8 <_fwalk_sglue>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4607      	mov	r7, r0
 80067ce:	4688      	mov	r8, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	2600      	movs	r6, #0
 80067d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067d8:	f1b9 0901 	subs.w	r9, r9, #1
 80067dc:	d505      	bpl.n	80067ea <_fwalk_sglue+0x22>
 80067de:	6824      	ldr	r4, [r4, #0]
 80067e0:	2c00      	cmp	r4, #0
 80067e2:	d1f7      	bne.n	80067d4 <_fwalk_sglue+0xc>
 80067e4:	4630      	mov	r0, r6
 80067e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ea:	89ab      	ldrh	r3, [r5, #12]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d907      	bls.n	8006800 <_fwalk_sglue+0x38>
 80067f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067f4:	3301      	adds	r3, #1
 80067f6:	d003      	beq.n	8006800 <_fwalk_sglue+0x38>
 80067f8:	4629      	mov	r1, r5
 80067fa:	4638      	mov	r0, r7
 80067fc:	47c0      	blx	r8
 80067fe:	4306      	orrs	r6, r0
 8006800:	3568      	adds	r5, #104	; 0x68
 8006802:	e7e9      	b.n	80067d8 <_fwalk_sglue+0x10>

08006804 <siprintf>:
 8006804:	b40e      	push	{r1, r2, r3}
 8006806:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800680a:	b500      	push	{lr}
 800680c:	b09c      	sub	sp, #112	; 0x70
 800680e:	ab1d      	add	r3, sp, #116	; 0x74
 8006810:	9002      	str	r0, [sp, #8]
 8006812:	9006      	str	r0, [sp, #24]
 8006814:	9107      	str	r1, [sp, #28]
 8006816:	9104      	str	r1, [sp, #16]
 8006818:	4808      	ldr	r0, [pc, #32]	; (800683c <siprintf+0x38>)
 800681a:	4909      	ldr	r1, [pc, #36]	; (8006840 <siprintf+0x3c>)
 800681c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006820:	9105      	str	r1, [sp, #20]
 8006822:	6800      	ldr	r0, [r0, #0]
 8006824:	a902      	add	r1, sp, #8
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	f002 fbe2 	bl	8008ff0 <_svfiprintf_r>
 800682c:	2200      	movs	r2, #0
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	b01c      	add	sp, #112	; 0x70
 8006834:	f85d eb04 	ldr.w	lr, [sp], #4
 8006838:	b003      	add	sp, #12
 800683a:	4770      	bx	lr
 800683c:	20000078 	.word	0x20000078
 8006840:	ffff0208 	.word	0xffff0208

08006844 <__sread>:
 8006844:	b510      	push	{r4, lr}
 8006846:	460c      	mov	r4, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	f000 f86c 	bl	8006928 <_read_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	bfab      	itete	ge
 8006854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006856:	89a3      	ldrhlt	r3, [r4, #12]
 8006858:	181b      	addge	r3, r3, r0
 800685a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800685e:	bfac      	ite	ge
 8006860:	6563      	strge	r3, [r4, #84]	; 0x54
 8006862:	81a3      	strhlt	r3, [r4, #12]
 8006864:	bd10      	pop	{r4, pc}

08006866 <__swrite>:
 8006866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686a:	461f      	mov	r7, r3
 800686c:	898b      	ldrh	r3, [r1, #12]
 800686e:	4605      	mov	r5, r0
 8006870:	05db      	lsls	r3, r3, #23
 8006872:	460c      	mov	r4, r1
 8006874:	4616      	mov	r6, r2
 8006876:	d505      	bpl.n	8006884 <__swrite+0x1e>
 8006878:	2302      	movs	r3, #2
 800687a:	2200      	movs	r2, #0
 800687c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006880:	f000 f840 	bl	8006904 <_lseek_r>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	4632      	mov	r2, r6
 8006888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	4628      	mov	r0, r5
 8006890:	463b      	mov	r3, r7
 8006892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800689a:	f000 b857 	b.w	800694c <_write_r>

0800689e <__sseek>:
 800689e:	b510      	push	{r4, lr}
 80068a0:	460c      	mov	r4, r1
 80068a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a6:	f000 f82d 	bl	8006904 <_lseek_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	bf15      	itete	ne
 80068b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80068b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068ba:	81a3      	strheq	r3, [r4, #12]
 80068bc:	bf18      	it	ne
 80068be:	81a3      	strhne	r3, [r4, #12]
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <__sclose>:
 80068c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c6:	f000 b80d 	b.w	80068e4 <_close_r>

080068ca <memset>:
 80068ca:	4603      	mov	r3, r0
 80068cc:	4402      	add	r2, r0
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d100      	bne.n	80068d4 <memset+0xa>
 80068d2:	4770      	bx	lr
 80068d4:	f803 1b01 	strb.w	r1, [r3], #1
 80068d8:	e7f9      	b.n	80068ce <memset+0x4>
	...

080068dc <_localeconv_r>:
 80068dc:	4800      	ldr	r0, [pc, #0]	; (80068e0 <_localeconv_r+0x4>)
 80068de:	4770      	bx	lr
 80068e0:	2000016c 	.word	0x2000016c

080068e4 <_close_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	2300      	movs	r3, #0
 80068e8:	4d05      	ldr	r5, [pc, #20]	; (8006900 <_close_r+0x1c>)
 80068ea:	4604      	mov	r4, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	f7fb fdde 	bl	80024b0 <_close>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_close_r+0x1a>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_close_r+0x1a>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	200005e8 	.word	0x200005e8

08006904 <_lseek_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	2200      	movs	r2, #0
 800690e:	4d05      	ldr	r5, [pc, #20]	; (8006924 <_lseek_r+0x20>)
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fb fdf0 	bl	80024f8 <_lseek>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_lseek_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_lseek_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200005e8 	.word	0x200005e8

08006928 <_read_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	4611      	mov	r1, r2
 8006930:	2200      	movs	r2, #0
 8006932:	4d05      	ldr	r5, [pc, #20]	; (8006948 <_read_r+0x20>)
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f7fb fd81 	bl	800243e <_read>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_read_r+0x1e>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_read_r+0x1e>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	200005e8 	.word	0x200005e8

0800694c <_write_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	2200      	movs	r2, #0
 8006956:	4d05      	ldr	r5, [pc, #20]	; (800696c <_write_r+0x20>)
 8006958:	602a      	str	r2, [r5, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f7fb fd8c 	bl	8002478 <_write>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_write_r+0x1e>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_write_r+0x1e>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	200005e8 	.word	0x200005e8

08006970 <__errno>:
 8006970:	4b01      	ldr	r3, [pc, #4]	; (8006978 <__errno+0x8>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000078 	.word	0x20000078

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	2600      	movs	r6, #0
 8006980:	4d0c      	ldr	r5, [pc, #48]	; (80069b4 <__libc_init_array+0x38>)
 8006982:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006984:	1b64      	subs	r4, r4, r5
 8006986:	10a4      	asrs	r4, r4, #2
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	f003 ff1e 	bl	800a7cc <_init>
 8006990:	2600      	movs	r6, #0
 8006992:	4d0a      	ldr	r5, [pc, #40]	; (80069bc <__libc_init_array+0x40>)
 8006994:	4c0a      	ldr	r4, [pc, #40]	; (80069c0 <__libc_init_array+0x44>)
 8006996:	1b64      	subs	r4, r4, r5
 8006998:	10a4      	asrs	r4, r4, #2
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	0800acc8 	.word	0x0800acc8
 80069b8:	0800acc8 	.word	0x0800acc8
 80069bc:	0800acc8 	.word	0x0800acc8
 80069c0:	0800accc 	.word	0x0800accc

080069c4 <__retarget_lock_init_recursive>:
 80069c4:	4770      	bx	lr

080069c6 <__retarget_lock_acquire_recursive>:
 80069c6:	4770      	bx	lr

080069c8 <__retarget_lock_release_recursive>:
 80069c8:	4770      	bx	lr

080069ca <memchr>:
 80069ca:	4603      	mov	r3, r0
 80069cc:	b510      	push	{r4, lr}
 80069ce:	b2c9      	uxtb	r1, r1
 80069d0:	4402      	add	r2, r0
 80069d2:	4293      	cmp	r3, r2
 80069d4:	4618      	mov	r0, r3
 80069d6:	d101      	bne.n	80069dc <memchr+0x12>
 80069d8:	2000      	movs	r0, #0
 80069da:	e003      	b.n	80069e4 <memchr+0x1a>
 80069dc:	7804      	ldrb	r4, [r0, #0]
 80069de:	3301      	adds	r3, #1
 80069e0:	428c      	cmp	r4, r1
 80069e2:	d1f6      	bne.n	80069d2 <memchr+0x8>
 80069e4:	bd10      	pop	{r4, pc}
	...

080069e8 <nanf>:
 80069e8:	4800      	ldr	r0, [pc, #0]	; (80069ec <nanf+0x4>)
 80069ea:	4770      	bx	lr
 80069ec:	7fc00000 	.word	0x7fc00000

080069f0 <quorem>:
 80069f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	6903      	ldr	r3, [r0, #16]
 80069f6:	690c      	ldr	r4, [r1, #16]
 80069f8:	4607      	mov	r7, r0
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	db7f      	blt.n	8006afe <quorem+0x10e>
 80069fe:	3c01      	subs	r4, #1
 8006a00:	f100 0514 	add.w	r5, r0, #20
 8006a04:	f101 0814 	add.w	r8, r1, #20
 8006a08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a16:	3301      	adds	r3, #1
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a26:	d331      	bcc.n	8006a8c <quorem+0x9c>
 8006a28:	f04f 0e00 	mov.w	lr, #0
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	46ac      	mov	ip, r5
 8006a30:	46f2      	mov	sl, lr
 8006a32:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a36:	b293      	uxth	r3, r2
 8006a38:	fb06 e303 	mla	r3, r6, r3, lr
 8006a3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a40:	0c1a      	lsrs	r2, r3, #16
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	fb06 220e 	mla	r2, r6, lr, r2
 8006a48:	ebaa 0303 	sub.w	r3, sl, r3
 8006a4c:	f8dc a000 	ldr.w	sl, [ip]
 8006a50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a54:	fa1f fa8a 	uxth.w	sl, sl
 8006a58:	4453      	add	r3, sl
 8006a5a:	f8dc a000 	ldr.w	sl, [ip]
 8006a5e:	b292      	uxth	r2, r2
 8006a60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a6e:	4581      	cmp	r9, r0
 8006a70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a74:	f84c 3b04 	str.w	r3, [ip], #4
 8006a78:	d2db      	bcs.n	8006a32 <quorem+0x42>
 8006a7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a7e:	b92b      	cbnz	r3, 8006a8c <quorem+0x9c>
 8006a80:	9b01      	ldr	r3, [sp, #4]
 8006a82:	3b04      	subs	r3, #4
 8006a84:	429d      	cmp	r5, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	d32d      	bcc.n	8006ae6 <quorem+0xf6>
 8006a8a:	613c      	str	r4, [r7, #16]
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	f001 f9df 	bl	8007e50 <__mcmp>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	db23      	blt.n	8006ade <quorem+0xee>
 8006a96:	4629      	mov	r1, r5
 8006a98:	2000      	movs	r0, #0
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006aa0:	f8d1 c000 	ldr.w	ip, [r1]
 8006aa4:	b293      	uxth	r3, r2
 8006aa6:	1ac3      	subs	r3, r0, r3
 8006aa8:	0c12      	lsrs	r2, r2, #16
 8006aaa:	fa1f f08c 	uxth.w	r0, ip
 8006aae:	4403      	add	r3, r0
 8006ab0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006abe:	45c1      	cmp	r9, r8
 8006ac0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ac4:	f841 3b04 	str.w	r3, [r1], #4
 8006ac8:	d2e8      	bcs.n	8006a9c <quorem+0xac>
 8006aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ad2:	b922      	cbnz	r2, 8006ade <quorem+0xee>
 8006ad4:	3b04      	subs	r3, #4
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	d30a      	bcc.n	8006af2 <quorem+0x102>
 8006adc:	613c      	str	r4, [r7, #16]
 8006ade:	4630      	mov	r0, r6
 8006ae0:	b003      	add	sp, #12
 8006ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	3b04      	subs	r3, #4
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	d1cd      	bne.n	8006a8a <quorem+0x9a>
 8006aee:	3c01      	subs	r4, #1
 8006af0:	e7c8      	b.n	8006a84 <quorem+0x94>
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	3b04      	subs	r3, #4
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	d1f0      	bne.n	8006adc <quorem+0xec>
 8006afa:	3c01      	subs	r4, #1
 8006afc:	e7eb      	b.n	8006ad6 <quorem+0xe6>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e7ee      	b.n	8006ae0 <quorem+0xf0>
 8006b02:	0000      	movs	r0, r0
 8006b04:	0000      	movs	r0, r0
	...

08006b08 <_dtoa_r>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	461f      	mov	r7, r3
 8006b10:	69c4      	ldr	r4, [r0, #28]
 8006b12:	b099      	sub	sp, #100	; 0x64
 8006b14:	4605      	mov	r5, r0
 8006b16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006b1e:	b974      	cbnz	r4, 8006b3e <_dtoa_r+0x36>
 8006b20:	2010      	movs	r0, #16
 8006b22:	f000 fe1d 	bl	8007760 <malloc>
 8006b26:	4602      	mov	r2, r0
 8006b28:	61e8      	str	r0, [r5, #28]
 8006b2a:	b920      	cbnz	r0, 8006b36 <_dtoa_r+0x2e>
 8006b2c:	21ef      	movs	r1, #239	; 0xef
 8006b2e:	4bac      	ldr	r3, [pc, #688]	; (8006de0 <_dtoa_r+0x2d8>)
 8006b30:	48ac      	ldr	r0, [pc, #688]	; (8006de4 <_dtoa_r+0x2dc>)
 8006b32:	f002 fc55 	bl	80093e0 <__assert_func>
 8006b36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b3a:	6004      	str	r4, [r0, #0]
 8006b3c:	60c4      	str	r4, [r0, #12]
 8006b3e:	69eb      	ldr	r3, [r5, #28]
 8006b40:	6819      	ldr	r1, [r3, #0]
 8006b42:	b151      	cbz	r1, 8006b5a <_dtoa_r+0x52>
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	2301      	movs	r3, #1
 8006b48:	4093      	lsls	r3, r2
 8006b4a:	604a      	str	r2, [r1, #4]
 8006b4c:	608b      	str	r3, [r1, #8]
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 fefa 	bl	8007948 <_Bfree>
 8006b54:	2200      	movs	r2, #0
 8006b56:	69eb      	ldr	r3, [r5, #28]
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	1e3b      	subs	r3, r7, #0
 8006b5c:	bfaf      	iteee	ge
 8006b5e:	2300      	movge	r3, #0
 8006b60:	2201      	movlt	r2, #1
 8006b62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b66:	9305      	strlt	r3, [sp, #20]
 8006b68:	bfa8      	it	ge
 8006b6a:	f8c8 3000 	strge.w	r3, [r8]
 8006b6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006b72:	4b9d      	ldr	r3, [pc, #628]	; (8006de8 <_dtoa_r+0x2e0>)
 8006b74:	bfb8      	it	lt
 8006b76:	f8c8 2000 	strlt.w	r2, [r8]
 8006b7a:	ea33 0309 	bics.w	r3, r3, r9
 8006b7e:	d119      	bne.n	8006bb4 <_dtoa_r+0xac>
 8006b80:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b8c:	4333      	orrs	r3, r6
 8006b8e:	f000 8589 	beq.w	80076a4 <_dtoa_r+0xb9c>
 8006b92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b94:	b953      	cbnz	r3, 8006bac <_dtoa_r+0xa4>
 8006b96:	4b95      	ldr	r3, [pc, #596]	; (8006dec <_dtoa_r+0x2e4>)
 8006b98:	e023      	b.n	8006be2 <_dtoa_r+0xda>
 8006b9a:	4b95      	ldr	r3, [pc, #596]	; (8006df0 <_dtoa_r+0x2e8>)
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	9803      	ldr	r0, [sp, #12]
 8006ba6:	b019      	add	sp, #100	; 0x64
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	4b8f      	ldr	r3, [pc, #572]	; (8006dec <_dtoa_r+0x2e4>)
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	3303      	adds	r3, #3
 8006bb2:	e7f5      	b.n	8006ba0 <_dtoa_r+0x98>
 8006bb4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006bb8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006bbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f7f9 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc8:	4680      	mov	r8, r0
 8006bca:	b160      	cbz	r0, 8006be6 <_dtoa_r+0xde>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8562 	beq.w	800769e <_dtoa_r+0xb96>
 8006bda:	4b86      	ldr	r3, [pc, #536]	; (8006df4 <_dtoa_r+0x2ec>)
 8006bdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	9303      	str	r3, [sp, #12]
 8006be4:	e7de      	b.n	8006ba4 <_dtoa_r+0x9c>
 8006be6:	ab16      	add	r3, sp, #88	; 0x58
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	ab17      	add	r3, sp, #92	; 0x5c
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4628      	mov	r0, r5
 8006bf0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006bf4:	f001 fa3c 	bl	8008070 <__d2b>
 8006bf8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006bfc:	4682      	mov	sl, r0
 8006bfe:	2c00      	cmp	r4, #0
 8006c00:	d07e      	beq.n	8006d00 <_dtoa_r+0x1f8>
 8006c02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4b75      	ldr	r3, [pc, #468]	; (8006df8 <_dtoa_r+0x2f0>)
 8006c22:	f7f9 faa1 	bl	8000168 <__aeabi_dsub>
 8006c26:	a368      	add	r3, pc, #416	; (adr r3, 8006dc8 <_dtoa_r+0x2c0>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7f9 fc54 	bl	80004d8 <__aeabi_dmul>
 8006c30:	a367      	add	r3, pc, #412	; (adr r3, 8006dd0 <_dtoa_r+0x2c8>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 fa99 	bl	800016c <__adddf3>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	460f      	mov	r7, r1
 8006c40:	f7f9 fbe0 	bl	8000404 <__aeabi_i2d>
 8006c44:	a364      	add	r3, pc, #400	; (adr r3, 8006dd8 <_dtoa_r+0x2d0>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 fc45 	bl	80004d8 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7f9 fa89 	bl	800016c <__adddf3>
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	460f      	mov	r7, r1
 8006c5e:	f7f9 feeb 	bl	8000a38 <__aeabi_d2iz>
 8006c62:	2200      	movs	r2, #0
 8006c64:	4683      	mov	fp, r0
 8006c66:	2300      	movs	r3, #0
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 fea6 	bl	80009bc <__aeabi_dcmplt>
 8006c70:	b148      	cbz	r0, 8006c86 <_dtoa_r+0x17e>
 8006c72:	4658      	mov	r0, fp
 8006c74:	f7f9 fbc6 	bl	8000404 <__aeabi_i2d>
 8006c78:	4632      	mov	r2, r6
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	f7f9 fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8006c80:	b908      	cbnz	r0, 8006c86 <_dtoa_r+0x17e>
 8006c82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c86:	f1bb 0f16 	cmp.w	fp, #22
 8006c8a:	d857      	bhi.n	8006d3c <_dtoa_r+0x234>
 8006c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c90:	4b5a      	ldr	r3, [pc, #360]	; (8006dfc <_dtoa_r+0x2f4>)
 8006c92:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 fe8f 	bl	80009bc <__aeabi_dcmplt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d04e      	beq.n	8006d40 <_dtoa_r+0x238>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006caa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cac:	1b1b      	subs	r3, r3, r4
 8006cae:	1e5a      	subs	r2, r3, #1
 8006cb0:	bf46      	itte	mi
 8006cb2:	f1c3 0901 	rsbmi	r9, r3, #1
 8006cb6:	2300      	movmi	r3, #0
 8006cb8:	f04f 0900 	movpl.w	r9, #0
 8006cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cbe:	bf48      	it	mi
 8006cc0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006cc2:	f1bb 0f00 	cmp.w	fp, #0
 8006cc6:	db3d      	blt.n	8006d44 <_dtoa_r+0x23c>
 8006cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006cce:	445b      	add	r3, fp
 8006cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cd8:	2b09      	cmp	r3, #9
 8006cda:	d867      	bhi.n	8006dac <_dtoa_r+0x2a4>
 8006cdc:	2b05      	cmp	r3, #5
 8006cde:	bfc4      	itt	gt
 8006ce0:	3b04      	subgt	r3, #4
 8006ce2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006ce4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ce6:	bfc8      	it	gt
 8006ce8:	2400      	movgt	r4, #0
 8006cea:	f1a3 0302 	sub.w	r3, r3, #2
 8006cee:	bfd8      	it	le
 8006cf0:	2401      	movle	r4, #1
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	f200 8086 	bhi.w	8006e04 <_dtoa_r+0x2fc>
 8006cf8:	e8df f003 	tbb	[pc, r3]
 8006cfc:	5637392c 	.word	0x5637392c
 8006d00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d04:	441c      	add	r4, r3
 8006d06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	bfc1      	itttt	gt
 8006d0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d12:	fa09 f903 	lslgt.w	r9, r9, r3
 8006d16:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006d1a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d1e:	bfd6      	itet	le
 8006d20:	f1c3 0320 	rsble	r3, r3, #32
 8006d24:	ea49 0003 	orrgt.w	r0, r9, r3
 8006d28:	fa06 f003 	lslle.w	r0, r6, r3
 8006d2c:	f7f9 fb5a 	bl	80003e4 <__aeabi_ui2d>
 8006d30:	2201      	movs	r2, #1
 8006d32:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d36:	3c01      	subs	r4, #1
 8006d38:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d3a:	e76f      	b.n	8006c1c <_dtoa_r+0x114>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e7b3      	b.n	8006ca8 <_dtoa_r+0x1a0>
 8006d40:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d42:	e7b2      	b.n	8006caa <_dtoa_r+0x1a2>
 8006d44:	f1cb 0300 	rsb	r3, fp, #0
 8006d48:	930a      	str	r3, [sp, #40]	; 0x28
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	eba9 090b 	sub.w	r9, r9, fp
 8006d50:	930e      	str	r3, [sp, #56]	; 0x38
 8006d52:	e7c0      	b.n	8006cd6 <_dtoa_r+0x1ce>
 8006d54:	2300      	movs	r3, #0
 8006d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	dc55      	bgt.n	8006e0a <_dtoa_r+0x302>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	461a      	mov	r2, r3
 8006d62:	9306      	str	r3, [sp, #24]
 8006d64:	9308      	str	r3, [sp, #32]
 8006d66:	9223      	str	r2, [sp, #140]	; 0x8c
 8006d68:	e00b      	b.n	8006d82 <_dtoa_r+0x27a>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e7f3      	b.n	8006d56 <_dtoa_r+0x24e>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d74:	445b      	add	r3, fp
 8006d76:	9306      	str	r3, [sp, #24]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	9308      	str	r3, [sp, #32]
 8006d7e:	bfb8      	it	lt
 8006d80:	2301      	movlt	r3, #1
 8006d82:	2100      	movs	r1, #0
 8006d84:	2204      	movs	r2, #4
 8006d86:	69e8      	ldr	r0, [r5, #28]
 8006d88:	f102 0614 	add.w	r6, r2, #20
 8006d8c:	429e      	cmp	r6, r3
 8006d8e:	d940      	bls.n	8006e12 <_dtoa_r+0x30a>
 8006d90:	6041      	str	r1, [r0, #4]
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 fd98 	bl	80078c8 <_Balloc>
 8006d98:	9003      	str	r0, [sp, #12]
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d13c      	bne.n	8006e18 <_dtoa_r+0x310>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	f240 11af 	movw	r1, #431	; 0x1af
 8006da4:	4b16      	ldr	r3, [pc, #88]	; (8006e00 <_dtoa_r+0x2f8>)
 8006da6:	e6c3      	b.n	8006b30 <_dtoa_r+0x28>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7e1      	b.n	8006d70 <_dtoa_r+0x268>
 8006dac:	2401      	movs	r4, #1
 8006dae:	2300      	movs	r3, #0
 8006db0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006db2:	9322      	str	r3, [sp, #136]	; 0x88
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295
 8006db8:	2200      	movs	r2, #0
 8006dba:	9306      	str	r3, [sp, #24]
 8006dbc:	9308      	str	r3, [sp, #32]
 8006dbe:	2312      	movs	r3, #18
 8006dc0:	e7d1      	b.n	8006d66 <_dtoa_r+0x25e>
 8006dc2:	bf00      	nop
 8006dc4:	f3af 8000 	nop.w
 8006dc8:	636f4361 	.word	0x636f4361
 8006dcc:	3fd287a7 	.word	0x3fd287a7
 8006dd0:	8b60c8b3 	.word	0x8b60c8b3
 8006dd4:	3fc68a28 	.word	0x3fc68a28
 8006dd8:	509f79fb 	.word	0x509f79fb
 8006ddc:	3fd34413 	.word	0x3fd34413
 8006de0:	0800a874 	.word	0x0800a874
 8006de4:	0800a88b 	.word	0x0800a88b
 8006de8:	7ff00000 	.word	0x7ff00000
 8006dec:	0800a870 	.word	0x0800a870
 8006df0:	0800a867 	.word	0x0800a867
 8006df4:	0800a83f 	.word	0x0800a83f
 8006df8:	3ff80000 	.word	0x3ff80000
 8006dfc:	0800a978 	.word	0x0800a978
 8006e00:	0800a8e3 	.word	0x0800a8e3
 8006e04:	2301      	movs	r3, #1
 8006e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e08:	e7d4      	b.n	8006db4 <_dtoa_r+0x2ac>
 8006e0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e0c:	9306      	str	r3, [sp, #24]
 8006e0e:	9308      	str	r3, [sp, #32]
 8006e10:	e7b7      	b.n	8006d82 <_dtoa_r+0x27a>
 8006e12:	3101      	adds	r1, #1
 8006e14:	0052      	lsls	r2, r2, #1
 8006e16:	e7b7      	b.n	8006d88 <_dtoa_r+0x280>
 8006e18:	69eb      	ldr	r3, [r5, #28]
 8006e1a:	9a03      	ldr	r2, [sp, #12]
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	9b08      	ldr	r3, [sp, #32]
 8006e20:	2b0e      	cmp	r3, #14
 8006e22:	f200 80a8 	bhi.w	8006f76 <_dtoa_r+0x46e>
 8006e26:	2c00      	cmp	r4, #0
 8006e28:	f000 80a5 	beq.w	8006f76 <_dtoa_r+0x46e>
 8006e2c:	f1bb 0f00 	cmp.w	fp, #0
 8006e30:	dd34      	ble.n	8006e9c <_dtoa_r+0x394>
 8006e32:	4b9a      	ldr	r3, [pc, #616]	; (800709c <_dtoa_r+0x594>)
 8006e34:	f00b 020f 	and.w	r2, fp, #15
 8006e38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e48:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006e4c:	d016      	beq.n	8006e7c <_dtoa_r+0x374>
 8006e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e52:	4b93      	ldr	r3, [pc, #588]	; (80070a0 <_dtoa_r+0x598>)
 8006e54:	2703      	movs	r7, #3
 8006e56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e5a:	f7f9 fc67 	bl	800072c <__aeabi_ddiv>
 8006e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e62:	f004 040f 	and.w	r4, r4, #15
 8006e66:	4e8e      	ldr	r6, [pc, #568]	; (80070a0 <_dtoa_r+0x598>)
 8006e68:	b954      	cbnz	r4, 8006e80 <_dtoa_r+0x378>
 8006e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e72:	f7f9 fc5b 	bl	800072c <__aeabi_ddiv>
 8006e76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e7a:	e029      	b.n	8006ed0 <_dtoa_r+0x3c8>
 8006e7c:	2702      	movs	r7, #2
 8006e7e:	e7f2      	b.n	8006e66 <_dtoa_r+0x35e>
 8006e80:	07e1      	lsls	r1, r4, #31
 8006e82:	d508      	bpl.n	8006e96 <_dtoa_r+0x38e>
 8006e84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e8c:	f7f9 fb24 	bl	80004d8 <__aeabi_dmul>
 8006e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e94:	3701      	adds	r7, #1
 8006e96:	1064      	asrs	r4, r4, #1
 8006e98:	3608      	adds	r6, #8
 8006e9a:	e7e5      	b.n	8006e68 <_dtoa_r+0x360>
 8006e9c:	f000 80a5 	beq.w	8006fea <_dtoa_r+0x4e2>
 8006ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ea4:	f1cb 0400 	rsb	r4, fp, #0
 8006ea8:	4b7c      	ldr	r3, [pc, #496]	; (800709c <_dtoa_r+0x594>)
 8006eaa:	f004 020f 	and.w	r2, r4, #15
 8006eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f7f9 fb0f 	bl	80004d8 <__aeabi_dmul>
 8006eba:	2702      	movs	r7, #2
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ec2:	4e77      	ldr	r6, [pc, #476]	; (80070a0 <_dtoa_r+0x598>)
 8006ec4:	1124      	asrs	r4, r4, #4
 8006ec6:	2c00      	cmp	r4, #0
 8006ec8:	f040 8084 	bne.w	8006fd4 <_dtoa_r+0x4cc>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1d2      	bne.n	8006e76 <_dtoa_r+0x36e>
 8006ed0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ed4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8087 	beq.w	8006fee <_dtoa_r+0x4e6>
 8006ee0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4b6f      	ldr	r3, [pc, #444]	; (80070a4 <_dtoa_r+0x59c>)
 8006ee8:	f7f9 fd68 	bl	80009bc <__aeabi_dcmplt>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d07e      	beq.n	8006fee <_dtoa_r+0x4e6>
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d07b      	beq.n	8006fee <_dtoa_r+0x4e6>
 8006ef6:	9b06      	ldr	r3, [sp, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dd38      	ble.n	8006f6e <_dtoa_r+0x466>
 8006efc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f00:	2200      	movs	r2, #0
 8006f02:	4b69      	ldr	r3, [pc, #420]	; (80070a8 <_dtoa_r+0x5a0>)
 8006f04:	f7f9 fae8 	bl	80004d8 <__aeabi_dmul>
 8006f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f0c:	9c06      	ldr	r4, [sp, #24]
 8006f0e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006f12:	3701      	adds	r7, #1
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7f9 fa75 	bl	8000404 <__aeabi_i2d>
 8006f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f1e:	f7f9 fadb 	bl	80004d8 <__aeabi_dmul>
 8006f22:	2200      	movs	r2, #0
 8006f24:	4b61      	ldr	r3, [pc, #388]	; (80070ac <_dtoa_r+0x5a4>)
 8006f26:	f7f9 f921 	bl	800016c <__adddf3>
 8006f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f32:	9611      	str	r6, [sp, #68]	; 0x44
 8006f34:	2c00      	cmp	r4, #0
 8006f36:	d15d      	bne.n	8006ff4 <_dtoa_r+0x4ec>
 8006f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4b5c      	ldr	r3, [pc, #368]	; (80070b0 <_dtoa_r+0x5a8>)
 8006f40:	f7f9 f912 	bl	8000168 <__aeabi_dsub>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f4c:	4633      	mov	r3, r6
 8006f4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f50:	f7f9 fd52 	bl	80009f8 <__aeabi_dcmpgt>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	f040 8295 	bne.w	8007484 <_dtoa_r+0x97c>
 8006f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f64:	f7f9 fd2a 	bl	80009bc <__aeabi_dcmplt>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f040 8289 	bne.w	8007480 <_dtoa_r+0x978>
 8006f6e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006f72:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f2c0 8151 	blt.w	8007220 <_dtoa_r+0x718>
 8006f7e:	f1bb 0f0e 	cmp.w	fp, #14
 8006f82:	f300 814d 	bgt.w	8007220 <_dtoa_r+0x718>
 8006f86:	4b45      	ldr	r3, [pc, #276]	; (800709c <_dtoa_r+0x594>)
 8006f88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f90:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006f94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f280 80da 	bge.w	8007150 <_dtoa_r+0x648>
 8006f9c:	9b08      	ldr	r3, [sp, #32]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f300 80d6 	bgt.w	8007150 <_dtoa_r+0x648>
 8006fa4:	f040 826b 	bne.w	800747e <_dtoa_r+0x976>
 8006fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fac:	2200      	movs	r2, #0
 8006fae:	4b40      	ldr	r3, [pc, #256]	; (80070b0 <_dtoa_r+0x5a8>)
 8006fb0:	f7f9 fa92 	bl	80004d8 <__aeabi_dmul>
 8006fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb8:	f7f9 fd14 	bl	80009e4 <__aeabi_dcmpge>
 8006fbc:	9c08      	ldr	r4, [sp, #32]
 8006fbe:	4626      	mov	r6, r4
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	f040 8241 	bne.w	8007448 <_dtoa_r+0x940>
 8006fc6:	2331      	movs	r3, #49	; 0x31
 8006fc8:	9f03      	ldr	r7, [sp, #12]
 8006fca:	f10b 0b01 	add.w	fp, fp, #1
 8006fce:	f807 3b01 	strb.w	r3, [r7], #1
 8006fd2:	e23d      	b.n	8007450 <_dtoa_r+0x948>
 8006fd4:	07e2      	lsls	r2, r4, #31
 8006fd6:	d505      	bpl.n	8006fe4 <_dtoa_r+0x4dc>
 8006fd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fdc:	f7f9 fa7c 	bl	80004d8 <__aeabi_dmul>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	3701      	adds	r7, #1
 8006fe4:	1064      	asrs	r4, r4, #1
 8006fe6:	3608      	adds	r6, #8
 8006fe8:	e76d      	b.n	8006ec6 <_dtoa_r+0x3be>
 8006fea:	2702      	movs	r7, #2
 8006fec:	e770      	b.n	8006ed0 <_dtoa_r+0x3c8>
 8006fee:	46d8      	mov	r8, fp
 8006ff0:	9c08      	ldr	r4, [sp, #32]
 8006ff2:	e78f      	b.n	8006f14 <_dtoa_r+0x40c>
 8006ff4:	9903      	ldr	r1, [sp, #12]
 8006ff6:	4b29      	ldr	r3, [pc, #164]	; (800709c <_dtoa_r+0x594>)
 8006ff8:	4421      	add	r1, r4
 8006ffa:	9112      	str	r1, [sp, #72]	; 0x48
 8006ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ffe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007002:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007006:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800700a:	2900      	cmp	r1, #0
 800700c:	d054      	beq.n	80070b8 <_dtoa_r+0x5b0>
 800700e:	2000      	movs	r0, #0
 8007010:	4928      	ldr	r1, [pc, #160]	; (80070b4 <_dtoa_r+0x5ac>)
 8007012:	f7f9 fb8b 	bl	800072c <__aeabi_ddiv>
 8007016:	463b      	mov	r3, r7
 8007018:	4632      	mov	r2, r6
 800701a:	f7f9 f8a5 	bl	8000168 <__aeabi_dsub>
 800701e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007022:	9f03      	ldr	r7, [sp, #12]
 8007024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007028:	f7f9 fd06 	bl	8000a38 <__aeabi_d2iz>
 800702c:	4604      	mov	r4, r0
 800702e:	f7f9 f9e9 	bl	8000404 <__aeabi_i2d>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800703a:	f7f9 f895 	bl	8000168 <__aeabi_dsub>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	3430      	adds	r4, #48	; 0x30
 8007044:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800704c:	f807 4b01 	strb.w	r4, [r7], #1
 8007050:	f7f9 fcb4 	bl	80009bc <__aeabi_dcmplt>
 8007054:	2800      	cmp	r0, #0
 8007056:	d173      	bne.n	8007140 <_dtoa_r+0x638>
 8007058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800705c:	2000      	movs	r0, #0
 800705e:	4911      	ldr	r1, [pc, #68]	; (80070a4 <_dtoa_r+0x59c>)
 8007060:	f7f9 f882 	bl	8000168 <__aeabi_dsub>
 8007064:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007068:	f7f9 fca8 	bl	80009bc <__aeabi_dcmplt>
 800706c:	2800      	cmp	r0, #0
 800706e:	f040 80b6 	bne.w	80071de <_dtoa_r+0x6d6>
 8007072:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007074:	429f      	cmp	r7, r3
 8007076:	f43f af7a 	beq.w	8006f6e <_dtoa_r+0x466>
 800707a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800707e:	2200      	movs	r2, #0
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <_dtoa_r+0x5a0>)
 8007082:	f7f9 fa29 	bl	80004d8 <__aeabi_dmul>
 8007086:	2200      	movs	r2, #0
 8007088:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800708c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <_dtoa_r+0x5a0>)
 8007092:	f7f9 fa21 	bl	80004d8 <__aeabi_dmul>
 8007096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800709a:	e7c3      	b.n	8007024 <_dtoa_r+0x51c>
 800709c:	0800a978 	.word	0x0800a978
 80070a0:	0800a950 	.word	0x0800a950
 80070a4:	3ff00000 	.word	0x3ff00000
 80070a8:	40240000 	.word	0x40240000
 80070ac:	401c0000 	.word	0x401c0000
 80070b0:	40140000 	.word	0x40140000
 80070b4:	3fe00000 	.word	0x3fe00000
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 fa0c 	bl	80004d8 <__aeabi_dmul>
 80070c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070c6:	9c03      	ldr	r4, [sp, #12]
 80070c8:	9314      	str	r3, [sp, #80]	; 0x50
 80070ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070ce:	f7f9 fcb3 	bl	8000a38 <__aeabi_d2iz>
 80070d2:	9015      	str	r0, [sp, #84]	; 0x54
 80070d4:	f7f9 f996 	bl	8000404 <__aeabi_i2d>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070e0:	f7f9 f842 	bl	8000168 <__aeabi_dsub>
 80070e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070e6:	4606      	mov	r6, r0
 80070e8:	3330      	adds	r3, #48	; 0x30
 80070ea:	f804 3b01 	strb.w	r3, [r4], #1
 80070ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070f0:	460f      	mov	r7, r1
 80070f2:	429c      	cmp	r4, r3
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	d124      	bne.n	8007144 <_dtoa_r+0x63c>
 80070fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070fe:	4baf      	ldr	r3, [pc, #700]	; (80073bc <_dtoa_r+0x8b4>)
 8007100:	f7f9 f834 	bl	800016c <__adddf3>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 fc74 	bl	80009f8 <__aeabi_dcmpgt>
 8007110:	2800      	cmp	r0, #0
 8007112:	d163      	bne.n	80071dc <_dtoa_r+0x6d4>
 8007114:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007118:	2000      	movs	r0, #0
 800711a:	49a8      	ldr	r1, [pc, #672]	; (80073bc <_dtoa_r+0x8b4>)
 800711c:	f7f9 f824 	bl	8000168 <__aeabi_dsub>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4630      	mov	r0, r6
 8007126:	4639      	mov	r1, r7
 8007128:	f7f9 fc48 	bl	80009bc <__aeabi_dcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	f43f af1e 	beq.w	8006f6e <_dtoa_r+0x466>
 8007132:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007134:	1e7b      	subs	r3, r7, #1
 8007136:	9314      	str	r3, [sp, #80]	; 0x50
 8007138:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800713c:	2b30      	cmp	r3, #48	; 0x30
 800713e:	d0f8      	beq.n	8007132 <_dtoa_r+0x62a>
 8007140:	46c3      	mov	fp, r8
 8007142:	e03b      	b.n	80071bc <_dtoa_r+0x6b4>
 8007144:	4b9e      	ldr	r3, [pc, #632]	; (80073c0 <_dtoa_r+0x8b8>)
 8007146:	f7f9 f9c7 	bl	80004d8 <__aeabi_dmul>
 800714a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800714e:	e7bc      	b.n	80070ca <_dtoa_r+0x5c2>
 8007150:	9f03      	ldr	r7, [sp, #12]
 8007152:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800715a:	4640      	mov	r0, r8
 800715c:	4649      	mov	r1, r9
 800715e:	f7f9 fae5 	bl	800072c <__aeabi_ddiv>
 8007162:	f7f9 fc69 	bl	8000a38 <__aeabi_d2iz>
 8007166:	4604      	mov	r4, r0
 8007168:	f7f9 f94c 	bl	8000404 <__aeabi_i2d>
 800716c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007170:	f7f9 f9b2 	bl	80004d8 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f8 fff4 	bl	8000168 <__aeabi_dsub>
 8007180:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007184:	f807 6b01 	strb.w	r6, [r7], #1
 8007188:	9e03      	ldr	r6, [sp, #12]
 800718a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800718e:	1bbe      	subs	r6, r7, r6
 8007190:	45b4      	cmp	ip, r6
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	d136      	bne.n	8007206 <_dtoa_r+0x6fe>
 8007198:	f7f8 ffe8 	bl	800016c <__adddf3>
 800719c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071a0:	4680      	mov	r8, r0
 80071a2:	4689      	mov	r9, r1
 80071a4:	f7f9 fc28 	bl	80009f8 <__aeabi_dcmpgt>
 80071a8:	bb58      	cbnz	r0, 8007202 <_dtoa_r+0x6fa>
 80071aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	f7f9 fbf9 	bl	80009a8 <__aeabi_dcmpeq>
 80071b6:	b108      	cbz	r0, 80071bc <_dtoa_r+0x6b4>
 80071b8:	07e3      	lsls	r3, r4, #31
 80071ba:	d422      	bmi.n	8007202 <_dtoa_r+0x6fa>
 80071bc:	4651      	mov	r1, sl
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 fbc2 	bl	8007948 <_Bfree>
 80071c4:	2300      	movs	r3, #0
 80071c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071c8:	703b      	strb	r3, [r7, #0]
 80071ca:	f10b 0301 	add.w	r3, fp, #1
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f43f ace6 	beq.w	8006ba4 <_dtoa_r+0x9c>
 80071d8:	601f      	str	r7, [r3, #0]
 80071da:	e4e3      	b.n	8006ba4 <_dtoa_r+0x9c>
 80071dc:	4627      	mov	r7, r4
 80071de:	463b      	mov	r3, r7
 80071e0:	461f      	mov	r7, r3
 80071e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071e6:	2a39      	cmp	r2, #57	; 0x39
 80071e8:	d107      	bne.n	80071fa <_dtoa_r+0x6f2>
 80071ea:	9a03      	ldr	r2, [sp, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d1f7      	bne.n	80071e0 <_dtoa_r+0x6d8>
 80071f0:	2230      	movs	r2, #48	; 0x30
 80071f2:	9903      	ldr	r1, [sp, #12]
 80071f4:	f108 0801 	add.w	r8, r8, #1
 80071f8:	700a      	strb	r2, [r1, #0]
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	3201      	adds	r2, #1
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	e79e      	b.n	8007140 <_dtoa_r+0x638>
 8007202:	46d8      	mov	r8, fp
 8007204:	e7eb      	b.n	80071de <_dtoa_r+0x6d6>
 8007206:	2200      	movs	r2, #0
 8007208:	4b6d      	ldr	r3, [pc, #436]	; (80073c0 <_dtoa_r+0x8b8>)
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	2200      	movs	r2, #0
 8007210:	2300      	movs	r3, #0
 8007212:	4680      	mov	r8, r0
 8007214:	4689      	mov	r9, r1
 8007216:	f7f9 fbc7 	bl	80009a8 <__aeabi_dcmpeq>
 800721a:	2800      	cmp	r0, #0
 800721c:	d09b      	beq.n	8007156 <_dtoa_r+0x64e>
 800721e:	e7cd      	b.n	80071bc <_dtoa_r+0x6b4>
 8007220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007222:	2a00      	cmp	r2, #0
 8007224:	f000 80c4 	beq.w	80073b0 <_dtoa_r+0x8a8>
 8007228:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800722a:	2a01      	cmp	r2, #1
 800722c:	f300 80a8 	bgt.w	8007380 <_dtoa_r+0x878>
 8007230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007232:	2a00      	cmp	r2, #0
 8007234:	f000 80a0 	beq.w	8007378 <_dtoa_r+0x870>
 8007238:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800723c:	464f      	mov	r7, r9
 800723e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007242:	2101      	movs	r1, #1
 8007244:	441a      	add	r2, r3
 8007246:	4628      	mov	r0, r5
 8007248:	4499      	add	r9, r3
 800724a:	9209      	str	r2, [sp, #36]	; 0x24
 800724c:	f000 fc7c 	bl	8007b48 <__i2b>
 8007250:	4606      	mov	r6, r0
 8007252:	b15f      	cbz	r7, 800726c <_dtoa_r+0x764>
 8007254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	dd08      	ble.n	800726c <_dtoa_r+0x764>
 800725a:	42bb      	cmp	r3, r7
 800725c:	bfa8      	it	ge
 800725e:	463b      	movge	r3, r7
 8007260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007262:	eba9 0903 	sub.w	r9, r9, r3
 8007266:	1aff      	subs	r7, r7, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	9309      	str	r3, [sp, #36]	; 0x24
 800726c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726e:	b1f3      	cbz	r3, 80072ae <_dtoa_r+0x7a6>
 8007270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80a0 	beq.w	80073b8 <_dtoa_r+0x8b0>
 8007278:	2c00      	cmp	r4, #0
 800727a:	dd10      	ble.n	800729e <_dtoa_r+0x796>
 800727c:	4631      	mov	r1, r6
 800727e:	4622      	mov	r2, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 fd1f 	bl	8007cc4 <__pow5mult>
 8007286:	4652      	mov	r2, sl
 8007288:	4601      	mov	r1, r0
 800728a:	4606      	mov	r6, r0
 800728c:	4628      	mov	r0, r5
 800728e:	f000 fc71 	bl	8007b74 <__multiply>
 8007292:	4680      	mov	r8, r0
 8007294:	4651      	mov	r1, sl
 8007296:	4628      	mov	r0, r5
 8007298:	f000 fb56 	bl	8007948 <_Bfree>
 800729c:	46c2      	mov	sl, r8
 800729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a0:	1b1a      	subs	r2, r3, r4
 80072a2:	d004      	beq.n	80072ae <_dtoa_r+0x7a6>
 80072a4:	4651      	mov	r1, sl
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fd0c 	bl	8007cc4 <__pow5mult>
 80072ac:	4682      	mov	sl, r0
 80072ae:	2101      	movs	r1, #1
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 fc49 	bl	8007b48 <__i2b>
 80072b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072b8:	4604      	mov	r4, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f340 8082 	ble.w	80073c4 <_dtoa_r+0x8bc>
 80072c0:	461a      	mov	r2, r3
 80072c2:	4601      	mov	r1, r0
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 fcfd 	bl	8007cc4 <__pow5mult>
 80072ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072cc:	4604      	mov	r4, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	dd7b      	ble.n	80073ca <_dtoa_r+0x8c2>
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072dc:	6918      	ldr	r0, [r3, #16]
 80072de:	f000 fbe5 	bl	8007aac <__hi0bits>
 80072e2:	f1c0 0020 	rsb	r0, r0, #32
 80072e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e8:	4418      	add	r0, r3
 80072ea:	f010 001f 	ands.w	r0, r0, #31
 80072ee:	f000 8092 	beq.w	8007416 <_dtoa_r+0x90e>
 80072f2:	f1c0 0320 	rsb	r3, r0, #32
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	f340 8085 	ble.w	8007406 <_dtoa_r+0x8fe>
 80072fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fe:	f1c0 001c 	rsb	r0, r0, #28
 8007302:	4403      	add	r3, r0
 8007304:	4481      	add	r9, r0
 8007306:	4407      	add	r7, r0
 8007308:	9309      	str	r3, [sp, #36]	; 0x24
 800730a:	f1b9 0f00 	cmp.w	r9, #0
 800730e:	dd05      	ble.n	800731c <_dtoa_r+0x814>
 8007310:	4651      	mov	r1, sl
 8007312:	464a      	mov	r2, r9
 8007314:	4628      	mov	r0, r5
 8007316:	f000 fd2f 	bl	8007d78 <__lshift>
 800731a:	4682      	mov	sl, r0
 800731c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd05      	ble.n	800732e <_dtoa_r+0x826>
 8007322:	4621      	mov	r1, r4
 8007324:	461a      	mov	r2, r3
 8007326:	4628      	mov	r0, r5
 8007328:	f000 fd26 	bl	8007d78 <__lshift>
 800732c:	4604      	mov	r4, r0
 800732e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d072      	beq.n	800741a <_dtoa_r+0x912>
 8007334:	4621      	mov	r1, r4
 8007336:	4650      	mov	r0, sl
 8007338:	f000 fd8a 	bl	8007e50 <__mcmp>
 800733c:	2800      	cmp	r0, #0
 800733e:	da6c      	bge.n	800741a <_dtoa_r+0x912>
 8007340:	2300      	movs	r3, #0
 8007342:	4651      	mov	r1, sl
 8007344:	220a      	movs	r2, #10
 8007346:	4628      	mov	r0, r5
 8007348:	f000 fb20 	bl	800798c <__multadd>
 800734c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800734e:	4682      	mov	sl, r0
 8007350:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 81ac 	beq.w	80076b2 <_dtoa_r+0xbaa>
 800735a:	2300      	movs	r3, #0
 800735c:	4631      	mov	r1, r6
 800735e:	220a      	movs	r2, #10
 8007360:	4628      	mov	r0, r5
 8007362:	f000 fb13 	bl	800798c <__multadd>
 8007366:	9b06      	ldr	r3, [sp, #24]
 8007368:	4606      	mov	r6, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	f300 8093 	bgt.w	8007496 <_dtoa_r+0x98e>
 8007370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007372:	2b02      	cmp	r3, #2
 8007374:	dc59      	bgt.n	800742a <_dtoa_r+0x922>
 8007376:	e08e      	b.n	8007496 <_dtoa_r+0x98e>
 8007378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800737a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800737e:	e75d      	b.n	800723c <_dtoa_r+0x734>
 8007380:	9b08      	ldr	r3, [sp, #32]
 8007382:	1e5c      	subs	r4, r3, #1
 8007384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007386:	42a3      	cmp	r3, r4
 8007388:	bfbf      	itttt	lt
 800738a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800738c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800738e:	1ae3      	sublt	r3, r4, r3
 8007390:	18d2      	addlt	r2, r2, r3
 8007392:	bfa8      	it	ge
 8007394:	1b1c      	subge	r4, r3, r4
 8007396:	9b08      	ldr	r3, [sp, #32]
 8007398:	bfbe      	ittt	lt
 800739a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800739c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800739e:	2400      	movlt	r4, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bfb5      	itete	lt
 80073a4:	eba9 0703 	sublt.w	r7, r9, r3
 80073a8:	464f      	movge	r7, r9
 80073aa:	2300      	movlt	r3, #0
 80073ac:	9b08      	ldrge	r3, [sp, #32]
 80073ae:	e747      	b.n	8007240 <_dtoa_r+0x738>
 80073b0:	464f      	mov	r7, r9
 80073b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80073b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073b6:	e74c      	b.n	8007252 <_dtoa_r+0x74a>
 80073b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ba:	e773      	b.n	80072a4 <_dtoa_r+0x79c>
 80073bc:	3fe00000 	.word	0x3fe00000
 80073c0:	40240000 	.word	0x40240000
 80073c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	dc18      	bgt.n	80073fc <_dtoa_r+0x8f4>
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	b9b3      	cbnz	r3, 80073fc <_dtoa_r+0x8f4>
 80073ce:	9b05      	ldr	r3, [sp, #20]
 80073d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d4:	b993      	cbnz	r3, 80073fc <_dtoa_r+0x8f4>
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073dc:	0d1b      	lsrs	r3, r3, #20
 80073de:	051b      	lsls	r3, r3, #20
 80073e0:	b17b      	cbz	r3, 8007402 <_dtoa_r+0x8fa>
 80073e2:	f04f 0801 	mov.w	r8, #1
 80073e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e8:	f109 0901 	add.w	r9, r9, #1
 80073ec:	3301      	adds	r3, #1
 80073ee:	9309      	str	r3, [sp, #36]	; 0x24
 80073f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f47f af6f 	bne.w	80072d6 <_dtoa_r+0x7ce>
 80073f8:	2001      	movs	r0, #1
 80073fa:	e774      	b.n	80072e6 <_dtoa_r+0x7de>
 80073fc:	f04f 0800 	mov.w	r8, #0
 8007400:	e7f6      	b.n	80073f0 <_dtoa_r+0x8e8>
 8007402:	4698      	mov	r8, r3
 8007404:	e7f4      	b.n	80073f0 <_dtoa_r+0x8e8>
 8007406:	d080      	beq.n	800730a <_dtoa_r+0x802>
 8007408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800740a:	331c      	adds	r3, #28
 800740c:	441a      	add	r2, r3
 800740e:	4499      	add	r9, r3
 8007410:	441f      	add	r7, r3
 8007412:	9209      	str	r2, [sp, #36]	; 0x24
 8007414:	e779      	b.n	800730a <_dtoa_r+0x802>
 8007416:	4603      	mov	r3, r0
 8007418:	e7f6      	b.n	8007408 <_dtoa_r+0x900>
 800741a:	9b08      	ldr	r3, [sp, #32]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc34      	bgt.n	800748a <_dtoa_r+0x982>
 8007420:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007422:	2b02      	cmp	r3, #2
 8007424:	dd31      	ble.n	800748a <_dtoa_r+0x982>
 8007426:	9b08      	ldr	r3, [sp, #32]
 8007428:	9306      	str	r3, [sp, #24]
 800742a:	9b06      	ldr	r3, [sp, #24]
 800742c:	b963      	cbnz	r3, 8007448 <_dtoa_r+0x940>
 800742e:	4621      	mov	r1, r4
 8007430:	2205      	movs	r2, #5
 8007432:	4628      	mov	r0, r5
 8007434:	f000 faaa 	bl	800798c <__multadd>
 8007438:	4601      	mov	r1, r0
 800743a:	4604      	mov	r4, r0
 800743c:	4650      	mov	r0, sl
 800743e:	f000 fd07 	bl	8007e50 <__mcmp>
 8007442:	2800      	cmp	r0, #0
 8007444:	f73f adbf 	bgt.w	8006fc6 <_dtoa_r+0x4be>
 8007448:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800744a:	9f03      	ldr	r7, [sp, #12]
 800744c:	ea6f 0b03 	mvn.w	fp, r3
 8007450:	f04f 0800 	mov.w	r8, #0
 8007454:	4621      	mov	r1, r4
 8007456:	4628      	mov	r0, r5
 8007458:	f000 fa76 	bl	8007948 <_Bfree>
 800745c:	2e00      	cmp	r6, #0
 800745e:	f43f aead 	beq.w	80071bc <_dtoa_r+0x6b4>
 8007462:	f1b8 0f00 	cmp.w	r8, #0
 8007466:	d005      	beq.n	8007474 <_dtoa_r+0x96c>
 8007468:	45b0      	cmp	r8, r6
 800746a:	d003      	beq.n	8007474 <_dtoa_r+0x96c>
 800746c:	4641      	mov	r1, r8
 800746e:	4628      	mov	r0, r5
 8007470:	f000 fa6a 	bl	8007948 <_Bfree>
 8007474:	4631      	mov	r1, r6
 8007476:	4628      	mov	r0, r5
 8007478:	f000 fa66 	bl	8007948 <_Bfree>
 800747c:	e69e      	b.n	80071bc <_dtoa_r+0x6b4>
 800747e:	2400      	movs	r4, #0
 8007480:	4626      	mov	r6, r4
 8007482:	e7e1      	b.n	8007448 <_dtoa_r+0x940>
 8007484:	46c3      	mov	fp, r8
 8007486:	4626      	mov	r6, r4
 8007488:	e59d      	b.n	8006fc6 <_dtoa_r+0x4be>
 800748a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80c8 	beq.w	8007622 <_dtoa_r+0xb1a>
 8007492:	9b08      	ldr	r3, [sp, #32]
 8007494:	9306      	str	r3, [sp, #24]
 8007496:	2f00      	cmp	r7, #0
 8007498:	dd05      	ble.n	80074a6 <_dtoa_r+0x99e>
 800749a:	4631      	mov	r1, r6
 800749c:	463a      	mov	r2, r7
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 fc6a 	bl	8007d78 <__lshift>
 80074a4:	4606      	mov	r6, r0
 80074a6:	f1b8 0f00 	cmp.w	r8, #0
 80074aa:	d05b      	beq.n	8007564 <_dtoa_r+0xa5c>
 80074ac:	4628      	mov	r0, r5
 80074ae:	6871      	ldr	r1, [r6, #4]
 80074b0:	f000 fa0a 	bl	80078c8 <_Balloc>
 80074b4:	4607      	mov	r7, r0
 80074b6:	b928      	cbnz	r0, 80074c4 <_dtoa_r+0x9bc>
 80074b8:	4602      	mov	r2, r0
 80074ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80074be:	4b81      	ldr	r3, [pc, #516]	; (80076c4 <_dtoa_r+0xbbc>)
 80074c0:	f7ff bb36 	b.w	8006b30 <_dtoa_r+0x28>
 80074c4:	6932      	ldr	r2, [r6, #16]
 80074c6:	f106 010c 	add.w	r1, r6, #12
 80074ca:	3202      	adds	r2, #2
 80074cc:	0092      	lsls	r2, r2, #2
 80074ce:	300c      	adds	r0, #12
 80074d0:	f001 ff72 	bl	80093b8 <memcpy>
 80074d4:	2201      	movs	r2, #1
 80074d6:	4639      	mov	r1, r7
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 fc4d 	bl	8007d78 <__lshift>
 80074de:	46b0      	mov	r8, r6
 80074e0:	4606      	mov	r6, r0
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	9a03      	ldr	r2, [sp, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	9308      	str	r3, [sp, #32]
 80074ea:	9b06      	ldr	r3, [sp, #24]
 80074ec:	4413      	add	r3, r2
 80074ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f0:	9b04      	ldr	r3, [sp, #16]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	930a      	str	r3, [sp, #40]	; 0x28
 80074f8:	9b08      	ldr	r3, [sp, #32]
 80074fa:	4621      	mov	r1, r4
 80074fc:	3b01      	subs	r3, #1
 80074fe:	4650      	mov	r0, sl
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	f7ff fa75 	bl	80069f0 <quorem>
 8007506:	4641      	mov	r1, r8
 8007508:	9006      	str	r0, [sp, #24]
 800750a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800750e:	4650      	mov	r0, sl
 8007510:	f000 fc9e 	bl	8007e50 <__mcmp>
 8007514:	4632      	mov	r2, r6
 8007516:	9009      	str	r0, [sp, #36]	; 0x24
 8007518:	4621      	mov	r1, r4
 800751a:	4628      	mov	r0, r5
 800751c:	f000 fcb4 	bl	8007e88 <__mdiff>
 8007520:	68c2      	ldr	r2, [r0, #12]
 8007522:	4607      	mov	r7, r0
 8007524:	bb02      	cbnz	r2, 8007568 <_dtoa_r+0xa60>
 8007526:	4601      	mov	r1, r0
 8007528:	4650      	mov	r0, sl
 800752a:	f000 fc91 	bl	8007e50 <__mcmp>
 800752e:	4602      	mov	r2, r0
 8007530:	4639      	mov	r1, r7
 8007532:	4628      	mov	r0, r5
 8007534:	920c      	str	r2, [sp, #48]	; 0x30
 8007536:	f000 fa07 	bl	8007948 <_Bfree>
 800753a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800753c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800753e:	9f08      	ldr	r7, [sp, #32]
 8007540:	ea43 0102 	orr.w	r1, r3, r2
 8007544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007546:	4319      	orrs	r1, r3
 8007548:	d110      	bne.n	800756c <_dtoa_r+0xa64>
 800754a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800754e:	d029      	beq.n	80075a4 <_dtoa_r+0xa9c>
 8007550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	dd02      	ble.n	800755c <_dtoa_r+0xa54>
 8007556:	9b06      	ldr	r3, [sp, #24]
 8007558:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	f883 9000 	strb.w	r9, [r3]
 8007562:	e777      	b.n	8007454 <_dtoa_r+0x94c>
 8007564:	4630      	mov	r0, r6
 8007566:	e7ba      	b.n	80074de <_dtoa_r+0x9d6>
 8007568:	2201      	movs	r2, #1
 800756a:	e7e1      	b.n	8007530 <_dtoa_r+0xa28>
 800756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	db04      	blt.n	800757c <_dtoa_r+0xa74>
 8007572:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007574:	430b      	orrs	r3, r1
 8007576:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007578:	430b      	orrs	r3, r1
 800757a:	d120      	bne.n	80075be <_dtoa_r+0xab6>
 800757c:	2a00      	cmp	r2, #0
 800757e:	dded      	ble.n	800755c <_dtoa_r+0xa54>
 8007580:	4651      	mov	r1, sl
 8007582:	2201      	movs	r2, #1
 8007584:	4628      	mov	r0, r5
 8007586:	f000 fbf7 	bl	8007d78 <__lshift>
 800758a:	4621      	mov	r1, r4
 800758c:	4682      	mov	sl, r0
 800758e:	f000 fc5f 	bl	8007e50 <__mcmp>
 8007592:	2800      	cmp	r0, #0
 8007594:	dc03      	bgt.n	800759e <_dtoa_r+0xa96>
 8007596:	d1e1      	bne.n	800755c <_dtoa_r+0xa54>
 8007598:	f019 0f01 	tst.w	r9, #1
 800759c:	d0de      	beq.n	800755c <_dtoa_r+0xa54>
 800759e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075a2:	d1d8      	bne.n	8007556 <_dtoa_r+0xa4e>
 80075a4:	2339      	movs	r3, #57	; 0x39
 80075a6:	9a04      	ldr	r2, [sp, #16]
 80075a8:	7013      	strb	r3, [r2, #0]
 80075aa:	463b      	mov	r3, r7
 80075ac:	461f      	mov	r7, r3
 80075ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	2a39      	cmp	r2, #57	; 0x39
 80075b6:	d06b      	beq.n	8007690 <_dtoa_r+0xb88>
 80075b8:	3201      	adds	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e74a      	b.n	8007454 <_dtoa_r+0x94c>
 80075be:	2a00      	cmp	r2, #0
 80075c0:	dd07      	ble.n	80075d2 <_dtoa_r+0xaca>
 80075c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075c6:	d0ed      	beq.n	80075a4 <_dtoa_r+0xa9c>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	f109 0301 	add.w	r3, r9, #1
 80075ce:	7013      	strb	r3, [r2, #0]
 80075d0:	e740      	b.n	8007454 <_dtoa_r+0x94c>
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075d6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80075da:	4293      	cmp	r3, r2
 80075dc:	d042      	beq.n	8007664 <_dtoa_r+0xb5c>
 80075de:	4651      	mov	r1, sl
 80075e0:	2300      	movs	r3, #0
 80075e2:	220a      	movs	r2, #10
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 f9d1 	bl	800798c <__multadd>
 80075ea:	45b0      	cmp	r8, r6
 80075ec:	4682      	mov	sl, r0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	f04f 020a 	mov.w	r2, #10
 80075f6:	4641      	mov	r1, r8
 80075f8:	4628      	mov	r0, r5
 80075fa:	d107      	bne.n	800760c <_dtoa_r+0xb04>
 80075fc:	f000 f9c6 	bl	800798c <__multadd>
 8007600:	4680      	mov	r8, r0
 8007602:	4606      	mov	r6, r0
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	3301      	adds	r3, #1
 8007608:	9308      	str	r3, [sp, #32]
 800760a:	e775      	b.n	80074f8 <_dtoa_r+0x9f0>
 800760c:	f000 f9be 	bl	800798c <__multadd>
 8007610:	4631      	mov	r1, r6
 8007612:	4680      	mov	r8, r0
 8007614:	2300      	movs	r3, #0
 8007616:	220a      	movs	r2, #10
 8007618:	4628      	mov	r0, r5
 800761a:	f000 f9b7 	bl	800798c <__multadd>
 800761e:	4606      	mov	r6, r0
 8007620:	e7f0      	b.n	8007604 <_dtoa_r+0xafc>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	9306      	str	r3, [sp, #24]
 8007626:	9f03      	ldr	r7, [sp, #12]
 8007628:	4621      	mov	r1, r4
 800762a:	4650      	mov	r0, sl
 800762c:	f7ff f9e0 	bl	80069f0 <quorem>
 8007630:	9b03      	ldr	r3, [sp, #12]
 8007632:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007636:	f807 9b01 	strb.w	r9, [r7], #1
 800763a:	1afa      	subs	r2, r7, r3
 800763c:	9b06      	ldr	r3, [sp, #24]
 800763e:	4293      	cmp	r3, r2
 8007640:	dd07      	ble.n	8007652 <_dtoa_r+0xb4a>
 8007642:	4651      	mov	r1, sl
 8007644:	2300      	movs	r3, #0
 8007646:	220a      	movs	r2, #10
 8007648:	4628      	mov	r0, r5
 800764a:	f000 f99f 	bl	800798c <__multadd>
 800764e:	4682      	mov	sl, r0
 8007650:	e7ea      	b.n	8007628 <_dtoa_r+0xb20>
 8007652:	9b06      	ldr	r3, [sp, #24]
 8007654:	f04f 0800 	mov.w	r8, #0
 8007658:	2b00      	cmp	r3, #0
 800765a:	bfcc      	ite	gt
 800765c:	461f      	movgt	r7, r3
 800765e:	2701      	movle	r7, #1
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	441f      	add	r7, r3
 8007664:	4651      	mov	r1, sl
 8007666:	2201      	movs	r2, #1
 8007668:	4628      	mov	r0, r5
 800766a:	f000 fb85 	bl	8007d78 <__lshift>
 800766e:	4621      	mov	r1, r4
 8007670:	4682      	mov	sl, r0
 8007672:	f000 fbed 	bl	8007e50 <__mcmp>
 8007676:	2800      	cmp	r0, #0
 8007678:	dc97      	bgt.n	80075aa <_dtoa_r+0xaa2>
 800767a:	d102      	bne.n	8007682 <_dtoa_r+0xb7a>
 800767c:	f019 0f01 	tst.w	r9, #1
 8007680:	d193      	bne.n	80075aa <_dtoa_r+0xaa2>
 8007682:	463b      	mov	r3, r7
 8007684:	461f      	mov	r7, r3
 8007686:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800768a:	2a30      	cmp	r2, #48	; 0x30
 800768c:	d0fa      	beq.n	8007684 <_dtoa_r+0xb7c>
 800768e:	e6e1      	b.n	8007454 <_dtoa_r+0x94c>
 8007690:	9a03      	ldr	r2, [sp, #12]
 8007692:	429a      	cmp	r2, r3
 8007694:	d18a      	bne.n	80075ac <_dtoa_r+0xaa4>
 8007696:	2331      	movs	r3, #49	; 0x31
 8007698:	f10b 0b01 	add.w	fp, fp, #1
 800769c:	e797      	b.n	80075ce <_dtoa_r+0xac6>
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <_dtoa_r+0xbc0>)
 80076a0:	f7ff ba9f 	b.w	8006be2 <_dtoa_r+0xda>
 80076a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f47f aa77 	bne.w	8006b9a <_dtoa_r+0x92>
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <_dtoa_r+0xbc4>)
 80076ae:	f7ff ba98 	b.w	8006be2 <_dtoa_r+0xda>
 80076b2:	9b06      	ldr	r3, [sp, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dcb6      	bgt.n	8007626 <_dtoa_r+0xb1e>
 80076b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	f73f aeb5 	bgt.w	800742a <_dtoa_r+0x922>
 80076c0:	e7b1      	b.n	8007626 <_dtoa_r+0xb1e>
 80076c2:	bf00      	nop
 80076c4:	0800a8e3 	.word	0x0800a8e3
 80076c8:	0800a83e 	.word	0x0800a83e
 80076cc:	0800a867 	.word	0x0800a867

080076d0 <_free_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d040      	beq.n	800775a <_free_r+0x8a>
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f0c      	subs	r4, r1, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfb8      	it	lt
 80076e2:	18e4      	addlt	r4, r4, r3
 80076e4:	f000 f8e4 	bl	80078b0 <__malloc_lock>
 80076e8:	4a1c      	ldr	r2, [pc, #112]	; (800775c <_free_r+0x8c>)
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	b933      	cbnz	r3, 80076fc <_free_r+0x2c>
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	6014      	str	r4, [r2, #0]
 80076f2:	4628      	mov	r0, r5
 80076f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f8:	f000 b8e0 	b.w	80078bc <__malloc_unlock>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d908      	bls.n	8007712 <_free_r+0x42>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	1821      	adds	r1, r4, r0
 8007704:	428b      	cmp	r3, r1
 8007706:	bf01      	itttt	eq
 8007708:	6819      	ldreq	r1, [r3, #0]
 800770a:	685b      	ldreq	r3, [r3, #4]
 800770c:	1809      	addeq	r1, r1, r0
 800770e:	6021      	streq	r1, [r4, #0]
 8007710:	e7ed      	b.n	80076ee <_free_r+0x1e>
 8007712:	461a      	mov	r2, r3
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	b10b      	cbz	r3, 800771c <_free_r+0x4c>
 8007718:	42a3      	cmp	r3, r4
 800771a:	d9fa      	bls.n	8007712 <_free_r+0x42>
 800771c:	6811      	ldr	r1, [r2, #0]
 800771e:	1850      	adds	r0, r2, r1
 8007720:	42a0      	cmp	r0, r4
 8007722:	d10b      	bne.n	800773c <_free_r+0x6c>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	4401      	add	r1, r0
 8007728:	1850      	adds	r0, r2, r1
 800772a:	4283      	cmp	r3, r0
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	d1e0      	bne.n	80076f2 <_free_r+0x22>
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4408      	add	r0, r1
 8007736:	6010      	str	r0, [r2, #0]
 8007738:	6053      	str	r3, [r2, #4]
 800773a:	e7da      	b.n	80076f2 <_free_r+0x22>
 800773c:	d902      	bls.n	8007744 <_free_r+0x74>
 800773e:	230c      	movs	r3, #12
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	e7d6      	b.n	80076f2 <_free_r+0x22>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	1821      	adds	r1, r4, r0
 8007748:	428b      	cmp	r3, r1
 800774a:	bf01      	itttt	eq
 800774c:	6819      	ldreq	r1, [r3, #0]
 800774e:	685b      	ldreq	r3, [r3, #4]
 8007750:	1809      	addeq	r1, r1, r0
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	6063      	str	r3, [r4, #4]
 8007756:	6054      	str	r4, [r2, #4]
 8007758:	e7cb      	b.n	80076f2 <_free_r+0x22>
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	200005f0 	.word	0x200005f0

08007760 <malloc>:
 8007760:	4b02      	ldr	r3, [pc, #8]	; (800776c <malloc+0xc>)
 8007762:	4601      	mov	r1, r0
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	f000 b823 	b.w	80077b0 <_malloc_r>
 800776a:	bf00      	nop
 800776c:	20000078 	.word	0x20000078

08007770 <sbrk_aligned>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	4e0e      	ldr	r6, [pc, #56]	; (80077ac <sbrk_aligned+0x3c>)
 8007774:	460c      	mov	r4, r1
 8007776:	6831      	ldr	r1, [r6, #0]
 8007778:	4605      	mov	r5, r0
 800777a:	b911      	cbnz	r1, 8007782 <sbrk_aligned+0x12>
 800777c:	f001 fe0c 	bl	8009398 <_sbrk_r>
 8007780:	6030      	str	r0, [r6, #0]
 8007782:	4621      	mov	r1, r4
 8007784:	4628      	mov	r0, r5
 8007786:	f001 fe07 	bl	8009398 <_sbrk_r>
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	d00a      	beq.n	80077a4 <sbrk_aligned+0x34>
 800778e:	1cc4      	adds	r4, r0, #3
 8007790:	f024 0403 	bic.w	r4, r4, #3
 8007794:	42a0      	cmp	r0, r4
 8007796:	d007      	beq.n	80077a8 <sbrk_aligned+0x38>
 8007798:	1a21      	subs	r1, r4, r0
 800779a:	4628      	mov	r0, r5
 800779c:	f001 fdfc 	bl	8009398 <_sbrk_r>
 80077a0:	3001      	adds	r0, #1
 80077a2:	d101      	bne.n	80077a8 <sbrk_aligned+0x38>
 80077a4:	f04f 34ff 	mov.w	r4, #4294967295
 80077a8:	4620      	mov	r0, r4
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	200005f4 	.word	0x200005f4

080077b0 <_malloc_r>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	1ccd      	adds	r5, r1, #3
 80077b6:	f025 0503 	bic.w	r5, r5, #3
 80077ba:	3508      	adds	r5, #8
 80077bc:	2d0c      	cmp	r5, #12
 80077be:	bf38      	it	cc
 80077c0:	250c      	movcc	r5, #12
 80077c2:	2d00      	cmp	r5, #0
 80077c4:	4607      	mov	r7, r0
 80077c6:	db01      	blt.n	80077cc <_malloc_r+0x1c>
 80077c8:	42a9      	cmp	r1, r5
 80077ca:	d905      	bls.n	80077d8 <_malloc_r+0x28>
 80077cc:	230c      	movs	r3, #12
 80077ce:	2600      	movs	r6, #0
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4630      	mov	r0, r6
 80077d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078ac <_malloc_r+0xfc>
 80077dc:	f000 f868 	bl	80078b0 <__malloc_lock>
 80077e0:	f8d8 3000 	ldr.w	r3, [r8]
 80077e4:	461c      	mov	r4, r3
 80077e6:	bb5c      	cbnz	r4, 8007840 <_malloc_r+0x90>
 80077e8:	4629      	mov	r1, r5
 80077ea:	4638      	mov	r0, r7
 80077ec:	f7ff ffc0 	bl	8007770 <sbrk_aligned>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	4604      	mov	r4, r0
 80077f4:	d155      	bne.n	80078a2 <_malloc_r+0xf2>
 80077f6:	f8d8 4000 	ldr.w	r4, [r8]
 80077fa:	4626      	mov	r6, r4
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	d145      	bne.n	800788c <_malloc_r+0xdc>
 8007800:	2c00      	cmp	r4, #0
 8007802:	d048      	beq.n	8007896 <_malloc_r+0xe6>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	4631      	mov	r1, r6
 8007808:	4638      	mov	r0, r7
 800780a:	eb04 0903 	add.w	r9, r4, r3
 800780e:	f001 fdc3 	bl	8009398 <_sbrk_r>
 8007812:	4581      	cmp	r9, r0
 8007814:	d13f      	bne.n	8007896 <_malloc_r+0xe6>
 8007816:	6821      	ldr	r1, [r4, #0]
 8007818:	4638      	mov	r0, r7
 800781a:	1a6d      	subs	r5, r5, r1
 800781c:	4629      	mov	r1, r5
 800781e:	f7ff ffa7 	bl	8007770 <sbrk_aligned>
 8007822:	3001      	adds	r0, #1
 8007824:	d037      	beq.n	8007896 <_malloc_r+0xe6>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	442b      	add	r3, r5
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	f8d8 3000 	ldr.w	r3, [r8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d038      	beq.n	80078a6 <_malloc_r+0xf6>
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	42a2      	cmp	r2, r4
 8007838:	d12b      	bne.n	8007892 <_malloc_r+0xe2>
 800783a:	2200      	movs	r2, #0
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	e00f      	b.n	8007860 <_malloc_r+0xb0>
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	1b52      	subs	r2, r2, r5
 8007844:	d41f      	bmi.n	8007886 <_malloc_r+0xd6>
 8007846:	2a0b      	cmp	r2, #11
 8007848:	d917      	bls.n	800787a <_malloc_r+0xca>
 800784a:	1961      	adds	r1, r4, r5
 800784c:	42a3      	cmp	r3, r4
 800784e:	6025      	str	r5, [r4, #0]
 8007850:	bf18      	it	ne
 8007852:	6059      	strne	r1, [r3, #4]
 8007854:	6863      	ldr	r3, [r4, #4]
 8007856:	bf08      	it	eq
 8007858:	f8c8 1000 	streq.w	r1, [r8]
 800785c:	5162      	str	r2, [r4, r5]
 800785e:	604b      	str	r3, [r1, #4]
 8007860:	4638      	mov	r0, r7
 8007862:	f104 060b 	add.w	r6, r4, #11
 8007866:	f000 f829 	bl	80078bc <__malloc_unlock>
 800786a:	f026 0607 	bic.w	r6, r6, #7
 800786e:	1d23      	adds	r3, r4, #4
 8007870:	1af2      	subs	r2, r6, r3
 8007872:	d0ae      	beq.n	80077d2 <_malloc_r+0x22>
 8007874:	1b9b      	subs	r3, r3, r6
 8007876:	50a3      	str	r3, [r4, r2]
 8007878:	e7ab      	b.n	80077d2 <_malloc_r+0x22>
 800787a:	42a3      	cmp	r3, r4
 800787c:	6862      	ldr	r2, [r4, #4]
 800787e:	d1dd      	bne.n	800783c <_malloc_r+0x8c>
 8007880:	f8c8 2000 	str.w	r2, [r8]
 8007884:	e7ec      	b.n	8007860 <_malloc_r+0xb0>
 8007886:	4623      	mov	r3, r4
 8007888:	6864      	ldr	r4, [r4, #4]
 800788a:	e7ac      	b.n	80077e6 <_malloc_r+0x36>
 800788c:	4634      	mov	r4, r6
 800788e:	6876      	ldr	r6, [r6, #4]
 8007890:	e7b4      	b.n	80077fc <_malloc_r+0x4c>
 8007892:	4613      	mov	r3, r2
 8007894:	e7cc      	b.n	8007830 <_malloc_r+0x80>
 8007896:	230c      	movs	r3, #12
 8007898:	4638      	mov	r0, r7
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	f000 f80e 	bl	80078bc <__malloc_unlock>
 80078a0:	e797      	b.n	80077d2 <_malloc_r+0x22>
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	e7dc      	b.n	8007860 <_malloc_r+0xb0>
 80078a6:	605b      	str	r3, [r3, #4]
 80078a8:	deff      	udf	#255	; 0xff
 80078aa:	bf00      	nop
 80078ac:	200005f0 	.word	0x200005f0

080078b0 <__malloc_lock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	; (80078b8 <__malloc_lock+0x8>)
 80078b2:	f7ff b888 	b.w	80069c6 <__retarget_lock_acquire_recursive>
 80078b6:	bf00      	nop
 80078b8:	200005ec 	.word	0x200005ec

080078bc <__malloc_unlock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__malloc_unlock+0x8>)
 80078be:	f7ff b883 	b.w	80069c8 <__retarget_lock_release_recursive>
 80078c2:	bf00      	nop
 80078c4:	200005ec 	.word	0x200005ec

080078c8 <_Balloc>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	69c6      	ldr	r6, [r0, #28]
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	b976      	cbnz	r6, 80078f0 <_Balloc+0x28>
 80078d2:	2010      	movs	r0, #16
 80078d4:	f7ff ff44 	bl	8007760 <malloc>
 80078d8:	4602      	mov	r2, r0
 80078da:	61e0      	str	r0, [r4, #28]
 80078dc:	b920      	cbnz	r0, 80078e8 <_Balloc+0x20>
 80078de:	216b      	movs	r1, #107	; 0x6b
 80078e0:	4b17      	ldr	r3, [pc, #92]	; (8007940 <_Balloc+0x78>)
 80078e2:	4818      	ldr	r0, [pc, #96]	; (8007944 <_Balloc+0x7c>)
 80078e4:	f001 fd7c 	bl	80093e0 <__assert_func>
 80078e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078ec:	6006      	str	r6, [r0, #0]
 80078ee:	60c6      	str	r6, [r0, #12]
 80078f0:	69e6      	ldr	r6, [r4, #28]
 80078f2:	68f3      	ldr	r3, [r6, #12]
 80078f4:	b183      	cbz	r3, 8007918 <_Balloc+0x50>
 80078f6:	69e3      	ldr	r3, [r4, #28]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078fe:	b9b8      	cbnz	r0, 8007930 <_Balloc+0x68>
 8007900:	2101      	movs	r1, #1
 8007902:	fa01 f605 	lsl.w	r6, r1, r5
 8007906:	1d72      	adds	r2, r6, #5
 8007908:	4620      	mov	r0, r4
 800790a:	0092      	lsls	r2, r2, #2
 800790c:	f001 fd86 	bl	800941c <_calloc_r>
 8007910:	b160      	cbz	r0, 800792c <_Balloc+0x64>
 8007912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007916:	e00e      	b.n	8007936 <_Balloc+0x6e>
 8007918:	2221      	movs	r2, #33	; 0x21
 800791a:	2104      	movs	r1, #4
 800791c:	4620      	mov	r0, r4
 800791e:	f001 fd7d 	bl	800941c <_calloc_r>
 8007922:	69e3      	ldr	r3, [r4, #28]
 8007924:	60f0      	str	r0, [r6, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e4      	bne.n	80078f6 <_Balloc+0x2e>
 800792c:	2000      	movs	r0, #0
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	6802      	ldr	r2, [r0, #0]
 8007932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007936:	2300      	movs	r3, #0
 8007938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800793c:	e7f7      	b.n	800792e <_Balloc+0x66>
 800793e:	bf00      	nop
 8007940:	0800a874 	.word	0x0800a874
 8007944:	0800a8f4 	.word	0x0800a8f4

08007948 <_Bfree>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	69c6      	ldr	r6, [r0, #28]
 800794c:	4605      	mov	r5, r0
 800794e:	460c      	mov	r4, r1
 8007950:	b976      	cbnz	r6, 8007970 <_Bfree+0x28>
 8007952:	2010      	movs	r0, #16
 8007954:	f7ff ff04 	bl	8007760 <malloc>
 8007958:	4602      	mov	r2, r0
 800795a:	61e8      	str	r0, [r5, #28]
 800795c:	b920      	cbnz	r0, 8007968 <_Bfree+0x20>
 800795e:	218f      	movs	r1, #143	; 0x8f
 8007960:	4b08      	ldr	r3, [pc, #32]	; (8007984 <_Bfree+0x3c>)
 8007962:	4809      	ldr	r0, [pc, #36]	; (8007988 <_Bfree+0x40>)
 8007964:	f001 fd3c 	bl	80093e0 <__assert_func>
 8007968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800796c:	6006      	str	r6, [r0, #0]
 800796e:	60c6      	str	r6, [r0, #12]
 8007970:	b13c      	cbz	r4, 8007982 <_Bfree+0x3a>
 8007972:	69eb      	ldr	r3, [r5, #28]
 8007974:	6862      	ldr	r2, [r4, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800797c:	6021      	str	r1, [r4, #0]
 800797e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	0800a874 	.word	0x0800a874
 8007988:	0800a8f4 	.word	0x0800a8f4

0800798c <__multadd>:
 800798c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007990:	4607      	mov	r7, r0
 8007992:	460c      	mov	r4, r1
 8007994:	461e      	mov	r6, r3
 8007996:	2000      	movs	r0, #0
 8007998:	690d      	ldr	r5, [r1, #16]
 800799a:	f101 0c14 	add.w	ip, r1, #20
 800799e:	f8dc 3000 	ldr.w	r3, [ip]
 80079a2:	3001      	adds	r0, #1
 80079a4:	b299      	uxth	r1, r3
 80079a6:	fb02 6101 	mla	r1, r2, r1, r6
 80079aa:	0c1e      	lsrs	r6, r3, #16
 80079ac:	0c0b      	lsrs	r3, r1, #16
 80079ae:	fb02 3306 	mla	r3, r2, r6, r3
 80079b2:	b289      	uxth	r1, r1
 80079b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079b8:	4285      	cmp	r5, r0
 80079ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079be:	f84c 1b04 	str.w	r1, [ip], #4
 80079c2:	dcec      	bgt.n	800799e <__multadd+0x12>
 80079c4:	b30e      	cbz	r6, 8007a0a <__multadd+0x7e>
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	dc19      	bgt.n	8007a00 <__multadd+0x74>
 80079cc:	6861      	ldr	r1, [r4, #4]
 80079ce:	4638      	mov	r0, r7
 80079d0:	3101      	adds	r1, #1
 80079d2:	f7ff ff79 	bl	80078c8 <_Balloc>
 80079d6:	4680      	mov	r8, r0
 80079d8:	b928      	cbnz	r0, 80079e6 <__multadd+0x5a>
 80079da:	4602      	mov	r2, r0
 80079dc:	21ba      	movs	r1, #186	; 0xba
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <__multadd+0x84>)
 80079e0:	480c      	ldr	r0, [pc, #48]	; (8007a14 <__multadd+0x88>)
 80079e2:	f001 fcfd 	bl	80093e0 <__assert_func>
 80079e6:	6922      	ldr	r2, [r4, #16]
 80079e8:	f104 010c 	add.w	r1, r4, #12
 80079ec:	3202      	adds	r2, #2
 80079ee:	0092      	lsls	r2, r2, #2
 80079f0:	300c      	adds	r0, #12
 80079f2:	f001 fce1 	bl	80093b8 <memcpy>
 80079f6:	4621      	mov	r1, r4
 80079f8:	4638      	mov	r0, r7
 80079fa:	f7ff ffa5 	bl	8007948 <_Bfree>
 80079fe:	4644      	mov	r4, r8
 8007a00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a04:	3501      	adds	r5, #1
 8007a06:	615e      	str	r6, [r3, #20]
 8007a08:	6125      	str	r5, [r4, #16]
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	0800a8e3 	.word	0x0800a8e3
 8007a14:	0800a8f4 	.word	0x0800a8f4

08007a18 <__s2b>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4615      	mov	r5, r2
 8007a1e:	2209      	movs	r2, #9
 8007a20:	461f      	mov	r7, r3
 8007a22:	3308      	adds	r3, #8
 8007a24:	460c      	mov	r4, r1
 8007a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2100      	movs	r1, #0
 8007a30:	429a      	cmp	r2, r3
 8007a32:	db09      	blt.n	8007a48 <__s2b+0x30>
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ff47 	bl	80078c8 <_Balloc>
 8007a3a:	b940      	cbnz	r0, 8007a4e <__s2b+0x36>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	21d3      	movs	r1, #211	; 0xd3
 8007a40:	4b18      	ldr	r3, [pc, #96]	; (8007aa4 <__s2b+0x8c>)
 8007a42:	4819      	ldr	r0, [pc, #100]	; (8007aa8 <__s2b+0x90>)
 8007a44:	f001 fccc 	bl	80093e0 <__assert_func>
 8007a48:	0052      	lsls	r2, r2, #1
 8007a4a:	3101      	adds	r1, #1
 8007a4c:	e7f0      	b.n	8007a30 <__s2b+0x18>
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	2d09      	cmp	r5, #9
 8007a52:	6143      	str	r3, [r0, #20]
 8007a54:	f04f 0301 	mov.w	r3, #1
 8007a58:	6103      	str	r3, [r0, #16]
 8007a5a:	dd16      	ble.n	8007a8a <__s2b+0x72>
 8007a5c:	f104 0909 	add.w	r9, r4, #9
 8007a60:	46c8      	mov	r8, r9
 8007a62:	442c      	add	r4, r5
 8007a64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a68:	4601      	mov	r1, r0
 8007a6a:	220a      	movs	r2, #10
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	3b30      	subs	r3, #48	; 0x30
 8007a70:	f7ff ff8c 	bl	800798c <__multadd>
 8007a74:	45a0      	cmp	r8, r4
 8007a76:	d1f5      	bne.n	8007a64 <__s2b+0x4c>
 8007a78:	f1a5 0408 	sub.w	r4, r5, #8
 8007a7c:	444c      	add	r4, r9
 8007a7e:	1b2d      	subs	r5, r5, r4
 8007a80:	1963      	adds	r3, r4, r5
 8007a82:	42bb      	cmp	r3, r7
 8007a84:	db04      	blt.n	8007a90 <__s2b+0x78>
 8007a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8a:	2509      	movs	r5, #9
 8007a8c:	340a      	adds	r4, #10
 8007a8e:	e7f6      	b.n	8007a7e <__s2b+0x66>
 8007a90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a94:	4601      	mov	r1, r0
 8007a96:	220a      	movs	r2, #10
 8007a98:	4630      	mov	r0, r6
 8007a9a:	3b30      	subs	r3, #48	; 0x30
 8007a9c:	f7ff ff76 	bl	800798c <__multadd>
 8007aa0:	e7ee      	b.n	8007a80 <__s2b+0x68>
 8007aa2:	bf00      	nop
 8007aa4:	0800a8e3 	.word	0x0800a8e3
 8007aa8:	0800a8f4 	.word	0x0800a8f4

08007aac <__hi0bits>:
 8007aac:	0c02      	lsrs	r2, r0, #16
 8007aae:	0412      	lsls	r2, r2, #16
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	b9ca      	cbnz	r2, 8007ae8 <__hi0bits+0x3c>
 8007ab4:	0403      	lsls	r3, r0, #16
 8007ab6:	2010      	movs	r0, #16
 8007ab8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007abc:	bf04      	itt	eq
 8007abe:	021b      	lsleq	r3, r3, #8
 8007ac0:	3008      	addeq	r0, #8
 8007ac2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007ac6:	bf04      	itt	eq
 8007ac8:	011b      	lsleq	r3, r3, #4
 8007aca:	3004      	addeq	r0, #4
 8007acc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ad0:	bf04      	itt	eq
 8007ad2:	009b      	lsleq	r3, r3, #2
 8007ad4:	3002      	addeq	r0, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db05      	blt.n	8007ae6 <__hi0bits+0x3a>
 8007ada:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ade:	f100 0001 	add.w	r0, r0, #1
 8007ae2:	bf08      	it	eq
 8007ae4:	2020      	moveq	r0, #32
 8007ae6:	4770      	bx	lr
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e7e5      	b.n	8007ab8 <__hi0bits+0xc>

08007aec <__lo0bits>:
 8007aec:	6803      	ldr	r3, [r0, #0]
 8007aee:	4602      	mov	r2, r0
 8007af0:	f013 0007 	ands.w	r0, r3, #7
 8007af4:	d00b      	beq.n	8007b0e <__lo0bits+0x22>
 8007af6:	07d9      	lsls	r1, r3, #31
 8007af8:	d421      	bmi.n	8007b3e <__lo0bits+0x52>
 8007afa:	0798      	lsls	r0, r3, #30
 8007afc:	bf49      	itett	mi
 8007afe:	085b      	lsrmi	r3, r3, #1
 8007b00:	089b      	lsrpl	r3, r3, #2
 8007b02:	2001      	movmi	r0, #1
 8007b04:	6013      	strmi	r3, [r2, #0]
 8007b06:	bf5c      	itt	pl
 8007b08:	2002      	movpl	r0, #2
 8007b0a:	6013      	strpl	r3, [r2, #0]
 8007b0c:	4770      	bx	lr
 8007b0e:	b299      	uxth	r1, r3
 8007b10:	b909      	cbnz	r1, 8007b16 <__lo0bits+0x2a>
 8007b12:	2010      	movs	r0, #16
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	b2d9      	uxtb	r1, r3
 8007b18:	b909      	cbnz	r1, 8007b1e <__lo0bits+0x32>
 8007b1a:	3008      	adds	r0, #8
 8007b1c:	0a1b      	lsrs	r3, r3, #8
 8007b1e:	0719      	lsls	r1, r3, #28
 8007b20:	bf04      	itt	eq
 8007b22:	091b      	lsreq	r3, r3, #4
 8007b24:	3004      	addeq	r0, #4
 8007b26:	0799      	lsls	r1, r3, #30
 8007b28:	bf04      	itt	eq
 8007b2a:	089b      	lsreq	r3, r3, #2
 8007b2c:	3002      	addeq	r0, #2
 8007b2e:	07d9      	lsls	r1, r3, #31
 8007b30:	d403      	bmi.n	8007b3a <__lo0bits+0x4e>
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	f100 0001 	add.w	r0, r0, #1
 8007b38:	d003      	beq.n	8007b42 <__lo0bits+0x56>
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	4770      	bx	lr
 8007b3e:	2000      	movs	r0, #0
 8007b40:	4770      	bx	lr
 8007b42:	2020      	movs	r0, #32
 8007b44:	4770      	bx	lr
	...

08007b48 <__i2b>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	f7ff febb 	bl	80078c8 <_Balloc>
 8007b52:	4602      	mov	r2, r0
 8007b54:	b928      	cbnz	r0, 8007b62 <__i2b+0x1a>
 8007b56:	f240 1145 	movw	r1, #325	; 0x145
 8007b5a:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <__i2b+0x24>)
 8007b5c:	4804      	ldr	r0, [pc, #16]	; (8007b70 <__i2b+0x28>)
 8007b5e:	f001 fc3f 	bl	80093e0 <__assert_func>
 8007b62:	2301      	movs	r3, #1
 8007b64:	6144      	str	r4, [r0, #20]
 8007b66:	6103      	str	r3, [r0, #16]
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	bf00      	nop
 8007b6c:	0800a8e3 	.word	0x0800a8e3
 8007b70:	0800a8f4 	.word	0x0800a8f4

08007b74 <__multiply>:
 8007b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b78:	4691      	mov	r9, r2
 8007b7a:	690a      	ldr	r2, [r1, #16]
 8007b7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b80:	460c      	mov	r4, r1
 8007b82:	429a      	cmp	r2, r3
 8007b84:	bfbe      	ittt	lt
 8007b86:	460b      	movlt	r3, r1
 8007b88:	464c      	movlt	r4, r9
 8007b8a:	4699      	movlt	r9, r3
 8007b8c:	6927      	ldr	r7, [r4, #16]
 8007b8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b92:	68a3      	ldr	r3, [r4, #8]
 8007b94:	6861      	ldr	r1, [r4, #4]
 8007b96:	eb07 060a 	add.w	r6, r7, sl
 8007b9a:	42b3      	cmp	r3, r6
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	bfb8      	it	lt
 8007ba0:	3101      	addlt	r1, #1
 8007ba2:	f7ff fe91 	bl	80078c8 <_Balloc>
 8007ba6:	b930      	cbnz	r0, 8007bb6 <__multiply+0x42>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bae:	4b43      	ldr	r3, [pc, #268]	; (8007cbc <__multiply+0x148>)
 8007bb0:	4843      	ldr	r0, [pc, #268]	; (8007cc0 <__multiply+0x14c>)
 8007bb2:	f001 fc15 	bl	80093e0 <__assert_func>
 8007bb6:	f100 0514 	add.w	r5, r0, #20
 8007bba:	462b      	mov	r3, r5
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bc2:	4543      	cmp	r3, r8
 8007bc4:	d321      	bcc.n	8007c0a <__multiply+0x96>
 8007bc6:	f104 0314 	add.w	r3, r4, #20
 8007bca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bce:	f109 0314 	add.w	r3, r9, #20
 8007bd2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bd6:	9202      	str	r2, [sp, #8]
 8007bd8:	1b3a      	subs	r2, r7, r4
 8007bda:	3a15      	subs	r2, #21
 8007bdc:	f022 0203 	bic.w	r2, r2, #3
 8007be0:	3204      	adds	r2, #4
 8007be2:	f104 0115 	add.w	r1, r4, #21
 8007be6:	428f      	cmp	r7, r1
 8007be8:	bf38      	it	cc
 8007bea:	2204      	movcc	r2, #4
 8007bec:	9201      	str	r2, [sp, #4]
 8007bee:	9a02      	ldr	r2, [sp, #8]
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d80c      	bhi.n	8007c10 <__multiply+0x9c>
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	dd03      	ble.n	8007c02 <__multiply+0x8e>
 8007bfa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d05a      	beq.n	8007cb8 <__multiply+0x144>
 8007c02:	6106      	str	r6, [r0, #16]
 8007c04:	b005      	add	sp, #20
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	f843 2b04 	str.w	r2, [r3], #4
 8007c0e:	e7d8      	b.n	8007bc2 <__multiply+0x4e>
 8007c10:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c14:	f1ba 0f00 	cmp.w	sl, #0
 8007c18:	d023      	beq.n	8007c62 <__multiply+0xee>
 8007c1a:	46a9      	mov	r9, r5
 8007c1c:	f04f 0c00 	mov.w	ip, #0
 8007c20:	f104 0e14 	add.w	lr, r4, #20
 8007c24:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c28:	f8d9 1000 	ldr.w	r1, [r9]
 8007c2c:	fa1f fb82 	uxth.w	fp, r2
 8007c30:	b289      	uxth	r1, r1
 8007c32:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c36:	4461      	add	r1, ip
 8007c38:	f8d9 c000 	ldr.w	ip, [r9]
 8007c3c:	0c12      	lsrs	r2, r2, #16
 8007c3e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007c42:	fb0a c202 	mla	r2, sl, r2, ip
 8007c46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c4a:	b289      	uxth	r1, r1
 8007c4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c50:	4577      	cmp	r7, lr
 8007c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c56:	f849 1b04 	str.w	r1, [r9], #4
 8007c5a:	d8e3      	bhi.n	8007c24 <__multiply+0xb0>
 8007c5c:	9a01      	ldr	r2, [sp, #4]
 8007c5e:	f845 c002 	str.w	ip, [r5, r2]
 8007c62:	9a03      	ldr	r2, [sp, #12]
 8007c64:	3304      	adds	r3, #4
 8007c66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c6a:	f1b9 0f00 	cmp.w	r9, #0
 8007c6e:	d021      	beq.n	8007cb4 <__multiply+0x140>
 8007c70:	46ae      	mov	lr, r5
 8007c72:	f04f 0a00 	mov.w	sl, #0
 8007c76:	6829      	ldr	r1, [r5, #0]
 8007c78:	f104 0c14 	add.w	ip, r4, #20
 8007c7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007c80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c84:	b289      	uxth	r1, r1
 8007c86:	fb09 220b 	mla	r2, r9, fp, r2
 8007c8a:	4452      	add	r2, sl
 8007c8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c90:	f84e 1b04 	str.w	r1, [lr], #4
 8007c94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c9c:	f8be 1000 	ldrh.w	r1, [lr]
 8007ca0:	4567      	cmp	r7, ip
 8007ca2:	fb09 110a 	mla	r1, r9, sl, r1
 8007ca6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007caa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cae:	d8e5      	bhi.n	8007c7c <__multiply+0x108>
 8007cb0:	9a01      	ldr	r2, [sp, #4]
 8007cb2:	50a9      	str	r1, [r5, r2]
 8007cb4:	3504      	adds	r5, #4
 8007cb6:	e79a      	b.n	8007bee <__multiply+0x7a>
 8007cb8:	3e01      	subs	r6, #1
 8007cba:	e79c      	b.n	8007bf6 <__multiply+0x82>
 8007cbc:	0800a8e3 	.word	0x0800a8e3
 8007cc0:	0800a8f4 	.word	0x0800a8f4

08007cc4 <__pow5mult>:
 8007cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	4615      	mov	r5, r2
 8007cca:	f012 0203 	ands.w	r2, r2, #3
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	d007      	beq.n	8007ce4 <__pow5mult+0x20>
 8007cd4:	4c25      	ldr	r4, [pc, #148]	; (8007d6c <__pow5mult+0xa8>)
 8007cd6:	3a01      	subs	r2, #1
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cde:	f7ff fe55 	bl	800798c <__multadd>
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	10ad      	asrs	r5, r5, #2
 8007ce6:	d03d      	beq.n	8007d64 <__pow5mult+0xa0>
 8007ce8:	69f4      	ldr	r4, [r6, #28]
 8007cea:	b97c      	cbnz	r4, 8007d0c <__pow5mult+0x48>
 8007cec:	2010      	movs	r0, #16
 8007cee:	f7ff fd37 	bl	8007760 <malloc>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	61f0      	str	r0, [r6, #28]
 8007cf6:	b928      	cbnz	r0, 8007d04 <__pow5mult+0x40>
 8007cf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007cfc:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <__pow5mult+0xac>)
 8007cfe:	481d      	ldr	r0, [pc, #116]	; (8007d74 <__pow5mult+0xb0>)
 8007d00:	f001 fb6e 	bl	80093e0 <__assert_func>
 8007d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d08:	6004      	str	r4, [r0, #0]
 8007d0a:	60c4      	str	r4, [r0, #12]
 8007d0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d14:	b94c      	cbnz	r4, 8007d2a <__pow5mult+0x66>
 8007d16:	f240 2171 	movw	r1, #625	; 0x271
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7ff ff14 	bl	8007b48 <__i2b>
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d28:	6003      	str	r3, [r0, #0]
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	07eb      	lsls	r3, r5, #31
 8007d30:	d50a      	bpl.n	8007d48 <__pow5mult+0x84>
 8007d32:	4639      	mov	r1, r7
 8007d34:	4622      	mov	r2, r4
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff ff1c 	bl	8007b74 <__multiply>
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	4639      	mov	r1, r7
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff fe01 	bl	8007948 <_Bfree>
 8007d46:	4647      	mov	r7, r8
 8007d48:	106d      	asrs	r5, r5, #1
 8007d4a:	d00b      	beq.n	8007d64 <__pow5mult+0xa0>
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	b938      	cbnz	r0, 8007d60 <__pow5mult+0x9c>
 8007d50:	4622      	mov	r2, r4
 8007d52:	4621      	mov	r1, r4
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff ff0d 	bl	8007b74 <__multiply>
 8007d5a:	6020      	str	r0, [r4, #0]
 8007d5c:	f8c0 9000 	str.w	r9, [r0]
 8007d60:	4604      	mov	r4, r0
 8007d62:	e7e4      	b.n	8007d2e <__pow5mult+0x6a>
 8007d64:	4638      	mov	r0, r7
 8007d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	bf00      	nop
 8007d6c:	0800aa40 	.word	0x0800aa40
 8007d70:	0800a874 	.word	0x0800a874
 8007d74:	0800a8f4 	.word	0x0800a8f4

08007d78 <__lshift>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	4607      	mov	r7, r0
 8007d80:	4691      	mov	r9, r2
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	6849      	ldr	r1, [r1, #4]
 8007d86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d8a:	68a3      	ldr	r3, [r4, #8]
 8007d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d90:	f108 0601 	add.w	r6, r8, #1
 8007d94:	42b3      	cmp	r3, r6
 8007d96:	db0b      	blt.n	8007db0 <__lshift+0x38>
 8007d98:	4638      	mov	r0, r7
 8007d9a:	f7ff fd95 	bl	80078c8 <_Balloc>
 8007d9e:	4605      	mov	r5, r0
 8007da0:	b948      	cbnz	r0, 8007db6 <__lshift+0x3e>
 8007da2:	4602      	mov	r2, r0
 8007da4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007da8:	4b27      	ldr	r3, [pc, #156]	; (8007e48 <__lshift+0xd0>)
 8007daa:	4828      	ldr	r0, [pc, #160]	; (8007e4c <__lshift+0xd4>)
 8007dac:	f001 fb18 	bl	80093e0 <__assert_func>
 8007db0:	3101      	adds	r1, #1
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	e7ee      	b.n	8007d94 <__lshift+0x1c>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f100 0114 	add.w	r1, r0, #20
 8007dbc:	f100 0210 	add.w	r2, r0, #16
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	4553      	cmp	r3, sl
 8007dc4:	db33      	blt.n	8007e2e <__lshift+0xb6>
 8007dc6:	6920      	ldr	r0, [r4, #16]
 8007dc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dcc:	f104 0314 	add.w	r3, r4, #20
 8007dd0:	f019 091f 	ands.w	r9, r9, #31
 8007dd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ddc:	d02b      	beq.n	8007e36 <__lshift+0xbe>
 8007dde:	468a      	mov	sl, r1
 8007de0:	2200      	movs	r2, #0
 8007de2:	f1c9 0e20 	rsb	lr, r9, #32
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	fa00 f009 	lsl.w	r0, r0, r9
 8007dec:	4310      	orrs	r0, r2
 8007dee:	f84a 0b04 	str.w	r0, [sl], #4
 8007df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df6:	459c      	cmp	ip, r3
 8007df8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dfc:	d8f3      	bhi.n	8007de6 <__lshift+0x6e>
 8007dfe:	ebac 0304 	sub.w	r3, ip, r4
 8007e02:	3b15      	subs	r3, #21
 8007e04:	f023 0303 	bic.w	r3, r3, #3
 8007e08:	3304      	adds	r3, #4
 8007e0a:	f104 0015 	add.w	r0, r4, #21
 8007e0e:	4584      	cmp	ip, r0
 8007e10:	bf38      	it	cc
 8007e12:	2304      	movcc	r3, #4
 8007e14:	50ca      	str	r2, [r1, r3]
 8007e16:	b10a      	cbz	r2, 8007e1c <__lshift+0xa4>
 8007e18:	f108 0602 	add.w	r6, r8, #2
 8007e1c:	3e01      	subs	r6, #1
 8007e1e:	4638      	mov	r0, r7
 8007e20:	4621      	mov	r1, r4
 8007e22:	612e      	str	r6, [r5, #16]
 8007e24:	f7ff fd90 	bl	8007948 <_Bfree>
 8007e28:	4628      	mov	r0, r5
 8007e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e32:	3301      	adds	r3, #1
 8007e34:	e7c5      	b.n	8007dc2 <__lshift+0x4a>
 8007e36:	3904      	subs	r1, #4
 8007e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e3c:	459c      	cmp	ip, r3
 8007e3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e42:	d8f9      	bhi.n	8007e38 <__lshift+0xc0>
 8007e44:	e7ea      	b.n	8007e1c <__lshift+0xa4>
 8007e46:	bf00      	nop
 8007e48:	0800a8e3 	.word	0x0800a8e3
 8007e4c:	0800a8f4 	.word	0x0800a8f4

08007e50 <__mcmp>:
 8007e50:	4603      	mov	r3, r0
 8007e52:	690a      	ldr	r2, [r1, #16]
 8007e54:	6900      	ldr	r0, [r0, #16]
 8007e56:	b530      	push	{r4, r5, lr}
 8007e58:	1a80      	subs	r0, r0, r2
 8007e5a:	d10d      	bne.n	8007e78 <__mcmp+0x28>
 8007e5c:	3314      	adds	r3, #20
 8007e5e:	3114      	adds	r1, #20
 8007e60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e70:	4295      	cmp	r5, r2
 8007e72:	d002      	beq.n	8007e7a <__mcmp+0x2a>
 8007e74:	d304      	bcc.n	8007e80 <__mcmp+0x30>
 8007e76:	2001      	movs	r0, #1
 8007e78:	bd30      	pop	{r4, r5, pc}
 8007e7a:	42a3      	cmp	r3, r4
 8007e7c:	d3f4      	bcc.n	8007e68 <__mcmp+0x18>
 8007e7e:	e7fb      	b.n	8007e78 <__mcmp+0x28>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	e7f8      	b.n	8007e78 <__mcmp+0x28>
	...

08007e88 <__mdiff>:
 8007e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	460d      	mov	r5, r1
 8007e8e:	4607      	mov	r7, r0
 8007e90:	4611      	mov	r1, r2
 8007e92:	4628      	mov	r0, r5
 8007e94:	4614      	mov	r4, r2
 8007e96:	f7ff ffdb 	bl	8007e50 <__mcmp>
 8007e9a:	1e06      	subs	r6, r0, #0
 8007e9c:	d111      	bne.n	8007ec2 <__mdiff+0x3a>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff fd11 	bl	80078c8 <_Balloc>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	b928      	cbnz	r0, 8007eb6 <__mdiff+0x2e>
 8007eaa:	f240 2137 	movw	r1, #567	; 0x237
 8007eae:	4b3a      	ldr	r3, [pc, #232]	; (8007f98 <__mdiff+0x110>)
 8007eb0:	483a      	ldr	r0, [pc, #232]	; (8007f9c <__mdiff+0x114>)
 8007eb2:	f001 fa95 	bl	80093e0 <__assert_func>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec2:	bfa4      	itt	ge
 8007ec4:	4623      	movge	r3, r4
 8007ec6:	462c      	movge	r4, r5
 8007ec8:	4638      	mov	r0, r7
 8007eca:	6861      	ldr	r1, [r4, #4]
 8007ecc:	bfa6      	itte	ge
 8007ece:	461d      	movge	r5, r3
 8007ed0:	2600      	movge	r6, #0
 8007ed2:	2601      	movlt	r6, #1
 8007ed4:	f7ff fcf8 	bl	80078c8 <_Balloc>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	b918      	cbnz	r0, 8007ee4 <__mdiff+0x5c>
 8007edc:	f240 2145 	movw	r1, #581	; 0x245
 8007ee0:	4b2d      	ldr	r3, [pc, #180]	; (8007f98 <__mdiff+0x110>)
 8007ee2:	e7e5      	b.n	8007eb0 <__mdiff+0x28>
 8007ee4:	f102 0814 	add.w	r8, r2, #20
 8007ee8:	46c2      	mov	sl, r8
 8007eea:	f04f 0c00 	mov.w	ip, #0
 8007eee:	6927      	ldr	r7, [r4, #16]
 8007ef0:	60c6      	str	r6, [r0, #12]
 8007ef2:	692e      	ldr	r6, [r5, #16]
 8007ef4:	f104 0014 	add.w	r0, r4, #20
 8007ef8:	f105 0914 	add.w	r9, r5, #20
 8007efc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f04:	3410      	adds	r4, #16
 8007f06:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007f0a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f0e:	fa1f f18b 	uxth.w	r1, fp
 8007f12:	4461      	add	r1, ip
 8007f14:	fa1f fc83 	uxth.w	ip, r3
 8007f18:	0c1b      	lsrs	r3, r3, #16
 8007f1a:	eba1 010c 	sub.w	r1, r1, ip
 8007f1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f22:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f26:	b289      	uxth	r1, r1
 8007f28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007f2c:	454e      	cmp	r6, r9
 8007f2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007f32:	f84a 1b04 	str.w	r1, [sl], #4
 8007f36:	d8e6      	bhi.n	8007f06 <__mdiff+0x7e>
 8007f38:	1b73      	subs	r3, r6, r5
 8007f3a:	3b15      	subs	r3, #21
 8007f3c:	f023 0303 	bic.w	r3, r3, #3
 8007f40:	3515      	adds	r5, #21
 8007f42:	3304      	adds	r3, #4
 8007f44:	42ae      	cmp	r6, r5
 8007f46:	bf38      	it	cc
 8007f48:	2304      	movcc	r3, #4
 8007f4a:	4418      	add	r0, r3
 8007f4c:	4443      	add	r3, r8
 8007f4e:	461e      	mov	r6, r3
 8007f50:	4605      	mov	r5, r0
 8007f52:	4575      	cmp	r5, lr
 8007f54:	d30e      	bcc.n	8007f74 <__mdiff+0xec>
 8007f56:	f10e 0103 	add.w	r1, lr, #3
 8007f5a:	1a09      	subs	r1, r1, r0
 8007f5c:	f021 0103 	bic.w	r1, r1, #3
 8007f60:	3803      	subs	r0, #3
 8007f62:	4586      	cmp	lr, r0
 8007f64:	bf38      	it	cc
 8007f66:	2100      	movcc	r1, #0
 8007f68:	440b      	add	r3, r1
 8007f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f6e:	b189      	cbz	r1, 8007f94 <__mdiff+0x10c>
 8007f70:	6117      	str	r7, [r2, #16]
 8007f72:	e7a3      	b.n	8007ebc <__mdiff+0x34>
 8007f74:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f78:	fa1f f188 	uxth.w	r1, r8
 8007f7c:	4461      	add	r1, ip
 8007f7e:	140c      	asrs	r4, r1, #16
 8007f80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f84:	b289      	uxth	r1, r1
 8007f86:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f8a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007f8e:	f846 1b04 	str.w	r1, [r6], #4
 8007f92:	e7de      	b.n	8007f52 <__mdiff+0xca>
 8007f94:	3f01      	subs	r7, #1
 8007f96:	e7e8      	b.n	8007f6a <__mdiff+0xe2>
 8007f98:	0800a8e3 	.word	0x0800a8e3
 8007f9c:	0800a8f4 	.word	0x0800a8f4

08007fa0 <__ulp>:
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	; (8007fdc <__ulp+0x3c>)
 8007fa2:	400b      	ands	r3, r1
 8007fa4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc08      	bgt.n	8007fbe <__ulp+0x1e>
 8007fac:	425b      	negs	r3, r3
 8007fae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007fb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007fb6:	da04      	bge.n	8007fc2 <__ulp+0x22>
 8007fb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fbc:	4113      	asrs	r3, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	e008      	b.n	8007fd4 <__ulp+0x34>
 8007fc2:	f1a2 0314 	sub.w	r3, r2, #20
 8007fc6:	2b1e      	cmp	r3, #30
 8007fc8:	bfd6      	itet	le
 8007fca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007fce:	2201      	movgt	r2, #1
 8007fd0:	40da      	lsrle	r2, r3
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	7ff00000 	.word	0x7ff00000

08007fe0 <__b2d>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	6905      	ldr	r5, [r0, #16]
 8007fe4:	f100 0714 	add.w	r7, r0, #20
 8007fe8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007fec:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007ff0:	1f2e      	subs	r6, r5, #4
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7ff fd5a 	bl	8007aac <__hi0bits>
 8007ff8:	f1c0 0220 	rsb	r2, r0, #32
 8007ffc:	280a      	cmp	r0, #10
 8007ffe:	4603      	mov	r3, r0
 8008000:	f8df c068 	ldr.w	ip, [pc, #104]	; 800806c <__b2d+0x8c>
 8008004:	600a      	str	r2, [r1, #0]
 8008006:	dc12      	bgt.n	800802e <__b2d+0x4e>
 8008008:	f1c0 0e0b 	rsb	lr, r0, #11
 800800c:	fa24 f20e 	lsr.w	r2, r4, lr
 8008010:	42b7      	cmp	r7, r6
 8008012:	ea42 010c 	orr.w	r1, r2, ip
 8008016:	bf2c      	ite	cs
 8008018:	2200      	movcs	r2, #0
 800801a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800801e:	3315      	adds	r3, #21
 8008020:	fa04 f303 	lsl.w	r3, r4, r3
 8008024:	fa22 f20e 	lsr.w	r2, r2, lr
 8008028:	431a      	orrs	r2, r3
 800802a:	4610      	mov	r0, r2
 800802c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800802e:	42b7      	cmp	r7, r6
 8008030:	bf2e      	itee	cs
 8008032:	2200      	movcs	r2, #0
 8008034:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008038:	f1a5 0608 	subcc.w	r6, r5, #8
 800803c:	3b0b      	subs	r3, #11
 800803e:	d012      	beq.n	8008066 <__b2d+0x86>
 8008040:	f1c3 0520 	rsb	r5, r3, #32
 8008044:	fa22 f105 	lsr.w	r1, r2, r5
 8008048:	409c      	lsls	r4, r3
 800804a:	430c      	orrs	r4, r1
 800804c:	42be      	cmp	r6, r7
 800804e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008052:	bf94      	ite	ls
 8008054:	2400      	movls	r4, #0
 8008056:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800805a:	409a      	lsls	r2, r3
 800805c:	40ec      	lsrs	r4, r5
 800805e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008062:	4322      	orrs	r2, r4
 8008064:	e7e1      	b.n	800802a <__b2d+0x4a>
 8008066:	ea44 010c 	orr.w	r1, r4, ip
 800806a:	e7de      	b.n	800802a <__b2d+0x4a>
 800806c:	3ff00000 	.word	0x3ff00000

08008070 <__d2b>:
 8008070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008072:	2101      	movs	r1, #1
 8008074:	4617      	mov	r7, r2
 8008076:	461c      	mov	r4, r3
 8008078:	9e08      	ldr	r6, [sp, #32]
 800807a:	f7ff fc25 	bl	80078c8 <_Balloc>
 800807e:	4605      	mov	r5, r0
 8008080:	b930      	cbnz	r0, 8008090 <__d2b+0x20>
 8008082:	4602      	mov	r2, r0
 8008084:	f240 310f 	movw	r1, #783	; 0x30f
 8008088:	4b22      	ldr	r3, [pc, #136]	; (8008114 <__d2b+0xa4>)
 800808a:	4823      	ldr	r0, [pc, #140]	; (8008118 <__d2b+0xa8>)
 800808c:	f001 f9a8 	bl	80093e0 <__assert_func>
 8008090:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008094:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008098:	bb24      	cbnz	r4, 80080e4 <__d2b+0x74>
 800809a:	2f00      	cmp	r7, #0
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	d026      	beq.n	80080ee <__d2b+0x7e>
 80080a0:	4668      	mov	r0, sp
 80080a2:	9700      	str	r7, [sp, #0]
 80080a4:	f7ff fd22 	bl	8007aec <__lo0bits>
 80080a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080ac:	b1e8      	cbz	r0, 80080ea <__d2b+0x7a>
 80080ae:	f1c0 0320 	rsb	r3, r0, #32
 80080b2:	fa02 f303 	lsl.w	r3, r2, r3
 80080b6:	430b      	orrs	r3, r1
 80080b8:	40c2      	lsrs	r2, r0
 80080ba:	616b      	str	r3, [r5, #20]
 80080bc:	9201      	str	r2, [sp, #4]
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf14      	ite	ne
 80080c4:	2102      	movne	r1, #2
 80080c6:	2101      	moveq	r1, #1
 80080c8:	61ab      	str	r3, [r5, #24]
 80080ca:	6129      	str	r1, [r5, #16]
 80080cc:	b1bc      	cbz	r4, 80080fe <__d2b+0x8e>
 80080ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080d2:	4404      	add	r4, r0
 80080d4:	6034      	str	r4, [r6, #0]
 80080d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080dc:	6018      	str	r0, [r3, #0]
 80080de:	4628      	mov	r0, r5
 80080e0:	b003      	add	sp, #12
 80080e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080e8:	e7d7      	b.n	800809a <__d2b+0x2a>
 80080ea:	6169      	str	r1, [r5, #20]
 80080ec:	e7e7      	b.n	80080be <__d2b+0x4e>
 80080ee:	a801      	add	r0, sp, #4
 80080f0:	f7ff fcfc 	bl	8007aec <__lo0bits>
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	2101      	movs	r1, #1
 80080f8:	616b      	str	r3, [r5, #20]
 80080fa:	3020      	adds	r0, #32
 80080fc:	e7e5      	b.n	80080ca <__d2b+0x5a>
 80080fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008102:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008106:	6030      	str	r0, [r6, #0]
 8008108:	6918      	ldr	r0, [r3, #16]
 800810a:	f7ff fccf 	bl	8007aac <__hi0bits>
 800810e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008112:	e7e2      	b.n	80080da <__d2b+0x6a>
 8008114:	0800a8e3 	.word	0x0800a8e3
 8008118:	0800a8f4 	.word	0x0800a8f4

0800811c <__ratio>:
 800811c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	4688      	mov	r8, r1
 8008122:	4669      	mov	r1, sp
 8008124:	4681      	mov	r9, r0
 8008126:	f7ff ff5b 	bl	8007fe0 <__b2d>
 800812a:	460f      	mov	r7, r1
 800812c:	4604      	mov	r4, r0
 800812e:	460d      	mov	r5, r1
 8008130:	4640      	mov	r0, r8
 8008132:	a901      	add	r1, sp, #4
 8008134:	f7ff ff54 	bl	8007fe0 <__b2d>
 8008138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800813c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008140:	468b      	mov	fp, r1
 8008142:	eba3 0c02 	sub.w	ip, r3, r2
 8008146:	e9dd 3200 	ldrd	r3, r2, [sp]
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008150:	2b00      	cmp	r3, #0
 8008152:	bfd5      	itete	le
 8008154:	460a      	movle	r2, r1
 8008156:	462a      	movgt	r2, r5
 8008158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800815c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008160:	bfd8      	it	le
 8008162:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008166:	465b      	mov	r3, fp
 8008168:	4602      	mov	r2, r0
 800816a:	4639      	mov	r1, r7
 800816c:	4620      	mov	r0, r4
 800816e:	f7f8 fadd 	bl	800072c <__aeabi_ddiv>
 8008172:	b003      	add	sp, #12
 8008174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008178 <__copybits>:
 8008178:	3901      	subs	r1, #1
 800817a:	b570      	push	{r4, r5, r6, lr}
 800817c:	1149      	asrs	r1, r1, #5
 800817e:	6914      	ldr	r4, [r2, #16]
 8008180:	3101      	adds	r1, #1
 8008182:	f102 0314 	add.w	r3, r2, #20
 8008186:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800818a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800818e:	1f05      	subs	r5, r0, #4
 8008190:	42a3      	cmp	r3, r4
 8008192:	d30c      	bcc.n	80081ae <__copybits+0x36>
 8008194:	1aa3      	subs	r3, r4, r2
 8008196:	3b11      	subs	r3, #17
 8008198:	f023 0303 	bic.w	r3, r3, #3
 800819c:	3211      	adds	r2, #17
 800819e:	42a2      	cmp	r2, r4
 80081a0:	bf88      	it	hi
 80081a2:	2300      	movhi	r3, #0
 80081a4:	4418      	add	r0, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	4288      	cmp	r0, r1
 80081aa:	d305      	bcc.n	80081b8 <__copybits+0x40>
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80081b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80081b6:	e7eb      	b.n	8008190 <__copybits+0x18>
 80081b8:	f840 3b04 	str.w	r3, [r0], #4
 80081bc:	e7f4      	b.n	80081a8 <__copybits+0x30>

080081be <__any_on>:
 80081be:	f100 0214 	add.w	r2, r0, #20
 80081c2:	6900      	ldr	r0, [r0, #16]
 80081c4:	114b      	asrs	r3, r1, #5
 80081c6:	4298      	cmp	r0, r3
 80081c8:	b510      	push	{r4, lr}
 80081ca:	db11      	blt.n	80081f0 <__any_on+0x32>
 80081cc:	dd0a      	ble.n	80081e4 <__any_on+0x26>
 80081ce:	f011 011f 	ands.w	r1, r1, #31
 80081d2:	d007      	beq.n	80081e4 <__any_on+0x26>
 80081d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80081d8:	fa24 f001 	lsr.w	r0, r4, r1
 80081dc:	fa00 f101 	lsl.w	r1, r0, r1
 80081e0:	428c      	cmp	r4, r1
 80081e2:	d10b      	bne.n	80081fc <__any_on+0x3e>
 80081e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d803      	bhi.n	80081f4 <__any_on+0x36>
 80081ec:	2000      	movs	r0, #0
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	4603      	mov	r3, r0
 80081f2:	e7f7      	b.n	80081e4 <__any_on+0x26>
 80081f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d0f5      	beq.n	80081e8 <__any_on+0x2a>
 80081fc:	2001      	movs	r0, #1
 80081fe:	e7f6      	b.n	80081ee <__any_on+0x30>

08008200 <sulp>:
 8008200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008204:	460f      	mov	r7, r1
 8008206:	4690      	mov	r8, r2
 8008208:	f7ff feca 	bl	8007fa0 <__ulp>
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	f1b8 0f00 	cmp.w	r8, #0
 8008214:	d011      	beq.n	800823a <sulp+0x3a>
 8008216:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800821a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800821e:	2b00      	cmp	r3, #0
 8008220:	dd0b      	ble.n	800823a <sulp+0x3a>
 8008222:	2400      	movs	r4, #0
 8008224:	051b      	lsls	r3, r3, #20
 8008226:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800822a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800822e:	4622      	mov	r2, r4
 8008230:	462b      	mov	r3, r5
 8008232:	f7f8 f951 	bl	80004d8 <__aeabi_dmul>
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	4620      	mov	r0, r4
 800823c:	4629      	mov	r1, r5
 800823e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008242:	0000      	movs	r0, r0
 8008244:	0000      	movs	r0, r0
	...

08008248 <_strtod_l>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	b09f      	sub	sp, #124	; 0x7c
 800824e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008250:	2200      	movs	r2, #0
 8008252:	4604      	mov	r4, r0
 8008254:	921a      	str	r2, [sp, #104]	; 0x68
 8008256:	460d      	mov	r5, r1
 8008258:	f04f 0800 	mov.w	r8, #0
 800825c:	f04f 0900 	mov.w	r9, #0
 8008260:	460a      	mov	r2, r1
 8008262:	9219      	str	r2, [sp, #100]	; 0x64
 8008264:	7811      	ldrb	r1, [r2, #0]
 8008266:	292b      	cmp	r1, #43	; 0x2b
 8008268:	d04a      	beq.n	8008300 <_strtod_l+0xb8>
 800826a:	d838      	bhi.n	80082de <_strtod_l+0x96>
 800826c:	290d      	cmp	r1, #13
 800826e:	d832      	bhi.n	80082d6 <_strtod_l+0x8e>
 8008270:	2908      	cmp	r1, #8
 8008272:	d832      	bhi.n	80082da <_strtod_l+0x92>
 8008274:	2900      	cmp	r1, #0
 8008276:	d03b      	beq.n	80082f0 <_strtod_l+0xa8>
 8008278:	2200      	movs	r2, #0
 800827a:	920e      	str	r2, [sp, #56]	; 0x38
 800827c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800827e:	7832      	ldrb	r2, [r6, #0]
 8008280:	2a30      	cmp	r2, #48	; 0x30
 8008282:	f040 80b2 	bne.w	80083ea <_strtod_l+0x1a2>
 8008286:	7872      	ldrb	r2, [r6, #1]
 8008288:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800828c:	2a58      	cmp	r2, #88	; 0x58
 800828e:	d16e      	bne.n	800836e <_strtod_l+0x126>
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008294:	4620      	mov	r0, r4
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	ab1a      	add	r3, sp, #104	; 0x68
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	4a8c      	ldr	r2, [pc, #560]	; (80084d0 <_strtod_l+0x288>)
 800829e:	ab1b      	add	r3, sp, #108	; 0x6c
 80082a0:	a919      	add	r1, sp, #100	; 0x64
 80082a2:	f001 f937 	bl	8009514 <__gethex>
 80082a6:	f010 070f 	ands.w	r7, r0, #15
 80082aa:	4605      	mov	r5, r0
 80082ac:	d005      	beq.n	80082ba <_strtod_l+0x72>
 80082ae:	2f06      	cmp	r7, #6
 80082b0:	d128      	bne.n	8008304 <_strtod_l+0xbc>
 80082b2:	2300      	movs	r3, #0
 80082b4:	3601      	adds	r6, #1
 80082b6:	9619      	str	r6, [sp, #100]	; 0x64
 80082b8:	930e      	str	r3, [sp, #56]	; 0x38
 80082ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 85a0 	bne.w	8008e02 <_strtod_l+0xbba>
 80082c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082c4:	b1cb      	cbz	r3, 80082fa <_strtod_l+0xb2>
 80082c6:	4642      	mov	r2, r8
 80082c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082cc:	4610      	mov	r0, r2
 80082ce:	4619      	mov	r1, r3
 80082d0:	b01f      	add	sp, #124	; 0x7c
 80082d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d6:	2920      	cmp	r1, #32
 80082d8:	d1ce      	bne.n	8008278 <_strtod_l+0x30>
 80082da:	3201      	adds	r2, #1
 80082dc:	e7c1      	b.n	8008262 <_strtod_l+0x1a>
 80082de:	292d      	cmp	r1, #45	; 0x2d
 80082e0:	d1ca      	bne.n	8008278 <_strtod_l+0x30>
 80082e2:	2101      	movs	r1, #1
 80082e4:	910e      	str	r1, [sp, #56]	; 0x38
 80082e6:	1c51      	adds	r1, r2, #1
 80082e8:	9119      	str	r1, [sp, #100]	; 0x64
 80082ea:	7852      	ldrb	r2, [r2, #1]
 80082ec:	2a00      	cmp	r2, #0
 80082ee:	d1c5      	bne.n	800827c <_strtod_l+0x34>
 80082f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f2:	9519      	str	r5, [sp, #100]	; 0x64
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 8582 	bne.w	8008dfe <_strtod_l+0xbb6>
 80082fa:	4642      	mov	r2, r8
 80082fc:	464b      	mov	r3, r9
 80082fe:	e7e5      	b.n	80082cc <_strtod_l+0x84>
 8008300:	2100      	movs	r1, #0
 8008302:	e7ef      	b.n	80082e4 <_strtod_l+0x9c>
 8008304:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008306:	b13a      	cbz	r2, 8008318 <_strtod_l+0xd0>
 8008308:	2135      	movs	r1, #53	; 0x35
 800830a:	a81c      	add	r0, sp, #112	; 0x70
 800830c:	f7ff ff34 	bl	8008178 <__copybits>
 8008310:	4620      	mov	r0, r4
 8008312:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008314:	f7ff fb18 	bl	8007948 <_Bfree>
 8008318:	3f01      	subs	r7, #1
 800831a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800831c:	2f04      	cmp	r7, #4
 800831e:	d806      	bhi.n	800832e <_strtod_l+0xe6>
 8008320:	e8df f007 	tbb	[pc, r7]
 8008324:	201d0314 	.word	0x201d0314
 8008328:	14          	.byte	0x14
 8008329:	00          	.byte	0x00
 800832a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800832e:	05e9      	lsls	r1, r5, #23
 8008330:	bf48      	it	mi
 8008332:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008336:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800833a:	0d1b      	lsrs	r3, r3, #20
 800833c:	051b      	lsls	r3, r3, #20
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1bb      	bne.n	80082ba <_strtod_l+0x72>
 8008342:	f7fe fb15 	bl	8006970 <__errno>
 8008346:	2322      	movs	r3, #34	; 0x22
 8008348:	6003      	str	r3, [r0, #0]
 800834a:	e7b6      	b.n	80082ba <_strtod_l+0x72>
 800834c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008350:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008354:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008358:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800835c:	e7e7      	b.n	800832e <_strtod_l+0xe6>
 800835e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80084d4 <_strtod_l+0x28c>
 8008362:	e7e4      	b.n	800832e <_strtod_l+0xe6>
 8008364:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008368:	f04f 38ff 	mov.w	r8, #4294967295
 800836c:	e7df      	b.n	800832e <_strtod_l+0xe6>
 800836e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	9219      	str	r2, [sp, #100]	; 0x64
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	2b30      	cmp	r3, #48	; 0x30
 8008378:	d0f9      	beq.n	800836e <_strtod_l+0x126>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d09d      	beq.n	80082ba <_strtod_l+0x72>
 800837e:	2301      	movs	r3, #1
 8008380:	f04f 0a00 	mov.w	sl, #0
 8008384:	220a      	movs	r2, #10
 8008386:	46d3      	mov	fp, sl
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800838c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008390:	930b      	str	r3, [sp, #44]	; 0x2c
 8008392:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008394:	7806      	ldrb	r6, [r0, #0]
 8008396:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800839a:	b2d9      	uxtb	r1, r3
 800839c:	2909      	cmp	r1, #9
 800839e:	d926      	bls.n	80083ee <_strtod_l+0x1a6>
 80083a0:	2201      	movs	r2, #1
 80083a2:	494d      	ldr	r1, [pc, #308]	; (80084d8 <_strtod_l+0x290>)
 80083a4:	f000 ffe6 	bl	8009374 <strncmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d030      	beq.n	800840e <_strtod_l+0x1c6>
 80083ac:	2000      	movs	r0, #0
 80083ae:	4632      	mov	r2, r6
 80083b0:	4603      	mov	r3, r0
 80083b2:	465e      	mov	r6, fp
 80083b4:	9008      	str	r0, [sp, #32]
 80083b6:	2a65      	cmp	r2, #101	; 0x65
 80083b8:	d001      	beq.n	80083be <_strtod_l+0x176>
 80083ba:	2a45      	cmp	r2, #69	; 0x45
 80083bc:	d113      	bne.n	80083e6 <_strtod_l+0x19e>
 80083be:	b91e      	cbnz	r6, 80083c8 <_strtod_l+0x180>
 80083c0:	9a05      	ldr	r2, [sp, #20]
 80083c2:	4302      	orrs	r2, r0
 80083c4:	d094      	beq.n	80082f0 <_strtod_l+0xa8>
 80083c6:	2600      	movs	r6, #0
 80083c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80083ca:	1c6a      	adds	r2, r5, #1
 80083cc:	9219      	str	r2, [sp, #100]	; 0x64
 80083ce:	786a      	ldrb	r2, [r5, #1]
 80083d0:	2a2b      	cmp	r2, #43	; 0x2b
 80083d2:	d074      	beq.n	80084be <_strtod_l+0x276>
 80083d4:	2a2d      	cmp	r2, #45	; 0x2d
 80083d6:	d078      	beq.n	80084ca <_strtod_l+0x282>
 80083d8:	f04f 0c00 	mov.w	ip, #0
 80083dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80083e0:	2909      	cmp	r1, #9
 80083e2:	d97f      	bls.n	80084e4 <_strtod_l+0x29c>
 80083e4:	9519      	str	r5, [sp, #100]	; 0x64
 80083e6:	2700      	movs	r7, #0
 80083e8:	e09e      	b.n	8008528 <_strtod_l+0x2e0>
 80083ea:	2300      	movs	r3, #0
 80083ec:	e7c8      	b.n	8008380 <_strtod_l+0x138>
 80083ee:	f1bb 0f08 	cmp.w	fp, #8
 80083f2:	bfd8      	it	le
 80083f4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80083f6:	f100 0001 	add.w	r0, r0, #1
 80083fa:	bfd6      	itet	le
 80083fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008400:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008404:	930a      	strle	r3, [sp, #40]	; 0x28
 8008406:	f10b 0b01 	add.w	fp, fp, #1
 800840a:	9019      	str	r0, [sp, #100]	; 0x64
 800840c:	e7c1      	b.n	8008392 <_strtod_l+0x14a>
 800840e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	9219      	str	r2, [sp, #100]	; 0x64
 8008414:	785a      	ldrb	r2, [r3, #1]
 8008416:	f1bb 0f00 	cmp.w	fp, #0
 800841a:	d037      	beq.n	800848c <_strtod_l+0x244>
 800841c:	465e      	mov	r6, fp
 800841e:	9008      	str	r0, [sp, #32]
 8008420:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008424:	2b09      	cmp	r3, #9
 8008426:	d912      	bls.n	800844e <_strtod_l+0x206>
 8008428:	2301      	movs	r3, #1
 800842a:	e7c4      	b.n	80083b6 <_strtod_l+0x16e>
 800842c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800842e:	3001      	adds	r0, #1
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	9219      	str	r2, [sp, #100]	; 0x64
 8008434:	785a      	ldrb	r2, [r3, #1]
 8008436:	2a30      	cmp	r2, #48	; 0x30
 8008438:	d0f8      	beq.n	800842c <_strtod_l+0x1e4>
 800843a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800843e:	2b08      	cmp	r3, #8
 8008440:	f200 84e4 	bhi.w	8008e0c <_strtod_l+0xbc4>
 8008444:	9008      	str	r0, [sp, #32]
 8008446:	2000      	movs	r0, #0
 8008448:	4606      	mov	r6, r0
 800844a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800844c:	930b      	str	r3, [sp, #44]	; 0x2c
 800844e:	3a30      	subs	r2, #48	; 0x30
 8008450:	f100 0301 	add.w	r3, r0, #1
 8008454:	d014      	beq.n	8008480 <_strtod_l+0x238>
 8008456:	9908      	ldr	r1, [sp, #32]
 8008458:	eb00 0c06 	add.w	ip, r0, r6
 800845c:	4419      	add	r1, r3
 800845e:	9108      	str	r1, [sp, #32]
 8008460:	4633      	mov	r3, r6
 8008462:	210a      	movs	r1, #10
 8008464:	4563      	cmp	r3, ip
 8008466:	d113      	bne.n	8008490 <_strtod_l+0x248>
 8008468:	1833      	adds	r3, r6, r0
 800846a:	2b08      	cmp	r3, #8
 800846c:	f106 0601 	add.w	r6, r6, #1
 8008470:	4406      	add	r6, r0
 8008472:	dc1a      	bgt.n	80084aa <_strtod_l+0x262>
 8008474:	230a      	movs	r3, #10
 8008476:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008478:	fb03 2301 	mla	r3, r3, r1, r2
 800847c:	930a      	str	r3, [sp, #40]	; 0x28
 800847e:	2300      	movs	r3, #0
 8008480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008482:	4618      	mov	r0, r3
 8008484:	1c51      	adds	r1, r2, #1
 8008486:	9119      	str	r1, [sp, #100]	; 0x64
 8008488:	7852      	ldrb	r2, [r2, #1]
 800848a:	e7c9      	b.n	8008420 <_strtod_l+0x1d8>
 800848c:	4658      	mov	r0, fp
 800848e:	e7d2      	b.n	8008436 <_strtod_l+0x1ee>
 8008490:	2b08      	cmp	r3, #8
 8008492:	f103 0301 	add.w	r3, r3, #1
 8008496:	dc03      	bgt.n	80084a0 <_strtod_l+0x258>
 8008498:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800849a:	434f      	muls	r7, r1
 800849c:	970a      	str	r7, [sp, #40]	; 0x28
 800849e:	e7e1      	b.n	8008464 <_strtod_l+0x21c>
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	bfd8      	it	le
 80084a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80084a8:	e7dc      	b.n	8008464 <_strtod_l+0x21c>
 80084aa:	2e10      	cmp	r6, #16
 80084ac:	bfdc      	itt	le
 80084ae:	230a      	movle	r3, #10
 80084b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80084b4:	e7e3      	b.n	800847e <_strtod_l+0x236>
 80084b6:	2300      	movs	r3, #0
 80084b8:	9308      	str	r3, [sp, #32]
 80084ba:	2301      	movs	r3, #1
 80084bc:	e780      	b.n	80083c0 <_strtod_l+0x178>
 80084be:	f04f 0c00 	mov.w	ip, #0
 80084c2:	1caa      	adds	r2, r5, #2
 80084c4:	9219      	str	r2, [sp, #100]	; 0x64
 80084c6:	78aa      	ldrb	r2, [r5, #2]
 80084c8:	e788      	b.n	80083dc <_strtod_l+0x194>
 80084ca:	f04f 0c01 	mov.w	ip, #1
 80084ce:	e7f8      	b.n	80084c2 <_strtod_l+0x27a>
 80084d0:	0800aa50 	.word	0x0800aa50
 80084d4:	7ff00000 	.word	0x7ff00000
 80084d8:	0800aa4c 	.word	0x0800aa4c
 80084dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084de:	1c51      	adds	r1, r2, #1
 80084e0:	9119      	str	r1, [sp, #100]	; 0x64
 80084e2:	7852      	ldrb	r2, [r2, #1]
 80084e4:	2a30      	cmp	r2, #48	; 0x30
 80084e6:	d0f9      	beq.n	80084dc <_strtod_l+0x294>
 80084e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80084ec:	2908      	cmp	r1, #8
 80084ee:	f63f af7a 	bhi.w	80083e6 <_strtod_l+0x19e>
 80084f2:	3a30      	subs	r2, #48	; 0x30
 80084f4:	9209      	str	r2, [sp, #36]	; 0x24
 80084f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084f8:	920c      	str	r2, [sp, #48]	; 0x30
 80084fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084fc:	1c57      	adds	r7, r2, #1
 80084fe:	9719      	str	r7, [sp, #100]	; 0x64
 8008500:	7852      	ldrb	r2, [r2, #1]
 8008502:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008506:	f1be 0f09 	cmp.w	lr, #9
 800850a:	d938      	bls.n	800857e <_strtod_l+0x336>
 800850c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800850e:	1a7f      	subs	r7, r7, r1
 8008510:	2f08      	cmp	r7, #8
 8008512:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008516:	dc03      	bgt.n	8008520 <_strtod_l+0x2d8>
 8008518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800851a:	428f      	cmp	r7, r1
 800851c:	bfa8      	it	ge
 800851e:	460f      	movge	r7, r1
 8008520:	f1bc 0f00 	cmp.w	ip, #0
 8008524:	d000      	beq.n	8008528 <_strtod_l+0x2e0>
 8008526:	427f      	negs	r7, r7
 8008528:	2e00      	cmp	r6, #0
 800852a:	d14f      	bne.n	80085cc <_strtod_l+0x384>
 800852c:	9905      	ldr	r1, [sp, #20]
 800852e:	4301      	orrs	r1, r0
 8008530:	f47f aec3 	bne.w	80082ba <_strtod_l+0x72>
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f aedb 	bne.w	80082f0 <_strtod_l+0xa8>
 800853a:	2a69      	cmp	r2, #105	; 0x69
 800853c:	d029      	beq.n	8008592 <_strtod_l+0x34a>
 800853e:	dc26      	bgt.n	800858e <_strtod_l+0x346>
 8008540:	2a49      	cmp	r2, #73	; 0x49
 8008542:	d026      	beq.n	8008592 <_strtod_l+0x34a>
 8008544:	2a4e      	cmp	r2, #78	; 0x4e
 8008546:	f47f aed3 	bne.w	80082f0 <_strtod_l+0xa8>
 800854a:	499a      	ldr	r1, [pc, #616]	; (80087b4 <_strtod_l+0x56c>)
 800854c:	a819      	add	r0, sp, #100	; 0x64
 800854e:	f001 fa23 	bl	8009998 <__match>
 8008552:	2800      	cmp	r0, #0
 8008554:	f43f aecc 	beq.w	80082f0 <_strtod_l+0xa8>
 8008558:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b28      	cmp	r3, #40	; 0x28
 800855e:	d12f      	bne.n	80085c0 <_strtod_l+0x378>
 8008560:	4995      	ldr	r1, [pc, #596]	; (80087b8 <_strtod_l+0x570>)
 8008562:	aa1c      	add	r2, sp, #112	; 0x70
 8008564:	a819      	add	r0, sp, #100	; 0x64
 8008566:	f001 fa2b 	bl	80099c0 <__hexnan>
 800856a:	2805      	cmp	r0, #5
 800856c:	d128      	bne.n	80085c0 <_strtod_l+0x378>
 800856e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008570:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008574:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008578:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800857c:	e69d      	b.n	80082ba <_strtod_l+0x72>
 800857e:	210a      	movs	r1, #10
 8008580:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008582:	fb01 2107 	mla	r1, r1, r7, r2
 8008586:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800858a:	9209      	str	r2, [sp, #36]	; 0x24
 800858c:	e7b5      	b.n	80084fa <_strtod_l+0x2b2>
 800858e:	2a6e      	cmp	r2, #110	; 0x6e
 8008590:	e7d9      	b.n	8008546 <_strtod_l+0x2fe>
 8008592:	498a      	ldr	r1, [pc, #552]	; (80087bc <_strtod_l+0x574>)
 8008594:	a819      	add	r0, sp, #100	; 0x64
 8008596:	f001 f9ff 	bl	8009998 <__match>
 800859a:	2800      	cmp	r0, #0
 800859c:	f43f aea8 	beq.w	80082f0 <_strtod_l+0xa8>
 80085a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085a2:	4987      	ldr	r1, [pc, #540]	; (80087c0 <_strtod_l+0x578>)
 80085a4:	3b01      	subs	r3, #1
 80085a6:	a819      	add	r0, sp, #100	; 0x64
 80085a8:	9319      	str	r3, [sp, #100]	; 0x64
 80085aa:	f001 f9f5 	bl	8009998 <__match>
 80085ae:	b910      	cbnz	r0, 80085b6 <_strtod_l+0x36e>
 80085b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085b2:	3301      	adds	r3, #1
 80085b4:	9319      	str	r3, [sp, #100]	; 0x64
 80085b6:	f04f 0800 	mov.w	r8, #0
 80085ba:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80087c4 <_strtod_l+0x57c>
 80085be:	e67c      	b.n	80082ba <_strtod_l+0x72>
 80085c0:	4881      	ldr	r0, [pc, #516]	; (80087c8 <_strtod_l+0x580>)
 80085c2:	f000 ff07 	bl	80093d4 <nan>
 80085c6:	4680      	mov	r8, r0
 80085c8:	4689      	mov	r9, r1
 80085ca:	e676      	b.n	80082ba <_strtod_l+0x72>
 80085cc:	9b08      	ldr	r3, [sp, #32]
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	bf08      	it	eq
 80085d4:	46b3      	moveq	fp, r6
 80085d6:	1afb      	subs	r3, r7, r3
 80085d8:	2e10      	cmp	r6, #16
 80085da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085dc:	4635      	mov	r5, r6
 80085de:	9309      	str	r3, [sp, #36]	; 0x24
 80085e0:	bfa8      	it	ge
 80085e2:	2510      	movge	r5, #16
 80085e4:	f7f7 fefe 	bl	80003e4 <__aeabi_ui2d>
 80085e8:	2e09      	cmp	r6, #9
 80085ea:	4680      	mov	r8, r0
 80085ec:	4689      	mov	r9, r1
 80085ee:	dd13      	ble.n	8008618 <_strtod_l+0x3d0>
 80085f0:	4b76      	ldr	r3, [pc, #472]	; (80087cc <_strtod_l+0x584>)
 80085f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80085f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80085fa:	f7f7 ff6d 	bl	80004d8 <__aeabi_dmul>
 80085fe:	4680      	mov	r8, r0
 8008600:	4650      	mov	r0, sl
 8008602:	4689      	mov	r9, r1
 8008604:	f7f7 feee 	bl	80003e4 <__aeabi_ui2d>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4640      	mov	r0, r8
 800860e:	4649      	mov	r1, r9
 8008610:	f7f7 fdac 	bl	800016c <__adddf3>
 8008614:	4680      	mov	r8, r0
 8008616:	4689      	mov	r9, r1
 8008618:	2e0f      	cmp	r6, #15
 800861a:	dc36      	bgt.n	800868a <_strtod_l+0x442>
 800861c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861e:	2b00      	cmp	r3, #0
 8008620:	f43f ae4b 	beq.w	80082ba <_strtod_l+0x72>
 8008624:	dd22      	ble.n	800866c <_strtod_l+0x424>
 8008626:	2b16      	cmp	r3, #22
 8008628:	dc09      	bgt.n	800863e <_strtod_l+0x3f6>
 800862a:	4968      	ldr	r1, [pc, #416]	; (80087cc <_strtod_l+0x584>)
 800862c:	4642      	mov	r2, r8
 800862e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008632:	464b      	mov	r3, r9
 8008634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008638:	f7f7 ff4e 	bl	80004d8 <__aeabi_dmul>
 800863c:	e7c3      	b.n	80085c6 <_strtod_l+0x37e>
 800863e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008640:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008644:	4293      	cmp	r3, r2
 8008646:	db20      	blt.n	800868a <_strtod_l+0x442>
 8008648:	4c60      	ldr	r4, [pc, #384]	; (80087cc <_strtod_l+0x584>)
 800864a:	f1c6 060f 	rsb	r6, r6, #15
 800864e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008652:	4642      	mov	r2, r8
 8008654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008658:	464b      	mov	r3, r9
 800865a:	f7f7 ff3d 	bl	80004d8 <__aeabi_dmul>
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	1b9e      	subs	r6, r3, r6
 8008662:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800866a:	e7e5      	b.n	8008638 <_strtod_l+0x3f0>
 800866c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866e:	3316      	adds	r3, #22
 8008670:	db0b      	blt.n	800868a <_strtod_l+0x442>
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	4640      	mov	r0, r8
 8008676:	1bdf      	subs	r7, r3, r7
 8008678:	4b54      	ldr	r3, [pc, #336]	; (80087cc <_strtod_l+0x584>)
 800867a:	4649      	mov	r1, r9
 800867c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008684:	f7f8 f852 	bl	800072c <__aeabi_ddiv>
 8008688:	e79d      	b.n	80085c6 <_strtod_l+0x37e>
 800868a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868c:	1b75      	subs	r5, r6, r5
 800868e:	441d      	add	r5, r3
 8008690:	2d00      	cmp	r5, #0
 8008692:	dd70      	ble.n	8008776 <_strtod_l+0x52e>
 8008694:	f015 030f 	ands.w	r3, r5, #15
 8008698:	d00a      	beq.n	80086b0 <_strtod_l+0x468>
 800869a:	494c      	ldr	r1, [pc, #304]	; (80087cc <_strtod_l+0x584>)
 800869c:	4642      	mov	r2, r8
 800869e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a6:	464b      	mov	r3, r9
 80086a8:	f7f7 ff16 	bl	80004d8 <__aeabi_dmul>
 80086ac:	4680      	mov	r8, r0
 80086ae:	4689      	mov	r9, r1
 80086b0:	f035 050f 	bics.w	r5, r5, #15
 80086b4:	d04d      	beq.n	8008752 <_strtod_l+0x50a>
 80086b6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80086ba:	dd22      	ble.n	8008702 <_strtod_l+0x4ba>
 80086bc:	2600      	movs	r6, #0
 80086be:	46b3      	mov	fp, r6
 80086c0:	960b      	str	r6, [sp, #44]	; 0x2c
 80086c2:	9608      	str	r6, [sp, #32]
 80086c4:	2322      	movs	r3, #34	; 0x22
 80086c6:	f04f 0800 	mov.w	r8, #0
 80086ca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80087c4 <_strtod_l+0x57c>
 80086ce:	6023      	str	r3, [r4, #0]
 80086d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f43f adf1 	beq.w	80082ba <_strtod_l+0x72>
 80086d8:	4620      	mov	r0, r4
 80086da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086dc:	f7ff f934 	bl	8007948 <_Bfree>
 80086e0:	4620      	mov	r0, r4
 80086e2:	9908      	ldr	r1, [sp, #32]
 80086e4:	f7ff f930 	bl	8007948 <_Bfree>
 80086e8:	4659      	mov	r1, fp
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff f92c 	bl	8007948 <_Bfree>
 80086f0:	4620      	mov	r0, r4
 80086f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086f4:	f7ff f928 	bl	8007948 <_Bfree>
 80086f8:	4631      	mov	r1, r6
 80086fa:	4620      	mov	r0, r4
 80086fc:	f7ff f924 	bl	8007948 <_Bfree>
 8008700:	e5db      	b.n	80082ba <_strtod_l+0x72>
 8008702:	4b33      	ldr	r3, [pc, #204]	; (80087d0 <_strtod_l+0x588>)
 8008704:	4640      	mov	r0, r8
 8008706:	9305      	str	r3, [sp, #20]
 8008708:	2300      	movs	r3, #0
 800870a:	4649      	mov	r1, r9
 800870c:	469a      	mov	sl, r3
 800870e:	112d      	asrs	r5, r5, #4
 8008710:	2d01      	cmp	r5, #1
 8008712:	dc21      	bgt.n	8008758 <_strtod_l+0x510>
 8008714:	b10b      	cbz	r3, 800871a <_strtod_l+0x4d2>
 8008716:	4680      	mov	r8, r0
 8008718:	4689      	mov	r9, r1
 800871a:	492d      	ldr	r1, [pc, #180]	; (80087d0 <_strtod_l+0x588>)
 800871c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008720:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008724:	4642      	mov	r2, r8
 8008726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800872a:	464b      	mov	r3, r9
 800872c:	f7f7 fed4 	bl	80004d8 <__aeabi_dmul>
 8008730:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <_strtod_l+0x57c>)
 8008732:	460a      	mov	r2, r1
 8008734:	400b      	ands	r3, r1
 8008736:	4927      	ldr	r1, [pc, #156]	; (80087d4 <_strtod_l+0x58c>)
 8008738:	4680      	mov	r8, r0
 800873a:	428b      	cmp	r3, r1
 800873c:	d8be      	bhi.n	80086bc <_strtod_l+0x474>
 800873e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008742:	428b      	cmp	r3, r1
 8008744:	bf86      	itte	hi
 8008746:	f04f 38ff 	movhi.w	r8, #4294967295
 800874a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80087d8 <_strtod_l+0x590>
 800874e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008752:	2300      	movs	r3, #0
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	e07b      	b.n	8008850 <_strtod_l+0x608>
 8008758:	07ea      	lsls	r2, r5, #31
 800875a:	d505      	bpl.n	8008768 <_strtod_l+0x520>
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 feb9 	bl	80004d8 <__aeabi_dmul>
 8008766:	2301      	movs	r3, #1
 8008768:	9a05      	ldr	r2, [sp, #20]
 800876a:	f10a 0a01 	add.w	sl, sl, #1
 800876e:	3208      	adds	r2, #8
 8008770:	106d      	asrs	r5, r5, #1
 8008772:	9205      	str	r2, [sp, #20]
 8008774:	e7cc      	b.n	8008710 <_strtod_l+0x4c8>
 8008776:	d0ec      	beq.n	8008752 <_strtod_l+0x50a>
 8008778:	426d      	negs	r5, r5
 800877a:	f015 020f 	ands.w	r2, r5, #15
 800877e:	d00a      	beq.n	8008796 <_strtod_l+0x54e>
 8008780:	4b12      	ldr	r3, [pc, #72]	; (80087cc <_strtod_l+0x584>)
 8008782:	4640      	mov	r0, r8
 8008784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008788:	4649      	mov	r1, r9
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 ffcd 	bl	800072c <__aeabi_ddiv>
 8008792:	4680      	mov	r8, r0
 8008794:	4689      	mov	r9, r1
 8008796:	112d      	asrs	r5, r5, #4
 8008798:	d0db      	beq.n	8008752 <_strtod_l+0x50a>
 800879a:	2d1f      	cmp	r5, #31
 800879c:	dd1e      	ble.n	80087dc <_strtod_l+0x594>
 800879e:	2600      	movs	r6, #0
 80087a0:	46b3      	mov	fp, r6
 80087a2:	960b      	str	r6, [sp, #44]	; 0x2c
 80087a4:	9608      	str	r6, [sp, #32]
 80087a6:	2322      	movs	r3, #34	; 0x22
 80087a8:	f04f 0800 	mov.w	r8, #0
 80087ac:	f04f 0900 	mov.w	r9, #0
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	e78d      	b.n	80086d0 <_strtod_l+0x488>
 80087b4:	0800a83b 	.word	0x0800a83b
 80087b8:	0800aa64 	.word	0x0800aa64
 80087bc:	0800a833 	.word	0x0800a833
 80087c0:	0800a86a 	.word	0x0800a86a
 80087c4:	7ff00000 	.word	0x7ff00000
 80087c8:	0800abf5 	.word	0x0800abf5
 80087cc:	0800a978 	.word	0x0800a978
 80087d0:	0800a950 	.word	0x0800a950
 80087d4:	7ca00000 	.word	0x7ca00000
 80087d8:	7fefffff 	.word	0x7fefffff
 80087dc:	f015 0310 	ands.w	r3, r5, #16
 80087e0:	bf18      	it	ne
 80087e2:	236a      	movne	r3, #106	; 0x6a
 80087e4:	4640      	mov	r0, r8
 80087e6:	9305      	str	r3, [sp, #20]
 80087e8:	4649      	mov	r1, r9
 80087ea:	2300      	movs	r3, #0
 80087ec:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008ab8 <_strtod_l+0x870>
 80087f0:	07ea      	lsls	r2, r5, #31
 80087f2:	d504      	bpl.n	80087fe <_strtod_l+0x5b6>
 80087f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80087f8:	f7f7 fe6e 	bl	80004d8 <__aeabi_dmul>
 80087fc:	2301      	movs	r3, #1
 80087fe:	106d      	asrs	r5, r5, #1
 8008800:	f10a 0a08 	add.w	sl, sl, #8
 8008804:	d1f4      	bne.n	80087f0 <_strtod_l+0x5a8>
 8008806:	b10b      	cbz	r3, 800880c <_strtod_l+0x5c4>
 8008808:	4680      	mov	r8, r0
 800880a:	4689      	mov	r9, r1
 800880c:	9b05      	ldr	r3, [sp, #20]
 800880e:	b1bb      	cbz	r3, 8008840 <_strtod_l+0x5f8>
 8008810:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008814:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008818:	2b00      	cmp	r3, #0
 800881a:	4649      	mov	r1, r9
 800881c:	dd10      	ble.n	8008840 <_strtod_l+0x5f8>
 800881e:	2b1f      	cmp	r3, #31
 8008820:	f340 8128 	ble.w	8008a74 <_strtod_l+0x82c>
 8008824:	2b34      	cmp	r3, #52	; 0x34
 8008826:	bfd8      	it	le
 8008828:	f04f 33ff 	movle.w	r3, #4294967295
 800882c:	f04f 0800 	mov.w	r8, #0
 8008830:	bfcf      	iteee	gt
 8008832:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008836:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800883a:	4093      	lslle	r3, r2
 800883c:	ea03 0901 	andle.w	r9, r3, r1
 8008840:	2200      	movs	r2, #0
 8008842:	2300      	movs	r3, #0
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800884c:	2800      	cmp	r0, #0
 800884e:	d1a6      	bne.n	800879e <_strtod_l+0x556>
 8008850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008852:	465a      	mov	r2, fp
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	4620      	mov	r0, r4
 8008858:	4633      	mov	r3, r6
 800885a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800885c:	f7ff f8dc 	bl	8007a18 <__s2b>
 8008860:	900b      	str	r0, [sp, #44]	; 0x2c
 8008862:	2800      	cmp	r0, #0
 8008864:	f43f af2a 	beq.w	80086bc <_strtod_l+0x474>
 8008868:	2600      	movs	r6, #0
 800886a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	2a00      	cmp	r2, #0
 8008870:	eba3 0307 	sub.w	r3, r3, r7
 8008874:	bfa8      	it	ge
 8008876:	2300      	movge	r3, #0
 8008878:	46b3      	mov	fp, r6
 800887a:	9312      	str	r3, [sp, #72]	; 0x48
 800887c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008880:	9316      	str	r3, [sp, #88]	; 0x58
 8008882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008884:	4620      	mov	r0, r4
 8008886:	6859      	ldr	r1, [r3, #4]
 8008888:	f7ff f81e 	bl	80078c8 <_Balloc>
 800888c:	9008      	str	r0, [sp, #32]
 800888e:	2800      	cmp	r0, #0
 8008890:	f43f af18 	beq.w	80086c4 <_strtod_l+0x47c>
 8008894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008896:	300c      	adds	r0, #12
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	f103 010c 	add.w	r1, r3, #12
 800889e:	3202      	adds	r2, #2
 80088a0:	0092      	lsls	r2, r2, #2
 80088a2:	f000 fd89 	bl	80093b8 <memcpy>
 80088a6:	ab1c      	add	r3, sp, #112	; 0x70
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	ab1b      	add	r3, sp, #108	; 0x6c
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	4642      	mov	r2, r8
 80088b0:	464b      	mov	r3, r9
 80088b2:	4620      	mov	r0, r4
 80088b4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80088b8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80088bc:	f7ff fbd8 	bl	8008070 <__d2b>
 80088c0:	901a      	str	r0, [sp, #104]	; 0x68
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f43f aefe 	beq.w	80086c4 <_strtod_l+0x47c>
 80088c8:	2101      	movs	r1, #1
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff f93c 	bl	8007b48 <__i2b>
 80088d0:	4683      	mov	fp, r0
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f43f aef6 	beq.w	80086c4 <_strtod_l+0x47c>
 80088d8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80088da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80088dc:	2f00      	cmp	r7, #0
 80088de:	bfab      	itete	ge
 80088e0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80088e2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80088e4:	eb07 0a03 	addge.w	sl, r7, r3
 80088e8:	1bdd      	sublt	r5, r3, r7
 80088ea:	9b05      	ldr	r3, [sp, #20]
 80088ec:	bfa8      	it	ge
 80088ee:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80088f0:	eba7 0703 	sub.w	r7, r7, r3
 80088f4:	4417      	add	r7, r2
 80088f6:	4b71      	ldr	r3, [pc, #452]	; (8008abc <_strtod_l+0x874>)
 80088f8:	f107 37ff 	add.w	r7, r7, #4294967295
 80088fc:	bfb8      	it	lt
 80088fe:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008902:	429f      	cmp	r7, r3
 8008904:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008908:	f280 80c7 	bge.w	8008a9a <_strtod_l+0x852>
 800890c:	1bdb      	subs	r3, r3, r7
 800890e:	2b1f      	cmp	r3, #31
 8008910:	f04f 0101 	mov.w	r1, #1
 8008914:	eba2 0203 	sub.w	r2, r2, r3
 8008918:	f300 80b3 	bgt.w	8008a82 <_strtod_l+0x83a>
 800891c:	fa01 f303 	lsl.w	r3, r1, r3
 8008920:	9313      	str	r3, [sp, #76]	; 0x4c
 8008922:	2300      	movs	r3, #0
 8008924:	9310      	str	r3, [sp, #64]	; 0x40
 8008926:	eb0a 0702 	add.w	r7, sl, r2
 800892a:	9b05      	ldr	r3, [sp, #20]
 800892c:	45ba      	cmp	sl, r7
 800892e:	4415      	add	r5, r2
 8008930:	441d      	add	r5, r3
 8008932:	4653      	mov	r3, sl
 8008934:	bfa8      	it	ge
 8008936:	463b      	movge	r3, r7
 8008938:	42ab      	cmp	r3, r5
 800893a:	bfa8      	it	ge
 800893c:	462b      	movge	r3, r5
 800893e:	2b00      	cmp	r3, #0
 8008940:	bfc2      	ittt	gt
 8008942:	1aff      	subgt	r7, r7, r3
 8008944:	1aed      	subgt	r5, r5, r3
 8008946:	ebaa 0a03 	subgt.w	sl, sl, r3
 800894a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd17      	ble.n	8008980 <_strtod_l+0x738>
 8008950:	4659      	mov	r1, fp
 8008952:	461a      	mov	r2, r3
 8008954:	4620      	mov	r0, r4
 8008956:	f7ff f9b5 	bl	8007cc4 <__pow5mult>
 800895a:	4683      	mov	fp, r0
 800895c:	2800      	cmp	r0, #0
 800895e:	f43f aeb1 	beq.w	80086c4 <_strtod_l+0x47c>
 8008962:	4601      	mov	r1, r0
 8008964:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008966:	4620      	mov	r0, r4
 8008968:	f7ff f904 	bl	8007b74 <__multiply>
 800896c:	900a      	str	r0, [sp, #40]	; 0x28
 800896e:	2800      	cmp	r0, #0
 8008970:	f43f aea8 	beq.w	80086c4 <_strtod_l+0x47c>
 8008974:	4620      	mov	r0, r4
 8008976:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008978:	f7fe ffe6 	bl	8007948 <_Bfree>
 800897c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897e:	931a      	str	r3, [sp, #104]	; 0x68
 8008980:	2f00      	cmp	r7, #0
 8008982:	f300 808f 	bgt.w	8008aa4 <_strtod_l+0x85c>
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	dd08      	ble.n	800899e <_strtod_l+0x756>
 800898c:	4620      	mov	r0, r4
 800898e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008990:	9908      	ldr	r1, [sp, #32]
 8008992:	f7ff f997 	bl	8007cc4 <__pow5mult>
 8008996:	9008      	str	r0, [sp, #32]
 8008998:	2800      	cmp	r0, #0
 800899a:	f43f ae93 	beq.w	80086c4 <_strtod_l+0x47c>
 800899e:	2d00      	cmp	r5, #0
 80089a0:	dd08      	ble.n	80089b4 <_strtod_l+0x76c>
 80089a2:	462a      	mov	r2, r5
 80089a4:	4620      	mov	r0, r4
 80089a6:	9908      	ldr	r1, [sp, #32]
 80089a8:	f7ff f9e6 	bl	8007d78 <__lshift>
 80089ac:	9008      	str	r0, [sp, #32]
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f43f ae88 	beq.w	80086c4 <_strtod_l+0x47c>
 80089b4:	f1ba 0f00 	cmp.w	sl, #0
 80089b8:	dd08      	ble.n	80089cc <_strtod_l+0x784>
 80089ba:	4659      	mov	r1, fp
 80089bc:	4652      	mov	r2, sl
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff f9da 	bl	8007d78 <__lshift>
 80089c4:	4683      	mov	fp, r0
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f ae7c 	beq.w	80086c4 <_strtod_l+0x47c>
 80089cc:	4620      	mov	r0, r4
 80089ce:	9a08      	ldr	r2, [sp, #32]
 80089d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80089d2:	f7ff fa59 	bl	8007e88 <__mdiff>
 80089d6:	4606      	mov	r6, r0
 80089d8:	2800      	cmp	r0, #0
 80089da:	f43f ae73 	beq.w	80086c4 <_strtod_l+0x47c>
 80089de:	2500      	movs	r5, #0
 80089e0:	68c3      	ldr	r3, [r0, #12]
 80089e2:	4659      	mov	r1, fp
 80089e4:	60c5      	str	r5, [r0, #12]
 80089e6:	930a      	str	r3, [sp, #40]	; 0x28
 80089e8:	f7ff fa32 	bl	8007e50 <__mcmp>
 80089ec:	42a8      	cmp	r0, r5
 80089ee:	da6b      	bge.n	8008ac8 <_strtod_l+0x880>
 80089f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f2:	ea53 0308 	orrs.w	r3, r3, r8
 80089f6:	f040 808f 	bne.w	8008b18 <_strtod_l+0x8d0>
 80089fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 808a 	bne.w	8008b18 <_strtod_l+0x8d0>
 8008a04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a08:	0d1b      	lsrs	r3, r3, #20
 8008a0a:	051b      	lsls	r3, r3, #20
 8008a0c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a10:	f240 8082 	bls.w	8008b18 <_strtod_l+0x8d0>
 8008a14:	6973      	ldr	r3, [r6, #20]
 8008a16:	b913      	cbnz	r3, 8008a1e <_strtod_l+0x7d6>
 8008a18:	6933      	ldr	r3, [r6, #16]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	dd7c      	ble.n	8008b18 <_strtod_l+0x8d0>
 8008a1e:	4631      	mov	r1, r6
 8008a20:	2201      	movs	r2, #1
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff f9a8 	bl	8007d78 <__lshift>
 8008a28:	4659      	mov	r1, fp
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	f7ff fa10 	bl	8007e50 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	dd71      	ble.n	8008b18 <_strtod_l+0x8d0>
 8008a34:	9905      	ldr	r1, [sp, #20]
 8008a36:	464b      	mov	r3, r9
 8008a38:	4a21      	ldr	r2, [pc, #132]	; (8008ac0 <_strtod_l+0x878>)
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	f000 808d 	beq.w	8008b5a <_strtod_l+0x912>
 8008a40:	ea02 0109 	and.w	r1, r2, r9
 8008a44:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a48:	f300 8087 	bgt.w	8008b5a <_strtod_l+0x912>
 8008a4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a50:	f77f aea9 	ble.w	80087a6 <_strtod_l+0x55e>
 8008a54:	4640      	mov	r0, r8
 8008a56:	4649      	mov	r1, r9
 8008a58:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <_strtod_l+0x87c>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f7f7 fd3c 	bl	80004d8 <__aeabi_dmul>
 8008a60:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <_strtod_l+0x878>)
 8008a62:	4680      	mov	r8, r0
 8008a64:	400b      	ands	r3, r1
 8008a66:	4689      	mov	r9, r1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f47f ae35 	bne.w	80086d8 <_strtod_l+0x490>
 8008a6e:	2322      	movs	r3, #34	; 0x22
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	e631      	b.n	80086d8 <_strtod_l+0x490>
 8008a74:	f04f 32ff 	mov.w	r2, #4294967295
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	ea03 0808 	and.w	r8, r3, r8
 8008a80:	e6de      	b.n	8008840 <_strtod_l+0x5f8>
 8008a82:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008a86:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008a8a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008a8e:	37e2      	adds	r7, #226	; 0xe2
 8008a90:	fa01 f307 	lsl.w	r3, r1, r7
 8008a94:	9310      	str	r3, [sp, #64]	; 0x40
 8008a96:	9113      	str	r1, [sp, #76]	; 0x4c
 8008a98:	e745      	b.n	8008926 <_strtod_l+0x6de>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9310      	str	r3, [sp, #64]	; 0x40
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008aa2:	e740      	b.n	8008926 <_strtod_l+0x6de>
 8008aa4:	463a      	mov	r2, r7
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008aaa:	f7ff f965 	bl	8007d78 <__lshift>
 8008aae:	901a      	str	r0, [sp, #104]	; 0x68
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f47f af68 	bne.w	8008986 <_strtod_l+0x73e>
 8008ab6:	e605      	b.n	80086c4 <_strtod_l+0x47c>
 8008ab8:	0800aa78 	.word	0x0800aa78
 8008abc:	fffffc02 	.word	0xfffffc02
 8008ac0:	7ff00000 	.word	0x7ff00000
 8008ac4:	39500000 	.word	0x39500000
 8008ac8:	46ca      	mov	sl, r9
 8008aca:	d165      	bne.n	8008b98 <_strtod_l+0x950>
 8008acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ace:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ad2:	b352      	cbz	r2, 8008b2a <_strtod_l+0x8e2>
 8008ad4:	4a9e      	ldr	r2, [pc, #632]	; (8008d50 <_strtod_l+0xb08>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d12a      	bne.n	8008b30 <_strtod_l+0x8e8>
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	4641      	mov	r1, r8
 8008ade:	b1fb      	cbz	r3, 8008b20 <_strtod_l+0x8d8>
 8008ae0:	4b9c      	ldr	r3, [pc, #624]	; (8008d54 <_strtod_l+0xb0c>)
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae6:	ea09 0303 	and.w	r3, r9, r3
 8008aea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008aee:	d81a      	bhi.n	8008b26 <_strtod_l+0x8de>
 8008af0:	0d1b      	lsrs	r3, r3, #20
 8008af2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d118      	bne.n	8008b30 <_strtod_l+0x8e8>
 8008afe:	4b96      	ldr	r3, [pc, #600]	; (8008d58 <_strtod_l+0xb10>)
 8008b00:	459a      	cmp	sl, r3
 8008b02:	d102      	bne.n	8008b0a <_strtod_l+0x8c2>
 8008b04:	3101      	adds	r1, #1
 8008b06:	f43f addd 	beq.w	80086c4 <_strtod_l+0x47c>
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	4b91      	ldr	r3, [pc, #580]	; (8008d54 <_strtod_l+0xb0c>)
 8008b10:	ea0a 0303 	and.w	r3, sl, r3
 8008b14:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008b18:	9b05      	ldr	r3, [sp, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d19a      	bne.n	8008a54 <_strtod_l+0x80c>
 8008b1e:	e5db      	b.n	80086d8 <_strtod_l+0x490>
 8008b20:	f04f 33ff 	mov.w	r3, #4294967295
 8008b24:	e7e9      	b.n	8008afa <_strtod_l+0x8b2>
 8008b26:	4613      	mov	r3, r2
 8008b28:	e7e7      	b.n	8008afa <_strtod_l+0x8b2>
 8008b2a:	ea53 0308 	orrs.w	r3, r3, r8
 8008b2e:	d081      	beq.n	8008a34 <_strtod_l+0x7ec>
 8008b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b32:	b1e3      	cbz	r3, 8008b6e <_strtod_l+0x926>
 8008b34:	ea13 0f0a 	tst.w	r3, sl
 8008b38:	d0ee      	beq.n	8008b18 <_strtod_l+0x8d0>
 8008b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4649      	mov	r1, r9
 8008b40:	9a05      	ldr	r2, [sp, #20]
 8008b42:	b1c3      	cbz	r3, 8008b76 <_strtod_l+0x92e>
 8008b44:	f7ff fb5c 	bl	8008200 <sulp>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b50:	f7f7 fb0c 	bl	800016c <__adddf3>
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	e7de      	b.n	8008b18 <_strtod_l+0x8d0>
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008b64:	f04f 38ff 	mov.w	r8, #4294967295
 8008b68:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008b6c:	e7d4      	b.n	8008b18 <_strtod_l+0x8d0>
 8008b6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b70:	ea13 0f08 	tst.w	r3, r8
 8008b74:	e7e0      	b.n	8008b38 <_strtod_l+0x8f0>
 8008b76:	f7ff fb43 	bl	8008200 <sulp>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b82:	f7f7 faf1 	bl	8000168 <__aeabi_dsub>
 8008b86:	2200      	movs	r2, #0
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	4689      	mov	r9, r1
 8008b8e:	f7f7 ff0b 	bl	80009a8 <__aeabi_dcmpeq>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0c0      	beq.n	8008b18 <_strtod_l+0x8d0>
 8008b96:	e606      	b.n	80087a6 <_strtod_l+0x55e>
 8008b98:	4659      	mov	r1, fp
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff fabe 	bl	800811c <__ratio>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bae:	f7f7 ff0f 	bl	80009d0 <__aeabi_dcmple>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d06f      	beq.n	8008c96 <_strtod_l+0xa4e>
 8008bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d17c      	bne.n	8008cb6 <_strtod_l+0xa6e>
 8008bbc:	f1b8 0f00 	cmp.w	r8, #0
 8008bc0:	d159      	bne.n	8008c76 <_strtod_l+0xa2e>
 8008bc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d17b      	bne.n	8008cc2 <_strtod_l+0xa7a>
 8008bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4b62      	ldr	r3, [pc, #392]	; (8008d5c <_strtod_l+0xb14>)
 8008bd2:	f7f7 fef3 	bl	80009bc <__aeabi_dcmplt>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d15a      	bne.n	8008c90 <_strtod_l+0xa48>
 8008bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bde:	2200      	movs	r2, #0
 8008be0:	4b5f      	ldr	r3, [pc, #380]	; (8008d60 <_strtod_l+0xb18>)
 8008be2:	f7f7 fc79 	bl	80004d8 <__aeabi_dmul>
 8008be6:	4605      	mov	r5, r0
 8008be8:	460f      	mov	r7, r1
 8008bea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008bee:	9506      	str	r5, [sp, #24]
 8008bf0:	9307      	str	r3, [sp, #28]
 8008bf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bf6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008bfa:	4b56      	ldr	r3, [pc, #344]	; (8008d54 <_strtod_l+0xb0c>)
 8008bfc:	4a55      	ldr	r2, [pc, #340]	; (8008d54 <_strtod_l+0xb0c>)
 8008bfe:	ea0a 0303 	and.w	r3, sl, r3
 8008c02:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c04:	4b57      	ldr	r3, [pc, #348]	; (8008d64 <_strtod_l+0xb1c>)
 8008c06:	ea0a 0202 	and.w	r2, sl, r2
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	f040 80b0 	bne.w	8008d70 <_strtod_l+0xb28>
 8008c10:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f7ff f9c2 	bl	8007fa0 <__ulp>
 8008c1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c20:	f7f7 fc5a 	bl	80004d8 <__aeabi_dmul>
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	f7f7 faa0 	bl	800016c <__adddf3>
 8008c2c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008d54 <_strtod_l+0xb0c>
 8008c30:	4a4d      	ldr	r2, [pc, #308]	; (8008d68 <_strtod_l+0xb20>)
 8008c32:	ea01 0a0a 	and.w	sl, r1, sl
 8008c36:	4592      	cmp	sl, r2
 8008c38:	4680      	mov	r8, r0
 8008c3a:	d948      	bls.n	8008cce <_strtod_l+0xa86>
 8008c3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c3e:	4b46      	ldr	r3, [pc, #280]	; (8008d58 <_strtod_l+0xb10>)
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d103      	bne.n	8008c4c <_strtod_l+0xa04>
 8008c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c46:	3301      	adds	r3, #1
 8008c48:	f43f ad3c 	beq.w	80086c4 <_strtod_l+0x47c>
 8008c4c:	f04f 38ff 	mov.w	r8, #4294967295
 8008c50:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008d58 <_strtod_l+0xb10>
 8008c54:	4620      	mov	r0, r4
 8008c56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c58:	f7fe fe76 	bl	8007948 <_Bfree>
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	9908      	ldr	r1, [sp, #32]
 8008c60:	f7fe fe72 	bl	8007948 <_Bfree>
 8008c64:	4659      	mov	r1, fp
 8008c66:	4620      	mov	r0, r4
 8008c68:	f7fe fe6e 	bl	8007948 <_Bfree>
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7fe fe6a 	bl	8007948 <_Bfree>
 8008c74:	e605      	b.n	8008882 <_strtod_l+0x63a>
 8008c76:	f1b8 0f01 	cmp.w	r8, #1
 8008c7a:	d103      	bne.n	8008c84 <_strtod_l+0xa3c>
 8008c7c:	f1b9 0f00 	cmp.w	r9, #0
 8008c80:	f43f ad91 	beq.w	80087a6 <_strtod_l+0x55e>
 8008c84:	2200      	movs	r2, #0
 8008c86:	4b39      	ldr	r3, [pc, #228]	; (8008d6c <_strtod_l+0xb24>)
 8008c88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c8e:	e016      	b.n	8008cbe <_strtod_l+0xa76>
 8008c90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c92:	4f33      	ldr	r7, [pc, #204]	; (8008d60 <_strtod_l+0xb18>)
 8008c94:	e7a9      	b.n	8008bea <_strtod_l+0x9a2>
 8008c96:	4b32      	ldr	r3, [pc, #200]	; (8008d60 <_strtod_l+0xb18>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c9e:	f7f7 fc1b 	bl	80004d8 <__aeabi_dmul>
 8008ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d09e      	beq.n	8008bea <_strtod_l+0x9a2>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008cb4:	e79d      	b.n	8008bf2 <_strtod_l+0x9aa>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <_strtod_l+0xb14>)
 8008cba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008cbe:	4f27      	ldr	r7, [pc, #156]	; (8008d5c <_strtod_l+0xb14>)
 8008cc0:	e797      	b.n	8008bf2 <_strtod_l+0x9aa>
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4b29      	ldr	r3, [pc, #164]	; (8008d6c <_strtod_l+0xb24>)
 8008cc6:	4645      	mov	r5, r8
 8008cc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ccc:	e7f7      	b.n	8008cbe <_strtod_l+0xa76>
 8008cce:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008cd2:	9b05      	ldr	r3, [sp, #20]
 8008cd4:	46ca      	mov	sl, r9
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1bc      	bne.n	8008c54 <_strtod_l+0xa0c>
 8008cda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ce0:	0d1b      	lsrs	r3, r3, #20
 8008ce2:	051b      	lsls	r3, r3, #20
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d1b5      	bne.n	8008c54 <_strtod_l+0xa0c>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	4639      	mov	r1, r7
 8008cec:	f7f8 fa10 	bl	8001110 <__aeabi_d2lz>
 8008cf0:	f7f7 fbc4 	bl	800047c <__aeabi_l2d>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fa34 	bl	8000168 <__aeabi_dsub>
 8008d00:	460b      	mov	r3, r1
 8008d02:	4602      	mov	r2, r0
 8008d04:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008d08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008d12:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008d16:	d06c      	beq.n	8008df2 <_strtod_l+0xbaa>
 8008d18:	a309      	add	r3, pc, #36	; (adr r3, 8008d40 <_strtod_l+0xaf8>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f7f7 fe4d 	bl	80009bc <__aeabi_dcmplt>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f47f acd8 	bne.w	80086d8 <_strtod_l+0x490>
 8008d28:	a307      	add	r3, pc, #28	; (adr r3, 8008d48 <_strtod_l+0xb00>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d32:	f7f7 fe61 	bl	80009f8 <__aeabi_dcmpgt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d08c      	beq.n	8008c54 <_strtod_l+0xa0c>
 8008d3a:	e4cd      	b.n	80086d8 <_strtod_l+0x490>
 8008d3c:	f3af 8000 	nop.w
 8008d40:	94a03595 	.word	0x94a03595
 8008d44:	3fdfffff 	.word	0x3fdfffff
 8008d48:	35afe535 	.word	0x35afe535
 8008d4c:	3fe00000 	.word	0x3fe00000
 8008d50:	000fffff 	.word	0x000fffff
 8008d54:	7ff00000 	.word	0x7ff00000
 8008d58:	7fefffff 	.word	0x7fefffff
 8008d5c:	3ff00000 	.word	0x3ff00000
 8008d60:	3fe00000 	.word	0x3fe00000
 8008d64:	7fe00000 	.word	0x7fe00000
 8008d68:	7c9fffff 	.word	0x7c9fffff
 8008d6c:	bff00000 	.word	0xbff00000
 8008d70:	9b05      	ldr	r3, [sp, #20]
 8008d72:	b333      	cbz	r3, 8008dc2 <_strtod_l+0xb7a>
 8008d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d7a:	d822      	bhi.n	8008dc2 <_strtod_l+0xb7a>
 8008d7c:	a328      	add	r3, pc, #160	; (adr r3, 8008e20 <_strtod_l+0xbd8>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	4628      	mov	r0, r5
 8008d84:	4639      	mov	r1, r7
 8008d86:	f7f7 fe23 	bl	80009d0 <__aeabi_dcmple>
 8008d8a:	b1a0      	cbz	r0, 8008db6 <_strtod_l+0xb6e>
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f7f7 fe7a 	bl	8000a88 <__aeabi_d2uiz>
 8008d94:	2801      	cmp	r0, #1
 8008d96:	bf38      	it	cc
 8008d98:	2001      	movcc	r0, #1
 8008d9a:	f7f7 fb23 	bl	80003e4 <__aeabi_ui2d>
 8008d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da0:	4605      	mov	r5, r0
 8008da2:	460f      	mov	r7, r1
 8008da4:	bb03      	cbnz	r3, 8008de8 <_strtod_l+0xba0>
 8008da6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008daa:	9014      	str	r0, [sp, #80]	; 0x50
 8008dac:	9315      	str	r3, [sp, #84]	; 0x54
 8008dae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008db2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dba:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8008dc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008dc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008dc6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008dca:	f7ff f8e9 	bl	8007fa0 <__ulp>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	f7f7 fb7f 	bl	80004d8 <__aeabi_dmul>
 8008dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dde:	f7f7 f9c5 	bl	800016c <__adddf3>
 8008de2:	4680      	mov	r8, r0
 8008de4:	4689      	mov	r9, r1
 8008de6:	e774      	b.n	8008cd2 <_strtod_l+0xa8a>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008df0:	e7dd      	b.n	8008dae <_strtod_l+0xb66>
 8008df2:	a30d      	add	r3, pc, #52	; (adr r3, 8008e28 <_strtod_l+0xbe0>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fde0 	bl	80009bc <__aeabi_dcmplt>
 8008dfc:	e79b      	b.n	8008d36 <_strtod_l+0xaee>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	930e      	str	r3, [sp, #56]	; 0x38
 8008e02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	f7ff ba5b 	b.w	80082c2 <_strtod_l+0x7a>
 8008e0c:	2a65      	cmp	r2, #101	; 0x65
 8008e0e:	f43f ab52 	beq.w	80084b6 <_strtod_l+0x26e>
 8008e12:	2a45      	cmp	r2, #69	; 0x45
 8008e14:	f43f ab4f 	beq.w	80084b6 <_strtod_l+0x26e>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f7ff bb87 	b.w	800852c <_strtod_l+0x2e4>
 8008e1e:	bf00      	nop
 8008e20:	ffc00000 	.word	0xffc00000
 8008e24:	41dfffff 	.word	0x41dfffff
 8008e28:	94a03595 	.word	0x94a03595
 8008e2c:	3fcfffff 	.word	0x3fcfffff

08008e30 <_strtod_r>:
 8008e30:	4b01      	ldr	r3, [pc, #4]	; (8008e38 <_strtod_r+0x8>)
 8008e32:	f7ff ba09 	b.w	8008248 <_strtod_l>
 8008e36:	bf00      	nop
 8008e38:	2000007c 	.word	0x2000007c

08008e3c <_strtol_l.constprop.0>:
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e42:	4686      	mov	lr, r0
 8008e44:	4690      	mov	r8, r2
 8008e46:	d001      	beq.n	8008e4c <_strtol_l.constprop.0+0x10>
 8008e48:	2b24      	cmp	r3, #36	; 0x24
 8008e4a:	d906      	bls.n	8008e5a <_strtol_l.constprop.0+0x1e>
 8008e4c:	f7fd fd90 	bl	8006970 <__errno>
 8008e50:	2316      	movs	r3, #22
 8008e52:	6003      	str	r3, [r0, #0]
 8008e54:	2000      	movs	r0, #0
 8008e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	4835      	ldr	r0, [pc, #212]	; (8008f34 <_strtol_l.constprop.0+0xf8>)
 8008e5e:	462a      	mov	r2, r5
 8008e60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e64:	5d06      	ldrb	r6, [r0, r4]
 8008e66:	f016 0608 	ands.w	r6, r6, #8
 8008e6a:	d1f8      	bne.n	8008e5e <_strtol_l.constprop.0+0x22>
 8008e6c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e6e:	d12e      	bne.n	8008ece <_strtol_l.constprop.0+0x92>
 8008e70:	2601      	movs	r6, #1
 8008e72:	782c      	ldrb	r4, [r5, #0]
 8008e74:	1c95      	adds	r5, r2, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d057      	beq.n	8008f2a <_strtol_l.constprop.0+0xee>
 8008e7a:	2b10      	cmp	r3, #16
 8008e7c:	d109      	bne.n	8008e92 <_strtol_l.constprop.0+0x56>
 8008e7e:	2c30      	cmp	r4, #48	; 0x30
 8008e80:	d107      	bne.n	8008e92 <_strtol_l.constprop.0+0x56>
 8008e82:	782a      	ldrb	r2, [r5, #0]
 8008e84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008e88:	2a58      	cmp	r2, #88	; 0x58
 8008e8a:	d149      	bne.n	8008f20 <_strtol_l.constprop.0+0xe4>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	786c      	ldrb	r4, [r5, #1]
 8008e90:	3502      	adds	r5, #2
 8008e92:	2200      	movs	r2, #0
 8008e94:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008e98:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e9c:	fbbc f9f3 	udiv	r9, ip, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ea6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008eaa:	2f09      	cmp	r7, #9
 8008eac:	d814      	bhi.n	8008ed8 <_strtol_l.constprop.0+0x9c>
 8008eae:	463c      	mov	r4, r7
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	dd20      	ble.n	8008ef6 <_strtol_l.constprop.0+0xba>
 8008eb4:	1c57      	adds	r7, r2, #1
 8008eb6:	d007      	beq.n	8008ec8 <_strtol_l.constprop.0+0x8c>
 8008eb8:	4581      	cmp	r9, r0
 8008eba:	d319      	bcc.n	8008ef0 <_strtol_l.constprop.0+0xb4>
 8008ebc:	d101      	bne.n	8008ec2 <_strtol_l.constprop.0+0x86>
 8008ebe:	45a2      	cmp	sl, r4
 8008ec0:	db16      	blt.n	8008ef0 <_strtol_l.constprop.0+0xb4>
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	fb00 4003 	mla	r0, r0, r3, r4
 8008ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ecc:	e7eb      	b.n	8008ea6 <_strtol_l.constprop.0+0x6a>
 8008ece:	2c2b      	cmp	r4, #43	; 0x2b
 8008ed0:	bf04      	itt	eq
 8008ed2:	782c      	ldrbeq	r4, [r5, #0]
 8008ed4:	1c95      	addeq	r5, r2, #2
 8008ed6:	e7ce      	b.n	8008e76 <_strtol_l.constprop.0+0x3a>
 8008ed8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008edc:	2f19      	cmp	r7, #25
 8008ede:	d801      	bhi.n	8008ee4 <_strtol_l.constprop.0+0xa8>
 8008ee0:	3c37      	subs	r4, #55	; 0x37
 8008ee2:	e7e5      	b.n	8008eb0 <_strtol_l.constprop.0+0x74>
 8008ee4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ee8:	2f19      	cmp	r7, #25
 8008eea:	d804      	bhi.n	8008ef6 <_strtol_l.constprop.0+0xba>
 8008eec:	3c57      	subs	r4, #87	; 0x57
 8008eee:	e7df      	b.n	8008eb0 <_strtol_l.constprop.0+0x74>
 8008ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef4:	e7e8      	b.n	8008ec8 <_strtol_l.constprop.0+0x8c>
 8008ef6:	1c53      	adds	r3, r2, #1
 8008ef8:	d108      	bne.n	8008f0c <_strtol_l.constprop.0+0xd0>
 8008efa:	2322      	movs	r3, #34	; 0x22
 8008efc:	4660      	mov	r0, ip
 8008efe:	f8ce 3000 	str.w	r3, [lr]
 8008f02:	f1b8 0f00 	cmp.w	r8, #0
 8008f06:	d0a6      	beq.n	8008e56 <_strtol_l.constprop.0+0x1a>
 8008f08:	1e69      	subs	r1, r5, #1
 8008f0a:	e006      	b.n	8008f1a <_strtol_l.constprop.0+0xde>
 8008f0c:	b106      	cbz	r6, 8008f10 <_strtol_l.constprop.0+0xd4>
 8008f0e:	4240      	negs	r0, r0
 8008f10:	f1b8 0f00 	cmp.w	r8, #0
 8008f14:	d09f      	beq.n	8008e56 <_strtol_l.constprop.0+0x1a>
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	d1f6      	bne.n	8008f08 <_strtol_l.constprop.0+0xcc>
 8008f1a:	f8c8 1000 	str.w	r1, [r8]
 8008f1e:	e79a      	b.n	8008e56 <_strtol_l.constprop.0+0x1a>
 8008f20:	2430      	movs	r4, #48	; 0x30
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1b5      	bne.n	8008e92 <_strtol_l.constprop.0+0x56>
 8008f26:	2308      	movs	r3, #8
 8008f28:	e7b3      	b.n	8008e92 <_strtol_l.constprop.0+0x56>
 8008f2a:	2c30      	cmp	r4, #48	; 0x30
 8008f2c:	d0a9      	beq.n	8008e82 <_strtol_l.constprop.0+0x46>
 8008f2e:	230a      	movs	r3, #10
 8008f30:	e7af      	b.n	8008e92 <_strtol_l.constprop.0+0x56>
 8008f32:	bf00      	nop
 8008f34:	0800aaa1 	.word	0x0800aaa1

08008f38 <_strtol_r>:
 8008f38:	f7ff bf80 	b.w	8008e3c <_strtol_l.constprop.0>

08008f3c <__ssputs_r>:
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	461f      	mov	r7, r3
 8008f42:	688e      	ldr	r6, [r1, #8]
 8008f44:	4682      	mov	sl, r0
 8008f46:	42be      	cmp	r6, r7
 8008f48:	460c      	mov	r4, r1
 8008f4a:	4690      	mov	r8, r2
 8008f4c:	680b      	ldr	r3, [r1, #0]
 8008f4e:	d82c      	bhi.n	8008faa <__ssputs_r+0x6e>
 8008f50:	898a      	ldrh	r2, [r1, #12]
 8008f52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f56:	d026      	beq.n	8008fa6 <__ssputs_r+0x6a>
 8008f58:	6965      	ldr	r5, [r4, #20]
 8008f5a:	6909      	ldr	r1, [r1, #16]
 8008f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f60:	eba3 0901 	sub.w	r9, r3, r1
 8008f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f68:	1c7b      	adds	r3, r7, #1
 8008f6a:	444b      	add	r3, r9
 8008f6c:	106d      	asrs	r5, r5, #1
 8008f6e:	429d      	cmp	r5, r3
 8008f70:	bf38      	it	cc
 8008f72:	461d      	movcc	r5, r3
 8008f74:	0553      	lsls	r3, r2, #21
 8008f76:	d527      	bpl.n	8008fc8 <__ssputs_r+0x8c>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	f7fe fc19 	bl	80077b0 <_malloc_r>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	b360      	cbz	r0, 8008fdc <__ssputs_r+0xa0>
 8008f82:	464a      	mov	r2, r9
 8008f84:	6921      	ldr	r1, [r4, #16]
 8008f86:	f000 fa17 	bl	80093b8 <memcpy>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	6126      	str	r6, [r4, #16]
 8008f98:	444e      	add	r6, r9
 8008f9a:	6026      	str	r6, [r4, #0]
 8008f9c:	463e      	mov	r6, r7
 8008f9e:	6165      	str	r5, [r4, #20]
 8008fa0:	eba5 0509 	sub.w	r5, r5, r9
 8008fa4:	60a5      	str	r5, [r4, #8]
 8008fa6:	42be      	cmp	r6, r7
 8008fa8:	d900      	bls.n	8008fac <__ssputs_r+0x70>
 8008faa:	463e      	mov	r6, r7
 8008fac:	4632      	mov	r2, r6
 8008fae:	4641      	mov	r1, r8
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	f000 f9c5 	bl	8009340 <memmove>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	68a3      	ldr	r3, [r4, #8]
 8008fba:	1b9b      	subs	r3, r3, r6
 8008fbc:	60a3      	str	r3, [r4, #8]
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	4433      	add	r3, r6
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc8:	462a      	mov	r2, r5
 8008fca:	f000 fda6 	bl	8009b1a <_realloc_r>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d1e0      	bne.n	8008f96 <__ssputs_r+0x5a>
 8008fd4:	4650      	mov	r0, sl
 8008fd6:	6921      	ldr	r1, [r4, #16]
 8008fd8:	f7fe fb7a 	bl	80076d0 <_free_r>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	f8ca 3000 	str.w	r3, [sl]
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	e7e9      	b.n	8008fc4 <__ssputs_r+0x88>

08008ff0 <_svfiprintf_r>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	4698      	mov	r8, r3
 8008ff6:	898b      	ldrh	r3, [r1, #12]
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	061b      	lsls	r3, r3, #24
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	4614      	mov	r4, r2
 8009000:	b09d      	sub	sp, #116	; 0x74
 8009002:	d50e      	bpl.n	8009022 <_svfiprintf_r+0x32>
 8009004:	690b      	ldr	r3, [r1, #16]
 8009006:	b963      	cbnz	r3, 8009022 <_svfiprintf_r+0x32>
 8009008:	2140      	movs	r1, #64	; 0x40
 800900a:	f7fe fbd1 	bl	80077b0 <_malloc_r>
 800900e:	6028      	str	r0, [r5, #0]
 8009010:	6128      	str	r0, [r5, #16]
 8009012:	b920      	cbnz	r0, 800901e <_svfiprintf_r+0x2e>
 8009014:	230c      	movs	r3, #12
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	e0d0      	b.n	80091c0 <_svfiprintf_r+0x1d0>
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	616b      	str	r3, [r5, #20]
 8009022:	2300      	movs	r3, #0
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	2320      	movs	r3, #32
 8009028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800902c:	2330      	movs	r3, #48	; 0x30
 800902e:	f04f 0901 	mov.w	r9, #1
 8009032:	f8cd 800c 	str.w	r8, [sp, #12]
 8009036:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80091d8 <_svfiprintf_r+0x1e8>
 800903a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800903e:	4623      	mov	r3, r4
 8009040:	469a      	mov	sl, r3
 8009042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009046:	b10a      	cbz	r2, 800904c <_svfiprintf_r+0x5c>
 8009048:	2a25      	cmp	r2, #37	; 0x25
 800904a:	d1f9      	bne.n	8009040 <_svfiprintf_r+0x50>
 800904c:	ebba 0b04 	subs.w	fp, sl, r4
 8009050:	d00b      	beq.n	800906a <_svfiprintf_r+0x7a>
 8009052:	465b      	mov	r3, fp
 8009054:	4622      	mov	r2, r4
 8009056:	4629      	mov	r1, r5
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ff6f 	bl	8008f3c <__ssputs_r>
 800905e:	3001      	adds	r0, #1
 8009060:	f000 80a9 	beq.w	80091b6 <_svfiprintf_r+0x1c6>
 8009064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009066:	445a      	add	r2, fp
 8009068:	9209      	str	r2, [sp, #36]	; 0x24
 800906a:	f89a 3000 	ldrb.w	r3, [sl]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 80a1 	beq.w	80091b6 <_svfiprintf_r+0x1c6>
 8009074:	2300      	movs	r3, #0
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800907e:	f10a 0a01 	add.w	sl, sl, #1
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	9307      	str	r3, [sp, #28]
 8009086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800908a:	931a      	str	r3, [sp, #104]	; 0x68
 800908c:	4654      	mov	r4, sl
 800908e:	2205      	movs	r2, #5
 8009090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009094:	4850      	ldr	r0, [pc, #320]	; (80091d8 <_svfiprintf_r+0x1e8>)
 8009096:	f7fd fc98 	bl	80069ca <memchr>
 800909a:	9a04      	ldr	r2, [sp, #16]
 800909c:	b9d8      	cbnz	r0, 80090d6 <_svfiprintf_r+0xe6>
 800909e:	06d0      	lsls	r0, r2, #27
 80090a0:	bf44      	itt	mi
 80090a2:	2320      	movmi	r3, #32
 80090a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a8:	0711      	lsls	r1, r2, #28
 80090aa:	bf44      	itt	mi
 80090ac:	232b      	movmi	r3, #43	; 0x2b
 80090ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b2:	f89a 3000 	ldrb.w	r3, [sl]
 80090b6:	2b2a      	cmp	r3, #42	; 0x2a
 80090b8:	d015      	beq.n	80090e6 <_svfiprintf_r+0xf6>
 80090ba:	4654      	mov	r4, sl
 80090bc:	2000      	movs	r0, #0
 80090be:	f04f 0c0a 	mov.w	ip, #10
 80090c2:	9a07      	ldr	r2, [sp, #28]
 80090c4:	4621      	mov	r1, r4
 80090c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ca:	3b30      	subs	r3, #48	; 0x30
 80090cc:	2b09      	cmp	r3, #9
 80090ce:	d94d      	bls.n	800916c <_svfiprintf_r+0x17c>
 80090d0:	b1b0      	cbz	r0, 8009100 <_svfiprintf_r+0x110>
 80090d2:	9207      	str	r2, [sp, #28]
 80090d4:	e014      	b.n	8009100 <_svfiprintf_r+0x110>
 80090d6:	eba0 0308 	sub.w	r3, r0, r8
 80090da:	fa09 f303 	lsl.w	r3, r9, r3
 80090de:	4313      	orrs	r3, r2
 80090e0:	46a2      	mov	sl, r4
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	e7d2      	b.n	800908c <_svfiprintf_r+0x9c>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	1d19      	adds	r1, r3, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	9103      	str	r1, [sp, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bfbb      	ittet	lt
 80090f2:	425b      	neglt	r3, r3
 80090f4:	f042 0202 	orrlt.w	r2, r2, #2
 80090f8:	9307      	strge	r3, [sp, #28]
 80090fa:	9307      	strlt	r3, [sp, #28]
 80090fc:	bfb8      	it	lt
 80090fe:	9204      	strlt	r2, [sp, #16]
 8009100:	7823      	ldrb	r3, [r4, #0]
 8009102:	2b2e      	cmp	r3, #46	; 0x2e
 8009104:	d10c      	bne.n	8009120 <_svfiprintf_r+0x130>
 8009106:	7863      	ldrb	r3, [r4, #1]
 8009108:	2b2a      	cmp	r3, #42	; 0x2a
 800910a:	d134      	bne.n	8009176 <_svfiprintf_r+0x186>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	3402      	adds	r4, #2
 8009110:	1d1a      	adds	r2, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9203      	str	r2, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfb8      	it	lt
 800911a:	f04f 33ff 	movlt.w	r3, #4294967295
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80091dc <_svfiprintf_r+0x1ec>
 8009124:	2203      	movs	r2, #3
 8009126:	4650      	mov	r0, sl
 8009128:	7821      	ldrb	r1, [r4, #0]
 800912a:	f7fd fc4e 	bl	80069ca <memchr>
 800912e:	b138      	cbz	r0, 8009140 <_svfiprintf_r+0x150>
 8009130:	2240      	movs	r2, #64	; 0x40
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	eba0 000a 	sub.w	r0, r0, sl
 8009138:	4082      	lsls	r2, r0
 800913a:	4313      	orrs	r3, r2
 800913c:	3401      	adds	r4, #1
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009144:	2206      	movs	r2, #6
 8009146:	4826      	ldr	r0, [pc, #152]	; (80091e0 <_svfiprintf_r+0x1f0>)
 8009148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914c:	f7fd fc3d 	bl	80069ca <memchr>
 8009150:	2800      	cmp	r0, #0
 8009152:	d038      	beq.n	80091c6 <_svfiprintf_r+0x1d6>
 8009154:	4b23      	ldr	r3, [pc, #140]	; (80091e4 <_svfiprintf_r+0x1f4>)
 8009156:	bb1b      	cbnz	r3, 80091a0 <_svfiprintf_r+0x1b0>
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	3307      	adds	r3, #7
 800915c:	f023 0307 	bic.w	r3, r3, #7
 8009160:	3308      	adds	r3, #8
 8009162:	9303      	str	r3, [sp, #12]
 8009164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009166:	4433      	add	r3, r6
 8009168:	9309      	str	r3, [sp, #36]	; 0x24
 800916a:	e768      	b.n	800903e <_svfiprintf_r+0x4e>
 800916c:	460c      	mov	r4, r1
 800916e:	2001      	movs	r0, #1
 8009170:	fb0c 3202 	mla	r2, ip, r2, r3
 8009174:	e7a6      	b.n	80090c4 <_svfiprintf_r+0xd4>
 8009176:	2300      	movs	r3, #0
 8009178:	f04f 0c0a 	mov.w	ip, #10
 800917c:	4619      	mov	r1, r3
 800917e:	3401      	adds	r4, #1
 8009180:	9305      	str	r3, [sp, #20]
 8009182:	4620      	mov	r0, r4
 8009184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009188:	3a30      	subs	r2, #48	; 0x30
 800918a:	2a09      	cmp	r2, #9
 800918c:	d903      	bls.n	8009196 <_svfiprintf_r+0x1a6>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0c6      	beq.n	8009120 <_svfiprintf_r+0x130>
 8009192:	9105      	str	r1, [sp, #20]
 8009194:	e7c4      	b.n	8009120 <_svfiprintf_r+0x130>
 8009196:	4604      	mov	r4, r0
 8009198:	2301      	movs	r3, #1
 800919a:	fb0c 2101 	mla	r1, ip, r1, r2
 800919e:	e7f0      	b.n	8009182 <_svfiprintf_r+0x192>
 80091a0:	ab03      	add	r3, sp, #12
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	462a      	mov	r2, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <_svfiprintf_r+0x1f8>)
 80091aa:	a904      	add	r1, sp, #16
 80091ac:	f7fc fc98 	bl	8005ae0 <_printf_float>
 80091b0:	1c42      	adds	r2, r0, #1
 80091b2:	4606      	mov	r6, r0
 80091b4:	d1d6      	bne.n	8009164 <_svfiprintf_r+0x174>
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	065b      	lsls	r3, r3, #25
 80091ba:	f53f af2d 	bmi.w	8009018 <_svfiprintf_r+0x28>
 80091be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091c0:	b01d      	add	sp, #116	; 0x74
 80091c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c6:	ab03      	add	r3, sp, #12
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	462a      	mov	r2, r5
 80091cc:	4638      	mov	r0, r7
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <_svfiprintf_r+0x1f8>)
 80091d0:	a904      	add	r1, sp, #16
 80091d2:	f7fc ff25 	bl	8006020 <_printf_i>
 80091d6:	e7eb      	b.n	80091b0 <_svfiprintf_r+0x1c0>
 80091d8:	0800aba1 	.word	0x0800aba1
 80091dc:	0800aba7 	.word	0x0800aba7
 80091e0:	0800abab 	.word	0x0800abab
 80091e4:	08005ae1 	.word	0x08005ae1
 80091e8:	08008f3d 	.word	0x08008f3d

080091ec <__sflush_r>:
 80091ec:	898a      	ldrh	r2, [r1, #12]
 80091ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f0:	4605      	mov	r5, r0
 80091f2:	0710      	lsls	r0, r2, #28
 80091f4:	460c      	mov	r4, r1
 80091f6:	d457      	bmi.n	80092a8 <__sflush_r+0xbc>
 80091f8:	684b      	ldr	r3, [r1, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc04      	bgt.n	8009208 <__sflush_r+0x1c>
 80091fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	dc01      	bgt.n	8009208 <__sflush_r+0x1c>
 8009204:	2000      	movs	r0, #0
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800920a:	2e00      	cmp	r6, #0
 800920c:	d0fa      	beq.n	8009204 <__sflush_r+0x18>
 800920e:	2300      	movs	r3, #0
 8009210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009214:	682f      	ldr	r7, [r5, #0]
 8009216:	6a21      	ldr	r1, [r4, #32]
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	d032      	beq.n	8009282 <__sflush_r+0x96>
 800921c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	075a      	lsls	r2, r3, #29
 8009222:	d505      	bpl.n	8009230 <__sflush_r+0x44>
 8009224:	6863      	ldr	r3, [r4, #4]
 8009226:	1ac0      	subs	r0, r0, r3
 8009228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800922a:	b10b      	cbz	r3, 8009230 <__sflush_r+0x44>
 800922c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800922e:	1ac0      	subs	r0, r0, r3
 8009230:	2300      	movs	r3, #0
 8009232:	4602      	mov	r2, r0
 8009234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009236:	4628      	mov	r0, r5
 8009238:	6a21      	ldr	r1, [r4, #32]
 800923a:	47b0      	blx	r6
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	d106      	bne.n	8009250 <__sflush_r+0x64>
 8009242:	6829      	ldr	r1, [r5, #0]
 8009244:	291d      	cmp	r1, #29
 8009246:	d82b      	bhi.n	80092a0 <__sflush_r+0xb4>
 8009248:	4a28      	ldr	r2, [pc, #160]	; (80092ec <__sflush_r+0x100>)
 800924a:	410a      	asrs	r2, r1
 800924c:	07d6      	lsls	r6, r2, #31
 800924e:	d427      	bmi.n	80092a0 <__sflush_r+0xb4>
 8009250:	2200      	movs	r2, #0
 8009252:	6062      	str	r2, [r4, #4]
 8009254:	6922      	ldr	r2, [r4, #16]
 8009256:	04d9      	lsls	r1, r3, #19
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	d504      	bpl.n	8009266 <__sflush_r+0x7a>
 800925c:	1c42      	adds	r2, r0, #1
 800925e:	d101      	bne.n	8009264 <__sflush_r+0x78>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b903      	cbnz	r3, 8009266 <__sflush_r+0x7a>
 8009264:	6560      	str	r0, [r4, #84]	; 0x54
 8009266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009268:	602f      	str	r7, [r5, #0]
 800926a:	2900      	cmp	r1, #0
 800926c:	d0ca      	beq.n	8009204 <__sflush_r+0x18>
 800926e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009272:	4299      	cmp	r1, r3
 8009274:	d002      	beq.n	800927c <__sflush_r+0x90>
 8009276:	4628      	mov	r0, r5
 8009278:	f7fe fa2a 	bl	80076d0 <_free_r>
 800927c:	2000      	movs	r0, #0
 800927e:	6360      	str	r0, [r4, #52]	; 0x34
 8009280:	e7c1      	b.n	8009206 <__sflush_r+0x1a>
 8009282:	2301      	movs	r3, #1
 8009284:	4628      	mov	r0, r5
 8009286:	47b0      	blx	r6
 8009288:	1c41      	adds	r1, r0, #1
 800928a:	d1c8      	bne.n	800921e <__sflush_r+0x32>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0c5      	beq.n	800921e <__sflush_r+0x32>
 8009292:	2b1d      	cmp	r3, #29
 8009294:	d001      	beq.n	800929a <__sflush_r+0xae>
 8009296:	2b16      	cmp	r3, #22
 8009298:	d101      	bne.n	800929e <__sflush_r+0xb2>
 800929a:	602f      	str	r7, [r5, #0]
 800929c:	e7b2      	b.n	8009204 <__sflush_r+0x18>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	e7ae      	b.n	8009206 <__sflush_r+0x1a>
 80092a8:	690f      	ldr	r7, [r1, #16]
 80092aa:	2f00      	cmp	r7, #0
 80092ac:	d0aa      	beq.n	8009204 <__sflush_r+0x18>
 80092ae:	0793      	lsls	r3, r2, #30
 80092b0:	bf18      	it	ne
 80092b2:	2300      	movne	r3, #0
 80092b4:	680e      	ldr	r6, [r1, #0]
 80092b6:	bf08      	it	eq
 80092b8:	694b      	ldreq	r3, [r1, #20]
 80092ba:	1bf6      	subs	r6, r6, r7
 80092bc:	600f      	str	r7, [r1, #0]
 80092be:	608b      	str	r3, [r1, #8]
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	dd9f      	ble.n	8009204 <__sflush_r+0x18>
 80092c4:	4633      	mov	r3, r6
 80092c6:	463a      	mov	r2, r7
 80092c8:	4628      	mov	r0, r5
 80092ca:	6a21      	ldr	r1, [r4, #32]
 80092cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80092d0:	47e0      	blx	ip
 80092d2:	2800      	cmp	r0, #0
 80092d4:	dc06      	bgt.n	80092e4 <__sflush_r+0xf8>
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f04f 30ff 	mov.w	r0, #4294967295
 80092dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	e790      	b.n	8009206 <__sflush_r+0x1a>
 80092e4:	4407      	add	r7, r0
 80092e6:	1a36      	subs	r6, r6, r0
 80092e8:	e7ea      	b.n	80092c0 <__sflush_r+0xd4>
 80092ea:	bf00      	nop
 80092ec:	dfbffffe 	.word	0xdfbffffe

080092f0 <_fflush_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	690b      	ldr	r3, [r1, #16]
 80092f4:	4605      	mov	r5, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	b913      	cbnz	r3, 8009300 <_fflush_r+0x10>
 80092fa:	2500      	movs	r5, #0
 80092fc:	4628      	mov	r0, r5
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	b118      	cbz	r0, 800930a <_fflush_r+0x1a>
 8009302:	6a03      	ldr	r3, [r0, #32]
 8009304:	b90b      	cbnz	r3, 800930a <_fflush_r+0x1a>
 8009306:	f7fd fa47 	bl	8006798 <__sinit>
 800930a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0f3      	beq.n	80092fa <_fflush_r+0xa>
 8009312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009314:	07d0      	lsls	r0, r2, #31
 8009316:	d404      	bmi.n	8009322 <_fflush_r+0x32>
 8009318:	0599      	lsls	r1, r3, #22
 800931a:	d402      	bmi.n	8009322 <_fflush_r+0x32>
 800931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931e:	f7fd fb52 	bl	80069c6 <__retarget_lock_acquire_recursive>
 8009322:	4628      	mov	r0, r5
 8009324:	4621      	mov	r1, r4
 8009326:	f7ff ff61 	bl	80091ec <__sflush_r>
 800932a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800932c:	4605      	mov	r5, r0
 800932e:	07da      	lsls	r2, r3, #31
 8009330:	d4e4      	bmi.n	80092fc <_fflush_r+0xc>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	059b      	lsls	r3, r3, #22
 8009336:	d4e1      	bmi.n	80092fc <_fflush_r+0xc>
 8009338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933a:	f7fd fb45 	bl	80069c8 <__retarget_lock_release_recursive>
 800933e:	e7dd      	b.n	80092fc <_fflush_r+0xc>

08009340 <memmove>:
 8009340:	4288      	cmp	r0, r1
 8009342:	b510      	push	{r4, lr}
 8009344:	eb01 0402 	add.w	r4, r1, r2
 8009348:	d902      	bls.n	8009350 <memmove+0x10>
 800934a:	4284      	cmp	r4, r0
 800934c:	4623      	mov	r3, r4
 800934e:	d807      	bhi.n	8009360 <memmove+0x20>
 8009350:	1e43      	subs	r3, r0, #1
 8009352:	42a1      	cmp	r1, r4
 8009354:	d008      	beq.n	8009368 <memmove+0x28>
 8009356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800935a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800935e:	e7f8      	b.n	8009352 <memmove+0x12>
 8009360:	4601      	mov	r1, r0
 8009362:	4402      	add	r2, r0
 8009364:	428a      	cmp	r2, r1
 8009366:	d100      	bne.n	800936a <memmove+0x2a>
 8009368:	bd10      	pop	{r4, pc}
 800936a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800936e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009372:	e7f7      	b.n	8009364 <memmove+0x24>

08009374 <strncmp>:
 8009374:	b510      	push	{r4, lr}
 8009376:	b16a      	cbz	r2, 8009394 <strncmp+0x20>
 8009378:	3901      	subs	r1, #1
 800937a:	1884      	adds	r4, r0, r2
 800937c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009380:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009384:	429a      	cmp	r2, r3
 8009386:	d103      	bne.n	8009390 <strncmp+0x1c>
 8009388:	42a0      	cmp	r0, r4
 800938a:	d001      	beq.n	8009390 <strncmp+0x1c>
 800938c:	2a00      	cmp	r2, #0
 800938e:	d1f5      	bne.n	800937c <strncmp+0x8>
 8009390:	1ad0      	subs	r0, r2, r3
 8009392:	bd10      	pop	{r4, pc}
 8009394:	4610      	mov	r0, r2
 8009396:	e7fc      	b.n	8009392 <strncmp+0x1e>

08009398 <_sbrk_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	2300      	movs	r3, #0
 800939c:	4d05      	ldr	r5, [pc, #20]	; (80093b4 <_sbrk_r+0x1c>)
 800939e:	4604      	mov	r4, r0
 80093a0:	4608      	mov	r0, r1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7f9 f8b4 	bl	8002510 <_sbrk>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_sbrk_r+0x1a>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_sbrk_r+0x1a>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	200005e8 	.word	0x200005e8

080093b8 <memcpy>:
 80093b8:	440a      	add	r2, r1
 80093ba:	4291      	cmp	r1, r2
 80093bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093c0:	d100      	bne.n	80093c4 <memcpy+0xc>
 80093c2:	4770      	bx	lr
 80093c4:	b510      	push	{r4, lr}
 80093c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ca:	4291      	cmp	r1, r2
 80093cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d0:	d1f9      	bne.n	80093c6 <memcpy+0xe>
 80093d2:	bd10      	pop	{r4, pc}

080093d4 <nan>:
 80093d4:	2000      	movs	r0, #0
 80093d6:	4901      	ldr	r1, [pc, #4]	; (80093dc <nan+0x8>)
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	7ff80000 	.word	0x7ff80000

080093e0 <__assert_func>:
 80093e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093e2:	4614      	mov	r4, r2
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <__assert_func+0x2c>)
 80093e8:	4605      	mov	r5, r0
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68d8      	ldr	r0, [r3, #12]
 80093ee:	b14c      	cbz	r4, 8009404 <__assert_func+0x24>
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <__assert_func+0x30>)
 80093f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093f6:	9100      	str	r1, [sp, #0]
 80093f8:	462b      	mov	r3, r5
 80093fa:	4906      	ldr	r1, [pc, #24]	; (8009414 <__assert_func+0x34>)
 80093fc:	f000 fbca 	bl	8009b94 <fiprintf>
 8009400:	f000 fbda 	bl	8009bb8 <abort>
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <__assert_func+0x38>)
 8009406:	461c      	mov	r4, r3
 8009408:	e7f3      	b.n	80093f2 <__assert_func+0x12>
 800940a:	bf00      	nop
 800940c:	20000078 	.word	0x20000078
 8009410:	0800abba 	.word	0x0800abba
 8009414:	0800abc7 	.word	0x0800abc7
 8009418:	0800abf5 	.word	0x0800abf5

0800941c <_calloc_r>:
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	fba1 5402 	umull	r5, r4, r1, r2
 8009422:	b934      	cbnz	r4, 8009432 <_calloc_r+0x16>
 8009424:	4629      	mov	r1, r5
 8009426:	f7fe f9c3 	bl	80077b0 <_malloc_r>
 800942a:	4606      	mov	r6, r0
 800942c:	b928      	cbnz	r0, 800943a <_calloc_r+0x1e>
 800942e:	4630      	mov	r0, r6
 8009430:	bd70      	pop	{r4, r5, r6, pc}
 8009432:	220c      	movs	r2, #12
 8009434:	2600      	movs	r6, #0
 8009436:	6002      	str	r2, [r0, #0]
 8009438:	e7f9      	b.n	800942e <_calloc_r+0x12>
 800943a:	462a      	mov	r2, r5
 800943c:	4621      	mov	r1, r4
 800943e:	f7fd fa44 	bl	80068ca <memset>
 8009442:	e7f4      	b.n	800942e <_calloc_r+0x12>

08009444 <rshift>:
 8009444:	6903      	ldr	r3, [r0, #16]
 8009446:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800944a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800944e:	f100 0414 	add.w	r4, r0, #20
 8009452:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009456:	dd46      	ble.n	80094e6 <rshift+0xa2>
 8009458:	f011 011f 	ands.w	r1, r1, #31
 800945c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009460:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009464:	d10c      	bne.n	8009480 <rshift+0x3c>
 8009466:	4629      	mov	r1, r5
 8009468:	f100 0710 	add.w	r7, r0, #16
 800946c:	42b1      	cmp	r1, r6
 800946e:	d335      	bcc.n	80094dc <rshift+0x98>
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	1eea      	subs	r2, r5, #3
 8009476:	4296      	cmp	r6, r2
 8009478:	bf38      	it	cc
 800947a:	2300      	movcc	r3, #0
 800947c:	4423      	add	r3, r4
 800947e:	e015      	b.n	80094ac <rshift+0x68>
 8009480:	46a1      	mov	r9, r4
 8009482:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009486:	f1c1 0820 	rsb	r8, r1, #32
 800948a:	40cf      	lsrs	r7, r1
 800948c:	f105 0e04 	add.w	lr, r5, #4
 8009490:	4576      	cmp	r6, lr
 8009492:	46f4      	mov	ip, lr
 8009494:	d816      	bhi.n	80094c4 <rshift+0x80>
 8009496:	1a9a      	subs	r2, r3, r2
 8009498:	0092      	lsls	r2, r2, #2
 800949a:	3a04      	subs	r2, #4
 800949c:	3501      	adds	r5, #1
 800949e:	42ae      	cmp	r6, r5
 80094a0:	bf38      	it	cc
 80094a2:	2200      	movcc	r2, #0
 80094a4:	18a3      	adds	r3, r4, r2
 80094a6:	50a7      	str	r7, [r4, r2]
 80094a8:	b107      	cbz	r7, 80094ac <rshift+0x68>
 80094aa:	3304      	adds	r3, #4
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	eba3 0204 	sub.w	r2, r3, r4
 80094b2:	bf08      	it	eq
 80094b4:	2300      	moveq	r3, #0
 80094b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094ba:	6102      	str	r2, [r0, #16]
 80094bc:	bf08      	it	eq
 80094be:	6143      	streq	r3, [r0, #20]
 80094c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094c4:	f8dc c000 	ldr.w	ip, [ip]
 80094c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80094cc:	ea4c 0707 	orr.w	r7, ip, r7
 80094d0:	f849 7b04 	str.w	r7, [r9], #4
 80094d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094d8:	40cf      	lsrs	r7, r1
 80094da:	e7d9      	b.n	8009490 <rshift+0x4c>
 80094dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80094e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80094e4:	e7c2      	b.n	800946c <rshift+0x28>
 80094e6:	4623      	mov	r3, r4
 80094e8:	e7e0      	b.n	80094ac <rshift+0x68>

080094ea <__hexdig_fun>:
 80094ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094ee:	2b09      	cmp	r3, #9
 80094f0:	d802      	bhi.n	80094f8 <__hexdig_fun+0xe>
 80094f2:	3820      	subs	r0, #32
 80094f4:	b2c0      	uxtb	r0, r0
 80094f6:	4770      	bx	lr
 80094f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094fc:	2b05      	cmp	r3, #5
 80094fe:	d801      	bhi.n	8009504 <__hexdig_fun+0x1a>
 8009500:	3847      	subs	r0, #71	; 0x47
 8009502:	e7f7      	b.n	80094f4 <__hexdig_fun+0xa>
 8009504:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009508:	2b05      	cmp	r3, #5
 800950a:	d801      	bhi.n	8009510 <__hexdig_fun+0x26>
 800950c:	3827      	subs	r0, #39	; 0x27
 800950e:	e7f1      	b.n	80094f4 <__hexdig_fun+0xa>
 8009510:	2000      	movs	r0, #0
 8009512:	4770      	bx	lr

08009514 <__gethex>:
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	4681      	mov	r9, r0
 800951a:	468a      	mov	sl, r1
 800951c:	4617      	mov	r7, r2
 800951e:	680a      	ldr	r2, [r1, #0]
 8009520:	b085      	sub	sp, #20
 8009522:	f102 0b02 	add.w	fp, r2, #2
 8009526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800952a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	32fe      	adds	r2, #254	; 0xfe
 8009532:	eb02 030b 	add.w	r3, r2, fp
 8009536:	46d8      	mov	r8, fp
 8009538:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	2830      	cmp	r0, #48	; 0x30
 8009540:	d0f7      	beq.n	8009532 <__gethex+0x1e>
 8009542:	f7ff ffd2 	bl	80094ea <__hexdig_fun>
 8009546:	4604      	mov	r4, r0
 8009548:	2800      	cmp	r0, #0
 800954a:	d138      	bne.n	80095be <__gethex+0xaa>
 800954c:	2201      	movs	r2, #1
 800954e:	4640      	mov	r0, r8
 8009550:	49a7      	ldr	r1, [pc, #668]	; (80097f0 <__gethex+0x2dc>)
 8009552:	f7ff ff0f 	bl	8009374 <strncmp>
 8009556:	4606      	mov	r6, r0
 8009558:	2800      	cmp	r0, #0
 800955a:	d169      	bne.n	8009630 <__gethex+0x11c>
 800955c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009560:	465d      	mov	r5, fp
 8009562:	f7ff ffc2 	bl	80094ea <__hexdig_fun>
 8009566:	2800      	cmp	r0, #0
 8009568:	d064      	beq.n	8009634 <__gethex+0x120>
 800956a:	465a      	mov	r2, fp
 800956c:	7810      	ldrb	r0, [r2, #0]
 800956e:	4690      	mov	r8, r2
 8009570:	2830      	cmp	r0, #48	; 0x30
 8009572:	f102 0201 	add.w	r2, r2, #1
 8009576:	d0f9      	beq.n	800956c <__gethex+0x58>
 8009578:	f7ff ffb7 	bl	80094ea <__hexdig_fun>
 800957c:	2301      	movs	r3, #1
 800957e:	fab0 f480 	clz	r4, r0
 8009582:	465e      	mov	r6, fp
 8009584:	0964      	lsrs	r4, r4, #5
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	4642      	mov	r2, r8
 800958a:	4615      	mov	r5, r2
 800958c:	7828      	ldrb	r0, [r5, #0]
 800958e:	3201      	adds	r2, #1
 8009590:	f7ff ffab 	bl	80094ea <__hexdig_fun>
 8009594:	2800      	cmp	r0, #0
 8009596:	d1f8      	bne.n	800958a <__gethex+0x76>
 8009598:	2201      	movs	r2, #1
 800959a:	4628      	mov	r0, r5
 800959c:	4994      	ldr	r1, [pc, #592]	; (80097f0 <__gethex+0x2dc>)
 800959e:	f7ff fee9 	bl	8009374 <strncmp>
 80095a2:	b978      	cbnz	r0, 80095c4 <__gethex+0xb0>
 80095a4:	b946      	cbnz	r6, 80095b8 <__gethex+0xa4>
 80095a6:	1c6e      	adds	r6, r5, #1
 80095a8:	4632      	mov	r2, r6
 80095aa:	4615      	mov	r5, r2
 80095ac:	7828      	ldrb	r0, [r5, #0]
 80095ae:	3201      	adds	r2, #1
 80095b0:	f7ff ff9b 	bl	80094ea <__hexdig_fun>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d1f8      	bne.n	80095aa <__gethex+0x96>
 80095b8:	1b73      	subs	r3, r6, r5
 80095ba:	009e      	lsls	r6, r3, #2
 80095bc:	e004      	b.n	80095c8 <__gethex+0xb4>
 80095be:	2400      	movs	r4, #0
 80095c0:	4626      	mov	r6, r4
 80095c2:	e7e1      	b.n	8009588 <__gethex+0x74>
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	d1f7      	bne.n	80095b8 <__gethex+0xa4>
 80095c8:	782b      	ldrb	r3, [r5, #0]
 80095ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095ce:	2b50      	cmp	r3, #80	; 0x50
 80095d0:	d13d      	bne.n	800964e <__gethex+0x13a>
 80095d2:	786b      	ldrb	r3, [r5, #1]
 80095d4:	2b2b      	cmp	r3, #43	; 0x2b
 80095d6:	d02f      	beq.n	8009638 <__gethex+0x124>
 80095d8:	2b2d      	cmp	r3, #45	; 0x2d
 80095da:	d031      	beq.n	8009640 <__gethex+0x12c>
 80095dc:	f04f 0b00 	mov.w	fp, #0
 80095e0:	1c69      	adds	r1, r5, #1
 80095e2:	7808      	ldrb	r0, [r1, #0]
 80095e4:	f7ff ff81 	bl	80094ea <__hexdig_fun>
 80095e8:	1e42      	subs	r2, r0, #1
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	2a18      	cmp	r2, #24
 80095ee:	d82e      	bhi.n	800964e <__gethex+0x13a>
 80095f0:	f1a0 0210 	sub.w	r2, r0, #16
 80095f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095f8:	f7ff ff77 	bl	80094ea <__hexdig_fun>
 80095fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009600:	fa5f fc8c 	uxtb.w	ip, ip
 8009604:	f1bc 0f18 	cmp.w	ip, #24
 8009608:	d91d      	bls.n	8009646 <__gethex+0x132>
 800960a:	f1bb 0f00 	cmp.w	fp, #0
 800960e:	d000      	beq.n	8009612 <__gethex+0xfe>
 8009610:	4252      	negs	r2, r2
 8009612:	4416      	add	r6, r2
 8009614:	f8ca 1000 	str.w	r1, [sl]
 8009618:	b1dc      	cbz	r4, 8009652 <__gethex+0x13e>
 800961a:	9b01      	ldr	r3, [sp, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	bf14      	ite	ne
 8009620:	f04f 0800 	movne.w	r8, #0
 8009624:	f04f 0806 	moveq.w	r8, #6
 8009628:	4640      	mov	r0, r8
 800962a:	b005      	add	sp, #20
 800962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	4645      	mov	r5, r8
 8009632:	4626      	mov	r6, r4
 8009634:	2401      	movs	r4, #1
 8009636:	e7c7      	b.n	80095c8 <__gethex+0xb4>
 8009638:	f04f 0b00 	mov.w	fp, #0
 800963c:	1ca9      	adds	r1, r5, #2
 800963e:	e7d0      	b.n	80095e2 <__gethex+0xce>
 8009640:	f04f 0b01 	mov.w	fp, #1
 8009644:	e7fa      	b.n	800963c <__gethex+0x128>
 8009646:	230a      	movs	r3, #10
 8009648:	fb03 0002 	mla	r0, r3, r2, r0
 800964c:	e7d0      	b.n	80095f0 <__gethex+0xdc>
 800964e:	4629      	mov	r1, r5
 8009650:	e7e0      	b.n	8009614 <__gethex+0x100>
 8009652:	4621      	mov	r1, r4
 8009654:	eba5 0308 	sub.w	r3, r5, r8
 8009658:	3b01      	subs	r3, #1
 800965a:	2b07      	cmp	r3, #7
 800965c:	dc0a      	bgt.n	8009674 <__gethex+0x160>
 800965e:	4648      	mov	r0, r9
 8009660:	f7fe f932 	bl	80078c8 <_Balloc>
 8009664:	4604      	mov	r4, r0
 8009666:	b940      	cbnz	r0, 800967a <__gethex+0x166>
 8009668:	4602      	mov	r2, r0
 800966a:	21e4      	movs	r1, #228	; 0xe4
 800966c:	4b61      	ldr	r3, [pc, #388]	; (80097f4 <__gethex+0x2e0>)
 800966e:	4862      	ldr	r0, [pc, #392]	; (80097f8 <__gethex+0x2e4>)
 8009670:	f7ff feb6 	bl	80093e0 <__assert_func>
 8009674:	3101      	adds	r1, #1
 8009676:	105b      	asrs	r3, r3, #1
 8009678:	e7ef      	b.n	800965a <__gethex+0x146>
 800967a:	2300      	movs	r3, #0
 800967c:	469b      	mov	fp, r3
 800967e:	f100 0a14 	add.w	sl, r0, #20
 8009682:	f8cd a004 	str.w	sl, [sp, #4]
 8009686:	45a8      	cmp	r8, r5
 8009688:	d344      	bcc.n	8009714 <__gethex+0x200>
 800968a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800968e:	4658      	mov	r0, fp
 8009690:	f848 bb04 	str.w	fp, [r8], #4
 8009694:	eba8 080a 	sub.w	r8, r8, sl
 8009698:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800969c:	6122      	str	r2, [r4, #16]
 800969e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80096a2:	f7fe fa03 	bl	8007aac <__hi0bits>
 80096a6:	683d      	ldr	r5, [r7, #0]
 80096a8:	eba8 0800 	sub.w	r8, r8, r0
 80096ac:	45a8      	cmp	r8, r5
 80096ae:	dd59      	ble.n	8009764 <__gethex+0x250>
 80096b0:	eba8 0805 	sub.w	r8, r8, r5
 80096b4:	4641      	mov	r1, r8
 80096b6:	4620      	mov	r0, r4
 80096b8:	f7fe fd81 	bl	80081be <__any_on>
 80096bc:	4683      	mov	fp, r0
 80096be:	b1b8      	cbz	r0, 80096f0 <__gethex+0x1dc>
 80096c0:	f04f 0b01 	mov.w	fp, #1
 80096c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80096c8:	1159      	asrs	r1, r3, #5
 80096ca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80096ce:	f003 021f 	and.w	r2, r3, #31
 80096d2:	fa0b f202 	lsl.w	r2, fp, r2
 80096d6:	420a      	tst	r2, r1
 80096d8:	d00a      	beq.n	80096f0 <__gethex+0x1dc>
 80096da:	455b      	cmp	r3, fp
 80096dc:	dd06      	ble.n	80096ec <__gethex+0x1d8>
 80096de:	4620      	mov	r0, r4
 80096e0:	f1a8 0102 	sub.w	r1, r8, #2
 80096e4:	f7fe fd6b 	bl	80081be <__any_on>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d138      	bne.n	800975e <__gethex+0x24a>
 80096ec:	f04f 0b02 	mov.w	fp, #2
 80096f0:	4641      	mov	r1, r8
 80096f2:	4620      	mov	r0, r4
 80096f4:	f7ff fea6 	bl	8009444 <rshift>
 80096f8:	4446      	add	r6, r8
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	42b3      	cmp	r3, r6
 80096fe:	da41      	bge.n	8009784 <__gethex+0x270>
 8009700:	4621      	mov	r1, r4
 8009702:	4648      	mov	r0, r9
 8009704:	f7fe f920 	bl	8007948 <_Bfree>
 8009708:	2300      	movs	r3, #0
 800970a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800970c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	e789      	b.n	8009628 <__gethex+0x114>
 8009714:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009718:	2a2e      	cmp	r2, #46	; 0x2e
 800971a:	d014      	beq.n	8009746 <__gethex+0x232>
 800971c:	2b20      	cmp	r3, #32
 800971e:	d106      	bne.n	800972e <__gethex+0x21a>
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	f843 bb04 	str.w	fp, [r3], #4
 8009726:	f04f 0b00 	mov.w	fp, #0
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	465b      	mov	r3, fp
 800972e:	7828      	ldrb	r0, [r5, #0]
 8009730:	9303      	str	r3, [sp, #12]
 8009732:	f7ff feda 	bl	80094ea <__hexdig_fun>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	f000 000f 	and.w	r0, r0, #15
 800973c:	4098      	lsls	r0, r3
 800973e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009742:	3304      	adds	r3, #4
 8009744:	e79f      	b.n	8009686 <__gethex+0x172>
 8009746:	45a8      	cmp	r8, r5
 8009748:	d8e8      	bhi.n	800971c <__gethex+0x208>
 800974a:	2201      	movs	r2, #1
 800974c:	4628      	mov	r0, r5
 800974e:	4928      	ldr	r1, [pc, #160]	; (80097f0 <__gethex+0x2dc>)
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	f7ff fe0f 	bl	8009374 <strncmp>
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	2800      	cmp	r0, #0
 800975a:	d1df      	bne.n	800971c <__gethex+0x208>
 800975c:	e793      	b.n	8009686 <__gethex+0x172>
 800975e:	f04f 0b03 	mov.w	fp, #3
 8009762:	e7c5      	b.n	80096f0 <__gethex+0x1dc>
 8009764:	da0b      	bge.n	800977e <__gethex+0x26a>
 8009766:	eba5 0808 	sub.w	r8, r5, r8
 800976a:	4621      	mov	r1, r4
 800976c:	4642      	mov	r2, r8
 800976e:	4648      	mov	r0, r9
 8009770:	f7fe fb02 	bl	8007d78 <__lshift>
 8009774:	4604      	mov	r4, r0
 8009776:	eba6 0608 	sub.w	r6, r6, r8
 800977a:	f100 0a14 	add.w	sl, r0, #20
 800977e:	f04f 0b00 	mov.w	fp, #0
 8009782:	e7ba      	b.n	80096fa <__gethex+0x1e6>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	42b3      	cmp	r3, r6
 8009788:	dd74      	ble.n	8009874 <__gethex+0x360>
 800978a:	1b9e      	subs	r6, r3, r6
 800978c:	42b5      	cmp	r5, r6
 800978e:	dc35      	bgt.n	80097fc <__gethex+0x2e8>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d023      	beq.n	80097de <__gethex+0x2ca>
 8009796:	2b03      	cmp	r3, #3
 8009798:	d025      	beq.n	80097e6 <__gethex+0x2d2>
 800979a:	2b01      	cmp	r3, #1
 800979c:	d115      	bne.n	80097ca <__gethex+0x2b6>
 800979e:	42b5      	cmp	r5, r6
 80097a0:	d113      	bne.n	80097ca <__gethex+0x2b6>
 80097a2:	2d01      	cmp	r5, #1
 80097a4:	d10b      	bne.n	80097be <__gethex+0x2aa>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	9a02      	ldr	r2, [sp, #8]
 80097aa:	f04f 0862 	mov.w	r8, #98	; 0x62
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	2301      	movs	r3, #1
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	f8ca 3000 	str.w	r3, [sl]
 80097b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ba:	601c      	str	r4, [r3, #0]
 80097bc:	e734      	b.n	8009628 <__gethex+0x114>
 80097be:	4620      	mov	r0, r4
 80097c0:	1e69      	subs	r1, r5, #1
 80097c2:	f7fe fcfc 	bl	80081be <__any_on>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d1ed      	bne.n	80097a6 <__gethex+0x292>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4648      	mov	r0, r9
 80097ce:	f7fe f8bb 	bl	8007948 <_Bfree>
 80097d2:	2300      	movs	r3, #0
 80097d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	e724      	b.n	8009628 <__gethex+0x114>
 80097de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1f2      	bne.n	80097ca <__gethex+0x2b6>
 80097e4:	e7df      	b.n	80097a6 <__gethex+0x292>
 80097e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1dc      	bne.n	80097a6 <__gethex+0x292>
 80097ec:	e7ed      	b.n	80097ca <__gethex+0x2b6>
 80097ee:	bf00      	nop
 80097f0:	0800aa4c 	.word	0x0800aa4c
 80097f4:	0800a8e3 	.word	0x0800a8e3
 80097f8:	0800abf6 	.word	0x0800abf6
 80097fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8009800:	f1bb 0f00 	cmp.w	fp, #0
 8009804:	d133      	bne.n	800986e <__gethex+0x35a>
 8009806:	f1b8 0f00 	cmp.w	r8, #0
 800980a:	d004      	beq.n	8009816 <__gethex+0x302>
 800980c:	4641      	mov	r1, r8
 800980e:	4620      	mov	r0, r4
 8009810:	f7fe fcd5 	bl	80081be <__any_on>
 8009814:	4683      	mov	fp, r0
 8009816:	2301      	movs	r3, #1
 8009818:	ea4f 1268 	mov.w	r2, r8, asr #5
 800981c:	f008 081f 	and.w	r8, r8, #31
 8009820:	fa03 f308 	lsl.w	r3, r3, r8
 8009824:	f04f 0802 	mov.w	r8, #2
 8009828:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800982c:	4631      	mov	r1, r6
 800982e:	4213      	tst	r3, r2
 8009830:	4620      	mov	r0, r4
 8009832:	bf18      	it	ne
 8009834:	f04b 0b02 	orrne.w	fp, fp, #2
 8009838:	1bad      	subs	r5, r5, r6
 800983a:	f7ff fe03 	bl	8009444 <rshift>
 800983e:	687e      	ldr	r6, [r7, #4]
 8009840:	f1bb 0f00 	cmp.w	fp, #0
 8009844:	d04a      	beq.n	80098dc <__gethex+0x3c8>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d016      	beq.n	800987a <__gethex+0x366>
 800984c:	2b03      	cmp	r3, #3
 800984e:	d018      	beq.n	8009882 <__gethex+0x36e>
 8009850:	2b01      	cmp	r3, #1
 8009852:	d109      	bne.n	8009868 <__gethex+0x354>
 8009854:	f01b 0f02 	tst.w	fp, #2
 8009858:	d006      	beq.n	8009868 <__gethex+0x354>
 800985a:	f8da 3000 	ldr.w	r3, [sl]
 800985e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009862:	f01b 0f01 	tst.w	fp, #1
 8009866:	d10f      	bne.n	8009888 <__gethex+0x374>
 8009868:	f048 0810 	orr.w	r8, r8, #16
 800986c:	e036      	b.n	80098dc <__gethex+0x3c8>
 800986e:	f04f 0b01 	mov.w	fp, #1
 8009872:	e7d0      	b.n	8009816 <__gethex+0x302>
 8009874:	f04f 0801 	mov.w	r8, #1
 8009878:	e7e2      	b.n	8009840 <__gethex+0x32c>
 800987a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800987c:	f1c3 0301 	rsb	r3, r3, #1
 8009880:	930f      	str	r3, [sp, #60]	; 0x3c
 8009882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0ef      	beq.n	8009868 <__gethex+0x354>
 8009888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800988c:	f104 0214 	add.w	r2, r4, #20
 8009890:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	2300      	movs	r3, #0
 8009898:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800989c:	4694      	mov	ip, r2
 800989e:	f852 1b04 	ldr.w	r1, [r2], #4
 80098a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80098a6:	d01e      	beq.n	80098e6 <__gethex+0x3d2>
 80098a8:	3101      	adds	r1, #1
 80098aa:	f8cc 1000 	str.w	r1, [ip]
 80098ae:	f1b8 0f02 	cmp.w	r8, #2
 80098b2:	f104 0214 	add.w	r2, r4, #20
 80098b6:	d13d      	bne.n	8009934 <__gethex+0x420>
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	42ab      	cmp	r3, r5
 80098be:	d10b      	bne.n	80098d8 <__gethex+0x3c4>
 80098c0:	2301      	movs	r3, #1
 80098c2:	1169      	asrs	r1, r5, #5
 80098c4:	f005 051f 	and.w	r5, r5, #31
 80098c8:	fa03 f505 	lsl.w	r5, r3, r5
 80098cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098d0:	421d      	tst	r5, r3
 80098d2:	bf18      	it	ne
 80098d4:	f04f 0801 	movne.w	r8, #1
 80098d8:	f048 0820 	orr.w	r8, r8, #32
 80098dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098de:	601c      	str	r4, [r3, #0]
 80098e0:	9b02      	ldr	r3, [sp, #8]
 80098e2:	601e      	str	r6, [r3, #0]
 80098e4:	e6a0      	b.n	8009628 <__gethex+0x114>
 80098e6:	4290      	cmp	r0, r2
 80098e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80098ec:	d8d6      	bhi.n	800989c <__gethex+0x388>
 80098ee:	68a2      	ldr	r2, [r4, #8]
 80098f0:	4593      	cmp	fp, r2
 80098f2:	db17      	blt.n	8009924 <__gethex+0x410>
 80098f4:	6861      	ldr	r1, [r4, #4]
 80098f6:	4648      	mov	r0, r9
 80098f8:	3101      	adds	r1, #1
 80098fa:	f7fd ffe5 	bl	80078c8 <_Balloc>
 80098fe:	4682      	mov	sl, r0
 8009900:	b918      	cbnz	r0, 800990a <__gethex+0x3f6>
 8009902:	4602      	mov	r2, r0
 8009904:	2184      	movs	r1, #132	; 0x84
 8009906:	4b1a      	ldr	r3, [pc, #104]	; (8009970 <__gethex+0x45c>)
 8009908:	e6b1      	b.n	800966e <__gethex+0x15a>
 800990a:	6922      	ldr	r2, [r4, #16]
 800990c:	f104 010c 	add.w	r1, r4, #12
 8009910:	3202      	adds	r2, #2
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	300c      	adds	r0, #12
 8009916:	f7ff fd4f 	bl	80093b8 <memcpy>
 800991a:	4621      	mov	r1, r4
 800991c:	4648      	mov	r0, r9
 800991e:	f7fe f813 	bl	8007948 <_Bfree>
 8009922:	4654      	mov	r4, sl
 8009924:	6922      	ldr	r2, [r4, #16]
 8009926:	1c51      	adds	r1, r2, #1
 8009928:	6121      	str	r1, [r4, #16]
 800992a:	2101      	movs	r1, #1
 800992c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009930:	6151      	str	r1, [r2, #20]
 8009932:	e7bc      	b.n	80098ae <__gethex+0x39a>
 8009934:	6921      	ldr	r1, [r4, #16]
 8009936:	4559      	cmp	r1, fp
 8009938:	dd0b      	ble.n	8009952 <__gethex+0x43e>
 800993a:	2101      	movs	r1, #1
 800993c:	4620      	mov	r0, r4
 800993e:	f7ff fd81 	bl	8009444 <rshift>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	3601      	adds	r6, #1
 8009946:	42b3      	cmp	r3, r6
 8009948:	f6ff aeda 	blt.w	8009700 <__gethex+0x1ec>
 800994c:	f04f 0801 	mov.w	r8, #1
 8009950:	e7c2      	b.n	80098d8 <__gethex+0x3c4>
 8009952:	f015 051f 	ands.w	r5, r5, #31
 8009956:	d0f9      	beq.n	800994c <__gethex+0x438>
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	f1c5 0520 	rsb	r5, r5, #32
 800995e:	441a      	add	r2, r3
 8009960:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009964:	f7fe f8a2 	bl	8007aac <__hi0bits>
 8009968:	42a8      	cmp	r0, r5
 800996a:	dbe6      	blt.n	800993a <__gethex+0x426>
 800996c:	e7ee      	b.n	800994c <__gethex+0x438>
 800996e:	bf00      	nop
 8009970:	0800a8e3 	.word	0x0800a8e3

08009974 <L_shift>:
 8009974:	f1c2 0208 	rsb	r2, r2, #8
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	f1c2 0620 	rsb	r6, r2, #32
 8009980:	6843      	ldr	r3, [r0, #4]
 8009982:	6804      	ldr	r4, [r0, #0]
 8009984:	fa03 f506 	lsl.w	r5, r3, r6
 8009988:	432c      	orrs	r4, r5
 800998a:	40d3      	lsrs	r3, r2
 800998c:	6004      	str	r4, [r0, #0]
 800998e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009992:	4288      	cmp	r0, r1
 8009994:	d3f4      	bcc.n	8009980 <L_shift+0xc>
 8009996:	bd70      	pop	{r4, r5, r6, pc}

08009998 <__match>:
 8009998:	b530      	push	{r4, r5, lr}
 800999a:	6803      	ldr	r3, [r0, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099a2:	b914      	cbnz	r4, 80099aa <__match+0x12>
 80099a4:	6003      	str	r3, [r0, #0]
 80099a6:	2001      	movs	r0, #1
 80099a8:	bd30      	pop	{r4, r5, pc}
 80099aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099b2:	2d19      	cmp	r5, #25
 80099b4:	bf98      	it	ls
 80099b6:	3220      	addls	r2, #32
 80099b8:	42a2      	cmp	r2, r4
 80099ba:	d0f0      	beq.n	800999e <__match+0x6>
 80099bc:	2000      	movs	r0, #0
 80099be:	e7f3      	b.n	80099a8 <__match+0x10>

080099c0 <__hexnan>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	2500      	movs	r5, #0
 80099c6:	680b      	ldr	r3, [r1, #0]
 80099c8:	4682      	mov	sl, r0
 80099ca:	115e      	asrs	r6, r3, #5
 80099cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099d0:	f013 031f 	ands.w	r3, r3, #31
 80099d4:	bf18      	it	ne
 80099d6:	3604      	addne	r6, #4
 80099d8:	1f37      	subs	r7, r6, #4
 80099da:	4690      	mov	r8, r2
 80099dc:	46b9      	mov	r9, r7
 80099de:	463c      	mov	r4, r7
 80099e0:	46ab      	mov	fp, r5
 80099e2:	b087      	sub	sp, #28
 80099e4:	6801      	ldr	r1, [r0, #0]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80099ec:	9502      	str	r5, [sp, #8]
 80099ee:	784a      	ldrb	r2, [r1, #1]
 80099f0:	1c4b      	adds	r3, r1, #1
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	b342      	cbz	r2, 8009a48 <__hexnan+0x88>
 80099f6:	4610      	mov	r0, r2
 80099f8:	9105      	str	r1, [sp, #20]
 80099fa:	9204      	str	r2, [sp, #16]
 80099fc:	f7ff fd75 	bl	80094ea <__hexdig_fun>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d14f      	bne.n	8009aa4 <__hexnan+0xe4>
 8009a04:	9a04      	ldr	r2, [sp, #16]
 8009a06:	9905      	ldr	r1, [sp, #20]
 8009a08:	2a20      	cmp	r2, #32
 8009a0a:	d818      	bhi.n	8009a3e <__hexnan+0x7e>
 8009a0c:	9b02      	ldr	r3, [sp, #8]
 8009a0e:	459b      	cmp	fp, r3
 8009a10:	dd13      	ble.n	8009a3a <__hexnan+0x7a>
 8009a12:	454c      	cmp	r4, r9
 8009a14:	d206      	bcs.n	8009a24 <__hexnan+0x64>
 8009a16:	2d07      	cmp	r5, #7
 8009a18:	dc04      	bgt.n	8009a24 <__hexnan+0x64>
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7ff ffa8 	bl	8009974 <L_shift>
 8009a24:	4544      	cmp	r4, r8
 8009a26:	d950      	bls.n	8009aca <__hexnan+0x10a>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f1a4 0904 	sub.w	r9, r4, #4
 8009a2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a32:	461d      	mov	r5, r3
 8009a34:	464c      	mov	r4, r9
 8009a36:	f8cd b008 	str.w	fp, [sp, #8]
 8009a3a:	9903      	ldr	r1, [sp, #12]
 8009a3c:	e7d7      	b.n	80099ee <__hexnan+0x2e>
 8009a3e:	2a29      	cmp	r2, #41	; 0x29
 8009a40:	d155      	bne.n	8009aee <__hexnan+0x12e>
 8009a42:	3102      	adds	r1, #2
 8009a44:	f8ca 1000 	str.w	r1, [sl]
 8009a48:	f1bb 0f00 	cmp.w	fp, #0
 8009a4c:	d04f      	beq.n	8009aee <__hexnan+0x12e>
 8009a4e:	454c      	cmp	r4, r9
 8009a50:	d206      	bcs.n	8009a60 <__hexnan+0xa0>
 8009a52:	2d07      	cmp	r5, #7
 8009a54:	dc04      	bgt.n	8009a60 <__hexnan+0xa0>
 8009a56:	462a      	mov	r2, r5
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff ff8a 	bl	8009974 <L_shift>
 8009a60:	4544      	cmp	r4, r8
 8009a62:	d934      	bls.n	8009ace <__hexnan+0x10e>
 8009a64:	4623      	mov	r3, r4
 8009a66:	f1a8 0204 	sub.w	r2, r8, #4
 8009a6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a6e:	429f      	cmp	r7, r3
 8009a70:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a74:	d2f9      	bcs.n	8009a6a <__hexnan+0xaa>
 8009a76:	1b3b      	subs	r3, r7, r4
 8009a78:	f023 0303 	bic.w	r3, r3, #3
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	3e03      	subs	r6, #3
 8009a80:	3401      	adds	r4, #1
 8009a82:	42a6      	cmp	r6, r4
 8009a84:	bf38      	it	cc
 8009a86:	2304      	movcc	r3, #4
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4443      	add	r3, r8
 8009a8c:	f843 2b04 	str.w	r2, [r3], #4
 8009a90:	429f      	cmp	r7, r3
 8009a92:	d2fb      	bcs.n	8009a8c <__hexnan+0xcc>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	b91b      	cbnz	r3, 8009aa0 <__hexnan+0xe0>
 8009a98:	4547      	cmp	r7, r8
 8009a9a:	d126      	bne.n	8009aea <__hexnan+0x12a>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	2005      	movs	r0, #5
 8009aa2:	e025      	b.n	8009af0 <__hexnan+0x130>
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	2d08      	cmp	r5, #8
 8009aa8:	f10b 0b01 	add.w	fp, fp, #1
 8009aac:	dd06      	ble.n	8009abc <__hexnan+0xfc>
 8009aae:	4544      	cmp	r4, r8
 8009ab0:	d9c3      	bls.n	8009a3a <__hexnan+0x7a>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	2501      	movs	r5, #1
 8009ab6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aba:	3c04      	subs	r4, #4
 8009abc:	6822      	ldr	r2, [r4, #0]
 8009abe:	f000 000f 	and.w	r0, r0, #15
 8009ac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009ac6:	6020      	str	r0, [r4, #0]
 8009ac8:	e7b7      	b.n	8009a3a <__hexnan+0x7a>
 8009aca:	2508      	movs	r5, #8
 8009acc:	e7b5      	b.n	8009a3a <__hexnan+0x7a>
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0df      	beq.n	8009a94 <__hexnan+0xd4>
 8009ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad8:	f1c3 0320 	rsb	r3, r3, #32
 8009adc:	40da      	lsrs	r2, r3
 8009ade:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ae8:	e7d4      	b.n	8009a94 <__hexnan+0xd4>
 8009aea:	3f04      	subs	r7, #4
 8009aec:	e7d2      	b.n	8009a94 <__hexnan+0xd4>
 8009aee:	2004      	movs	r0, #4
 8009af0:	b007      	add	sp, #28
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009af6 <__ascii_mbtowc>:
 8009af6:	b082      	sub	sp, #8
 8009af8:	b901      	cbnz	r1, 8009afc <__ascii_mbtowc+0x6>
 8009afa:	a901      	add	r1, sp, #4
 8009afc:	b142      	cbz	r2, 8009b10 <__ascii_mbtowc+0x1a>
 8009afe:	b14b      	cbz	r3, 8009b14 <__ascii_mbtowc+0x1e>
 8009b00:	7813      	ldrb	r3, [r2, #0]
 8009b02:	600b      	str	r3, [r1, #0]
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	1e10      	subs	r0, r2, #0
 8009b08:	bf18      	it	ne
 8009b0a:	2001      	movne	r0, #1
 8009b0c:	b002      	add	sp, #8
 8009b0e:	4770      	bx	lr
 8009b10:	4610      	mov	r0, r2
 8009b12:	e7fb      	b.n	8009b0c <__ascii_mbtowc+0x16>
 8009b14:	f06f 0001 	mvn.w	r0, #1
 8009b18:	e7f8      	b.n	8009b0c <__ascii_mbtowc+0x16>

08009b1a <_realloc_r>:
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	4680      	mov	r8, r0
 8009b20:	4614      	mov	r4, r2
 8009b22:	460e      	mov	r6, r1
 8009b24:	b921      	cbnz	r1, 8009b30 <_realloc_r+0x16>
 8009b26:	4611      	mov	r1, r2
 8009b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2c:	f7fd be40 	b.w	80077b0 <_malloc_r>
 8009b30:	b92a      	cbnz	r2, 8009b3e <_realloc_r+0x24>
 8009b32:	f7fd fdcd 	bl	80076d0 <_free_r>
 8009b36:	4625      	mov	r5, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3e:	f000 f842 	bl	8009bc6 <_malloc_usable_size_r>
 8009b42:	4284      	cmp	r4, r0
 8009b44:	4607      	mov	r7, r0
 8009b46:	d802      	bhi.n	8009b4e <_realloc_r+0x34>
 8009b48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b4c:	d812      	bhi.n	8009b74 <_realloc_r+0x5a>
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4640      	mov	r0, r8
 8009b52:	f7fd fe2d 	bl	80077b0 <_malloc_r>
 8009b56:	4605      	mov	r5, r0
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0ed      	beq.n	8009b38 <_realloc_r+0x1e>
 8009b5c:	42bc      	cmp	r4, r7
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4631      	mov	r1, r6
 8009b62:	bf28      	it	cs
 8009b64:	463a      	movcs	r2, r7
 8009b66:	f7ff fc27 	bl	80093b8 <memcpy>
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	f7fd fdaf 	bl	80076d0 <_free_r>
 8009b72:	e7e1      	b.n	8009b38 <_realloc_r+0x1e>
 8009b74:	4635      	mov	r5, r6
 8009b76:	e7df      	b.n	8009b38 <_realloc_r+0x1e>

08009b78 <__ascii_wctomb>:
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4608      	mov	r0, r1
 8009b7c:	b141      	cbz	r1, 8009b90 <__ascii_wctomb+0x18>
 8009b7e:	2aff      	cmp	r2, #255	; 0xff
 8009b80:	d904      	bls.n	8009b8c <__ascii_wctomb+0x14>
 8009b82:	228a      	movs	r2, #138	; 0x8a
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	4770      	bx	lr
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	700a      	strb	r2, [r1, #0]
 8009b90:	4770      	bx	lr
	...

08009b94 <fiprintf>:
 8009b94:	b40e      	push	{r1, r2, r3}
 8009b96:	b503      	push	{r0, r1, lr}
 8009b98:	4601      	mov	r1, r0
 8009b9a:	ab03      	add	r3, sp, #12
 8009b9c:	4805      	ldr	r0, [pc, #20]	; (8009bb4 <fiprintf+0x20>)
 8009b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba2:	6800      	ldr	r0, [r0, #0]
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	f000 f83d 	bl	8009c24 <_vfiprintf_r>
 8009baa:	b002      	add	sp, #8
 8009bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb0:	b003      	add	sp, #12
 8009bb2:	4770      	bx	lr
 8009bb4:	20000078 	.word	0x20000078

08009bb8 <abort>:
 8009bb8:	2006      	movs	r0, #6
 8009bba:	b508      	push	{r3, lr}
 8009bbc:	f000 fa0a 	bl	8009fd4 <raise>
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	f7f8 fc32 	bl	800242a <_exit>

08009bc6 <_malloc_usable_size_r>:
 8009bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bca:	1f18      	subs	r0, r3, #4
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bfbc      	itt	lt
 8009bd0:	580b      	ldrlt	r3, [r1, r0]
 8009bd2:	18c0      	addlt	r0, r0, r3
 8009bd4:	4770      	bx	lr

08009bd6 <__sfputc_r>:
 8009bd6:	6893      	ldr	r3, [r2, #8]
 8009bd8:	b410      	push	{r4}
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	6093      	str	r3, [r2, #8]
 8009be0:	da07      	bge.n	8009bf2 <__sfputc_r+0x1c>
 8009be2:	6994      	ldr	r4, [r2, #24]
 8009be4:	42a3      	cmp	r3, r4
 8009be6:	db01      	blt.n	8009bec <__sfputc_r+0x16>
 8009be8:	290a      	cmp	r1, #10
 8009bea:	d102      	bne.n	8009bf2 <__sfputc_r+0x1c>
 8009bec:	bc10      	pop	{r4}
 8009bee:	f000 b933 	b.w	8009e58 <__swbuf_r>
 8009bf2:	6813      	ldr	r3, [r2, #0]
 8009bf4:	1c58      	adds	r0, r3, #1
 8009bf6:	6010      	str	r0, [r2, #0]
 8009bf8:	7019      	strb	r1, [r3, #0]
 8009bfa:	4608      	mov	r0, r1
 8009bfc:	bc10      	pop	{r4}
 8009bfe:	4770      	bx	lr

08009c00 <__sfputs_r>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	4614      	mov	r4, r2
 8009c08:	18d5      	adds	r5, r2, r3
 8009c0a:	42ac      	cmp	r4, r5
 8009c0c:	d101      	bne.n	8009c12 <__sfputs_r+0x12>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e007      	b.n	8009c22 <__sfputs_r+0x22>
 8009c12:	463a      	mov	r2, r7
 8009c14:	4630      	mov	r0, r6
 8009c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c1a:	f7ff ffdc 	bl	8009bd6 <__sfputc_r>
 8009c1e:	1c43      	adds	r3, r0, #1
 8009c20:	d1f3      	bne.n	8009c0a <__sfputs_r+0xa>
 8009c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c24 <_vfiprintf_r>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	460d      	mov	r5, r1
 8009c2a:	4614      	mov	r4, r2
 8009c2c:	4698      	mov	r8, r3
 8009c2e:	4606      	mov	r6, r0
 8009c30:	b09d      	sub	sp, #116	; 0x74
 8009c32:	b118      	cbz	r0, 8009c3c <_vfiprintf_r+0x18>
 8009c34:	6a03      	ldr	r3, [r0, #32]
 8009c36:	b90b      	cbnz	r3, 8009c3c <_vfiprintf_r+0x18>
 8009c38:	f7fc fdae 	bl	8006798 <__sinit>
 8009c3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c3e:	07d9      	lsls	r1, r3, #31
 8009c40:	d405      	bmi.n	8009c4e <_vfiprintf_r+0x2a>
 8009c42:	89ab      	ldrh	r3, [r5, #12]
 8009c44:	059a      	lsls	r2, r3, #22
 8009c46:	d402      	bmi.n	8009c4e <_vfiprintf_r+0x2a>
 8009c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4a:	f7fc febc 	bl	80069c6 <__retarget_lock_acquire_recursive>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	071b      	lsls	r3, r3, #28
 8009c52:	d501      	bpl.n	8009c58 <_vfiprintf_r+0x34>
 8009c54:	692b      	ldr	r3, [r5, #16]
 8009c56:	b99b      	cbnz	r3, 8009c80 <_vfiprintf_r+0x5c>
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 f93a 	bl	8009ed4 <__swsetup_r>
 8009c60:	b170      	cbz	r0, 8009c80 <_vfiprintf_r+0x5c>
 8009c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c64:	07dc      	lsls	r4, r3, #31
 8009c66:	d504      	bpl.n	8009c72 <_vfiprintf_r+0x4e>
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	b01d      	add	sp, #116	; 0x74
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	89ab      	ldrh	r3, [r5, #12]
 8009c74:	0598      	lsls	r0, r3, #22
 8009c76:	d4f7      	bmi.n	8009c68 <_vfiprintf_r+0x44>
 8009c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c7a:	f7fc fea5 	bl	80069c8 <__retarget_lock_release_recursive>
 8009c7e:	e7f3      	b.n	8009c68 <_vfiprintf_r+0x44>
 8009c80:	2300      	movs	r3, #0
 8009c82:	9309      	str	r3, [sp, #36]	; 0x24
 8009c84:	2320      	movs	r3, #32
 8009c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c8a:	2330      	movs	r3, #48	; 0x30
 8009c8c:	f04f 0901 	mov.w	r9, #1
 8009c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c94:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009e44 <_vfiprintf_r+0x220>
 8009c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	469a      	mov	sl, r3
 8009ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ca4:	b10a      	cbz	r2, 8009caa <_vfiprintf_r+0x86>
 8009ca6:	2a25      	cmp	r2, #37	; 0x25
 8009ca8:	d1f9      	bne.n	8009c9e <_vfiprintf_r+0x7a>
 8009caa:	ebba 0b04 	subs.w	fp, sl, r4
 8009cae:	d00b      	beq.n	8009cc8 <_vfiprintf_r+0xa4>
 8009cb0:	465b      	mov	r3, fp
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f7ff ffa2 	bl	8009c00 <__sfputs_r>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	f000 80a9 	beq.w	8009e14 <_vfiprintf_r+0x1f0>
 8009cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc4:	445a      	add	r2, fp
 8009cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8009cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 80a1 	beq.w	8009e14 <_vfiprintf_r+0x1f0>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cdc:	f10a 0a01 	add.w	sl, sl, #1
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	9307      	str	r3, [sp, #28]
 8009ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8009cea:	4654      	mov	r4, sl
 8009cec:	2205      	movs	r2, #5
 8009cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf2:	4854      	ldr	r0, [pc, #336]	; (8009e44 <_vfiprintf_r+0x220>)
 8009cf4:	f7fc fe69 	bl	80069ca <memchr>
 8009cf8:	9a04      	ldr	r2, [sp, #16]
 8009cfa:	b9d8      	cbnz	r0, 8009d34 <_vfiprintf_r+0x110>
 8009cfc:	06d1      	lsls	r1, r2, #27
 8009cfe:	bf44      	itt	mi
 8009d00:	2320      	movmi	r3, #32
 8009d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d06:	0713      	lsls	r3, r2, #28
 8009d08:	bf44      	itt	mi
 8009d0a:	232b      	movmi	r3, #43	; 0x2b
 8009d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d10:	f89a 3000 	ldrb.w	r3, [sl]
 8009d14:	2b2a      	cmp	r3, #42	; 0x2a
 8009d16:	d015      	beq.n	8009d44 <_vfiprintf_r+0x120>
 8009d18:	4654      	mov	r4, sl
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	f04f 0c0a 	mov.w	ip, #10
 8009d20:	9a07      	ldr	r2, [sp, #28]
 8009d22:	4621      	mov	r1, r4
 8009d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d28:	3b30      	subs	r3, #48	; 0x30
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	d94d      	bls.n	8009dca <_vfiprintf_r+0x1a6>
 8009d2e:	b1b0      	cbz	r0, 8009d5e <_vfiprintf_r+0x13a>
 8009d30:	9207      	str	r2, [sp, #28]
 8009d32:	e014      	b.n	8009d5e <_vfiprintf_r+0x13a>
 8009d34:	eba0 0308 	sub.w	r3, r0, r8
 8009d38:	fa09 f303 	lsl.w	r3, r9, r3
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	46a2      	mov	sl, r4
 8009d40:	9304      	str	r3, [sp, #16]
 8009d42:	e7d2      	b.n	8009cea <_vfiprintf_r+0xc6>
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	1d19      	adds	r1, r3, #4
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	9103      	str	r1, [sp, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bfbb      	ittet	lt
 8009d50:	425b      	neglt	r3, r3
 8009d52:	f042 0202 	orrlt.w	r2, r2, #2
 8009d56:	9307      	strge	r3, [sp, #28]
 8009d58:	9307      	strlt	r3, [sp, #28]
 8009d5a:	bfb8      	it	lt
 8009d5c:	9204      	strlt	r2, [sp, #16]
 8009d5e:	7823      	ldrb	r3, [r4, #0]
 8009d60:	2b2e      	cmp	r3, #46	; 0x2e
 8009d62:	d10c      	bne.n	8009d7e <_vfiprintf_r+0x15a>
 8009d64:	7863      	ldrb	r3, [r4, #1]
 8009d66:	2b2a      	cmp	r3, #42	; 0x2a
 8009d68:	d134      	bne.n	8009dd4 <_vfiprintf_r+0x1b0>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	3402      	adds	r4, #2
 8009d6e:	1d1a      	adds	r2, r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	9203      	str	r2, [sp, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfb8      	it	lt
 8009d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d7c:	9305      	str	r3, [sp, #20]
 8009d7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e48 <_vfiprintf_r+0x224>
 8009d82:	2203      	movs	r2, #3
 8009d84:	4650      	mov	r0, sl
 8009d86:	7821      	ldrb	r1, [r4, #0]
 8009d88:	f7fc fe1f 	bl	80069ca <memchr>
 8009d8c:	b138      	cbz	r0, 8009d9e <_vfiprintf_r+0x17a>
 8009d8e:	2240      	movs	r2, #64	; 0x40
 8009d90:	9b04      	ldr	r3, [sp, #16]
 8009d92:	eba0 000a 	sub.w	r0, r0, sl
 8009d96:	4082      	lsls	r2, r0
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	3401      	adds	r4, #1
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da2:	2206      	movs	r2, #6
 8009da4:	4829      	ldr	r0, [pc, #164]	; (8009e4c <_vfiprintf_r+0x228>)
 8009da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009daa:	f7fc fe0e 	bl	80069ca <memchr>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d03f      	beq.n	8009e32 <_vfiprintf_r+0x20e>
 8009db2:	4b27      	ldr	r3, [pc, #156]	; (8009e50 <_vfiprintf_r+0x22c>)
 8009db4:	bb1b      	cbnz	r3, 8009dfe <_vfiprintf_r+0x1da>
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	3307      	adds	r3, #7
 8009dba:	f023 0307 	bic.w	r3, r3, #7
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	9303      	str	r3, [sp, #12]
 8009dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc4:	443b      	add	r3, r7
 8009dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc8:	e768      	b.n	8009c9c <_vfiprintf_r+0x78>
 8009dca:	460c      	mov	r4, r1
 8009dcc:	2001      	movs	r0, #1
 8009dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd2:	e7a6      	b.n	8009d22 <_vfiprintf_r+0xfe>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f04f 0c0a 	mov.w	ip, #10
 8009dda:	4619      	mov	r1, r3
 8009ddc:	3401      	adds	r4, #1
 8009dde:	9305      	str	r3, [sp, #20]
 8009de0:	4620      	mov	r0, r4
 8009de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de6:	3a30      	subs	r2, #48	; 0x30
 8009de8:	2a09      	cmp	r2, #9
 8009dea:	d903      	bls.n	8009df4 <_vfiprintf_r+0x1d0>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0c6      	beq.n	8009d7e <_vfiprintf_r+0x15a>
 8009df0:	9105      	str	r1, [sp, #20]
 8009df2:	e7c4      	b.n	8009d7e <_vfiprintf_r+0x15a>
 8009df4:	4604      	mov	r4, r0
 8009df6:	2301      	movs	r3, #1
 8009df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dfc:	e7f0      	b.n	8009de0 <_vfiprintf_r+0x1bc>
 8009dfe:	ab03      	add	r3, sp, #12
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	462a      	mov	r2, r5
 8009e04:	4630      	mov	r0, r6
 8009e06:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <_vfiprintf_r+0x230>)
 8009e08:	a904      	add	r1, sp, #16
 8009e0a:	f7fb fe69 	bl	8005ae0 <_printf_float>
 8009e0e:	4607      	mov	r7, r0
 8009e10:	1c78      	adds	r0, r7, #1
 8009e12:	d1d6      	bne.n	8009dc2 <_vfiprintf_r+0x19e>
 8009e14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e16:	07d9      	lsls	r1, r3, #31
 8009e18:	d405      	bmi.n	8009e26 <_vfiprintf_r+0x202>
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	059a      	lsls	r2, r3, #22
 8009e1e:	d402      	bmi.n	8009e26 <_vfiprintf_r+0x202>
 8009e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e22:	f7fc fdd1 	bl	80069c8 <__retarget_lock_release_recursive>
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	065b      	lsls	r3, r3, #25
 8009e2a:	f53f af1d 	bmi.w	8009c68 <_vfiprintf_r+0x44>
 8009e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e30:	e71c      	b.n	8009c6c <_vfiprintf_r+0x48>
 8009e32:	ab03      	add	r3, sp, #12
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	462a      	mov	r2, r5
 8009e38:	4630      	mov	r0, r6
 8009e3a:	4b06      	ldr	r3, [pc, #24]	; (8009e54 <_vfiprintf_r+0x230>)
 8009e3c:	a904      	add	r1, sp, #16
 8009e3e:	f7fc f8ef 	bl	8006020 <_printf_i>
 8009e42:	e7e4      	b.n	8009e0e <_vfiprintf_r+0x1ea>
 8009e44:	0800aba1 	.word	0x0800aba1
 8009e48:	0800aba7 	.word	0x0800aba7
 8009e4c:	0800abab 	.word	0x0800abab
 8009e50:	08005ae1 	.word	0x08005ae1
 8009e54:	08009c01 	.word	0x08009c01

08009e58 <__swbuf_r>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	460e      	mov	r6, r1
 8009e5c:	4614      	mov	r4, r2
 8009e5e:	4605      	mov	r5, r0
 8009e60:	b118      	cbz	r0, 8009e6a <__swbuf_r+0x12>
 8009e62:	6a03      	ldr	r3, [r0, #32]
 8009e64:	b90b      	cbnz	r3, 8009e6a <__swbuf_r+0x12>
 8009e66:	f7fc fc97 	bl	8006798 <__sinit>
 8009e6a:	69a3      	ldr	r3, [r4, #24]
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	071a      	lsls	r2, r3, #28
 8009e72:	d525      	bpl.n	8009ec0 <__swbuf_r+0x68>
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	b31b      	cbz	r3, 8009ec0 <__swbuf_r+0x68>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	6922      	ldr	r2, [r4, #16]
 8009e7c:	b2f6      	uxtb	r6, r6
 8009e7e:	1a98      	subs	r0, r3, r2
 8009e80:	6963      	ldr	r3, [r4, #20]
 8009e82:	4637      	mov	r7, r6
 8009e84:	4283      	cmp	r3, r0
 8009e86:	dc04      	bgt.n	8009e92 <__swbuf_r+0x3a>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f7ff fa30 	bl	80092f0 <_fflush_r>
 8009e90:	b9e0      	cbnz	r0, 8009ecc <__swbuf_r+0x74>
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	60a3      	str	r3, [r4, #8]
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	6022      	str	r2, [r4, #0]
 8009e9e:	701e      	strb	r6, [r3, #0]
 8009ea0:	6962      	ldr	r2, [r4, #20]
 8009ea2:	1c43      	adds	r3, r0, #1
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d004      	beq.n	8009eb2 <__swbuf_r+0x5a>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	07db      	lsls	r3, r3, #31
 8009eac:	d506      	bpl.n	8009ebc <__swbuf_r+0x64>
 8009eae:	2e0a      	cmp	r6, #10
 8009eb0:	d104      	bne.n	8009ebc <__swbuf_r+0x64>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f7ff fa1b 	bl	80092f0 <_fflush_r>
 8009eba:	b938      	cbnz	r0, 8009ecc <__swbuf_r+0x74>
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f000 f806 	bl	8009ed4 <__swsetup_r>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d0d5      	beq.n	8009e78 <__swbuf_r+0x20>
 8009ecc:	f04f 37ff 	mov.w	r7, #4294967295
 8009ed0:	e7f4      	b.n	8009ebc <__swbuf_r+0x64>
	...

08009ed4 <__swsetup_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4b2a      	ldr	r3, [pc, #168]	; (8009f80 <__swsetup_r+0xac>)
 8009ed8:	4605      	mov	r5, r0
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	460c      	mov	r4, r1
 8009ede:	b118      	cbz	r0, 8009ee8 <__swsetup_r+0x14>
 8009ee0:	6a03      	ldr	r3, [r0, #32]
 8009ee2:	b90b      	cbnz	r3, 8009ee8 <__swsetup_r+0x14>
 8009ee4:	f7fc fc58 	bl	8006798 <__sinit>
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eee:	0718      	lsls	r0, r3, #28
 8009ef0:	d422      	bmi.n	8009f38 <__swsetup_r+0x64>
 8009ef2:	06d9      	lsls	r1, r3, #27
 8009ef4:	d407      	bmi.n	8009f06 <__swsetup_r+0x32>
 8009ef6:	2309      	movs	r3, #9
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	e034      	b.n	8009f70 <__swsetup_r+0x9c>
 8009f06:	0758      	lsls	r0, r3, #29
 8009f08:	d512      	bpl.n	8009f30 <__swsetup_r+0x5c>
 8009f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f0c:	b141      	cbz	r1, 8009f20 <__swsetup_r+0x4c>
 8009f0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f12:	4299      	cmp	r1, r3
 8009f14:	d002      	beq.n	8009f1c <__swsetup_r+0x48>
 8009f16:	4628      	mov	r0, r5
 8009f18:	f7fd fbda 	bl	80076d0 <_free_r>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	6363      	str	r3, [r4, #52]	; 0x34
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6063      	str	r3, [r4, #4]
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f043 0308 	orr.w	r3, r3, #8
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	b94b      	cbnz	r3, 8009f50 <__swsetup_r+0x7c>
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f46:	d003      	beq.n	8009f50 <__swsetup_r+0x7c>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 f883 	bl	800a056 <__smakebuf_r>
 8009f50:	89a0      	ldrh	r0, [r4, #12]
 8009f52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f56:	f010 0301 	ands.w	r3, r0, #1
 8009f5a:	d00a      	beq.n	8009f72 <__swsetup_r+0x9e>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60a3      	str	r3, [r4, #8]
 8009f60:	6963      	ldr	r3, [r4, #20]
 8009f62:	425b      	negs	r3, r3
 8009f64:	61a3      	str	r3, [r4, #24]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	b943      	cbnz	r3, 8009f7c <__swsetup_r+0xa8>
 8009f6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f6e:	d1c4      	bne.n	8009efa <__swsetup_r+0x26>
 8009f70:	bd38      	pop	{r3, r4, r5, pc}
 8009f72:	0781      	lsls	r1, r0, #30
 8009f74:	bf58      	it	pl
 8009f76:	6963      	ldrpl	r3, [r4, #20]
 8009f78:	60a3      	str	r3, [r4, #8]
 8009f7a:	e7f4      	b.n	8009f66 <__swsetup_r+0x92>
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	e7f7      	b.n	8009f70 <__swsetup_r+0x9c>
 8009f80:	20000078 	.word	0x20000078

08009f84 <_raise_r>:
 8009f84:	291f      	cmp	r1, #31
 8009f86:	b538      	push	{r3, r4, r5, lr}
 8009f88:	4604      	mov	r4, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	d904      	bls.n	8009f98 <_raise_r+0x14>
 8009f8e:	2316      	movs	r3, #22
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	f04f 30ff 	mov.w	r0, #4294967295
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f9a:	b112      	cbz	r2, 8009fa2 <_raise_r+0x1e>
 8009f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fa0:	b94b      	cbnz	r3, 8009fb6 <_raise_r+0x32>
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f830 	bl	800a008 <_getpid_r>
 8009fa8:	462a      	mov	r2, r5
 8009faa:	4601      	mov	r1, r0
 8009fac:	4620      	mov	r0, r4
 8009fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fb2:	f000 b817 	b.w	8009fe4 <_kill_r>
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d00a      	beq.n	8009fd0 <_raise_r+0x4c>
 8009fba:	1c59      	adds	r1, r3, #1
 8009fbc:	d103      	bne.n	8009fc6 <_raise_r+0x42>
 8009fbe:	2316      	movs	r3, #22
 8009fc0:	6003      	str	r3, [r0, #0]
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	e7e7      	b.n	8009f96 <_raise_r+0x12>
 8009fc6:	2400      	movs	r4, #0
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fce:	4798      	blx	r3
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e7e0      	b.n	8009f96 <_raise_r+0x12>

08009fd4 <raise>:
 8009fd4:	4b02      	ldr	r3, [pc, #8]	; (8009fe0 <raise+0xc>)
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f7ff bfd3 	b.w	8009f84 <_raise_r>
 8009fde:	bf00      	nop
 8009fe0:	20000078 	.word	0x20000078

08009fe4 <_kill_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4d06      	ldr	r5, [pc, #24]	; (800a004 <_kill_r+0x20>)
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	4611      	mov	r1, r2
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	f7f8 fa0a 	bl	800240a <_kill>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d102      	bne.n	800a000 <_kill_r+0x1c>
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	b103      	cbz	r3, 800a000 <_kill_r+0x1c>
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	bd38      	pop	{r3, r4, r5, pc}
 800a002:	bf00      	nop
 800a004:	200005e8 	.word	0x200005e8

0800a008 <_getpid_r>:
 800a008:	f7f8 b9f8 	b.w	80023fc <_getpid>

0800a00c <__swhatbuf_r>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	460c      	mov	r4, r1
 800a010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a014:	4615      	mov	r5, r2
 800a016:	2900      	cmp	r1, #0
 800a018:	461e      	mov	r6, r3
 800a01a:	b096      	sub	sp, #88	; 0x58
 800a01c:	da0c      	bge.n	800a038 <__swhatbuf_r+0x2c>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	2100      	movs	r1, #0
 800a022:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a026:	bf0c      	ite	eq
 800a028:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a02c:	2340      	movne	r3, #64	; 0x40
 800a02e:	2000      	movs	r0, #0
 800a030:	6031      	str	r1, [r6, #0]
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	b016      	add	sp, #88	; 0x58
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	466a      	mov	r2, sp
 800a03a:	f000 f849 	bl	800a0d0 <_fstat_r>
 800a03e:	2800      	cmp	r0, #0
 800a040:	dbed      	blt.n	800a01e <__swhatbuf_r+0x12>
 800a042:	9901      	ldr	r1, [sp, #4]
 800a044:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a048:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a04c:	4259      	negs	r1, r3
 800a04e:	4159      	adcs	r1, r3
 800a050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a054:	e7eb      	b.n	800a02e <__swhatbuf_r+0x22>

0800a056 <__smakebuf_r>:
 800a056:	898b      	ldrh	r3, [r1, #12]
 800a058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a05a:	079d      	lsls	r5, r3, #30
 800a05c:	4606      	mov	r6, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	d507      	bpl.n	800a072 <__smakebuf_r+0x1c>
 800a062:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	2301      	movs	r3, #1
 800a06c:	6163      	str	r3, [r4, #20]
 800a06e:	b002      	add	sp, #8
 800a070:	bd70      	pop	{r4, r5, r6, pc}
 800a072:	466a      	mov	r2, sp
 800a074:	ab01      	add	r3, sp, #4
 800a076:	f7ff ffc9 	bl	800a00c <__swhatbuf_r>
 800a07a:	9900      	ldr	r1, [sp, #0]
 800a07c:	4605      	mov	r5, r0
 800a07e:	4630      	mov	r0, r6
 800a080:	f7fd fb96 	bl	80077b0 <_malloc_r>
 800a084:	b948      	cbnz	r0, 800a09a <__smakebuf_r+0x44>
 800a086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08a:	059a      	lsls	r2, r3, #22
 800a08c:	d4ef      	bmi.n	800a06e <__smakebuf_r+0x18>
 800a08e:	f023 0303 	bic.w	r3, r3, #3
 800a092:	f043 0302 	orr.w	r3, r3, #2
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	e7e3      	b.n	800a062 <__smakebuf_r+0xc>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	6020      	str	r0, [r4, #0]
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	9b00      	ldr	r3, [sp, #0]
 800a0a6:	6120      	str	r0, [r4, #16]
 800a0a8:	6163      	str	r3, [r4, #20]
 800a0aa:	9b01      	ldr	r3, [sp, #4]
 800a0ac:	b15b      	cbz	r3, 800a0c6 <__smakebuf_r+0x70>
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b4:	f000 f81e 	bl	800a0f4 <_isatty_r>
 800a0b8:	b128      	cbz	r0, 800a0c6 <__smakebuf_r+0x70>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f023 0303 	bic.w	r3, r3, #3
 800a0c0:	f043 0301 	orr.w	r3, r3, #1
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	431d      	orrs	r5, r3
 800a0ca:	81a5      	strh	r5, [r4, #12]
 800a0cc:	e7cf      	b.n	800a06e <__smakebuf_r+0x18>
	...

0800a0d0 <_fstat_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4d06      	ldr	r5, [pc, #24]	; (800a0f0 <_fstat_r+0x20>)
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	602b      	str	r3, [r5, #0]
 800a0de:	f7f8 f9f2 	bl	80024c6 <_fstat>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	d102      	bne.n	800a0ec <_fstat_r+0x1c>
 800a0e6:	682b      	ldr	r3, [r5, #0]
 800a0e8:	b103      	cbz	r3, 800a0ec <_fstat_r+0x1c>
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	bd38      	pop	{r3, r4, r5, pc}
 800a0ee:	bf00      	nop
 800a0f0:	200005e8 	.word	0x200005e8

0800a0f4 <_isatty_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	4d05      	ldr	r5, [pc, #20]	; (800a110 <_isatty_r+0x1c>)
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	f7f8 f9f0 	bl	80024e4 <_isatty>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_isatty_r+0x1a>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_isatty_r+0x1a>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	200005e8 	.word	0x200005e8

0800a114 <atan2>:
 800a114:	f000 b8fc 	b.w	800a310 <__ieee754_atan2>

0800a118 <sqrt>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	4606      	mov	r6, r0
 800a11c:	460f      	mov	r7, r1
 800a11e:	f000 f81f 	bl	800a160 <__ieee754_sqrt>
 800a122:	4632      	mov	r2, r6
 800a124:	4604      	mov	r4, r0
 800a126:	460d      	mov	r5, r1
 800a128:	463b      	mov	r3, r7
 800a12a:	4630      	mov	r0, r6
 800a12c:	4639      	mov	r1, r7
 800a12e:	f7f6 fc6d 	bl	8000a0c <__aeabi_dcmpun>
 800a132:	b990      	cbnz	r0, 800a15a <sqrt+0x42>
 800a134:	2200      	movs	r2, #0
 800a136:	2300      	movs	r3, #0
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 fc3e 	bl	80009bc <__aeabi_dcmplt>
 800a140:	b158      	cbz	r0, 800a15a <sqrt+0x42>
 800a142:	f7fc fc15 	bl	8006970 <__errno>
 800a146:	2321      	movs	r3, #33	; 0x21
 800a148:	2200      	movs	r2, #0
 800a14a:	6003      	str	r3, [r0, #0]
 800a14c:	2300      	movs	r3, #0
 800a14e:	4610      	mov	r0, r2
 800a150:	4619      	mov	r1, r3
 800a152:	f7f6 faeb 	bl	800072c <__aeabi_ddiv>
 800a156:	4604      	mov	r4, r0
 800a158:	460d      	mov	r5, r1
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a160 <__ieee754_sqrt>:
 800a160:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800a304 <__ieee754_sqrt+0x1a4>
 800a164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a168:	ea3c 0c01 	bics.w	ip, ip, r1
 800a16c:	460b      	mov	r3, r1
 800a16e:	4606      	mov	r6, r0
 800a170:	460d      	mov	r5, r1
 800a172:	460a      	mov	r2, r1
 800a174:	4604      	mov	r4, r0
 800a176:	d10e      	bne.n	800a196 <__ieee754_sqrt+0x36>
 800a178:	4602      	mov	r2, r0
 800a17a:	f7f6 f9ad 	bl	80004d8 <__aeabi_dmul>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4630      	mov	r0, r6
 800a184:	4629      	mov	r1, r5
 800a186:	f7f5 fff1 	bl	800016c <__adddf3>
 800a18a:	4606      	mov	r6, r0
 800a18c:	460d      	mov	r5, r1
 800a18e:	4630      	mov	r0, r6
 800a190:	4629      	mov	r1, r5
 800a192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a196:	2900      	cmp	r1, #0
 800a198:	dc0d      	bgt.n	800a1b6 <__ieee754_sqrt+0x56>
 800a19a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a19e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a1a2:	d0f4      	beq.n	800a18e <__ieee754_sqrt+0x2e>
 800a1a4:	b139      	cbz	r1, 800a1b6 <__ieee754_sqrt+0x56>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	f7f5 ffde 	bl	8000168 <__aeabi_dsub>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	f7f6 fabc 	bl	800072c <__aeabi_ddiv>
 800a1b4:	e7e9      	b.n	800a18a <__ieee754_sqrt+0x2a>
 800a1b6:	1512      	asrs	r2, r2, #20
 800a1b8:	f000 8089 	beq.w	800a2ce <__ieee754_sqrt+0x16e>
 800a1bc:	2500      	movs	r5, #0
 800a1be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a1c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1ca:	07d2      	lsls	r2, r2, #31
 800a1cc:	bf5c      	itt	pl
 800a1ce:	005b      	lslpl	r3, r3, #1
 800a1d0:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a1d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1d8:	bf58      	it	pl
 800a1da:	0064      	lslpl	r4, r4, #1
 800a1dc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a1e0:	0062      	lsls	r2, r4, #1
 800a1e2:	2016      	movs	r0, #22
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800a1ea:	1076      	asrs	r6, r6, #1
 800a1ec:	190f      	adds	r7, r1, r4
 800a1ee:	429f      	cmp	r7, r3
 800a1f0:	bfde      	ittt	le
 800a1f2:	1bdb      	suble	r3, r3, r7
 800a1f4:	1939      	addle	r1, r7, r4
 800a1f6:	192d      	addle	r5, r5, r4
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	3801      	subs	r0, #1
 800a1fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a200:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a204:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a208:	d1f0      	bne.n	800a1ec <__ieee754_sqrt+0x8c>
 800a20a:	4604      	mov	r4, r0
 800a20c:	2720      	movs	r7, #32
 800a20e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a212:	428b      	cmp	r3, r1
 800a214:	eb0c 0e00 	add.w	lr, ip, r0
 800a218:	dc02      	bgt.n	800a220 <__ieee754_sqrt+0xc0>
 800a21a:	d113      	bne.n	800a244 <__ieee754_sqrt+0xe4>
 800a21c:	4596      	cmp	lr, r2
 800a21e:	d811      	bhi.n	800a244 <__ieee754_sqrt+0xe4>
 800a220:	f1be 0f00 	cmp.w	lr, #0
 800a224:	eb0e 000c 	add.w	r0, lr, ip
 800a228:	da56      	bge.n	800a2d8 <__ieee754_sqrt+0x178>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	db54      	blt.n	800a2d8 <__ieee754_sqrt+0x178>
 800a22e:	f101 0801 	add.w	r8, r1, #1
 800a232:	1a5b      	subs	r3, r3, r1
 800a234:	4641      	mov	r1, r8
 800a236:	4596      	cmp	lr, r2
 800a238:	bf88      	it	hi
 800a23a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a23e:	eba2 020e 	sub.w	r2, r2, lr
 800a242:	4464      	add	r4, ip
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	3f01      	subs	r7, #1
 800a248:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a24c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a250:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a254:	d1dd      	bne.n	800a212 <__ieee754_sqrt+0xb2>
 800a256:	4313      	orrs	r3, r2
 800a258:	d01b      	beq.n	800a292 <__ieee754_sqrt+0x132>
 800a25a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a308 <__ieee754_sqrt+0x1a8>
 800a25e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a30c <__ieee754_sqrt+0x1ac>
 800a262:	e9da 0100 	ldrd	r0, r1, [sl]
 800a266:	e9db 2300 	ldrd	r2, r3, [fp]
 800a26a:	f7f5 ff7d 	bl	8000168 <__aeabi_dsub>
 800a26e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4640      	mov	r0, r8
 800a278:	4649      	mov	r1, r9
 800a27a:	f7f6 fba9 	bl	80009d0 <__aeabi_dcmple>
 800a27e:	b140      	cbz	r0, 800a292 <__ieee754_sqrt+0x132>
 800a280:	e9da 0100 	ldrd	r0, r1, [sl]
 800a284:	e9db 2300 	ldrd	r2, r3, [fp]
 800a288:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a28c:	d126      	bne.n	800a2dc <__ieee754_sqrt+0x17c>
 800a28e:	463c      	mov	r4, r7
 800a290:	3501      	adds	r5, #1
 800a292:	106b      	asrs	r3, r5, #1
 800a294:	0864      	lsrs	r4, r4, #1
 800a296:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a29a:	07ea      	lsls	r2, r5, #31
 800a29c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a2a0:	bf48      	it	mi
 800a2a2:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a2ac:	e76d      	b.n	800a18a <__ieee754_sqrt+0x2a>
 800a2ae:	0ae3      	lsrs	r3, r4, #11
 800a2b0:	3915      	subs	r1, #21
 800a2b2:	0564      	lsls	r4, r4, #21
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0fa      	beq.n	800a2ae <__ieee754_sqrt+0x14e>
 800a2b8:	02d8      	lsls	r0, r3, #11
 800a2ba:	d50a      	bpl.n	800a2d2 <__ieee754_sqrt+0x172>
 800a2bc:	f1c2 0020 	rsb	r0, r2, #32
 800a2c0:	fa24 f000 	lsr.w	r0, r4, r0
 800a2c4:	1e55      	subs	r5, r2, #1
 800a2c6:	4094      	lsls	r4, r2
 800a2c8:	4303      	orrs	r3, r0
 800a2ca:	1b4a      	subs	r2, r1, r5
 800a2cc:	e776      	b.n	800a1bc <__ieee754_sqrt+0x5c>
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	e7f0      	b.n	800a2b4 <__ieee754_sqrt+0x154>
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	3201      	adds	r2, #1
 800a2d6:	e7ef      	b.n	800a2b8 <__ieee754_sqrt+0x158>
 800a2d8:	4688      	mov	r8, r1
 800a2da:	e7aa      	b.n	800a232 <__ieee754_sqrt+0xd2>
 800a2dc:	f7f5 ff46 	bl	800016c <__adddf3>
 800a2e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	f7f6 fb66 	bl	80009bc <__aeabi_dcmplt>
 800a2f0:	b120      	cbz	r0, 800a2fc <__ieee754_sqrt+0x19c>
 800a2f2:	1ca1      	adds	r1, r4, #2
 800a2f4:	bf08      	it	eq
 800a2f6:	3501      	addeq	r5, #1
 800a2f8:	3402      	adds	r4, #2
 800a2fa:	e7ca      	b.n	800a292 <__ieee754_sqrt+0x132>
 800a2fc:	3401      	adds	r4, #1
 800a2fe:	f024 0401 	bic.w	r4, r4, #1
 800a302:	e7c6      	b.n	800a292 <__ieee754_sqrt+0x132>
 800a304:	7ff00000 	.word	0x7ff00000
 800a308:	200001e8 	.word	0x200001e8
 800a30c:	200001f0 	.word	0x200001f0

0800a310 <__ieee754_atan2>:
 800a310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	4617      	mov	r7, r2
 800a316:	4692      	mov	sl, r2
 800a318:	4699      	mov	r9, r3
 800a31a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a31e:	427b      	negs	r3, r7
 800a320:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a4a0 <__ieee754_atan2+0x190>
 800a324:	433b      	orrs	r3, r7
 800a326:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a32a:	4543      	cmp	r3, r8
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	d809      	bhi.n	800a346 <__ieee754_atan2+0x36>
 800a332:	4246      	negs	r6, r0
 800a334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a338:	4306      	orrs	r6, r0
 800a33a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800a33e:	4546      	cmp	r6, r8
 800a340:	468e      	mov	lr, r1
 800a342:	4683      	mov	fp, r0
 800a344:	d908      	bls.n	800a358 <__ieee754_atan2+0x48>
 800a346:	4652      	mov	r2, sl
 800a348:	464b      	mov	r3, r9
 800a34a:	4620      	mov	r0, r4
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7f5 ff0d 	bl	800016c <__adddf3>
 800a352:	4604      	mov	r4, r0
 800a354:	460d      	mov	r5, r1
 800a356:	e019      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a358:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800a35c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800a360:	433e      	orrs	r6, r7
 800a362:	d103      	bne.n	800a36c <__ieee754_atan2+0x5c>
 800a364:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	f000 b8a2 	b.w	800a4b0 <atan>
 800a36c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800a370:	f006 0602 	and.w	r6, r6, #2
 800a374:	ea53 0b0b 	orrs.w	fp, r3, fp
 800a378:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a37c:	d10a      	bne.n	800a394 <__ieee754_atan2+0x84>
 800a37e:	2e02      	cmp	r6, #2
 800a380:	d067      	beq.n	800a452 <__ieee754_atan2+0x142>
 800a382:	2e03      	cmp	r6, #3
 800a384:	d102      	bne.n	800a38c <__ieee754_atan2+0x7c>
 800a386:	a53a      	add	r5, pc, #232	; (adr r5, 800a470 <__ieee754_atan2+0x160>)
 800a388:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	4317      	orrs	r7, r2
 800a396:	d106      	bne.n	800a3a6 <__ieee754_atan2+0x96>
 800a398:	f1be 0f00 	cmp.w	lr, #0
 800a39c:	da64      	bge.n	800a468 <__ieee754_atan2+0x158>
 800a39e:	a536      	add	r5, pc, #216	; (adr r5, 800a478 <__ieee754_atan2+0x168>)
 800a3a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a3a4:	e7f2      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a3a6:	4542      	cmp	r2, r8
 800a3a8:	d10f      	bne.n	800a3ca <__ieee754_atan2+0xba>
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	f106 36ff 	add.w	r6, r6, #4294967295
 800a3b0:	d107      	bne.n	800a3c2 <__ieee754_atan2+0xb2>
 800a3b2:	2e02      	cmp	r6, #2
 800a3b4:	d851      	bhi.n	800a45a <__ieee754_atan2+0x14a>
 800a3b6:	4b3b      	ldr	r3, [pc, #236]	; (800a4a4 <__ieee754_atan2+0x194>)
 800a3b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a3c0:	e7e4      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a3c2:	2e02      	cmp	r6, #2
 800a3c4:	d84d      	bhi.n	800a462 <__ieee754_atan2+0x152>
 800a3c6:	4b38      	ldr	r3, [pc, #224]	; (800a4a8 <__ieee754_atan2+0x198>)
 800a3c8:	e7f6      	b.n	800a3b8 <__ieee754_atan2+0xa8>
 800a3ca:	4543      	cmp	r3, r8
 800a3cc:	d0e4      	beq.n	800a398 <__ieee754_atan2+0x88>
 800a3ce:	1a9b      	subs	r3, r3, r2
 800a3d0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a3d4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3d8:	da21      	bge.n	800a41e <__ieee754_atan2+0x10e>
 800a3da:	f1b9 0f00 	cmp.w	r9, #0
 800a3de:	da01      	bge.n	800a3e4 <__ieee754_atan2+0xd4>
 800a3e0:	323c      	adds	r2, #60	; 0x3c
 800a3e2:	db20      	blt.n	800a426 <__ieee754_atan2+0x116>
 800a3e4:	4652      	mov	r2, sl
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f6 f99e 	bl	800072c <__aeabi_ddiv>
 800a3f0:	f000 f9e8 	bl	800a7c4 <fabs>
 800a3f4:	f000 f85c 	bl	800a4b0 <atan>
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	2e01      	cmp	r6, #1
 800a3fe:	d015      	beq.n	800a42c <__ieee754_atan2+0x11c>
 800a400:	2e02      	cmp	r6, #2
 800a402:	d017      	beq.n	800a434 <__ieee754_atan2+0x124>
 800a404:	2e00      	cmp	r6, #0
 800a406:	d0c1      	beq.n	800a38c <__ieee754_atan2+0x7c>
 800a408:	a31d      	add	r3, pc, #116	; (adr r3, 800a480 <__ieee754_atan2+0x170>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	4620      	mov	r0, r4
 800a410:	4629      	mov	r1, r5
 800a412:	f7f5 fea9 	bl	8000168 <__aeabi_dsub>
 800a416:	a31c      	add	r3, pc, #112	; (adr r3, 800a488 <__ieee754_atan2+0x178>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	e016      	b.n	800a44c <__ieee754_atan2+0x13c>
 800a41e:	a51c      	add	r5, pc, #112	; (adr r5, 800a490 <__ieee754_atan2+0x180>)
 800a420:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a424:	e7ea      	b.n	800a3fc <__ieee754_atan2+0xec>
 800a426:	2400      	movs	r4, #0
 800a428:	2500      	movs	r5, #0
 800a42a:	e7e7      	b.n	800a3fc <__ieee754_atan2+0xec>
 800a42c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a430:	461d      	mov	r5, r3
 800a432:	e7ab      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a434:	a312      	add	r3, pc, #72	; (adr r3, 800a480 <__ieee754_atan2+0x170>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7f5 fe93 	bl	8000168 <__aeabi_dsub>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	a110      	add	r1, pc, #64	; (adr r1, 800a488 <__ieee754_atan2+0x178>)
 800a448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44c:	f7f5 fe8c 	bl	8000168 <__aeabi_dsub>
 800a450:	e77f      	b.n	800a352 <__ieee754_atan2+0x42>
 800a452:	a50d      	add	r5, pc, #52	; (adr r5, 800a488 <__ieee754_atan2+0x178>)
 800a454:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a458:	e798      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a45a:	a50f      	add	r5, pc, #60	; (adr r5, 800a498 <__ieee754_atan2+0x188>)
 800a45c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a460:	e794      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a462:	2400      	movs	r4, #0
 800a464:	2500      	movs	r5, #0
 800a466:	e791      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a468:	a509      	add	r5, pc, #36	; (adr r5, 800a490 <__ieee754_atan2+0x180>)
 800a46a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a46e:	e78d      	b.n	800a38c <__ieee754_atan2+0x7c>
 800a470:	54442d18 	.word	0x54442d18
 800a474:	c00921fb 	.word	0xc00921fb
 800a478:	54442d18 	.word	0x54442d18
 800a47c:	bff921fb 	.word	0xbff921fb
 800a480:	33145c07 	.word	0x33145c07
 800a484:	3ca1a626 	.word	0x3ca1a626
 800a488:	54442d18 	.word	0x54442d18
 800a48c:	400921fb 	.word	0x400921fb
 800a490:	54442d18 	.word	0x54442d18
 800a494:	3ff921fb 	.word	0x3ff921fb
 800a498:	54442d18 	.word	0x54442d18
 800a49c:	3fe921fb 	.word	0x3fe921fb
 800a4a0:	7ff00000 	.word	0x7ff00000
 800a4a4:	0800ac58 	.word	0x0800ac58
 800a4a8:	0800ac70 	.word	0x0800ac70
 800a4ac:	00000000 	.word	0x00000000

0800a4b0 <atan>:
 800a4b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	4bb6      	ldr	r3, [pc, #728]	; (800a790 <atan+0x2e0>)
 800a4b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a4ba:	429e      	cmp	r6, r3
 800a4bc:	4604      	mov	r4, r0
 800a4be:	460d      	mov	r5, r1
 800a4c0:	468b      	mov	fp, r1
 800a4c2:	dd17      	ble.n	800a4f4 <atan+0x44>
 800a4c4:	4bb3      	ldr	r3, [pc, #716]	; (800a794 <atan+0x2e4>)
 800a4c6:	429e      	cmp	r6, r3
 800a4c8:	dc01      	bgt.n	800a4ce <atan+0x1e>
 800a4ca:	d109      	bne.n	800a4e0 <atan+0x30>
 800a4cc:	b140      	cbz	r0, 800a4e0 <atan+0x30>
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f5 fe49 	bl	800016c <__adddf3>
 800a4da:	4604      	mov	r4, r0
 800a4dc:	460d      	mov	r5, r1
 800a4de:	e005      	b.n	800a4ec <atan+0x3c>
 800a4e0:	f1bb 0f00 	cmp.w	fp, #0
 800a4e4:	4cac      	ldr	r4, [pc, #688]	; (800a798 <atan+0x2e8>)
 800a4e6:	f300 8121 	bgt.w	800a72c <atan+0x27c>
 800a4ea:	4dac      	ldr	r5, [pc, #688]	; (800a79c <atan+0x2ec>)
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	4baa      	ldr	r3, [pc, #680]	; (800a7a0 <atan+0x2f0>)
 800a4f6:	429e      	cmp	r6, r3
 800a4f8:	dc11      	bgt.n	800a51e <atan+0x6e>
 800a4fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a4fe:	429e      	cmp	r6, r3
 800a500:	dc0a      	bgt.n	800a518 <atan+0x68>
 800a502:	a38b      	add	r3, pc, #556	; (adr r3, 800a730 <atan+0x280>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f5 fe30 	bl	800016c <__adddf3>
 800a50c:	2200      	movs	r2, #0
 800a50e:	4ba5      	ldr	r3, [pc, #660]	; (800a7a4 <atan+0x2f4>)
 800a510:	f7f6 fa72 	bl	80009f8 <__aeabi_dcmpgt>
 800a514:	2800      	cmp	r0, #0
 800a516:	d1e9      	bne.n	800a4ec <atan+0x3c>
 800a518:	f04f 3aff 	mov.w	sl, #4294967295
 800a51c:	e027      	b.n	800a56e <atan+0xbe>
 800a51e:	f000 f951 	bl	800a7c4 <fabs>
 800a522:	4ba1      	ldr	r3, [pc, #644]	; (800a7a8 <atan+0x2f8>)
 800a524:	4604      	mov	r4, r0
 800a526:	429e      	cmp	r6, r3
 800a528:	460d      	mov	r5, r1
 800a52a:	f300 80b8 	bgt.w	800a69e <atan+0x1ee>
 800a52e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a532:	429e      	cmp	r6, r3
 800a534:	f300 809c 	bgt.w	800a670 <atan+0x1c0>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	f7f5 fe16 	bl	800016c <__adddf3>
 800a540:	2200      	movs	r2, #0
 800a542:	4b98      	ldr	r3, [pc, #608]	; (800a7a4 <atan+0x2f4>)
 800a544:	f7f5 fe10 	bl	8000168 <__aeabi_dsub>
 800a548:	2200      	movs	r2, #0
 800a54a:	4606      	mov	r6, r0
 800a54c:	460f      	mov	r7, r1
 800a54e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a552:	4620      	mov	r0, r4
 800a554:	4629      	mov	r1, r5
 800a556:	f7f5 fe09 	bl	800016c <__adddf3>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4630      	mov	r0, r6
 800a560:	4639      	mov	r1, r7
 800a562:	f7f6 f8e3 	bl	800072c <__aeabi_ddiv>
 800a566:	f04f 0a00 	mov.w	sl, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	460d      	mov	r5, r1
 800a56e:	4622      	mov	r2, r4
 800a570:	462b      	mov	r3, r5
 800a572:	4620      	mov	r0, r4
 800a574:	4629      	mov	r1, r5
 800a576:	f7f5 ffaf 	bl	80004d8 <__aeabi_dmul>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4680      	mov	r8, r0
 800a580:	4689      	mov	r9, r1
 800a582:	f7f5 ffa9 	bl	80004d8 <__aeabi_dmul>
 800a586:	a36c      	add	r3, pc, #432	; (adr r3, 800a738 <atan+0x288>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	f7f5 ffa2 	bl	80004d8 <__aeabi_dmul>
 800a594:	a36a      	add	r3, pc, #424	; (adr r3, 800a740 <atan+0x290>)
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	f7f5 fde7 	bl	800016c <__adddf3>
 800a59e:	4632      	mov	r2, r6
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	f7f5 ff99 	bl	80004d8 <__aeabi_dmul>
 800a5a6:	a368      	add	r3, pc, #416	; (adr r3, 800a748 <atan+0x298>)
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f7f5 fdde 	bl	800016c <__adddf3>
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	f7f5 ff90 	bl	80004d8 <__aeabi_dmul>
 800a5b8:	a365      	add	r3, pc, #404	; (adr r3, 800a750 <atan+0x2a0>)
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f7f5 fdd5 	bl	800016c <__adddf3>
 800a5c2:	4632      	mov	r2, r6
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	f7f5 ff87 	bl	80004d8 <__aeabi_dmul>
 800a5ca:	a363      	add	r3, pc, #396	; (adr r3, 800a758 <atan+0x2a8>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	f7f5 fdcc 	bl	800016c <__adddf3>
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	f7f5 ff7e 	bl	80004d8 <__aeabi_dmul>
 800a5dc:	a360      	add	r3, pc, #384	; (adr r3, 800a760 <atan+0x2b0>)
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	f7f5 fdc3 	bl	800016c <__adddf3>
 800a5e6:	4642      	mov	r2, r8
 800a5e8:	464b      	mov	r3, r9
 800a5ea:	f7f5 ff75 	bl	80004d8 <__aeabi_dmul>
 800a5ee:	a35e      	add	r3, pc, #376	; (adr r3, 800a768 <atan+0x2b8>)
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	4689      	mov	r9, r1
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7f5 ff6c 	bl	80004d8 <__aeabi_dmul>
 800a600:	a35b      	add	r3, pc, #364	; (adr r3, 800a770 <atan+0x2c0>)
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	f7f5 fdaf 	bl	8000168 <__aeabi_dsub>
 800a60a:	4632      	mov	r2, r6
 800a60c:	463b      	mov	r3, r7
 800a60e:	f7f5 ff63 	bl	80004d8 <__aeabi_dmul>
 800a612:	a359      	add	r3, pc, #356	; (adr r3, 800a778 <atan+0x2c8>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f7f5 fda6 	bl	8000168 <__aeabi_dsub>
 800a61c:	4632      	mov	r2, r6
 800a61e:	463b      	mov	r3, r7
 800a620:	f7f5 ff5a 	bl	80004d8 <__aeabi_dmul>
 800a624:	a356      	add	r3, pc, #344	; (adr r3, 800a780 <atan+0x2d0>)
 800a626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62a:	f7f5 fd9d 	bl	8000168 <__aeabi_dsub>
 800a62e:	4632      	mov	r2, r6
 800a630:	463b      	mov	r3, r7
 800a632:	f7f5 ff51 	bl	80004d8 <__aeabi_dmul>
 800a636:	a354      	add	r3, pc, #336	; (adr r3, 800a788 <atan+0x2d8>)
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	f7f5 fd94 	bl	8000168 <__aeabi_dsub>
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	f7f5 ff48 	bl	80004d8 <__aeabi_dmul>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4640      	mov	r0, r8
 800a64e:	4649      	mov	r1, r9
 800a650:	f7f5 fd8c 	bl	800016c <__adddf3>
 800a654:	4622      	mov	r2, r4
 800a656:	462b      	mov	r3, r5
 800a658:	f7f5 ff3e 	bl	80004d8 <__aeabi_dmul>
 800a65c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	d144      	bne.n	800a6f0 <atan+0x240>
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f5 fd7d 	bl	8000168 <__aeabi_dsub>
 800a66e:	e734      	b.n	800a4da <atan+0x2a>
 800a670:	2200      	movs	r2, #0
 800a672:	4b4c      	ldr	r3, [pc, #304]	; (800a7a4 <atan+0x2f4>)
 800a674:	f7f5 fd78 	bl	8000168 <__aeabi_dsub>
 800a678:	2200      	movs	r2, #0
 800a67a:	4606      	mov	r6, r0
 800a67c:	460f      	mov	r7, r1
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	4b48      	ldr	r3, [pc, #288]	; (800a7a4 <atan+0x2f4>)
 800a684:	f7f5 fd72 	bl	800016c <__adddf3>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4630      	mov	r0, r6
 800a68e:	4639      	mov	r1, r7
 800a690:	f7f6 f84c 	bl	800072c <__aeabi_ddiv>
 800a694:	f04f 0a01 	mov.w	sl, #1
 800a698:	4604      	mov	r4, r0
 800a69a:	460d      	mov	r5, r1
 800a69c:	e767      	b.n	800a56e <atan+0xbe>
 800a69e:	4b43      	ldr	r3, [pc, #268]	; (800a7ac <atan+0x2fc>)
 800a6a0:	429e      	cmp	r6, r3
 800a6a2:	da1a      	bge.n	800a6da <atan+0x22a>
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4b42      	ldr	r3, [pc, #264]	; (800a7b0 <atan+0x300>)
 800a6a8:	f7f5 fd5e 	bl	8000168 <__aeabi_dsub>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460f      	mov	r7, r1
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4b3e      	ldr	r3, [pc, #248]	; (800a7b0 <atan+0x300>)
 800a6b8:	f7f5 ff0e 	bl	80004d8 <__aeabi_dmul>
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <atan+0x2f4>)
 800a6c0:	f7f5 fd54 	bl	800016c <__adddf3>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	f7f6 f82e 	bl	800072c <__aeabi_ddiv>
 800a6d0:	f04f 0a02 	mov.w	sl, #2
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	e749      	b.n	800a56e <atan+0xbe>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	2000      	movs	r0, #0
 800a6e0:	4934      	ldr	r1, [pc, #208]	; (800a7b4 <atan+0x304>)
 800a6e2:	f7f6 f823 	bl	800072c <__aeabi_ddiv>
 800a6e6:	f04f 0a03 	mov.w	sl, #3
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	460d      	mov	r5, r1
 800a6ee:	e73e      	b.n	800a56e <atan+0xbe>
 800a6f0:	4b31      	ldr	r3, [pc, #196]	; (800a7b8 <atan+0x308>)
 800a6f2:	4e32      	ldr	r6, [pc, #200]	; (800a7bc <atan+0x30c>)
 800a6f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f5 fd34 	bl	8000168 <__aeabi_dsub>
 800a700:	4622      	mov	r2, r4
 800a702:	462b      	mov	r3, r5
 800a704:	f7f5 fd30 	bl	8000168 <__aeabi_dsub>
 800a708:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a714:	f7f5 fd28 	bl	8000168 <__aeabi_dsub>
 800a718:	f1bb 0f00 	cmp.w	fp, #0
 800a71c:	4604      	mov	r4, r0
 800a71e:	460d      	mov	r5, r1
 800a720:	f6bf aee4 	bge.w	800a4ec <atan+0x3c>
 800a724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a728:	461d      	mov	r5, r3
 800a72a:	e6df      	b.n	800a4ec <atan+0x3c>
 800a72c:	4d24      	ldr	r5, [pc, #144]	; (800a7c0 <atan+0x310>)
 800a72e:	e6dd      	b.n	800a4ec <atan+0x3c>
 800a730:	8800759c 	.word	0x8800759c
 800a734:	7e37e43c 	.word	0x7e37e43c
 800a738:	e322da11 	.word	0xe322da11
 800a73c:	3f90ad3a 	.word	0x3f90ad3a
 800a740:	24760deb 	.word	0x24760deb
 800a744:	3fa97b4b 	.word	0x3fa97b4b
 800a748:	a0d03d51 	.word	0xa0d03d51
 800a74c:	3fb10d66 	.word	0x3fb10d66
 800a750:	c54c206e 	.word	0xc54c206e
 800a754:	3fb745cd 	.word	0x3fb745cd
 800a758:	920083ff 	.word	0x920083ff
 800a75c:	3fc24924 	.word	0x3fc24924
 800a760:	5555550d 	.word	0x5555550d
 800a764:	3fd55555 	.word	0x3fd55555
 800a768:	2c6a6c2f 	.word	0x2c6a6c2f
 800a76c:	bfa2b444 	.word	0xbfa2b444
 800a770:	52defd9a 	.word	0x52defd9a
 800a774:	3fadde2d 	.word	0x3fadde2d
 800a778:	af749a6d 	.word	0xaf749a6d
 800a77c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a780:	fe231671 	.word	0xfe231671
 800a784:	3fbc71c6 	.word	0x3fbc71c6
 800a788:	9998ebc4 	.word	0x9998ebc4
 800a78c:	3fc99999 	.word	0x3fc99999
 800a790:	440fffff 	.word	0x440fffff
 800a794:	7ff00000 	.word	0x7ff00000
 800a798:	54442d18 	.word	0x54442d18
 800a79c:	bff921fb 	.word	0xbff921fb
 800a7a0:	3fdbffff 	.word	0x3fdbffff
 800a7a4:	3ff00000 	.word	0x3ff00000
 800a7a8:	3ff2ffff 	.word	0x3ff2ffff
 800a7ac:	40038000 	.word	0x40038000
 800a7b0:	3ff80000 	.word	0x3ff80000
 800a7b4:	bff00000 	.word	0xbff00000
 800a7b8:	0800aca8 	.word	0x0800aca8
 800a7bc:	0800ac88 	.word	0x0800ac88
 800a7c0:	3ff921fb 	.word	0x3ff921fb

0800a7c4 <fabs>:
 800a7c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4770      	bx	lr

0800a7cc <_init>:
 800a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ce:	bf00      	nop
 800a7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7d2:	bc08      	pop	{r3}
 800a7d4:	469e      	mov	lr, r3
 800a7d6:	4770      	bx	lr

0800a7d8 <_fini>:
 800a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7da:	bf00      	nop
 800a7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7de:	bc08      	pop	{r3}
 800a7e0:	469e      	mov	lr, r3
 800a7e2:	4770      	bx	lr
