
PlantIdentification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000882c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08008940  08008940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d24  08008d24  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008d24  08008d24  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d24  08008d24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001e0  08008f0c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08008f0c  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2d6  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc1  00000000  00000000  0002f522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  000314e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6a  00000000  00000000  00032498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b2a  00000000  00000000  00033102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cf0  00000000  00000000  0004bc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e963  00000000  00000000  0005d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000556c  00000000  00000000  000ec280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f17ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008924 	.word	0x08008924

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008924 	.word	0x08008924

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Forward>:
 *      Author: Jorge
 */

#include "main.h"

void Forward(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //izq atras
 8001074:	2201      	movs	r2, #1
 8001076:	2101      	movs	r1, #1
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <Forward+0x5c>)
 800107a:	f001 fe5d 	bl	8002d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); //izq atras
 800107e:	2200      	movs	r2, #0
 8001080:	2102      	movs	r1, #2
 8001082:	4812      	ldr	r0, [pc, #72]	; (80010cc <Forward+0x5c>)
 8001084:	f001 fe58 	bl	8002d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //derehca atras
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	480f      	ldr	r0, [pc, #60]	; (80010cc <Forward+0x5c>)
 800108e:	f001 fe53 	bl	8002d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //derecha atrasa
 8001092:	2200      	movs	r2, #0
 8001094:	2108      	movs	r1, #8
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <Forward+0x5c>)
 8001098:	f001 fe4e 	bl	8002d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1); //derecha enfrente
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <Forward+0x5c>)
 80010a4:	f001 fe48 	bl	8002d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); //derecha enfrente
 80010a8:	2200      	movs	r2, #0
 80010aa:	2108      	movs	r1, #8
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <Forward+0x60>)
 80010ae:	f001 fe43 	bl	8002d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //izq enfrente
 80010b2:	2201      	movs	r2, #1
 80010b4:	2110      	movs	r1, #16
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <Forward+0x60>)
 80010b8:	f001 fe3e 	bl	8002d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // ezq enfrente
 80010bc:	2200      	movs	r2, #0
 80010be:	2120      	movs	r1, #32
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <Forward+0x60>)
 80010c2:	f001 fe39 	bl	8002d38 <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <Stop>:
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
}

void Stop(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2101      	movs	r1, #1
 80010dc:	4814      	ldr	r0, [pc, #80]	; (8001130 <Stop+0x5c>)
 80010de:	f001 fe2b 	bl	8002d38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2102      	movs	r1, #2
 80010e6:	4812      	ldr	r0, [pc, #72]	; (8001130 <Stop+0x5c>)
 80010e8:	f001 fe26 	bl	8002d38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2104      	movs	r1, #4
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <Stop+0x5c>)
 80010f2:	f001 fe21 	bl	8002d38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <Stop+0x5c>)
 80010fc:	f001 fe1c 	bl	8002d38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <Stop+0x5c>)
 8001108:	f001 fe16 	bl	8002d38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2108      	movs	r1, #8
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <Stop+0x60>)
 8001112:	f001 fe11 	bl	8002d38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <Stop+0x60>)
 800111c:	f001 fe0c 	bl	8002d38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2120      	movs	r1, #32
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <Stop+0x60>)
 8001126:	f001 fe07 	bl	8002d38 <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00

08001138 <MPU_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_init(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af04      	add	r7, sp, #16
	/*IMU 60050 configuration*/
	uint8_t check, data;

	/*WHO_AM_I register, returns 0x58 if connected*/
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x75, 1, &check, 1, 100);
 800113e:	4b46      	ldr	r3, [pc, #280]	; (8001258 <MPU_init+0x120>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b299      	uxth	r1, r3
 8001144:	2364      	movs	r3, #100	; 0x64
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	2301      	movs	r3, #1
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	1d7b      	adds	r3, r7, #5
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	2275      	movs	r2, #117	; 0x75
 8001154:	4841      	ldr	r0, [pc, #260]	; (800125c <MPU_init+0x124>)
 8001156:	f002 f85d 	bl	8003214 <HAL_I2C_Mem_Read>

	if(check == 104){
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	2b68      	cmp	r3, #104	; 0x68
 800115e:	d177      	bne.n	8001250 <MPU_init+0x118>
		/*PWR_MGMT_1 register. Write 0 for normal use*/
		data = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x6B, 1, &data, 1, 100);
 8001164:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <MPU_init+0x120>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b299      	uxth	r1, r3
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2301      	movs	r3, #1
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	226b      	movs	r2, #107	; 0x6b
 800117a:	4838      	ldr	r0, [pc, #224]	; (800125c <MPU_init+0x124>)
 800117c:	f001 ff50 	bl	8003020 <HAL_I2C_Mem_Write>

		/*SMPRT_DIV register*/
		data = 0x07;
 8001180:	2307      	movs	r3, #7
 8001182:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x19, 1, &data, 1, 100);
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <MPU_init+0x120>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b299      	uxth	r1, r3
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	2219      	movs	r2, #25
 800119a:	4830      	ldr	r0, [pc, #192]	; (800125c <MPU_init+0x124>)
 800119c:	f001 ff40 	bl	8003020 <HAL_I2C_Mem_Write>

		/*Acceleration Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MPU_init+0x120>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b299      	uxth	r1, r3
 80011a6:	2364      	movs	r3, #100	; 0x64
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	221c      	movs	r2, #28
 80011b6:	4829      	ldr	r0, [pc, #164]	; (800125c <MPU_init+0x124>)
 80011b8:	f002 f82c 	bl	8003214 <HAL_I2C_Mem_Read>

		uint8_t precission_selector = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	71fb      	strb	r3, [r7, #7]
		 * 0 for +- 2g
		 * 1 for +- 4g
		 * 2 for +- 8g
		 * 3 for +- 16g
		 */
		data = (data & ~(0b11<<3));
 80011c0:	793b      	ldrb	r3, [r7, #4]
 80011c2:	f023 0318 	bic.w	r3, r3, #24
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector << 3));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MPU_init+0x120>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b299      	uxth	r1, r3
 80011e2:	2364      	movs	r3, #100	; 0x64
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2301      	movs	r3, #1
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	221c      	movs	r2, #28
 80011f2:	481a      	ldr	r0, [pc, #104]	; (800125c <MPU_init+0x124>)
 80011f4:	f001 ff14 	bl	8003020 <HAL_I2C_Mem_Write>


		/*Gyro Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1B, 1, &data, 1, 100);
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MPU_init+0x120>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	221b      	movs	r2, #27
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <MPU_init+0x124>)
 8001210:	f002 f800 	bl	8003214 <HAL_I2C_Mem_Read>

		uint8_t precission_selector_gyro = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	71bb      	strb	r3, [r7, #6]
		 * 0 for +- 250 deg/s
		 * 1 for +- 500 deg/s
		 * 2 for +- 1000 deg/s
		 * 3 for +- 2000 deg/s
		 */
		data = (data & ~(0b11<<3));
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	f023 0318 	bic.w	r3, r3, #24
 800121e:	b2db      	uxtb	r3, r3
 8001220:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector_gyro << 3));
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	b25a      	sxtb	r2, r3
 8001228:	793b      	ldrb	r3, [r7, #4]
 800122a:	b25b      	sxtb	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b25b      	sxtb	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1B, 1,&data, 1, 100);
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MPU_init+0x120>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b299      	uxth	r1, r3
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	221b      	movs	r2, #27
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <MPU_init+0x124>)
 800124c:	f001 fee8 	bl	8003020 <HAL_I2C_Mem_Write>

	}

}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	200001fc 	.word	0x200001fc

08001260 <MPU_Read_gyro>:
	 accel_x = accel_x * 9.81;
	 accel_y = accel_y * 9.81;
	 accel_z = accel_z * 9.81;
	}

void MPU_Read_gyro(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
	 * 0x46 ACCEL_YOUT_L
	 * 0x47 ACCEL_ZOUT_H
	 * 0x48 ACCEL_ZOUT_L
	 * */

	if(count < 5){
 8001266:	4b66      	ldr	r3, [pc, #408]	; (8001400 <MPU_Read_gyro+0x1a0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b04      	cmp	r3, #4
 800126c:	f200 8094 	bhi.w	8001398 <MPU_Read_gyro+0x138>

		/*Read registers in order*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x43, 1, gyro_raw_data, 6, 1000);
 8001270:	4b64      	ldr	r3, [pc, #400]	; (8001404 <MPU_Read_gyro+0x1a4>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b299      	uxth	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	2306      	movs	r3, #6
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	4b61      	ldr	r3, [pc, #388]	; (8001408 <MPU_Read_gyro+0x1a8>)
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	2243      	movs	r2, #67	; 0x43
 8001288:	4860      	ldr	r0, [pc, #384]	; (800140c <MPU_Read_gyro+0x1ac>)
 800128a:	f001 ffc3 	bl	8003214 <HAL_I2C_Mem_Read>
		 * 250
		 * 500
		 * 1000
		 * 2000
		 * */
		float gyro_Precission = 250;
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <MPU_Read_gyro+0x1b0>)
 8001290:	607b      	str	r3, [r7, #4]

		 gyro_x = (float)(((int16_t)(gyro_raw_data[0] << 8 | gyro_raw_data[1])) * gyro_Precission/32768);
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <MPU_Read_gyro+0x1a8>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <MPU_Read_gyro+0x1a8>)
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fca9 	bl	8000bfc <__aeabi_i2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcf8 	bl	8000ca4 <__aeabi_fmul>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fda6 	bl	8000e0c <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <MPU_Read_gyro+0x1b4>)
 80012c6:	601a      	str	r2, [r3, #0]
		 gyro_y = (float)(((int16_t)(gyro_raw_data[2] << 8 | gyro_raw_data[3])) * gyro_Precission/32768);
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <MPU_Read_gyro+0x1a8>)
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <MPU_Read_gyro+0x1a8>)
 80012d2:	78db      	ldrb	r3, [r3, #3]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fc8e 	bl	8000bfc <__aeabi_i2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fcdd 	bl	8000ca4 <__aeabi_fmul>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd8b 	bl	8000e0c <__aeabi_fdiv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <MPU_Read_gyro+0x1b8>)
 80012fc:	601a      	str	r2, [r3, #0]
		 gyro_z = (float)(((int16_t)(gyro_raw_data[4] << 8 | gyro_raw_data[5])) * gyro_Precission/32768);
 80012fe:	4b42      	ldr	r3, [pc, #264]	; (8001408 <MPU_Read_gyro+0x1a8>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b40      	ldr	r3, [pc, #256]	; (8001408 <MPU_Read_gyro+0x1a8>)
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21b      	sxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fc73 	bl	8000bfc <__aeabi_i2f>
 8001316:	4603      	mov	r3, r0
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fcc2 	bl	8000ca4 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
 8001322:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd70 	bl	8000e0c <__aeabi_fdiv>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MPU_Read_gyro+0x1bc>)
 8001332:	601a      	str	r2, [r3, #0]

		 /*Gyro values adjusted with calibration values*/
		 gyro_x += Gyro_X_calibration;
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <MPU_Read_gyro+0x1b4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a39      	ldr	r2, [pc, #228]	; (8001420 <MPU_Read_gyro+0x1c0>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fba8 	bl	8000a94 <__addsf3>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <MPU_Read_gyro+0x1b4>)
 800134a:	601a      	str	r2, [r3, #0]
		 gyro_y += Gyro_Y_calibration;
 800134c:	4b32      	ldr	r3, [pc, #200]	; (8001418 <MPU_Read_gyro+0x1b8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a34      	ldr	r2, [pc, #208]	; (8001424 <MPU_Read_gyro+0x1c4>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fb9c 	bl	8000a94 <__addsf3>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <MPU_Read_gyro+0x1b8>)
 8001362:	601a      	str	r2, [r3, #0]
		 gyro_z += Gyro_Z_calibration;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MPU_Read_gyro+0x1bc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <MPU_Read_gyro+0x1c8>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb90 	bl	8000a94 <__addsf3>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <MPU_Read_gyro+0x1bc>)
 800137a:	601a      	str	r2, [r3, #0]

		 GyroMean[count] = gyro_z;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MPU_Read_gyro+0x1a0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MPU_Read_gyro+0x1bc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <MPU_Read_gyro+0x1cc>)
 8001388:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		 count++;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MPU_Read_gyro+0x1a0>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MPU_Read_gyro+0x1a0>)
 8001396:	701a      	strb	r2, [r3, #0]
	}

	if(count == 5){
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MPU_Read_gyro+0x1a0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d12b      	bne.n	80013f8 <MPU_Read_gyro+0x198>
		/*Moving average of 5*/
		gyro_mean = (GyroMean[0]+GyroMean[1]+GyroMean[2]+GyroMean[3]+GyroMean[4])/5;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MPU_Read_gyro+0x1cc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <MPU_Read_gyro+0x1cc>)
 80013a6:	6852      	ldr	r2, [r2, #4]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fb72 	bl	8000a94 <__addsf3>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MPU_Read_gyro+0x1cc>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f7ff fb6a 	bl	8000a94 <__addsf3>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MPU_Read_gyro+0x1cc>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7ff fb62 	bl	8000a94 <__addsf3>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MPU_Read_gyro+0x1cc>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff fb5a 	bl	8000a94 <__addsf3>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4913      	ldr	r1, [pc, #76]	; (8001430 <MPU_Read_gyro+0x1d0>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd11 	bl	8000e0c <__aeabi_fdiv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MPU_Read_gyro+0x1d4>)
 80013f0:	601a      	str	r2, [r3, #0]
		count = 0;
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <MPU_Read_gyro+0x1a0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
	}
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000443 	.word	0x20000443
 8001404:	20000000 	.word	0x20000000
 8001408:	200003b8 	.word	0x200003b8
 800140c:	200001fc 	.word	0x200001fc
 8001410:	437a0000 	.word	0x437a0000
 8001414:	200003c0 	.word	0x200003c0
 8001418:	200003c4 	.word	0x200003c4
 800141c:	200003c8 	.word	0x200003c8
 8001420:	200003f0 	.word	0x200003f0
 8001424:	200003f4 	.word	0x200003f4
 8001428:	200003f8 	.word	0x200003f8
 800142c:	200003cc 	.word	0x200003cc
 8001430:	40a00000 	.word	0x40a00000
 8001434:	200003e0 	.word	0x200003e0

08001438 <Gyro_calibration>:


void Gyro_calibration(void){
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0

	uint16_t counter = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	81fb      	strh	r3, [r7, #14]
	uint32_t StartTime_cal = HAL_GetTick();
 8001442:	f001 f9dd 	bl	8002800 <HAL_GetTick>
 8001446:	6078      	str	r0, [r7, #4]
	uint32_t ElapsedTime_cal = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]

	/*Calibrate value for 9 seconds*/
	while(ElapsedTime_cal < 9000){
 800144c:	e02f      	b.n	80014ae <Gyro_calibration+0x76>

		MPU_Read_gyro();
 800144e:	f7ff ff07 	bl	8001260 <MPU_Read_gyro>
		GyroValuesx += gyro_x;
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <Gyro_calibration+0xf0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a35      	ldr	r2, [pc, #212]	; (800152c <Gyro_calibration+0xf4>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fb19 	bl	8000a94 <__addsf3>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <Gyro_calibration+0xf0>)
 8001468:	601a      	str	r2, [r3, #0]
		GyroValuesy += gyro_y;
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <Gyro_calibration+0xf8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a31      	ldr	r2, [pc, #196]	; (8001534 <Gyro_calibration+0xfc>)
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb0d 	bl	8000a94 <__addsf3>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <Gyro_calibration+0xf8>)
 8001480:	601a      	str	r2, [r3, #0]
		GyroValuesz += gyro_z;
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <Gyro_calibration+0x100>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a2d      	ldr	r2, [pc, #180]	; (800153c <Gyro_calibration+0x104>)
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fb01 	bl	8000a94 <__addsf3>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <Gyro_calibration+0x100>)
 8001498:	601a      	str	r2, [r3, #0]

		counter++;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	3301      	adds	r3, #1
 800149e:	81fb      	strh	r3, [r7, #14]

		uint32_t CurrentTime_cal = HAL_GetTick();
 80014a0:	f001 f9ae 	bl	8002800 <HAL_GetTick>
 80014a4:	6038      	str	r0, [r7, #0]
		ElapsedTime_cal = CurrentTime_cal - StartTime_cal;
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	60bb      	str	r3, [r7, #8]
	while(ElapsedTime_cal < 9000){
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f242 3227 	movw	r2, #8999	; 0x2327
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d9ca      	bls.n	800144e <Gyro_calibration+0x16>
	}

	/*Calibration values, average of gyros values*/
	Gyro_X_calibration = -1 * GyroValuesx/counter;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <Gyro_calibration+0xf0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb9a 	bl	8000bfc <__aeabi_i2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fc9d 	bl	8000e0c <__aeabi_fdiv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <Gyro_calibration+0x108>)
 80014d8:	601a      	str	r2, [r3, #0]
	Gyro_Y_calibration = -1 * GyroValuesy/counter;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <Gyro_calibration+0xf8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb89 	bl	8000bfc <__aeabi_i2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff fc8c 	bl	8000e0c <__aeabi_fdiv>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <Gyro_calibration+0x10c>)
 80014fa:	601a      	str	r2, [r3, #0]
	Gyro_Z_calibration = -1 * GyroValuesz/counter;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <Gyro_calibration+0x100>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fb78 	bl	8000bfc <__aeabi_i2f>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	4620      	mov	r0, r4
 8001512:	f7ff fc7b 	bl	8000e0c <__aeabi_fdiv>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <Gyro_calibration+0x110>)
 800151c:	601a      	str	r2, [r3, #0]

}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	200003e4 	.word	0x200003e4
 800152c:	200003c0 	.word	0x200003c0
 8001530:	200003e8 	.word	0x200003e8
 8001534:	200003c4 	.word	0x200003c4
 8001538:	200003ec 	.word	0x200003ec
 800153c:	200003c8 	.word	0x200003c8
 8001540:	200003f0 	.word	0x200003f0
 8001544:	200003f4 	.word	0x200003f4
 8001548:	200003f8 	.word	0x200003f8

0800154c <MPU_GetYaw>:

void MPU_GetYaw(uint8_t elapsed){
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	uint8_t alfa = 0.98;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]

	yawangle_new = prev_yaw + gyro_z * elapsed/1000;
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fb4d 	bl	8000bfc <__aeabi_i2f>
 8001562:	4602      	mov	r2, r0
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <MPU_GetYaw+0x13c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f7ff fb9a 	bl	8000ca4 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4946      	ldr	r1, [pc, #280]	; (800168c <MPU_GetYaw+0x140>)
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc49 	bl	8000e0c <__aeabi_fdiv>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b44      	ldr	r3, [pc, #272]	; (8001690 <MPU_GetYaw+0x144>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f7ff fa85 	bl	8000a94 <__addsf3>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <MPU_GetYaw+0x148>)
 8001590:	601a      	str	r2, [r3, #0]

	yawangle = (1-alfa) * prev_yaw + (alfa) * yawangle_new;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	f1c3 0301 	rsb	r3, r3, #1
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fb2f 	bl	8000bfc <__aeabi_i2f>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <MPU_GetYaw+0x144>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f7ff fb7c 	bl	8000ca4 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461c      	mov	r4, r3
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fb22 	bl	8000bfc <__aeabi_i2f>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <MPU_GetYaw+0x148>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fb6f 	bl	8000ca4 <__aeabi_fmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff fa62 	bl	8000a94 <__addsf3>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <MPU_GetYaw+0x14c>)
 80015d6:	601a      	str	r2, [r3, #0]

	prev_yaw = yawangle_new;
 80015d8:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <MPU_GetYaw+0x148>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <MPU_GetYaw+0x144>)
 80015de:	6013      	str	r3, [r2, #0]

	if(yawangle <= -360){
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MPU_GetYaw+0x14c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	492d      	ldr	r1, [pc, #180]	; (800169c <MPU_GetYaw+0x150>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fd04 	bl	8000ff4 <__aeabi_fcmple>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <MPU_GetYaw+0xae>
		yawangle = 0;
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MPU_GetYaw+0x14c>)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
	}
	if(yawangle > 360){
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <MPU_GetYaw+0x14c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4928      	ldr	r1, [pc, #160]	; (80016a0 <MPU_GetYaw+0x154>)
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd0b 	bl	800101c <__aeabi_fcmpgt>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <MPU_GetYaw+0xc8>
		yawangle = 0;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MPU_GetYaw+0x14c>)
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
	}
	if(prev_yaw <= -360){
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MPU_GetYaw+0x144>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4920      	ldr	r1, [pc, #128]	; (800169c <MPU_GetYaw+0x150>)
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fcea 	bl	8000ff4 <__aeabi_fcmple>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <MPU_GetYaw+0xe2>
		prev_yaw = 0;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MPU_GetYaw+0x144>)
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
	}
	if(prev_yaw > 360){
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MPU_GetYaw+0x144>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	491b      	ldr	r1, [pc, #108]	; (80016a0 <MPU_GetYaw+0x154>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fcf1 	bl	800101c <__aeabi_fcmpgt>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <MPU_GetYaw+0xfc>
		prev_yaw = 0;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MPU_GetYaw+0x144>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
	}
	if(yawangle_new <= -360){
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MPU_GetYaw+0x148>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4913      	ldr	r1, [pc, #76]	; (800169c <MPU_GetYaw+0x150>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fcd0 	bl	8000ff4 <__aeabi_fcmple>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <MPU_GetYaw+0x116>
		yawangle_new = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MPU_GetYaw+0x148>)
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
	}
	if(yawangle_new > 360){
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MPU_GetYaw+0x148>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <MPU_GetYaw+0x154>)
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fcd7 	bl	800101c <__aeabi_fcmpgt>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d100      	bne.n	8001676 <MPU_GetYaw+0x12a>
		yawangle_new = 0;
	}


	//filteredYaw = alfa*(filteredYaw + gyro_z * elapsed/1000) + (1-alfa)*YawMag;
}
 8001674:	e003      	b.n	800167e <MPU_GetYaw+0x132>
		yawangle_new = 0;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MPU_GetYaw+0x148>)
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}
 8001686:	bf00      	nop
 8001688:	200003c8 	.word	0x200003c8
 800168c:	447a0000 	.word	0x447a0000
 8001690:	20000404 	.word	0x20000404
 8001694:	20000400 	.word	0x20000400
 8001698:	200003fc 	.word	0x200003fc
 800169c:	c3b40000 	.word	0xc3b40000
 80016a0:	43b40000 	.word	0x43b40000

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a8:	b0a7      	sub	sp, #156	; 0x9c
 80016aa:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f001 f850 	bl	8002750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f9c6 	bl	8001a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f000 fbe4 	bl	8001e80 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b8:	f000 fa24 	bl	8001b04 <MX_I2C1_Init>
  MX_TIM3_Init();
 80016bc:	f000 faee 	bl	8001c9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80016c0:	f000 fbb4 	bl	8001e2c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80016c4:	f000 fb64 	bl	8001d90 <MX_TIM4_Init>
  MX_TIM2_Init();
 80016c8:	f000 fa9a 	bl	8001c00 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016cc:	f000 fa48 	bl	8001b60 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80016d0:	f000 f9fb 	bl	8001aca <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDRESS, 10, 100);
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <main+0x9c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b299      	uxth	r1, r3
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	220a      	movs	r2, #10
 80016de:	4819      	ldr	r0, [pc, #100]	; (8001744 <main+0xa0>)
 80016e0:	f002 f800 	bl	80036e4 <HAL_I2C_IsDeviceReady>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    /*Check if QMC5883 is connected*/
    HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c1, MAG_ADDRESS, 10, 1000);
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <main+0xa4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b299      	uxth	r1, r3
 80016f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f4:	220a      	movs	r2, #10
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <main+0xa0>)
 80016f8:	f001 fff4 	bl	80036e4 <HAL_I2C_IsDeviceReady>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    if(ret == HAL_OK /*&& ready == HAL_OK*/){
 8001702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001706:	2b00      	cmp	r3, #0
 8001708:	d126      	bne.n	8001758 <main+0xb4>
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001710:	480e      	ldr	r0, [pc, #56]	; (800174c <main+0xa8>)
 8001712:	f001 fb11 	bl	8002d38 <HAL_GPIO_WritePin>
  	  char transmission_buffer[17];
  	  uint8_t transmission_size = sprintf(transmission_buffer,"Device connected \n");
 8001716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171a:	490d      	ldr	r1, [pc, #52]	; (8001750 <main+0xac>)
 800171c:	4618      	mov	r0, r3
 800171e:	f004 ffb3 	bl	8006688 <siprintf>
 8001722:	4603      	mov	r3, r0
 8001724:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

  	  HAL_UART_Transmit(&huart1,&transmission_buffer,transmission_size, 500);
 8001728:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800172c:	b29a      	uxth	r2, r3
 800172e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001732:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <main+0xb0>)
 8001738:	f004 f874 	bl	8005824 <HAL_UART_Transmit>
 800173c:	e012      	b.n	8001764 <main+0xc0>
 800173e:	bf00      	nop
 8001740:	20000000 	.word	0x20000000
 8001744:	200001fc 	.word	0x200001fc
 8001748:	20000001 	.word	0x20000001
 800174c:	40011000 	.word	0x40011000
 8001750:	08008940 	.word	0x08008940
 8001754:	20000370 	.word	0x20000370
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175e:	489c      	ldr	r0, [pc, #624]	; (80019d0 <main+0x32c>)
 8001760:	f001 faea 	bl	8002d38 <HAL_GPIO_WritePin>
    }


    MPU_init();
 8001764:	f7ff fce8 	bl	8001138 <MPU_init>

    Gyro_calibration();
 8001768:	f7ff fe66 	bl	8001438 <Gyro_calibration>


  HAL_TIM_Base_Start_IT(&htim4);
 800176c:	4899      	ldr	r0, [pc, #612]	; (80019d4 <main+0x330>)
 800176e:	f003 f8fb 	bl	8004968 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001772:	4899      	ldr	r0, [pc, #612]	; (80019d8 <main+0x334>)
 8001774:	f003 f8f8 	bl	8004968 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001778:	2100      	movs	r1, #0
 800177a:	4898      	ldr	r0, [pc, #608]	; (80019dc <main+0x338>)
 800177c:	f003 f996 	bl	8004aac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001780:	2104      	movs	r1, #4
 8001782:	4896      	ldr	r0, [pc, #600]	; (80019dc <main+0x338>)
 8001784:	f003 f992 	bl	8004aac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001788:	2108      	movs	r1, #8
 800178a:	4894      	ldr	r0, [pc, #592]	; (80019dc <main+0x338>)
 800178c:	f003 f98e 	bl	8004aac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001790:	210c      	movs	r1, #12
 8001792:	4892      	ldr	r0, [pc, #584]	; (80019dc <main+0x338>)
 8001794:	f003 f98a 	bl	8004aac <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 8001798:	2364      	movs	r3, #100	; 0x64
 800179a:	2203      	movs	r2, #3
 800179c:	4990      	ldr	r1, [pc, #576]	; (80019e0 <main+0x33c>)
 800179e:	4891      	ldr	r0, [pc, #580]	; (80019e4 <main+0x340>)
 80017a0:	f004 f8c3 	bl	800592a <HAL_UART_Receive>

	  if(state == 1){
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <main+0x344>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d176      	bne.n	800189a <main+0x1f6>
		  if(elapsedTime > 2000){
 80017ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017b2:	d934      	bls.n	800181e <main+0x17a>

			  Forward();
 80017b4:	f7ff fc5c 	bl	8001070 <Forward>
			  //RightTurn();
			  pwm_lf = 3000;
 80017b8:	4b8c      	ldr	r3, [pc, #560]	; (80019ec <main+0x348>)
 80017ba:	4a8d      	ldr	r2, [pc, #564]	; (80019f0 <main+0x34c>)
 80017bc:	601a      	str	r2, [r3, #0]
			  pwm_lb = 3000;
 80017be:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <main+0x350>)
 80017c0:	4a8b      	ldr	r2, [pc, #556]	; (80019f0 <main+0x34c>)
 80017c2:	601a      	str	r2, [r3, #0]
			  pwm_rb = 3000;
 80017c4:	4b8c      	ldr	r3, [pc, #560]	; (80019f8 <main+0x354>)
 80017c6:	4a8a      	ldr	r2, [pc, #552]	; (80019f0 <main+0x34c>)
 80017c8:	601a      	str	r2, [r3, #0]
			  pwm_rf = 3000;
 80017ca:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <main+0x358>)
 80017cc:	4a88      	ldr	r2, [pc, #544]	; (80019f0 <main+0x34c>)
 80017ce:	601a      	str	r2, [r3, #0]

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_lf);
 80017d0:	4b86      	ldr	r3, [pc, #536]	; (80019ec <main+0x348>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a81      	ldr	r2, [pc, #516]	; (80019dc <main+0x338>)
 80017d6:	6814      	ldr	r4, [r2, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc29 	bl	8001030 <__aeabi_f2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	6363      	str	r3, [r4, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_rf);
 80017e2:	4b86      	ldr	r3, [pc, #536]	; (80019fc <main+0x358>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7d      	ldr	r2, [pc, #500]	; (80019dc <main+0x338>)
 80017e8:	6814      	ldr	r4, [r2, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fc20 	bl	8001030 <__aeabi_f2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	63a3      	str	r3, [r4, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 80017f4:	4b7f      	ldr	r3, [pc, #508]	; (80019f4 <main+0x350>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a78      	ldr	r2, [pc, #480]	; (80019dc <main+0x338>)
 80017fa:	6814      	ldr	r4, [r2, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc17 	bl	8001030 <__aeabi_f2uiz>
 8001802:	4603      	mov	r3, r0
 8001804:	63e3      	str	r3, [r4, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 8001806:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <main+0x354>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a74      	ldr	r2, [pc, #464]	; (80019dc <main+0x338>)
 800180c:	6814      	ldr	r4, [r2, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fc0e 	bl	8001030 <__aeabi_f2uiz>
 8001814:	4603      	mov	r3, r0
 8001816:	6423      	str	r3, [r4, #64]	; 0x40

			  vel = 1;
 8001818:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <main+0x35c>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
		  }
		  if(elapsedTime > 4000 && elapsedTime < 23000){
 800181e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001820:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001824:	d939      	bls.n	800189a <main+0x1f6>
 8001826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001828:	f645 12d7 	movw	r2, #22999	; 0x59d7
 800182c:	4293      	cmp	r3, r2
 800182e:	d834      	bhi.n	800189a <main+0x1f6>
			  Forward();
 8001830:	f7ff fc1e 	bl	8001070 <Forward>
			  //RightTurn();
			  pwm_lf = 4095;
 8001834:	4b6d      	ldr	r3, [pc, #436]	; (80019ec <main+0x348>)
 8001836:	4a73      	ldr	r2, [pc, #460]	; (8001a04 <main+0x360>)
 8001838:	601a      	str	r2, [r3, #0]
			  pwm_lb = 4095;
 800183a:	4b6e      	ldr	r3, [pc, #440]	; (80019f4 <main+0x350>)
 800183c:	4a71      	ldr	r2, [pc, #452]	; (8001a04 <main+0x360>)
 800183e:	601a      	str	r2, [r3, #0]
			  pwm_rb = 4095;
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <main+0x354>)
 8001842:	4a70      	ldr	r2, [pc, #448]	; (8001a04 <main+0x360>)
 8001844:	601a      	str	r2, [r3, #0]
			  pwm_rf = 4095;
 8001846:	4b6d      	ldr	r3, [pc, #436]	; (80019fc <main+0x358>)
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <main+0x360>)
 800184a:	601a      	str	r2, [r3, #0]

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_lf);
 800184c:	4b67      	ldr	r3, [pc, #412]	; (80019ec <main+0x348>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a62      	ldr	r2, [pc, #392]	; (80019dc <main+0x338>)
 8001852:	6814      	ldr	r4, [r2, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fbeb 	bl	8001030 <__aeabi_f2uiz>
 800185a:	4603      	mov	r3, r0
 800185c:	6363      	str	r3, [r4, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_rf);
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <main+0x358>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a5e      	ldr	r2, [pc, #376]	; (80019dc <main+0x338>)
 8001864:	6814      	ldr	r4, [r2, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fbe2 	bl	8001030 <__aeabi_f2uiz>
 800186c:	4603      	mov	r3, r0
 800186e:	63a3      	str	r3, [r4, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 8001870:	4b60      	ldr	r3, [pc, #384]	; (80019f4 <main+0x350>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a59      	ldr	r2, [pc, #356]	; (80019dc <main+0x338>)
 8001876:	6814      	ldr	r4, [r2, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fbd9 	bl	8001030 <__aeabi_f2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	63e3      	str	r3, [r4, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <main+0x354>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a55      	ldr	r2, [pc, #340]	; (80019dc <main+0x338>)
 8001888:	6814      	ldr	r4, [r2, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fbd0 	bl	8001030 <__aeabi_f2uiz>
 8001890:	4603      	mov	r3, r0
 8001892:	6423      	str	r3, [r4, #64]	; 0x40

			  vel = 2;
 8001894:	4b5a      	ldr	r3, [pc, #360]	; (8001a00 <main+0x35c>)
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
		  }
*/

	  }

	  millis2 = HAL_GetTick();
 800189a:	f000 ffb1 	bl	8002800 <HAL_GetTick>
 800189e:	6438      	str	r0, [r7, #64]	; 0x40
	  elapsedTime = millis2 - millis;
 80018a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48


	  if(state == 0){
 80018a8:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <main+0x344>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10e      	bne.n	80018ce <main+0x22a>
		  if(Commands[0] == 'S'){
 80018b0:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <main+0x33c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b53      	cmp	r3, #83	; 0x53
 80018b6:	d10a      	bne.n	80018ce <main+0x22a>
			  millis = HAL_GetTick();
 80018b8:	f000 ffa2 	bl	8002800 <HAL_GetTick>
 80018bc:	64f8      	str	r0, [r7, #76]	; 0x4c
			  elapsedTime = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	64bb      	str	r3, [r7, #72]	; 0x48
			  state++;
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <main+0x344>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <main+0x344>)
 80018cc:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(Commands[0] == 'E'){
 80018ce:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <main+0x33c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b45      	cmp	r3, #69	; 0x45
 80018d4:	d114      	bne.n	8001900 <main+0x25c>
		  state = 0;
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <main+0x344>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]

		  pwm_rf = 0;
 80018dc:	4b47      	ldr	r3, [pc, #284]	; (80019fc <main+0x358>)
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
		  pwm_lf = 0;
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <main+0x348>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
		  pwm_rb = 0;
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <main+0x354>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
		  pwm_lb = 0;
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <main+0x350>)
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
		  Stop();
 80018fc:	f7ff fbea 	bl	80010d4 <Stop>
	  }

		uint8_t DataBuf = sprintf(DataTransmit,"%u,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",vel,pwm_lf,rpm_lf,pwm_rf,rpm_rf,pwm_lb,rpm_lb,pwm_rb,rpm_rb,yawangle);
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <main+0x35c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461e      	mov	r6, r3
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <main+0x348>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fd8c 	bl	8000428 <__aeabi_f2d>
 8001910:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001914:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <main+0x364>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd85 	bl	8000428 <__aeabi_f2d>
 800191e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <main+0x358>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fd7e 	bl	8000428 <__aeabi_f2d>
 800192c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <main+0x368>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fd77 	bl	8000428 <__aeabi_f2d>
 800193a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <main+0x350>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd70 	bl	8000428 <__aeabi_f2d>
 8001948:	e9c7 0100 	strd	r0, r1, [r7]
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <main+0x36c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd69 	bl	8000428 <__aeabi_f2d>
 8001956:	4682      	mov	sl, r0
 8001958:	468b      	mov	fp, r1
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <main+0x354>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd62 	bl	8000428 <__aeabi_f2d>
 8001964:	4680      	mov	r8, r0
 8001966:	4689      	mov	r9, r1
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <main+0x370>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd5b 	bl	8000428 <__aeabi_f2d>
 8001972:	4604      	mov	r4, r0
 8001974:	460d      	mov	r5, r1
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <main+0x374>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fd54 	bl	8000428 <__aeabi_f2d>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001988:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 800198c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001990:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001994:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001998:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800199c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80019a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80019ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80019b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80019b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019b8:	e9cd 3400 	strd	r3, r4, [sp]
 80019bc:	4632      	mov	r2, r6
 80019be:	4917      	ldr	r1, [pc, #92]	; (8001a1c <main+0x378>)
 80019c0:	4817      	ldr	r0, [pc, #92]	; (8001a20 <main+0x37c>)
 80019c2:	f004 fe61 	bl	8006688 <siprintf>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019cc:	e02a      	b.n	8001a24 <main+0x380>
 80019ce:	bf00      	nop
 80019d0:	40011000 	.word	0x40011000
 80019d4:	20000328 	.word	0x20000328
 80019d8:	20000298 	.word	0x20000298
 80019dc:	200002e0 	.word	0x200002e0
 80019e0:	20000440 	.word	0x20000440
 80019e4:	20000370 	.word	0x20000370
 80019e8:	20000408 	.word	0x20000408
 80019ec:	20000434 	.word	0x20000434
 80019f0:	453b8000 	.word	0x453b8000
 80019f4:	2000043c 	.word	0x2000043c
 80019f8:	20000438 	.word	0x20000438
 80019fc:	20000430 	.word	0x20000430
 8001a00:	200004a8 	.word	0x200004a8
 8001a04:	457ff000 	.word	0x457ff000
 8001a08:	20000414 	.word	0x20000414
 8001a0c:	20000410 	.word	0x20000410
 8001a10:	2000041c 	.word	0x2000041c
 8001a14:	20000418 	.word	0x20000418
 8001a18:	200003fc 	.word	0x200003fc
 8001a1c:	08008954 	.word	0x08008954
 8001a20:	20000444 	.word	0x20000444
		HAL_UART_Transmit(&huart1, &DataTransmit, DataBuf, 100);
 8001a24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	2364      	movs	r3, #100	; 0x64
 8001a2c:	4902      	ldr	r1, [pc, #8]	; (8001a38 <main+0x394>)
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <main+0x398>)
 8001a30:	f003 fef8 	bl	8005824 <HAL_UART_Transmit>
  {
 8001a34:	e6b0      	b.n	8001798 <main+0xf4>
 8001a36:	bf00      	nop
 8001a38:	20000444 	.word	0x20000444
 8001a3c:	20000370 	.word	0x20000370

08001a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b090      	sub	sp, #64	; 0x40
 8001a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a46:	f107 0318 	add.w	r3, r7, #24
 8001a4a:	2228      	movs	r2, #40	; 0x28
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 fe7d 	bl	800674e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fb0d 	bl	80040a8 <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a94:	f000 fbb0 	bl	80021f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a98:	230f      	movs	r3, #15
 8001a9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fd7a 	bl	80045ac <HAL_RCC_ClockConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001abe:	f000 fb9b 	bl	80021f8 <Error_Handler>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3740      	adds	r7, #64	; 0x40
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2028      	movs	r0, #40	; 0x28
 8001ad4:	f000 ff75 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ad8:	2028      	movs	r0, #40	; 0x28
 8001ada:	f000 ff8e 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201e      	movs	r0, #30
 8001ae4:	f000 ff6d 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ae8:	201e      	movs	r0, #30
 8001aea:	f000 ff86 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	201c      	movs	r0, #28
 8001af4:	f000 ff65 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af8:	201c      	movs	r0, #28
 8001afa:	f000 ff7e 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <MX_I2C1_Init+0x54>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b10:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <MX_I2C1_Init+0x58>)
 8001b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_I2C1_Init+0x50>)
 8001b42:	f001 f929 	bl	8002d98 <HAL_I2C_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b4c:	f000 fb54 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200001fc 	.word	0x200001fc
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	463b      	mov	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <MX_TIM1_Init+0x9c>)
 8001b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001baa:	f002 fe8d 	bl	80048c8 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f000 fb20 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001bc6:	f003 f9dd 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bd0:	f000 fb12 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_TIM1_Init+0x98>)
 8001be2:	f003 fd5f 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bec:	f000 fb04 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000250 	.word	0x20000250
 8001bfc:	40012c00 	.word	0x40012c00

08001c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c26:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500 - 1;
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c34:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c48:	f002 fe3e 	bl	80048c8 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c52:	f000 fad1 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4619      	mov	r1, r3
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c64:	f003 f98e 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c6e:	f000 fac3 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c80:	f003 fd10 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c8a:	f000 fab5 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000298 	.word	0x20000298

08001c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
 8001cba:	615a      	str	r2, [r3, #20]
 8001cbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001cc0:	4a32      	ldr	r2, [pc, #200]	; (8001d8c <MX_TIM3_Init+0xf0>)
 8001cc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001cd2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001cd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ce4:	4828      	ldr	r0, [pc, #160]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001ce6:	f002 fe91 	bl	8004a0c <HAL_TIM_PWM_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001cf0:	f000 fa82 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4619      	mov	r1, r3
 8001d02:	4821      	ldr	r0, [pc, #132]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001d04:	f003 fcce 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d0e:	f000 fa73 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d12:	2360      	movs	r3, #96	; 0x60
 8001d14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	4817      	ldr	r0, [pc, #92]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001d2a:	f003 f869 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d34:	f000 fa60 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001d40:	f003 f85e 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d4a:	f000 fa55 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	2208      	movs	r2, #8
 8001d52:	4619      	mov	r1, r3
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001d56:	f003 f853 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001d60:	f000 fa4a 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	220c      	movs	r2, #12
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001d6c:	f003 f848 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001d76:	f000 fa3f 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d7a:	4803      	ldr	r0, [pc, #12]	; (8001d88 <MX_TIM3_Init+0xec>)
 8001d7c:	f000 fb14 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002e0 	.word	0x200002e0
 8001d8c:	40000400 	.word	0x40000400

08001d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <MX_TIM4_Init+0x98>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001db4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001db8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001dc2:	2263      	movs	r2, #99	; 0x63
 8001dc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dd2:	4814      	ldr	r0, [pc, #80]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001dd4:	f002 fd78 	bl	80048c8 <HAL_TIM_Base_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001dde:	f000 fa0b 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4619      	mov	r1, r3
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001df0:	f003 f8c8 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001dfa:	f000 f9fd 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_TIM4_Init+0x94>)
 8001e0c:	f003 fc4a 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e16:	f000 f9ef 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000328 	.word	0x20000328
 8001e28:	40000800 	.word	0x40000800

08001e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <MX_USART1_UART_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f003 fc8e 	bl	8005784 <HAL_UART_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e6e:	f000 f9c3 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000370 	.word	0x20000370
 8001e7c:	40013800 	.word	0x40013800

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	4b45      	ldr	r3, [pc, #276]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a44      	ldr	r2, [pc, #272]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a3e      	ldr	r2, [pc, #248]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a38      	ldr	r2, [pc, #224]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	4b33      	ldr	r3, [pc, #204]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a32      	ldr	r2, [pc, #200]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b30      	ldr	r3, [pc, #192]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efa:	482d      	ldr	r0, [pc, #180]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001efc:	f000 ff1c 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f00:	2200      	movs	r2, #0
 8001f02:	f248 010f 	movw	r1, #32783	; 0x800f
 8001f06:	482b      	ldr	r0, [pc, #172]	; (8001fb4 <MX_GPIO_Init+0x134>)
 8001f08:	f000 ff16 	bl	8002d38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2138      	movs	r1, #56	; 0x38
 8001f10:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <MX_GPIO_Init+0x138>)
 8001f12:	f000 ff11 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4820      	ldr	r0, [pc, #128]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001f30:	f000 fd7e 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f34:	f248 030f 	movw	r3, #32783	; 0x800f
 8001f38:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <MX_GPIO_Init+0x134>)
 8001f4e:	f000 fd6f 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f52:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_GPIO_Init+0x13c>)
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4619      	mov	r1, r3
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <MX_GPIO_Init+0x138>)
 8001f68:	f000 fd62 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <MX_GPIO_Init+0x134>)
 8001f82:	f000 fd55 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f86:	2338      	movs	r3, #56	; 0x38
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <MX_GPIO_Init+0x138>)
 8001f9e:	f000 fd47 	bl	8002a30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa2:	bf00      	nop
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40010800 	.word	0x40010800
 8001fb8:	40010c00 	.word	0x40010c00
 8001fbc:	10110000 	.word	0x10110000

08001fc0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

	if(htim -> Instance  == TIM2){
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d173      	bne.n	80020ba <HAL_TIM_PeriodElapsedCallback+0xfa>
		pid_output_rf = PIDpwm_Compute(&pidMotor_rf, rpm_rf);
		pid_output_lb = PIDpwm_Compute(&pidMotor_lb, rpm_lb);
		pid_output_rb = PIDpwm_Compute(&pidMotor_rb, rpm_rb);
*/

		rpm_rf =  (current_tick_rf * 1000 ) / (pulsesperturn * samplingTime);
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4943      	ldr	r1, [pc, #268]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe63 	bl	8000ca4 <__aeabi_fmul>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461c      	mov	r4, r3
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fe59 	bl	8000ca4 <__aeabi_fmul>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7fe ff08 	bl	8000e0c <__aeabi_fdiv>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002002:	601a      	str	r2, [r3, #0]
	    rpm_lf =  (current_tick_lf * 1000 ) / (pulsesperturn * samplingTime);
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4936      	ldr	r1, [pc, #216]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fe4a 	bl	8000ca4 <__aeabi_fmul>
 8002010:	4603      	mov	r3, r0
 8002012:	461c      	mov	r4, r3
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a34      	ldr	r2, [pc, #208]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe40 	bl	8000ca4 <__aeabi_fmul>
 8002024:	4603      	mov	r3, r0
 8002026:	4619      	mov	r1, r3
 8002028:	4620      	mov	r0, r4
 800202a:	f7fe feef 	bl	8000e0c <__aeabi_fdiv>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002034:	601a      	str	r2, [r3, #0]
	    rpm_rb =  (current_tick_rb * 1000 ) / (pulsesperturn * samplingTime);
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	492a      	ldr	r1, [pc, #168]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe31 	bl	8000ca4 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	461c      	mov	r4, r3
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe27 	bl	8000ca4 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f7fe fed6 	bl	8000e0c <__aeabi_fdiv>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002066:	601a      	str	r2, [r3, #0]
	    rpm_lb =  (current_tick_lb * 1000 ) / (pulsesperturn * samplingTime);
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	491d      	ldr	r1, [pc, #116]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe18 	bl	8000ca4 <__aeabi_fmul>
 8002074:	4603      	mov	r3, r0
 8002076:	461c      	mov	r4, r3
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fe0e 	bl	8000ca4 <__aeabi_fmul>
 8002088:	4603      	mov	r3, r0
 800208a:	4619      	mov	r1, r3
 800208c:	4620      	mov	r0, r4
 800208e:	f7fe febd 	bl	8000e0c <__aeabi_fdiv>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002098:	601a      	str	r2, [r3, #0]

		current_tick_rf = 0;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
		current_tick_lf = 0;
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
		current_tick_rb = 0;
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
		current_tick_lb = 0;
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
	}
	if(htim -> Instance == TIM4){
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d108      	bne.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x116>


		if(count == 4){
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d102      	bne.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x112>
			/*Integrate  every 50ms*/
			MPU_GetYaw(50);
 80020cc:	2032      	movs	r0, #50	; 0x32
 80020ce:	f7ff fa3d 	bl	800154c <MPU_GetYaw>
			//count = 0;
		}

		/*Readd gyro value every 10ms*/
		MPU_Read_gyro();
 80020d2:	f7ff f8c5 	bl	8001260 <MPU_Read_gyro>
	}
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000420 	.word	0x20000420
 80020e4:	447a0000 	.word	0x447a0000
 80020e8:	20000004 	.word	0x20000004
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000410 	.word	0x20000410
 80020f4:	20000424 	.word	0x20000424
 80020f8:	20000414 	.word	0x20000414
 80020fc:	20000428 	.word	0x20000428
 8002100:	20000418 	.word	0x20000418
 8002104:	2000042c 	.word	0x2000042c
 8002108:	2000041c 	.word	0x2000041c
 800210c:	40000800 	.word	0x40000800
 8002110:	20000443 	.word	0x20000443

08002114 <HAL_GPIO_EXTI_Callback>:
 * @pin 15 Right front wheel
 * @pin 14 Left front wheel
 * @pin 13 Right back wheel
 * @pin 12 Left back wheel
 */
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == GPIO_PIN_13){
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002124:	d111      	bne.n	800214a <HAL_GPIO_EXTI_Callback+0x36>
	  //Right front wheel

	  pulses_rb++;
 8002126:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002132:	701a      	strb	r2, [r3, #0]
	  current_tick_rb++;
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_GPIO_EXTI_Callback+0xc8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fca9 	bl	8000a94 <__addsf3>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_GPIO_EXTI_Callback+0xc8>)
 8002148:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_15){
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002150:	d111      	bne.n	8002176 <HAL_GPIO_EXTI_Callback+0x62>
	  //Left front wheel

	  pulses_rf++;
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800215e:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fc93 	bl	8000a94 <__addsf3>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002174:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_12){
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217c:	d111      	bne.n	80021a2 <HAL_GPIO_EXTI_Callback+0x8e>
	  //Right back wheel
	  pulses_lb++;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800218a:	701a      	strb	r2, [r3, #0]
	  current_tick_lb++;
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_GPIO_EXTI_Callback+0xd8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fc7d 	bl	8000a94 <__addsf3>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_GPIO_EXTI_Callback+0xd8>)
 80021a0:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_14){
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a8:	d111      	bne.n	80021ce <HAL_GPIO_EXTI_Callback+0xba>
	  //Left back wheel
	  pulses_lf++;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_GPIO_EXTI_Callback+0xdc>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_GPIO_EXTI_Callback+0xdc>)
 80021b6:	701a      	strb	r2, [r3, #0]
	  current_tick_lf++;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fc67 	bl	8000a94 <__addsf3>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000040b 	.word	0x2000040b
 80021dc:	20000428 	.word	0x20000428
 80021e0:	20000409 	.word	0x20000409
 80021e4:	20000420 	.word	0x20000420
 80021e8:	2000040c 	.word	0x2000040c
 80021ec:	2000042c 	.word	0x2000042c
 80021f0:	2000040a 	.word	0x2000040a
 80021f4:	20000424 	.word	0x20000424

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002200:	e7fe      	b.n	8002200 <Error_Handler+0x8>
	...

08002204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_MspInit+0x5c>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_MspInit+0x5c>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6193      	str	r3, [r2, #24]
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_MspInit+0x5c>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_MspInit+0x5c>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <HAL_MspInit+0x5c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_MspInit+0x5c>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_MspInit+0x60>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_MspInit+0x60>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40021000 	.word	0x40021000
 8002264:	40010000 	.word	0x40010000

08002268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_I2C_MspInit+0x70>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d123      	bne.n	80022d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_I2C_MspInit+0x74>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a13      	ldr	r2, [pc, #76]	; (80022dc <HAL_I2C_MspInit+0x74>)
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_I2C_MspInit+0x74>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a0:	23c0      	movs	r3, #192	; 0xc0
 80022a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a4:	2312      	movs	r3, #18
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	4619      	mov	r1, r3
 80022b2:	480b      	ldr	r0, [pc, #44]	; (80022e0 <HAL_I2C_MspInit+0x78>)
 80022b4:	f000 fbbc 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_I2C_MspInit+0x74>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_I2C_MspInit+0x74>)
 80022be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c2:	61d3      	str	r3, [r2, #28]
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_I2C_MspInit+0x74>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022d0:	bf00      	nop
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40005400 	.word	0x40005400
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40010c00 	.word	0x40010c00

080022e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_TIM_Base_MspInit+0x7c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10c      	bne.n	8002310 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 80022fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002300:	6193      	str	r3, [r2, #24]
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800230e:	e022      	b.n	8002356 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d10c      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	61d3      	str	r3, [r2, #28]
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
}
 8002332:	e010      	b.n	8002356 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_TIM_Base_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10b      	bne.n	8002356 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	61d3      	str	r3, [r2, #28]
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_TIM_Base_MspInit+0x80>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
}
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40000800 	.word	0x40000800

0800236c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_TIM_PWM_MspInit+0x34>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10b      	bne.n	8002396 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_TIM_PWM_MspInit+0x38>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_TIM_PWM_MspInit+0x38>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	61d3      	str	r3, [r2, #28]
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_TIM_PWM_MspInit+0x38>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_TIM_MspPostInit+0x88>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d12f      	bne.n	8002428 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_TIM_MspPostInit+0x8c>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_TIM_MspPostInit+0x8c>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_TIM_MspPostInit+0x8c>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_TIM_MspPostInit+0x8c>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_TIM_MspPostInit+0x8c>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_TIM_MspPostInit+0x8c>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023f8:	23c0      	movs	r3, #192	; 0xc0
 80023fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2302      	movs	r3, #2
 8002402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	4619      	mov	r1, r3
 800240a:	480b      	ldr	r0, [pc, #44]	; (8002438 <HAL_TIM_MspPostInit+0x90>)
 800240c:	f000 fb10 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002410:	2303      	movs	r3, #3
 8002412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2302      	movs	r3, #2
 800241a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <HAL_TIM_MspPostInit+0x94>)
 8002424:	f000 fb04 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40000400 	.word	0x40000400
 8002434:	40021000 	.word	0x40021000
 8002438:	40010800 	.word	0x40010800
 800243c:	40010c00 	.word	0x40010c00

08002440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_UART_MspInit+0x8c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d131      	bne.n	80024c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_UART_MspInit+0x90>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_UART_MspInit+0x90>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_UART_MspInit+0x90>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4619      	mov	r1, r3
 80024a4:	480b      	ldr	r0, [pc, #44]	; (80024d4 <HAL_UART_MspInit+0x94>)
 80024a6:	f000 fac3 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HAL_UART_MspInit+0x94>)
 80024c0:	f000 fab6 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010800 	.word	0x40010800

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <NMI_Handler+0x4>

080024de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <MemManage_Handler+0x4>

080024ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <BusFault_Handler+0x4>

080024f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <UsageFault_Handler+0x4>

080024f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251e:	f000 f95d 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM2_IRQHandler+0x10>)
 800252e:	f002 fb5f 	bl	8004bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000298 	.word	0x20000298

0800253c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <TIM4_IRQHandler+0x10>)
 8002542:	f002 fb55 	bl	8004bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000328 	.word	0x20000328

08002550 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002554:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002558:	f000 fc06 	bl	8002d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800255c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002560:	f000 fc02 	bl	8002d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002568:	f000 fbfe 	bl	8002d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800256c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002570:	f000 fbfa 	bl	8002d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}

08002578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return 1;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <_kill>:

int _kill(int pid, int sig)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002590:	f004 f930 	bl	80067f4 <__errno>
 8002594:	4603      	mov	r3, r0
 8002596:	2216      	movs	r2, #22
 8002598:	601a      	str	r2, [r3, #0]
  return -1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_exit>:

void _exit (int status)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025ae:	f04f 31ff 	mov.w	r1, #4294967295
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffe7 	bl	8002586 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025b8:	e7fe      	b.n	80025b8 <_exit+0x12>

080025ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e00a      	b.n	80025e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025cc:	f3af 8000 	nop.w
 80025d0:	4601      	mov	r1, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	60ba      	str	r2, [r7, #8]
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	dbf0      	blt.n	80025cc <_read+0x12>
  }

  return len;
 80025ea:	687b      	ldr	r3, [r7, #4]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e009      	b.n	800261a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	60ba      	str	r2, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	dbf1      	blt.n	8002606 <_write+0x12>
  }
  return len;
 8002622:	687b      	ldr	r3, [r7, #4]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_close>:

int _close(int file)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002652:	605a      	str	r2, [r3, #4]
  return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <_isatty>:

int _isatty(int file)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026bc:	f004 f89a 	bl	80067f4 <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20005000 	.word	0x20005000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	200004ac 	.word	0x200004ac
 80026f4:	20000600 	.word	0x20000600

080026f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002704:	f7ff fff8 	bl	80026f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800270a:	490c      	ldr	r1, [pc, #48]	; (800273c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <LoopFillZerobss+0x16>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002720:	4c09      	ldr	r4, [pc, #36]	; (8002748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272e:	f004 f867 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002732:	f7fe ffb7 	bl	80016a4 <main>
  bx lr
 8002736:	4770      	bx	lr
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002740:	08008d2c 	.word	0x08008d2c
  ldr r2, =_sbss
 8002744:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002748:	20000600 	.word	0x20000600

0800274c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC1_2_IRQHandler>
	...

08002750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_Init+0x28>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_Init+0x28>)
 800275a:	f043 0310 	orr.w	r3, r3, #16
 800275e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f000 f923 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002766:	200f      	movs	r0, #15
 8002768:	f000 f808 	bl	800277c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276c:	f7ff fd4a 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40022000 	.word	0x40022000

0800277c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x54>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_InitTick+0x58>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	fbb3 f3f1 	udiv	r3, r3, r1
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f93b 	bl	8002a16 <HAL_SYSTICK_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00e      	b.n	80027c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d80a      	bhi.n	80027c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b0:	2200      	movs	r2, #0
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f000 f903 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027bc:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <HAL_InitTick+0x5c>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	20000014 	.word	0x20000014
 80027d8:	20000010 	.word	0x20000010

080027dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x1c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_IncTick+0x20>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a03      	ldr	r2, [pc, #12]	; (80027fc <HAL_IncTick+0x20>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000014 	.word	0x20000014
 80027fc:	200004b0 	.word	0x200004b0

08002800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <HAL_GetTick+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	200004b0 	.word	0x200004b0

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4906      	ldr	r1, [pc, #24]	; (80028ac <__NVIC_EnableIRQ+0x34>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7ff ff90 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff2d 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff42 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff90 	bl	8002904 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5f 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff35 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa2 	bl	8002968 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b08b      	sub	sp, #44	; 0x2c
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	e169      	b.n	8002d18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a44:	2201      	movs	r2, #1
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 8158 	bne.w	8002d12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4a9a      	ldr	r2, [pc, #616]	; (8002cd0 <HAL_GPIO_Init+0x2a0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d05e      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a6c:	4a98      	ldr	r2, [pc, #608]	; (8002cd0 <HAL_GPIO_Init+0x2a0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d875      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a72:	4a98      	ldr	r2, [pc, #608]	; (8002cd4 <HAL_GPIO_Init+0x2a4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d058      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a78:	4a96      	ldr	r2, [pc, #600]	; (8002cd4 <HAL_GPIO_Init+0x2a4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d86f      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a7e:	4a96      	ldr	r2, [pc, #600]	; (8002cd8 <HAL_GPIO_Init+0x2a8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d052      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a84:	4a94      	ldr	r2, [pc, #592]	; (8002cd8 <HAL_GPIO_Init+0x2a8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d869      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a8a:	4a94      	ldr	r2, [pc, #592]	; (8002cdc <HAL_GPIO_Init+0x2ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d04c      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a90:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <HAL_GPIO_Init+0x2ac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d863      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a96:	4a92      	ldr	r2, [pc, #584]	; (8002ce0 <HAL_GPIO_Init+0x2b0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d046      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a9c:	4a90      	ldr	r2, [pc, #576]	; (8002ce0 <HAL_GPIO_Init+0x2b0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d85d      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d82a      	bhi.n	8002afc <HAL_GPIO_Init+0xcc>
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d859      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HAL_GPIO_Init+0x80>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002b2b 	.word	0x08002b2b
 8002ab4:	08002b05 	.word	0x08002b05
 8002ab8:	08002b17 	.word	0x08002b17
 8002abc:	08002b59 	.word	0x08002b59
 8002ac0:	08002b5f 	.word	0x08002b5f
 8002ac4:	08002b5f 	.word	0x08002b5f
 8002ac8:	08002b5f 	.word	0x08002b5f
 8002acc:	08002b5f 	.word	0x08002b5f
 8002ad0:	08002b5f 	.word	0x08002b5f
 8002ad4:	08002b5f 	.word	0x08002b5f
 8002ad8:	08002b5f 	.word	0x08002b5f
 8002adc:	08002b5f 	.word	0x08002b5f
 8002ae0:	08002b5f 	.word	0x08002b5f
 8002ae4:	08002b5f 	.word	0x08002b5f
 8002ae8:	08002b5f 	.word	0x08002b5f
 8002aec:	08002b5f 	.word	0x08002b5f
 8002af0:	08002b5f 	.word	0x08002b5f
 8002af4:	08002b0d 	.word	0x08002b0d
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	4a79      	ldr	r2, [pc, #484]	; (8002ce4 <HAL_GPIO_Init+0x2b4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b02:	e02c      	b.n	8002b5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	623b      	str	r3, [r7, #32]
          break;
 8002b0a:	e029      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	e024      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e01f      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	330c      	adds	r3, #12
 8002b26:	623b      	str	r3, [r7, #32]
          break;
 8002b28:	e01a      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b32:	2304      	movs	r3, #4
 8002b34:	623b      	str	r3, [r7, #32]
          break;
 8002b36:	e013      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b40:	2308      	movs	r3, #8
 8002b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	611a      	str	r2, [r3, #16]
          break;
 8002b4a:	e009      	b.n	8002b60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	615a      	str	r2, [r3, #20]
          break;
 8002b56:	e003      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
          break;
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          break;
 8002b5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	d801      	bhi.n	8002b6a <HAL_GPIO_Init+0x13a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_Init+0x13e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2bff      	cmp	r3, #255	; 0xff
 8002b74:	d802      	bhi.n	8002b7c <HAL_GPIO_Init+0x14c>
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x152>
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	3b08      	subs	r3, #8
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	210f      	movs	r1, #15
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80b1 	beq.w	8002d12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc8:	4a48      	ldr	r2, [pc, #288]	; (8002cec <HAL_GPIO_Init+0x2bc>)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <HAL_GPIO_Init+0x2c0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <HAL_GPIO_Init+0x1ec>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <HAL_GPIO_Init+0x2c4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00d      	beq.n	8002c18 <HAL_GPIO_Init+0x1e8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <HAL_GPIO_Init+0x2c8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <HAL_GPIO_Init+0x1e4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <HAL_GPIO_Init+0x2cc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_GPIO_Init+0x1e0>
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e004      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	f002 0203 	and.w	r2, r2, #3
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	4093      	lsls	r3, r2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2e:	492f      	ldr	r1, [pc, #188]	; (8002cec <HAL_GPIO_Init+0x2bc>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	492c      	ldr	r1, [pc, #176]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4928      	ldr	r1, [pc, #160]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	4922      	ldr	r1, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	491e      	ldr	r1, [pc, #120]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4918      	ldr	r1, [pc, #96]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
 8002ca4:	e006      	b.n	8002cb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4914      	ldr	r1, [pc, #80]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d021      	beq.n	8002d04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
 8002ccc:	e021      	b.n	8002d12 <HAL_GPIO_Init+0x2e2>
 8002cce:	bf00      	nop
 8002cd0:	10320000 	.word	0x10320000
 8002cd4:	10310000 	.word	0x10310000
 8002cd8:	10220000 	.word	0x10220000
 8002cdc:	10210000 	.word	0x10210000
 8002ce0:	10120000 	.word	0x10120000
 8002ce4:	10110000 	.word	0x10110000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40011400 	.word	0x40011400
 8002d00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_GPIO_Init+0x304>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4909      	ldr	r1, [pc, #36]	; (8002d34 <HAL_GPIO_Init+0x304>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3301      	adds	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f ae8e 	bne.w	8002a44 <HAL_GPIO_Init+0x14>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	372c      	adds	r7, #44	; 0x2c
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40010400 	.word	0x40010400

08002d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
 8002d44:	4613      	mov	r3, r2
 8002d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d48:	787b      	ldrb	r3, [r7, #1]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d54:	e003      	b.n	8002d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	041a      	lsls	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d7e:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f9c4 	bl	8002114 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40010400 	.word	0x40010400

08002d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e12b      	b.n	8003002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fa52 	bl	8002268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f001 fd1e 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a81      	ldr	r2, [pc, #516]	; (800300c <HAL_I2C_Init+0x274>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d807      	bhi.n	8002e1c <HAL_I2C_Init+0x84>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a80      	ldr	r2, [pc, #512]	; (8003010 <HAL_I2C_Init+0x278>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e006      	b.n	8002e2a <HAL_I2C_Init+0x92>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a7d      	ldr	r2, [pc, #500]	; (8003014 <HAL_I2C_Init+0x27c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	bf94      	ite	ls
 8002e24:	2301      	movls	r3, #1
 8002e26:	2300      	movhi	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0e7      	b.n	8003002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a78      	ldr	r2, [pc, #480]	; (8003018 <HAL_I2C_Init+0x280>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0c9b      	lsrs	r3, r3, #18
 8002e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a6a      	ldr	r2, [pc, #424]	; (800300c <HAL_I2C_Init+0x274>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d802      	bhi.n	8002e6c <HAL_I2C_Init+0xd4>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	e009      	b.n	8002e80 <HAL_I2C_Init+0xe8>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	4a69      	ldr	r2, [pc, #420]	; (800301c <HAL_I2C_Init+0x284>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	3301      	adds	r3, #1
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	495c      	ldr	r1, [pc, #368]	; (800300c <HAL_I2C_Init+0x274>)
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	d819      	bhi.n	8002ed4 <HAL_I2C_Init+0x13c>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e59      	subs	r1, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eae:	1c59      	adds	r1, r3, #1
 8002eb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_I2C_Init+0x138>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1e59      	subs	r1, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ece:	e051      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	e04f      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d111      	bne.n	8002f00 <HAL_I2C_Init+0x168>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	440b      	add	r3, r1
 8002eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e012      	b.n	8002f26 <HAL_I2C_Init+0x18e>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Init+0x196>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e022      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10e      	bne.n	8002f54 <HAL_I2C_Init+0x1bc>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e58      	subs	r0, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	440b      	add	r3, r1
 8002f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f52:	e00f      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	0099      	lsls	r1, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	6809      	ldr	r1, [r1, #0]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6911      	ldr	r1, [r2, #16]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68d2      	ldr	r2, [r2, #12]
 8002fae:	4311      	orrs	r1, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	000186a0 	.word	0x000186a0
 8003010:	001e847f 	.word	0x001e847f
 8003014:	003d08ff 	.word	0x003d08ff
 8003018:	431bde83 	.word	0x431bde83
 800301c:	10624dd3 	.word	0x10624dd3

08003020 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	817b      	strh	r3, [r7, #10]
 8003032:	460b      	mov	r3, r1
 8003034:	813b      	strh	r3, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800303a:	f7ff fbe1 	bl	8002800 <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	f040 80d9 	bne.w	8003200 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2319      	movs	r3, #25
 8003054:	2201      	movs	r2, #1
 8003056:	496d      	ldr	r1, [pc, #436]	; (800320c <HAL_I2C_Mem_Write+0x1ec>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fdef 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	e0cc      	b.n	8003202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Mem_Write+0x56>
 8003072:	2302      	movs	r3, #2
 8003074:	e0c5      	b.n	8003202 <HAL_I2C_Mem_Write+0x1e2>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d007      	beq.n	800309c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2221      	movs	r2, #33	; 0x21
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2240      	movs	r2, #64	; 0x40
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a4d      	ldr	r2, [pc, #308]	; (8003210 <HAL_I2C_Mem_Write+0x1f0>)
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030de:	88f8      	ldrh	r0, [r7, #6]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	8979      	ldrh	r1, [r7, #10]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4603      	mov	r3, r0
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fc26 	bl	8003940 <I2C_RequestMemoryWrite>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d052      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e081      	b.n	8003202 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 feb4 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06b      	b.n	8003202 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d11b      	bne.n	80031a0 <HAL_I2C_Mem_Write+0x180>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	d017      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1aa      	bne.n	80030fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fea7 	bl	8003f00 <I2C_WaitOnBTFFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d107      	bne.n	80031d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e016      	b.n	8003202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e000      	b.n	8003202 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003200:	2302      	movs	r3, #2
  }
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	00100002 	.word	0x00100002
 8003210:	ffff0000 	.word	0xffff0000

08003214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08c      	sub	sp, #48	; 0x30
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	817b      	strh	r3, [r7, #10]
 8003226:	460b      	mov	r3, r1
 8003228:	813b      	strh	r3, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003232:	f7ff fae5 	bl	8002800 <HAL_GetTick>
 8003236:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b20      	cmp	r3, #32
 8003242:	f040 8244 	bne.w	80036ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2319      	movs	r3, #25
 800324c:	2201      	movs	r2, #1
 800324e:	4982      	ldr	r1, [pc, #520]	; (8003458 <HAL_I2C_Mem_Read+0x244>)
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fcf3 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
 800325e:	e237      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_I2C_Mem_Read+0x5a>
 800326a:	2302      	movs	r3, #2
 800326c:	e230      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d007      	beq.n	8003294 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2222      	movs	r2, #34	; 0x22
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2240      	movs	r2, #64	; 0x40
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a62      	ldr	r2, [pc, #392]	; (800345c <HAL_I2C_Mem_Read+0x248>)
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d6:	88f8      	ldrh	r0, [r7, #6]
 80032d8:	893a      	ldrh	r2, [r7, #8]
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4603      	mov	r3, r0
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fbc0 	bl	8003a6c <I2C_RequestMemoryRead>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e1ec      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d113      	bne.n	8003326 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e1c0      	b.n	80036a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	2b01      	cmp	r3, #1
 800332c:	d11e      	bne.n	800336c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800333e:	b672      	cpsid	i
}
 8003340:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003368:	b662      	cpsie	i
}
 800336a:	e035      	b.n	80033d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b02      	cmp	r3, #2
 8003372:	d11e      	bne.n	80033b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003382:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003384:	b672      	cpsid	i
}
 8003386:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ae:	b662      	cpsie	i
}
 80033b0:	e012      	b.n	80033d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033d8:	e166      	b.n	80036a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b03      	cmp	r3, #3
 80033e0:	f200 811f 	bhi.w	8003622 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d123      	bne.n	8003434 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fdcd 	bl	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e167      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003432:	e139      	b.n	80036a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	2b02      	cmp	r3, #2
 800343a:	d152      	bne.n	80034e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	2200      	movs	r2, #0
 8003444:	4906      	ldr	r1, [pc, #24]	; (8003460 <HAL_I2C_Mem_Read+0x24c>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fbf8 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e13c      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
 8003456:	bf00      	nop
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000
 8003460:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034aa:	b662      	cpsie	i
}
 80034ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e0:	e0e2      	b.n	80036a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	2200      	movs	r2, #0
 80034ea:	497b      	ldr	r1, [pc, #492]	; (80036d8 <HAL_I2C_Mem_Read+0x4c4>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fba5 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0e9      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800350c:	b672      	cpsid	i
}
 800350e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003542:	4b66      	ldr	r3, [pc, #408]	; (80036dc <HAL_I2C_Mem_Read+0x4c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	08db      	lsrs	r3, r3, #3
 8003548:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_I2C_Mem_Read+0x4cc>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0a1a      	lsrs	r2, r3, #8
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00da      	lsls	r2, r3, #3
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	3b01      	subs	r3, #1
 8003560:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d118      	bne.n	800359a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800358a:	b662      	cpsie	i
}
 800358c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e09a      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d1d9      	bne.n	800355c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035ea:	b662      	cpsie	i
}
 80035ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003620:	e042      	b.n	80036a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fcb2 	bl	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e04c      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d118      	bne.n	80036a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f47f ae94 	bne.w	80033da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	; 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	00010004 	.word	0x00010004
 80036dc:	2000000c 	.word	0x2000000c
 80036e0:	14f8b589 	.word	0x14f8b589

080036e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	460b      	mov	r3, r1
 80036f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036f4:	f7ff f884 	bl	8002800 <HAL_GetTick>
 80036f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	f040 8111 	bne.w	800392e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2319      	movs	r3, #25
 8003712:	2201      	movs	r2, #1
 8003714:	4988      	ldr	r1, [pc, #544]	; (8003938 <HAL_I2C_IsDeviceReady+0x254>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fa90 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	e104      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_I2C_IsDeviceReady+0x50>
 8003730:	2302      	movs	r3, #2
 8003732:	e0fd      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d007      	beq.n	800375a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2224      	movs	r2, #36	; 0x24
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a70      	ldr	r2, [pc, #448]	; (800393c <HAL_I2C_IsDeviceReady+0x258>)
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa4e 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b4:	d103      	bne.n	80037be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0b6      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037d2:	f7ff f815 	bl	8002800 <HAL_GetTick>
 80037d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003806:	e025      	b.n	8003854 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe fffa 	bl	8002800 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <HAL_I2C_IsDeviceReady+0x13a>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	22a0      	movs	r2, #160	; 0xa0
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2ba0      	cmp	r3, #160	; 0xa0
 800385e:	d005      	beq.n	800386c <HAL_I2C_IsDeviceReady+0x188>
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_I2C_IsDeviceReady+0x188>
 8003866:	7dbb      	ldrb	r3, [r7, #22]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0cd      	beq.n	8003808 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d129      	bne.n	80038d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2319      	movs	r3, #25
 80038ae:	2201      	movs	r2, #1
 80038b0:	4921      	ldr	r1, [pc, #132]	; (8003938 <HAL_I2C_IsDeviceReady+0x254>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f9c2 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e036      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e02c      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2319      	movs	r3, #25
 80038f6:	2201      	movs	r2, #1
 80038f8:	490f      	ldr	r1, [pc, #60]	; (8003938 <HAL_I2C_IsDeviceReady+0x254>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f99e 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e012      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3301      	adds	r3, #1
 800390e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	f4ff af32 	bcc.w	800377e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	00100002 	.word	0x00100002
 800393c:	ffff0000 	.word	0xffff0000

08003940 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	817b      	strh	r3, [r7, #10]
 8003952:	460b      	mov	r3, r1
 8003954:	813b      	strh	r3, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2200      	movs	r2, #0
 8003972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f960 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003990:	d103      	bne.n	800399a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e05f      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	492d      	ldr	r1, [pc, #180]	; (8003a68 <I2C_RequestMemoryWrite+0x128>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f9bb 	bl	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e04c      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fa46 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e02b      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	611a      	str	r2, [r3, #16]
 8003a16:	e021      	b.n	8003a5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a28:	6a39      	ldr	r1, [r7, #32]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fa20 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d107      	bne.n	8003a4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e005      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a52:	893b      	ldrh	r3, [r7, #8]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	00010002 	.word	0x00010002

08003a6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f8c2 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003acc:	d103      	bne.n	8003ad6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0aa      	b.n	8003c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ada:	897b      	ldrh	r3, [r7, #10]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	6a3a      	ldr	r2, [r7, #32]
 8003aee:	4952      	ldr	r1, [pc, #328]	; (8003c38 <I2C_RequestMemoryRead+0x1cc>)
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f91d 	bl	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e097      	b.n	8003c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f9a8 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d107      	bne.n	8003b3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e076      	b.n	8003c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b48:	893b      	ldrh	r3, [r7, #8]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	611a      	str	r2, [r3, #16]
 8003b52:	e021      	b.n	8003b98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b54:	893b      	ldrh	r3, [r7, #8]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	6a39      	ldr	r1, [r7, #32]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f982 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d107      	bne.n	8003b8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e050      	b.n	8003c30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8e:	893b      	ldrh	r3, [r7, #8]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	6a39      	ldr	r1, [r7, #32]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f967 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d107      	bne.n	8003bc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e035      	b.n	8003c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f82b 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfa:	d103      	bne.n	8003c04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e013      	b.n	8003c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c08:	897b      	ldrh	r3, [r7, #10]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	4906      	ldr	r1, [pc, #24]	; (8003c38 <I2C_RequestMemoryRead+0x1cc>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f886 	bl	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010002 	.word	0x00010002

08003c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c4c:	e048      	b.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d044      	beq.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fe fdd3 	bl	8002800 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d139      	bne.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10d      	bne.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	e00c      	b.n	8003cac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d116      	bne.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e023      	b.n	8003d28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10d      	bne.n	8003d06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	e00c      	b.n	8003d20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d093      	beq.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d3e:	e071      	b.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d123      	bne.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f043 0204 	orr.w	r2, r3, #4
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e067      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d041      	beq.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da0:	f7fe fd2e 	bl	8002800 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d136      	bne.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10c      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e00b      	b.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	43da      	mvns	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e021      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10c      	bne.n	8003e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	43da      	mvns	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e00b      	b.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bf14      	ite	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	2300      	moveq	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f47f af6d 	bne.w	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e7c:	e034      	b.n	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8e3 	bl	800404a <I2C_IsAcknowledgeFailed>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e034      	b.n	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d028      	beq.n	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e96:	f7fe fcb3 	bl	8002800 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d11d      	bne.n	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d016      	beq.n	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e007      	b.n	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d1c3      	bne.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f0c:	e034      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f89b 	bl	800404a <I2C_IsAcknowledgeFailed>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e034      	b.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d028      	beq.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fe fc6b 	bl	8002800 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d11d      	bne.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d016      	beq.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e007      	b.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d1c3      	bne.n	8003f0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f9c:	e049      	b.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d119      	bne.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0210 	mvn.w	r2, #16
 8003fb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e030      	b.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe0:	f7fe fc0e 	bl	8002800 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d302      	bcc.n	8003ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11d      	bne.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d016      	beq.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e007      	b.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d1ae      	bne.n	8003f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004060:	d11b      	bne.n	800409a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800406a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0204 	orr.w	r2, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e272      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8087 	beq.w	80041d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c8:	4b92      	ldr	r3, [pc, #584]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d00c      	beq.n	80040ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040d4:	4b8f      	ldr	r3, [pc, #572]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d112      	bne.n	8004106 <HAL_RCC_OscConfig+0x5e>
 80040e0:	4b8c      	ldr	r3, [pc, #560]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d10b      	bne.n	8004106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ee:	4b89      	ldr	r3, [pc, #548]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d06c      	beq.n	80041d4 <HAL_RCC_OscConfig+0x12c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d168      	bne.n	80041d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e24c      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410e:	d106      	bne.n	800411e <HAL_RCC_OscConfig+0x76>
 8004110:	4b80      	ldr	r3, [pc, #512]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a7f      	ldr	r2, [pc, #508]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	e02e      	b.n	800417c <HAL_RCC_OscConfig+0xd4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x98>
 8004126:	4b7b      	ldr	r3, [pc, #492]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a7a      	ldr	r2, [pc, #488]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 800412c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b78      	ldr	r3, [pc, #480]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a77      	ldr	r2, [pc, #476]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e01d      	b.n	800417c <HAL_RCC_OscConfig+0xd4>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0xbc>
 800414a:	4b72      	ldr	r3, [pc, #456]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a71      	ldr	r2, [pc, #452]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b6f      	ldr	r3, [pc, #444]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6e      	ldr	r2, [pc, #440]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0xd4>
 8004164:	4b6b      	ldr	r3, [pc, #428]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a6a      	ldr	r2, [pc, #424]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 800416a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b68      	ldr	r3, [pc, #416]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a67      	ldr	r2, [pc, #412]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe fb3c 	bl	8002800 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fe fb38 	bl	8002800 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e200      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b5d      	ldr	r3, [pc, #372]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0xe4>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fe fb28 	bl	8002800 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fe fb24 	bl	8002800 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1ec      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	4b53      	ldr	r3, [pc, #332]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x10c>
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d063      	beq.n	80042aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041e2:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041ee:	4b49      	ldr	r3, [pc, #292]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d11c      	bne.n	8004234 <HAL_RCC_OscConfig+0x18c>
 80041fa:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d116      	bne.n	8004234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	4b43      	ldr	r3, [pc, #268]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x176>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e1c0      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421e:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4939      	ldr	r1, [pc, #228]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	e03a      	b.n	80042aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fe fadd 	bl	8002800 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424a:	f7fe fad9 	bl	8002800 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1a1      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4927      	ldr	r1, [pc, #156]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]
 800427c:	e015      	b.n	80042aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427e:	4b26      	ldr	r3, [pc, #152]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fe fabc 	bl	8002800 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428c:	f7fe fab8 	bl	8002800 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e180      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d03a      	beq.n	800432c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d019      	beq.n	80042f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <HAL_RCC_OscConfig+0x274>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c4:	f7fe fa9c 	bl	8002800 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fe fa98 	bl	8002800 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e160      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042ea:	2001      	movs	r0, #1
 80042ec:	f000 face 	bl	800488c <RCC_Delay>
 80042f0:	e01c      	b.n	800432c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_OscConfig+0x274>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f8:	f7fe fa82 	bl	8002800 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fe:	e00f      	b.n	8004320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7fe fa7e 	bl	8002800 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d908      	bls.n	8004320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e146      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	42420000 	.word	0x42420000
 800431c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004320:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e9      	bne.n	8004300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80a6 	beq.w	8004486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433e:	4b8b      	ldr	r3, [pc, #556]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10d      	bne.n	8004366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434a:	4b88      	ldr	r3, [pc, #544]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	4a87      	ldr	r2, [pc, #540]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	61d3      	str	r3, [r2, #28]
 8004356:	4b85      	ldr	r3, [pc, #532]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b82      	ldr	r3, [pc, #520]	; (8004570 <HAL_RCC_OscConfig+0x4c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b7f      	ldr	r3, [pc, #508]	; (8004570 <HAL_RCC_OscConfig+0x4c8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a7e      	ldr	r2, [pc, #504]	; (8004570 <HAL_RCC_OscConfig+0x4c8>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fe fa3f 	bl	8002800 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fe fa3b 	bl	8002800 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b64      	cmp	r3, #100	; 0x64
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e103      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	4b75      	ldr	r3, [pc, #468]	; (8004570 <HAL_RCC_OscConfig+0x4c8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x312>
 80043ac:	4b6f      	ldr	r3, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	4a6e      	ldr	r2, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6213      	str	r3, [r2, #32]
 80043b8:	e02d      	b.n	8004416 <HAL_RCC_OscConfig+0x36e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x334>
 80043c2:	4b6a      	ldr	r3, [pc, #424]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4a69      	ldr	r2, [pc, #420]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	6213      	str	r3, [r2, #32]
 80043ce:	4b67      	ldr	r3, [pc, #412]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4a66      	ldr	r2, [pc, #408]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	6213      	str	r3, [r2, #32]
 80043da:	e01c      	b.n	8004416 <HAL_RCC_OscConfig+0x36e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	d10c      	bne.n	80043fe <HAL_RCC_OscConfig+0x356>
 80043e4:	4b61      	ldr	r3, [pc, #388]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4a60      	ldr	r2, [pc, #384]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	f043 0304 	orr.w	r3, r3, #4
 80043ee:	6213      	str	r3, [r2, #32]
 80043f0:	4b5e      	ldr	r3, [pc, #376]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4a5d      	ldr	r2, [pc, #372]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6213      	str	r3, [r2, #32]
 80043fc:	e00b      	b.n	8004416 <HAL_RCC_OscConfig+0x36e>
 80043fe:	4b5b      	ldr	r3, [pc, #364]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4a5a      	ldr	r2, [pc, #360]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6213      	str	r3, [r2, #32]
 800440a:	4b58      	ldr	r3, [pc, #352]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4a57      	ldr	r2, [pc, #348]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d015      	beq.n	800444a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441e:	f7fe f9ef 	bl	8002800 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	e00a      	b.n	800443c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fe f9eb 	bl	8002800 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0b1      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	4b4b      	ldr	r3, [pc, #300]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ee      	beq.n	8004426 <HAL_RCC_OscConfig+0x37e>
 8004448:	e014      	b.n	8004474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7fe f9d9 	bl	8002800 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fe f9d5 	bl	8002800 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e09b      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004468:	4b40      	ldr	r3, [pc, #256]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ee      	bne.n	8004452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d105      	bne.n	8004486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447a:	4b3c      	ldr	r3, [pc, #240]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4a3b      	ldr	r2, [pc, #236]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8087 	beq.w	800459e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004490:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d061      	beq.n	8004560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d146      	bne.n	8004532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a4:	4b33      	ldr	r3, [pc, #204]	; (8004574 <HAL_RCC_OscConfig+0x4cc>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fe f9a9 	bl	8002800 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fe f9a5 	bl	8002800 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e06d      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d108      	bne.n	80044ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4921      	ldr	r1, [pc, #132]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ec:	4b1f      	ldr	r3, [pc, #124]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a19      	ldr	r1, [r3, #32]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	430b      	orrs	r3, r1
 80044fe:	491b      	ldr	r1, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004500:	4313      	orrs	r3, r2
 8004502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCC_OscConfig+0x4cc>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7fe f979 	bl	8002800 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7fe f975 	bl	8002800 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e03d      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x46a>
 8004530:	e035      	b.n	800459e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <HAL_RCC_OscConfig+0x4cc>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fe f962 	bl	8002800 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fe f95e 	bl	8002800 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e026      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_RCC_OscConfig+0x4c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x498>
 800455e:	e01e      	b.n	800459e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d107      	bne.n	8004578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e019      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
 800456c:	40021000 	.word	0x40021000
 8004570:	40007000 	.word	0x40007000
 8004574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x500>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	429a      	cmp	r2, r3
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000

080045ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0d0      	b.n	8004762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b6a      	ldr	r3, [pc, #424]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d910      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b67      	ldr	r3, [pc, #412]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 0207 	bic.w	r2, r3, #7
 80045d6:	4965      	ldr	r1, [pc, #404]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b63      	ldr	r3, [pc, #396]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0b8      	b.n	8004762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004608:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a58      	ldr	r2, [pc, #352]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a52      	ldr	r2, [pc, #328]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800462a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b50      	ldr	r3, [pc, #320]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	494d      	ldr	r1, [pc, #308]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d040      	beq.n	80046cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d115      	bne.n	800468a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e073      	b.n	8004762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467a:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06b      	b.n	8004762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f023 0203 	bic.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4936      	ldr	r1, [pc, #216]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800469c:	f7fe f8b0 	bl	8002800 <HAL_GetTick>
 80046a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f7fe f8ac 	bl	8002800 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e053      	b.n	8004762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 020c 	and.w	r2, r3, #12
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d1eb      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d210      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 0207 	bic.w	r2, r3, #7
 80046e2:	4922      	ldr	r1, [pc, #136]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e032      	b.n	8004762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b19      	ldr	r3, [pc, #100]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4916      	ldr	r1, [pc, #88]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	490e      	ldr	r1, [pc, #56]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800473a:	f000 f821 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800473e:	4602      	mov	r2, r0
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	490a      	ldr	r1, [pc, #40]	; (8004774 <HAL_RCC_ClockConfig+0x1c8>)
 800474c:	5ccb      	ldrb	r3, [r1, r3]
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	4a09      	ldr	r2, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x1cc>)
 8004754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x1d0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe f80e 	bl	800277c <HAL_InitTick>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40022000 	.word	0x40022000
 8004770:	40021000 	.word	0x40021000
 8004774:	08008988 	.word	0x08008988
 8004778:	2000000c 	.word	0x2000000c
 800477c:	20000010 	.word	0x20000010

08004780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <HAL_RCC_GetSysClockFreq+0x94>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d002      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x30>
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x36>
 80047ae:	e027      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_GetSysClockFreq+0x98>)
 80047b2:	613b      	str	r3, [r7, #16]
      break;
 80047b4:	e027      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	0c9b      	lsrs	r3, r3, #18
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <HAL_RCC_GetSysClockFreq+0x9c>)
 80047c0:	5cd3      	ldrb	r3, [r2, r3]
 80047c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d010      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_RCC_GetSysClockFreq+0x94>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	0c5b      	lsrs	r3, r3, #17
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	4a11      	ldr	r2, [pc, #68]	; (8004820 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <HAL_RCC_GetSysClockFreq+0x98>)
 80047e2:	fb03 f202 	mul.w	r2, r3, r2
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e004      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	613b      	str	r3, [r7, #16]
      break;
 80047fe:	e002      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetSysClockFreq+0x98>)
 8004802:	613b      	str	r3, [r7, #16]
      break;
 8004804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004806:	693b      	ldr	r3, [r7, #16]
}
 8004808:	4618      	mov	r0, r3
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	007a1200 	.word	0x007a1200
 800481c:	080089a0 	.word	0x080089a0
 8004820:	080089b0 	.word	0x080089b0
 8004824:	003d0900 	.word	0x003d0900

08004828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b02      	ldr	r3, [pc, #8]	; (8004838 <HAL_RCC_GetHCLKFreq+0x10>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	2000000c 	.word	0x2000000c

0800483c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004840:	f7ff fff2 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4903      	ldr	r1, [pc, #12]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	08008998 	.word	0x08008998

08004864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004868:	f7ff ffde 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	0adb      	lsrs	r3, r3, #11
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	08008998 	.word	0x08008998

0800488c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <RCC_Delay+0x34>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <RCC_Delay+0x38>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a5b      	lsrs	r3, r3, #9
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048a8:	bf00      	nop
  }
  while (Delay --);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1e5a      	subs	r2, r3, #1
 80048ae:	60fa      	str	r2, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f9      	bne.n	80048a8 <RCC_Delay+0x1c>
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e041      	b.n	800495e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd fcf8 	bl	80022e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f000 fc28 	bl	800515c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d001      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e03a      	b.n	80049f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_TIM_Base_Start_IT+0x98>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x58>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d009      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x58>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <HAL_TIM_Base_Start_IT+0x9c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x58>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <HAL_TIM_Base_Start_IT+0xa0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d111      	bne.n	80049e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d010      	beq.n	80049f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	e007      	b.n	80049f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800

08004a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e041      	b.n	8004aa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fd fc9a 	bl	800236c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fb86 	bl	800515c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_TIM_PWM_Start+0x24>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e022      	b.n	8004b16 <HAL_TIM_PWM_Start+0x6a>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d109      	bne.n	8004aea <HAL_TIM_PWM_Start+0x3e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e015      	b.n	8004b16 <HAL_TIM_PWM_Start+0x6a>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x58>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e008      	b.n	8004b16 <HAL_TIM_PWM_Start+0x6a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e05e      	b.n	8004bdc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x82>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	e013      	b.n	8004b56 <HAL_TIM_PWM_Start+0xaa>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_PWM_Start+0x92>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	e00b      	b.n	8004b56 <HAL_TIM_PWM_Start+0xaa>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_PWM_Start+0xa2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	e003      	b.n	8004b56 <HAL_TIM_PWM_Start+0xaa>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fd7c 	bl	800565c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <HAL_TIM_PWM_Start+0x138>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_TIM_PWM_Start+0x138>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0xfa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0xfa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <HAL_TIM_PWM_Start+0x13c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0xfa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_TIM_PWM_Start+0x140>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d111      	bne.n	8004bca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d010      	beq.n	8004bda <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	e007      	b.n	8004bda <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800

08004bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0202 	mvn.w	r2, #2
 8004c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa76 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa69 	bl	8005112 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa78 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0204 	mvn.w	r2, #4
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa4c 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa3f 	bl	8005112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fa4e 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0208 	mvn.w	r2, #8
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa22 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa15 	bl	8005112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa24 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0210 	mvn.w	r2, #16
 8004d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9f8 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9eb 	bl	8005112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f9fa 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10e      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0201 	mvn.w	r2, #1
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd f926 	bl	8001fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8c:	2b80      	cmp	r3, #128	; 0x80
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fce9 	bl	8005772 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9be 	bl	8005148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d10e      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d107      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0220 	mvn.w	r2, #32
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fcb4 	bl	8005760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0ae      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b0c      	cmp	r3, #12
 8004e2a:	f200 809f 	bhi.w	8004f6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e2e:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004f6d 	.word	0x08004f6d
 8004e3c:	08004f6d 	.word	0x08004f6d
 8004e40:	08004f6d 	.word	0x08004f6d
 8004e44:	08004ea9 	.word	0x08004ea9
 8004e48:	08004f6d 	.word	0x08004f6d
 8004e4c:	08004f6d 	.word	0x08004f6d
 8004e50:	08004f6d 	.word	0x08004f6d
 8004e54:	08004eeb 	.word	0x08004eeb
 8004e58:	08004f6d 	.word	0x08004f6d
 8004e5c:	08004f6d 	.word	0x08004f6d
 8004e60:	08004f6d 	.word	0x08004f6d
 8004e64:	08004f2b 	.word	0x08004f2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f9d6 	bl	8005220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6999      	ldr	r1, [r3, #24]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	619a      	str	r2, [r3, #24]
      break;
 8004ea6:	e064      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fa1c 	bl	80052ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6999      	ldr	r1, [r3, #24]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	619a      	str	r2, [r3, #24]
      break;
 8004ee8:	e043      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fa65 	bl	80053c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0208 	orr.w	r2, r2, #8
 8004f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0204 	bic.w	r2, r2, #4
 8004f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69d9      	ldr	r1, [r3, #28]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	61da      	str	r2, [r3, #28]
      break;
 8004f28:	e023      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 faaf 	bl	8005494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69d9      	ldr	r1, [r3, #28]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	021a      	lsls	r2, r3, #8
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	61da      	str	r2, [r3, #28]
      break;
 8004f6a:	e002      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e0b4      	b.n	800510a <HAL_TIM_ConfigClockSource+0x186>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd8:	d03e      	beq.n	8005058 <HAL_TIM_ConfigClockSource+0xd4>
 8004fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fde:	f200 8087 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe6:	f000 8086 	beq.w	80050f6 <HAL_TIM_ConfigClockSource+0x172>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	d87f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b70      	cmp	r3, #112	; 0x70
 8004ff2:	d01a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0xa6>
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d87b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b60      	cmp	r3, #96	; 0x60
 8004ffa:	d050      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x11a>
 8004ffc:	2b60      	cmp	r3, #96	; 0x60
 8004ffe:	d877      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b50      	cmp	r3, #80	; 0x50
 8005002:	d03c      	beq.n	800507e <HAL_TIM_ConfigClockSource+0xfa>
 8005004:	2b50      	cmp	r3, #80	; 0x50
 8005006:	d873      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d058      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x13a>
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d86f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b30      	cmp	r3, #48	; 0x30
 8005012:	d064      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005014:	2b30      	cmp	r3, #48	; 0x30
 8005016:	d86b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d060      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d867      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	2b10      	cmp	r3, #16
 8005026:	d05a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005028:	e062      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	f000 faf0 	bl	800561e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800504c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	609a      	str	r2, [r3, #8]
      break;
 8005056:	e04f      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005068:	f000 fad9 	bl	800561e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800507a:	609a      	str	r2, [r3, #8]
      break;
 800507c:	e03c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fa50 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2150      	movs	r1, #80	; 0x50
 8005096:	4618      	mov	r0, r3
 8005098:	f000 faa7 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 800509c:	e02c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fa6e 	bl	800558c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2160      	movs	r1, #96	; 0x60
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fa97 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 80050bc:	e01c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fa30 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2140      	movs	r1, #64	; 0x40
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fa87 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 80050dc:	e00c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f000 fa7e 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 80050ee:	e003      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr
	...

0800515c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a29      	ldr	r2, [pc, #164]	; (8005214 <TIM_Base_SetConfig+0xb8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0x30>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0x30>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a26      	ldr	r2, [pc, #152]	; (8005218 <TIM_Base_SetConfig+0xbc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0x30>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a25      	ldr	r2, [pc, #148]	; (800521c <TIM_Base_SetConfig+0xc0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d108      	bne.n	800519e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <TIM_Base_SetConfig+0xb8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_Base_SetConfig+0x62>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ac:	d007      	beq.n	80051be <TIM_Base_SetConfig+0x62>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a19      	ldr	r2, [pc, #100]	; (8005218 <TIM_Base_SetConfig+0xbc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0x62>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a18      	ldr	r2, [pc, #96]	; (800521c <TIM_Base_SetConfig+0xc0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a07      	ldr	r2, [pc, #28]	; (8005214 <TIM_Base_SetConfig+0xb8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800

08005220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f023 0201 	bic.w	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 0302 	bic.w	r3, r3, #2
 8005268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <TIM_OC1_SetConfig+0xc8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10c      	bne.n	8005296 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0308 	bic.w	r3, r3, #8
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 0304 	bic.w	r3, r3, #4
 8005294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <TIM_OC1_SetConfig+0xc8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d111      	bne.n	80052c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00

080052ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f023 0210 	bic.w	r2, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0320 	bic.w	r3, r3, #32
 8005336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <TIM_OC2_SetConfig+0xd0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d10d      	bne.n	8005368 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <TIM_OC2_SetConfig+0xd0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d113      	bne.n	8005398 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800537e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	40012c00 	.word	0x40012c00

080053c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <TIM_OC3_SetConfig+0xd0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10d      	bne.n	800543a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <TIM_OC3_SetConfig+0xd0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d113      	bne.n	800546a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40012c00 	.word	0x40012c00

08005494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a0f      	ldr	r2, [pc, #60]	; (800552c <TIM_OC4_SetConfig+0x98>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d109      	bne.n	8005508 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	40012c00 	.word	0x40012c00

08005530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0201 	bic.w	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800555a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 030a 	bic.w	r3, r3, #10
 800556c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0210 	bic.w	r2, r3, #16
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	031b      	lsls	r3, r3, #12
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	621a      	str	r2, [r3, #32]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr

080055ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	f043 0307 	orr.w	r3, r3, #7
 800560c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005638:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	021a      	lsls	r2, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	431a      	orrs	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4313      	orrs	r3, r2
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	609a      	str	r2, [r3, #8]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	2201      	movs	r2, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1a      	ldr	r2, [r3, #32]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	43db      	mvns	r3, r3
 800567e:	401a      	ands	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e046      	b.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a16      	ldr	r2, [pc, #88]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00e      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d009      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a10      	ldr	r2, [pc, #64]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d10c      	bne.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4313      	orrs	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800

08005760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e042      	b.n	800581c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fc fe48 	bl	8002440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9af 	bl	8005b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b20      	cmp	r3, #32
 8005842:	d16d      	bne.n	8005920 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_UART_Transmit+0x2c>
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e066      	b.n	8005922 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2221      	movs	r2, #33	; 0x21
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005862:	f7fc ffcd 	bl	8002800 <HAL_GetTick>
 8005866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	88fa      	ldrh	r2, [r7, #6]
 8005872:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d108      	bne.n	8005890 <HAL_UART_Transmit+0x6c>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e003      	b.n	8005898 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005898:	e02a      	b.n	80058f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2180      	movs	r1, #128	; 0x80
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f8d2 	bl	8005a4e <UART_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e036      	b.n	8005922 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3302      	adds	r3, #2
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e007      	b.n	80058e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1cf      	bne.n	800589a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2200      	movs	r2, #0
 8005902:	2140      	movs	r1, #64	; 0x40
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f8a2 	bl	8005a4e <UART_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e006      	b.n	8005922 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b08a      	sub	sp, #40	; 0x28
 800592e:	af02      	add	r7, sp, #8
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b20      	cmp	r3, #32
 8005948:	d17c      	bne.n	8005a44 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_UART_Receive+0x2c>
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e075      	b.n	8005a46 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2222      	movs	r2, #34	; 0x22
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800596e:	f7fc ff47 	bl	8002800 <HAL_GetTick>
 8005972:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005988:	d108      	bne.n	800599c <HAL_UART_Receive+0x72>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	e003      	b.n	80059a4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80059a4:	e043      	b.n	8005a2e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2120      	movs	r1, #32
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f84c 	bl	8005a4e <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e042      	b.n	8005a46 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10c      	bne.n	80059e0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	3302      	adds	r3, #2
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	e01f      	b.n	8005a20 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e8:	d007      	beq.n	80059fa <HAL_UART_Receive+0xd0>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <HAL_UART_Receive+0xde>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	e008      	b.n	8005a1a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1b6      	bne.n	80059a6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b090      	sub	sp, #64	; 0x40
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5e:	e050      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d04c      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a6e:	f7fc fec7 	bl	8002800 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d241      	bcs.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a9e:	637a      	str	r2, [r7, #52]	; 0x34
 8005aa0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3314      	adds	r3, #20
 8005ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad2:	623a      	str	r2, [r7, #32]
 8005ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	69f9      	ldr	r1, [r7, #28]
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e00f      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d09f      	beq.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3740      	adds	r7, #64	; 0x40
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b66:	f023 030c 	bic.w	r3, r3, #12
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	430b      	orrs	r3, r1
 8005b72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2c      	ldr	r2, [pc, #176]	; (8005c40 <UART_SetConfig+0x114>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d103      	bne.n	8005b9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b94:	f7fe fe66 	bl	8004864 <HAL_RCC_GetPCLK2Freq>
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	e002      	b.n	8005ba2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fe fe4e 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8005ba0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <UART_SetConfig+0x118>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	0119      	lsls	r1, r3, #4
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009a      	lsls	r2, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <UART_SetConfig+0x118>)
 8005bda:	fba3 0302 	umull	r0, r3, r3, r2
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2064      	movs	r0, #100	; 0x64
 8005be2:	fb00 f303 	mul.w	r3, r0, r3
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	3332      	adds	r3, #50	; 0x32
 8005bec:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <UART_SetConfig+0x118>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf8:	4419      	add	r1, r3
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009a      	lsls	r2, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <UART_SetConfig+0x118>)
 8005c12:	fba3 0302 	umull	r0, r3, r3, r2
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	2064      	movs	r0, #100	; 0x64
 8005c1a:	fb00 f303 	mul.w	r3, r0, r3
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	3332      	adds	r3, #50	; 0x32
 8005c24:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <UART_SetConfig+0x118>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f003 020f 	and.w	r2, r3, #15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	440a      	add	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40013800 	.word	0x40013800
 8005c44:	51eb851f 	.word	0x51eb851f

08005c48 <__cvt>:
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4e:	461f      	mov	r7, r3
 8005c50:	bfbb      	ittet	lt
 8005c52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c56:	461f      	movlt	r7, r3
 8005c58:	2300      	movge	r3, #0
 8005c5a:	232d      	movlt	r3, #45	; 0x2d
 8005c5c:	b088      	sub	sp, #32
 8005c5e:	4614      	mov	r4, r2
 8005c60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c64:	7013      	strb	r3, [r2, #0]
 8005c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c68:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005c6c:	f023 0820 	bic.w	r8, r3, #32
 8005c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c74:	d005      	beq.n	8005c82 <__cvt+0x3a>
 8005c76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c7a:	d100      	bne.n	8005c7e <__cvt+0x36>
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e000      	b.n	8005c84 <__cvt+0x3c>
 8005c82:	2303      	movs	r3, #3
 8005c84:	aa07      	add	r2, sp, #28
 8005c86:	9204      	str	r2, [sp, #16]
 8005c88:	aa06      	add	r2, sp, #24
 8005c8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c8e:	e9cd 3500 	strd	r3, r5, [sp]
 8005c92:	4622      	mov	r2, r4
 8005c94:	463b      	mov	r3, r7
 8005c96:	f000 fe73 	bl	8006980 <_dtoa_r>
 8005c9a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	d102      	bne.n	8005ca8 <__cvt+0x60>
 8005ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ca4:	07db      	lsls	r3, r3, #31
 8005ca6:	d522      	bpl.n	8005cee <__cvt+0xa6>
 8005ca8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cac:	eb06 0905 	add.w	r9, r6, r5
 8005cb0:	d110      	bne.n	8005cd4 <__cvt+0x8c>
 8005cb2:	7833      	ldrb	r3, [r6, #0]
 8005cb4:	2b30      	cmp	r3, #48	; 0x30
 8005cb6:	d10a      	bne.n	8005cce <__cvt+0x86>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa fe72 	bl	80009a8 <__aeabi_dcmpeq>
 8005cc4:	b918      	cbnz	r0, 8005cce <__cvt+0x86>
 8005cc6:	f1c5 0501 	rsb	r5, r5, #1
 8005cca:	f8ca 5000 	str.w	r5, [sl]
 8005cce:	f8da 3000 	ldr.w	r3, [sl]
 8005cd2:	4499      	add	r9, r3
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce0:	b108      	cbz	r0, 8005ce6 <__cvt+0x9e>
 8005ce2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ce6:	2230      	movs	r2, #48	; 0x30
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	454b      	cmp	r3, r9
 8005cec:	d307      	bcc.n	8005cfe <__cvt+0xb6>
 8005cee:	4630      	mov	r0, r6
 8005cf0:	9b07      	ldr	r3, [sp, #28]
 8005cf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cf4:	1b9b      	subs	r3, r3, r6
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	b008      	add	sp, #32
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	9107      	str	r1, [sp, #28]
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e7f0      	b.n	8005ce8 <__cvt+0xa0>

08005d06 <__exponent>:
 8005d06:	4603      	mov	r3, r0
 8005d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	f803 2b02 	strb.w	r2, [r3], #2
 8005d10:	bfb6      	itet	lt
 8005d12:	222d      	movlt	r2, #45	; 0x2d
 8005d14:	222b      	movge	r2, #43	; 0x2b
 8005d16:	4249      	neglt	r1, r1
 8005d18:	2909      	cmp	r1, #9
 8005d1a:	7042      	strb	r2, [r0, #1]
 8005d1c:	dd2a      	ble.n	8005d74 <__exponent+0x6e>
 8005d1e:	f10d 0207 	add.w	r2, sp, #7
 8005d22:	4617      	mov	r7, r2
 8005d24:	260a      	movs	r6, #10
 8005d26:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d2a:	4694      	mov	ip, r2
 8005d2c:	fb06 1415 	mls	r4, r6, r5, r1
 8005d30:	3430      	adds	r4, #48	; 0x30
 8005d32:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d36:	460c      	mov	r4, r1
 8005d38:	2c63      	cmp	r4, #99	; 0x63
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d40:	dcf1      	bgt.n	8005d26 <__exponent+0x20>
 8005d42:	3130      	adds	r1, #48	; 0x30
 8005d44:	f1ac 0402 	sub.w	r4, ip, #2
 8005d48:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	1c41      	adds	r1, r0, #1
 8005d50:	42ba      	cmp	r2, r7
 8005d52:	d30a      	bcc.n	8005d6a <__exponent+0x64>
 8005d54:	f10d 0209 	add.w	r2, sp, #9
 8005d58:	eba2 020c 	sub.w	r2, r2, ip
 8005d5c:	42bc      	cmp	r4, r7
 8005d5e:	bf88      	it	hi
 8005d60:	2200      	movhi	r2, #0
 8005d62:	4413      	add	r3, r2
 8005d64:	1a18      	subs	r0, r3, r0
 8005d66:	b003      	add	sp, #12
 8005d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005d6e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005d72:	e7ed      	b.n	8005d50 <__exponent+0x4a>
 8005d74:	2330      	movs	r3, #48	; 0x30
 8005d76:	3130      	adds	r1, #48	; 0x30
 8005d78:	7083      	strb	r3, [r0, #2]
 8005d7a:	70c1      	strb	r1, [r0, #3]
 8005d7c:	1d03      	adds	r3, r0, #4
 8005d7e:	e7f1      	b.n	8005d64 <__exponent+0x5e>

08005d80 <_printf_float>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	b091      	sub	sp, #68	; 0x44
 8005d86:	460c      	mov	r4, r1
 8005d88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	461f      	mov	r7, r3
 8005d90:	4605      	mov	r5, r0
 8005d92:	f000 fce5 	bl	8006760 <_localeconv_r>
 8005d96:	6803      	ldr	r3, [r0, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9c:	f7fa f9d8 	bl	8000150 <strlen>
 8005da0:	2300      	movs	r3, #0
 8005da2:	930e      	str	r3, [sp, #56]	; 0x38
 8005da4:	f8d8 3000 	ldr.w	r3, [r8]
 8005da8:	900a      	str	r0, [sp, #40]	; 0x28
 8005daa:	3307      	adds	r3, #7
 8005dac:	f023 0307 	bic.w	r3, r3, #7
 8005db0:	f103 0208 	add.w	r2, r3, #8
 8005db4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005db8:	f8d4 b000 	ldr.w	fp, [r4]
 8005dbc:	f8c8 2000 	str.w	r2, [r8]
 8005dc0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4643      	mov	r3, r8
 8005dc8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005dcc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	4b9c      	ldr	r3, [pc, #624]	; (800604c <_printf_float+0x2cc>)
 8005dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ddc:	f7fa fe16 	bl	8000a0c <__aeabi_dcmpun>
 8005de0:	bb70      	cbnz	r0, 8005e40 <_printf_float+0xc0>
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295
 8005de6:	4650      	mov	r0, sl
 8005de8:	4b98      	ldr	r3, [pc, #608]	; (800604c <_printf_float+0x2cc>)
 8005dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dec:	f7fa fdf0 	bl	80009d0 <__aeabi_dcmple>
 8005df0:	bb30      	cbnz	r0, 8005e40 <_printf_float+0xc0>
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	4650      	mov	r0, sl
 8005df8:	4641      	mov	r1, r8
 8005dfa:	f7fa fddf 	bl	80009bc <__aeabi_dcmplt>
 8005dfe:	b110      	cbz	r0, 8005e06 <_printf_float+0x86>
 8005e00:	232d      	movs	r3, #45	; 0x2d
 8005e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e06:	4a92      	ldr	r2, [pc, #584]	; (8006050 <_printf_float+0x2d0>)
 8005e08:	4b92      	ldr	r3, [pc, #584]	; (8006054 <_printf_float+0x2d4>)
 8005e0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e0e:	bf94      	ite	ls
 8005e10:	4690      	movls	r8, r2
 8005e12:	4698      	movhi	r8, r3
 8005e14:	2303      	movs	r3, #3
 8005e16:	f04f 0a00 	mov.w	sl, #0
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	f02b 0304 	bic.w	r3, fp, #4
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	4633      	mov	r3, r6
 8005e24:	4621      	mov	r1, r4
 8005e26:	4628      	mov	r0, r5
 8005e28:	9700      	str	r7, [sp, #0]
 8005e2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e2c:	f000 f9d6 	bl	80061dc <_printf_common>
 8005e30:	3001      	adds	r0, #1
 8005e32:	f040 8090 	bne.w	8005f56 <_printf_float+0x1d6>
 8005e36:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3a:	b011      	add	sp, #68	; 0x44
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	4652      	mov	r2, sl
 8005e42:	4643      	mov	r3, r8
 8005e44:	4650      	mov	r0, sl
 8005e46:	4641      	mov	r1, r8
 8005e48:	f7fa fde0 	bl	8000a0c <__aeabi_dcmpun>
 8005e4c:	b148      	cbz	r0, 8005e62 <_printf_float+0xe2>
 8005e4e:	f1b8 0f00 	cmp.w	r8, #0
 8005e52:	bfb8      	it	lt
 8005e54:	232d      	movlt	r3, #45	; 0x2d
 8005e56:	4a80      	ldr	r2, [pc, #512]	; (8006058 <_printf_float+0x2d8>)
 8005e58:	bfb8      	it	lt
 8005e5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e5e:	4b7f      	ldr	r3, [pc, #508]	; (800605c <_printf_float+0x2dc>)
 8005e60:	e7d3      	b.n	8005e0a <_printf_float+0x8a>
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	d142      	bne.n	8005ef2 <_printf_float+0x172>
 8005e6c:	2306      	movs	r3, #6
 8005e6e:	6063      	str	r3, [r4, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	9206      	str	r2, [sp, #24]
 8005e74:	aa0e      	add	r2, sp, #56	; 0x38
 8005e76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005e7a:	aa0d      	add	r2, sp, #52	; 0x34
 8005e7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005e80:	9203      	str	r2, [sp, #12]
 8005e82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005e86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	4652      	mov	r2, sl
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4628      	mov	r0, r5
 8005e94:	4643      	mov	r3, r8
 8005e96:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e98:	f7ff fed6 	bl	8005c48 <__cvt>
 8005e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e9e:	4680      	mov	r8, r0
 8005ea0:	2947      	cmp	r1, #71	; 0x47
 8005ea2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ea4:	d108      	bne.n	8005eb8 <_printf_float+0x138>
 8005ea6:	1cc8      	adds	r0, r1, #3
 8005ea8:	db02      	blt.n	8005eb0 <_printf_float+0x130>
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	4299      	cmp	r1, r3
 8005eae:	dd40      	ble.n	8005f32 <_printf_float+0x1b2>
 8005eb0:	f1a9 0902 	sub.w	r9, r9, #2
 8005eb4:	fa5f f989 	uxtb.w	r9, r9
 8005eb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ebc:	d81f      	bhi.n	8005efe <_printf_float+0x17e>
 8005ebe:	464a      	mov	r2, r9
 8005ec0:	3901      	subs	r1, #1
 8005ec2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ec6:	910d      	str	r1, [sp, #52]	; 0x34
 8005ec8:	f7ff ff1d 	bl	8005d06 <__exponent>
 8005ecc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ece:	4682      	mov	sl, r0
 8005ed0:	1813      	adds	r3, r2, r0
 8005ed2:	2a01      	cmp	r2, #1
 8005ed4:	6123      	str	r3, [r4, #16]
 8005ed6:	dc02      	bgt.n	8005ede <_printf_float+0x15e>
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	07d2      	lsls	r2, r2, #31
 8005edc:	d501      	bpl.n	8005ee2 <_printf_float+0x162>
 8005ede:	3301      	adds	r3, #1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d09b      	beq.n	8005e22 <_printf_float+0xa2>
 8005eea:	232d      	movs	r3, #45	; 0x2d
 8005eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef0:	e797      	b.n	8005e22 <_printf_float+0xa2>
 8005ef2:	2947      	cmp	r1, #71	; 0x47
 8005ef4:	d1bc      	bne.n	8005e70 <_printf_float+0xf0>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ba      	bne.n	8005e70 <_printf_float+0xf0>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e7b7      	b.n	8005e6e <_printf_float+0xee>
 8005efe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f02:	d118      	bne.n	8005f36 <_printf_float+0x1b6>
 8005f04:	2900      	cmp	r1, #0
 8005f06:	6863      	ldr	r3, [r4, #4]
 8005f08:	dd0b      	ble.n	8005f22 <_printf_float+0x1a2>
 8005f0a:	6121      	str	r1, [r4, #16]
 8005f0c:	b913      	cbnz	r3, 8005f14 <_printf_float+0x194>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	07d0      	lsls	r0, r2, #31
 8005f12:	d502      	bpl.n	8005f1a <_printf_float+0x19a>
 8005f14:	3301      	adds	r3, #1
 8005f16:	440b      	add	r3, r1
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	f04f 0a00 	mov.w	sl, #0
 8005f1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f20:	e7df      	b.n	8005ee2 <_printf_float+0x162>
 8005f22:	b913      	cbnz	r3, 8005f2a <_printf_float+0x1aa>
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	07d2      	lsls	r2, r2, #31
 8005f28:	d501      	bpl.n	8005f2e <_printf_float+0x1ae>
 8005f2a:	3302      	adds	r3, #2
 8005f2c:	e7f4      	b.n	8005f18 <_printf_float+0x198>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e7f2      	b.n	8005f18 <_printf_float+0x198>
 8005f32:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	db05      	blt.n	8005f48 <_printf_float+0x1c8>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	6121      	str	r1, [r4, #16]
 8005f40:	07d8      	lsls	r0, r3, #31
 8005f42:	d5ea      	bpl.n	8005f1a <_printf_float+0x19a>
 8005f44:	1c4b      	adds	r3, r1, #1
 8005f46:	e7e7      	b.n	8005f18 <_printf_float+0x198>
 8005f48:	2900      	cmp	r1, #0
 8005f4a:	bfcc      	ite	gt
 8005f4c:	2201      	movgt	r2, #1
 8005f4e:	f1c1 0202 	rsble	r2, r1, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	e7e0      	b.n	8005f18 <_printf_float+0x198>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	055a      	lsls	r2, r3, #21
 8005f5a:	d407      	bmi.n	8005f6c <_printf_float+0x1ec>
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	4642      	mov	r2, r8
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	d12b      	bne.n	8005fc2 <_printf_float+0x242>
 8005f6a:	e764      	b.n	8005e36 <_printf_float+0xb6>
 8005f6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f70:	f240 80dd 	bls.w	800612e <_printf_float+0x3ae>
 8005f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f7fa fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d033      	beq.n	8005fec <_printf_float+0x26c>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	4a35      	ldr	r2, [pc, #212]	; (8006060 <_printf_float+0x2e0>)
 8005f8c:	47b8      	blx	r7
 8005f8e:	3001      	adds	r0, #1
 8005f90:	f43f af51 	beq.w	8005e36 <_printf_float+0xb6>
 8005f94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	db02      	blt.n	8005fa2 <_printf_float+0x222>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	07d8      	lsls	r0, r3, #31
 8005fa0:	d50f      	bpl.n	8005fc2 <_printf_float+0x242>
 8005fa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f af42 	beq.w	8005e36 <_printf_float+0xb6>
 8005fb2:	f04f 0800 	mov.w	r8, #0
 8005fb6:	f104 091a 	add.w	r9, r4, #26
 8005fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	4543      	cmp	r3, r8
 8005fc0:	dc09      	bgt.n	8005fd6 <_printf_float+0x256>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	079b      	lsls	r3, r3, #30
 8005fc6:	f100 8104 	bmi.w	80061d2 <_printf_float+0x452>
 8005fca:	68e0      	ldr	r0, [r4, #12]
 8005fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fce:	4298      	cmp	r0, r3
 8005fd0:	bfb8      	it	lt
 8005fd2:	4618      	movlt	r0, r3
 8005fd4:	e731      	b.n	8005e3a <_printf_float+0xba>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	464a      	mov	r2, r9
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f43f af28 	beq.w	8005e36 <_printf_float+0xb6>
 8005fe6:	f108 0801 	add.w	r8, r8, #1
 8005fea:	e7e6      	b.n	8005fba <_printf_float+0x23a>
 8005fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc38      	bgt.n	8006064 <_printf_float+0x2e4>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <_printf_float+0x2e0>)
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f af1a 	beq.w	8005e36 <_printf_float+0xb6>
 8006002:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006006:	4313      	orrs	r3, r2
 8006008:	d102      	bne.n	8006010 <_printf_float+0x290>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	07d9      	lsls	r1, r3, #31
 800600e:	d5d8      	bpl.n	8005fc2 <_printf_float+0x242>
 8006010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	47b8      	blx	r7
 800601a:	3001      	adds	r0, #1
 800601c:	f43f af0b 	beq.w	8005e36 <_printf_float+0xb6>
 8006020:	f04f 0900 	mov.w	r9, #0
 8006024:	f104 0a1a 	add.w	sl, r4, #26
 8006028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800602a:	425b      	negs	r3, r3
 800602c:	454b      	cmp	r3, r9
 800602e:	dc01      	bgt.n	8006034 <_printf_float+0x2b4>
 8006030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006032:	e794      	b.n	8005f5e <_printf_float+0x1de>
 8006034:	2301      	movs	r3, #1
 8006036:	4652      	mov	r2, sl
 8006038:	4631      	mov	r1, r6
 800603a:	4628      	mov	r0, r5
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	f43f aef9 	beq.w	8005e36 <_printf_float+0xb6>
 8006044:	f109 0901 	add.w	r9, r9, #1
 8006048:	e7ee      	b.n	8006028 <_printf_float+0x2a8>
 800604a:	bf00      	nop
 800604c:	7fefffff 	.word	0x7fefffff
 8006050:	080089b2 	.word	0x080089b2
 8006054:	080089b6 	.word	0x080089b6
 8006058:	080089ba 	.word	0x080089ba
 800605c:	080089be 	.word	0x080089be
 8006060:	080089c2 	.word	0x080089c2
 8006064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006066:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006068:	429a      	cmp	r2, r3
 800606a:	bfa8      	it	ge
 800606c:	461a      	movge	r2, r3
 800606e:	2a00      	cmp	r2, #0
 8006070:	4691      	mov	r9, r2
 8006072:	dc37      	bgt.n	80060e4 <_printf_float+0x364>
 8006074:	f04f 0b00 	mov.w	fp, #0
 8006078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800607c:	f104 021a 	add.w	r2, r4, #26
 8006080:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006084:	ebaa 0309 	sub.w	r3, sl, r9
 8006088:	455b      	cmp	r3, fp
 800608a:	dc33      	bgt.n	80060f4 <_printf_float+0x374>
 800608c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006090:	429a      	cmp	r2, r3
 8006092:	db3b      	blt.n	800610c <_printf_float+0x38c>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d438      	bmi.n	800610c <_printf_float+0x38c>
 800609a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800609e:	eba2 0903 	sub.w	r9, r2, r3
 80060a2:	eba2 020a 	sub.w	r2, r2, sl
 80060a6:	4591      	cmp	r9, r2
 80060a8:	bfa8      	it	ge
 80060aa:	4691      	movge	r9, r2
 80060ac:	f1b9 0f00 	cmp.w	r9, #0
 80060b0:	dc34      	bgt.n	800611c <_printf_float+0x39c>
 80060b2:	f04f 0800 	mov.w	r8, #0
 80060b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060ba:	f104 0a1a 	add.w	sl, r4, #26
 80060be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	eba3 0309 	sub.w	r3, r3, r9
 80060c8:	4543      	cmp	r3, r8
 80060ca:	f77f af7a 	ble.w	8005fc2 <_printf_float+0x242>
 80060ce:	2301      	movs	r3, #1
 80060d0:	4652      	mov	r2, sl
 80060d2:	4631      	mov	r1, r6
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b8      	blx	r7
 80060d8:	3001      	adds	r0, #1
 80060da:	f43f aeac 	beq.w	8005e36 <_printf_float+0xb6>
 80060de:	f108 0801 	add.w	r8, r8, #1
 80060e2:	e7ec      	b.n	80060be <_printf_float+0x33e>
 80060e4:	4613      	mov	r3, r2
 80060e6:	4631      	mov	r1, r6
 80060e8:	4642      	mov	r2, r8
 80060ea:	4628      	mov	r0, r5
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	d1c0      	bne.n	8006074 <_printf_float+0x2f4>
 80060f2:	e6a0      	b.n	8005e36 <_printf_float+0xb6>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	f43f ae99 	beq.w	8005e36 <_printf_float+0xb6>
 8006104:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006106:	f10b 0b01 	add.w	fp, fp, #1
 800610a:	e7b9      	b.n	8006080 <_printf_float+0x300>
 800610c:	4631      	mov	r1, r6
 800610e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	d1bf      	bne.n	800609a <_printf_float+0x31a>
 800611a:	e68c      	b.n	8005e36 <_printf_float+0xb6>
 800611c:	464b      	mov	r3, r9
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	eb08 020a 	add.w	r2, r8, sl
 8006126:	47b8      	blx	r7
 8006128:	3001      	adds	r0, #1
 800612a:	d1c2      	bne.n	80060b2 <_printf_float+0x332>
 800612c:	e683      	b.n	8005e36 <_printf_float+0xb6>
 800612e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006130:	2a01      	cmp	r2, #1
 8006132:	dc01      	bgt.n	8006138 <_printf_float+0x3b8>
 8006134:	07db      	lsls	r3, r3, #31
 8006136:	d539      	bpl.n	80061ac <_printf_float+0x42c>
 8006138:	2301      	movs	r3, #1
 800613a:	4642      	mov	r2, r8
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f ae77 	beq.w	8005e36 <_printf_float+0xb6>
 8006148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f ae6f 	beq.w	8005e36 <_printf_float+0xb6>
 8006158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800615c:	2200      	movs	r2, #0
 800615e:	2300      	movs	r3, #0
 8006160:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006164:	f7fa fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8006168:	b9d8      	cbnz	r0, 80061a2 <_printf_float+0x422>
 800616a:	f109 33ff 	add.w	r3, r9, #4294967295
 800616e:	f108 0201 	add.w	r2, r8, #1
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	d10e      	bne.n	800619a <_printf_float+0x41a>
 800617c:	e65b      	b.n	8005e36 <_printf_float+0xb6>
 800617e:	2301      	movs	r3, #1
 8006180:	464a      	mov	r2, r9
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f ae54 	beq.w	8005e36 <_printf_float+0xb6>
 800618e:	f108 0801 	add.w	r8, r8, #1
 8006192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006194:	3b01      	subs	r3, #1
 8006196:	4543      	cmp	r3, r8
 8006198:	dcf1      	bgt.n	800617e <_printf_float+0x3fe>
 800619a:	4653      	mov	r3, sl
 800619c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061a0:	e6de      	b.n	8005f60 <_printf_float+0x1e0>
 80061a2:	f04f 0800 	mov.w	r8, #0
 80061a6:	f104 091a 	add.w	r9, r4, #26
 80061aa:	e7f2      	b.n	8006192 <_printf_float+0x412>
 80061ac:	2301      	movs	r3, #1
 80061ae:	4642      	mov	r2, r8
 80061b0:	e7df      	b.n	8006172 <_printf_float+0x3f2>
 80061b2:	2301      	movs	r3, #1
 80061b4:	464a      	mov	r2, r9
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	f43f ae3a 	beq.w	8005e36 <_printf_float+0xb6>
 80061c2:	f108 0801 	add.w	r8, r8, #1
 80061c6:	68e3      	ldr	r3, [r4, #12]
 80061c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80061ca:	1a5b      	subs	r3, r3, r1
 80061cc:	4543      	cmp	r3, r8
 80061ce:	dcf0      	bgt.n	80061b2 <_printf_float+0x432>
 80061d0:	e6fb      	b.n	8005fca <_printf_float+0x24a>
 80061d2:	f04f 0800 	mov.w	r8, #0
 80061d6:	f104 0919 	add.w	r9, r4, #25
 80061da:	e7f4      	b.n	80061c6 <_printf_float+0x446>

080061dc <_printf_common>:
 80061dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	4616      	mov	r6, r2
 80061e2:	4699      	mov	r9, r3
 80061e4:	688a      	ldr	r2, [r1, #8]
 80061e6:	690b      	ldr	r3, [r1, #16]
 80061e8:	4607      	mov	r7, r0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	bfb8      	it	lt
 80061ee:	4613      	movlt	r3, r2
 80061f0:	6033      	str	r3, [r6, #0]
 80061f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061f6:	460c      	mov	r4, r1
 80061f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061fc:	b10a      	cbz	r2, 8006202 <_printf_common+0x26>
 80061fe:	3301      	adds	r3, #1
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	0699      	lsls	r1, r3, #26
 8006206:	bf42      	ittt	mi
 8006208:	6833      	ldrmi	r3, [r6, #0]
 800620a:	3302      	addmi	r3, #2
 800620c:	6033      	strmi	r3, [r6, #0]
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	f015 0506 	ands.w	r5, r5, #6
 8006214:	d106      	bne.n	8006224 <_printf_common+0x48>
 8006216:	f104 0a19 	add.w	sl, r4, #25
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	6832      	ldr	r2, [r6, #0]
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	42ab      	cmp	r3, r5
 8006222:	dc2b      	bgt.n	800627c <_printf_common+0xa0>
 8006224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006228:	1e13      	subs	r3, r2, #0
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	bf18      	it	ne
 800622e:	2301      	movne	r3, #1
 8006230:	0692      	lsls	r2, r2, #26
 8006232:	d430      	bmi.n	8006296 <_printf_common+0xba>
 8006234:	4649      	mov	r1, r9
 8006236:	4638      	mov	r0, r7
 8006238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800623c:	47c0      	blx	r8
 800623e:	3001      	adds	r0, #1
 8006240:	d023      	beq.n	800628a <_printf_common+0xae>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	6922      	ldr	r2, [r4, #16]
 8006246:	f003 0306 	and.w	r3, r3, #6
 800624a:	2b04      	cmp	r3, #4
 800624c:	bf14      	ite	ne
 800624e:	2500      	movne	r5, #0
 8006250:	6833      	ldreq	r3, [r6, #0]
 8006252:	f04f 0600 	mov.w	r6, #0
 8006256:	bf08      	it	eq
 8006258:	68e5      	ldreq	r5, [r4, #12]
 800625a:	f104 041a 	add.w	r4, r4, #26
 800625e:	bf08      	it	eq
 8006260:	1aed      	subeq	r5, r5, r3
 8006262:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006266:	bf08      	it	eq
 8006268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800626c:	4293      	cmp	r3, r2
 800626e:	bfc4      	itt	gt
 8006270:	1a9b      	subgt	r3, r3, r2
 8006272:	18ed      	addgt	r5, r5, r3
 8006274:	42b5      	cmp	r5, r6
 8006276:	d11a      	bne.n	80062ae <_printf_common+0xd2>
 8006278:	2000      	movs	r0, #0
 800627a:	e008      	b.n	800628e <_printf_common+0xb2>
 800627c:	2301      	movs	r3, #1
 800627e:	4652      	mov	r2, sl
 8006280:	4649      	mov	r1, r9
 8006282:	4638      	mov	r0, r7
 8006284:	47c0      	blx	r8
 8006286:	3001      	adds	r0, #1
 8006288:	d103      	bne.n	8006292 <_printf_common+0xb6>
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006292:	3501      	adds	r5, #1
 8006294:	e7c1      	b.n	800621a <_printf_common+0x3e>
 8006296:	2030      	movs	r0, #48	; 0x30
 8006298:	18e1      	adds	r1, r4, r3
 800629a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a4:	4422      	add	r2, r4
 80062a6:	3302      	adds	r3, #2
 80062a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062ac:	e7c2      	b.n	8006234 <_printf_common+0x58>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4622      	mov	r2, r4
 80062b2:	4649      	mov	r1, r9
 80062b4:	4638      	mov	r0, r7
 80062b6:	47c0      	blx	r8
 80062b8:	3001      	adds	r0, #1
 80062ba:	d0e6      	beq.n	800628a <_printf_common+0xae>
 80062bc:	3601      	adds	r6, #1
 80062be:	e7d9      	b.n	8006274 <_printf_common+0x98>

080062c0 <_printf_i>:
 80062c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	7e0f      	ldrb	r7, [r1, #24]
 80062c6:	4691      	mov	r9, r2
 80062c8:	2f78      	cmp	r7, #120	; 0x78
 80062ca:	4680      	mov	r8, r0
 80062cc:	460c      	mov	r4, r1
 80062ce:	469a      	mov	sl, r3
 80062d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062d6:	d807      	bhi.n	80062e8 <_printf_i+0x28>
 80062d8:	2f62      	cmp	r7, #98	; 0x62
 80062da:	d80a      	bhi.n	80062f2 <_printf_i+0x32>
 80062dc:	2f00      	cmp	r7, #0
 80062de:	f000 80d5 	beq.w	800648c <_printf_i+0x1cc>
 80062e2:	2f58      	cmp	r7, #88	; 0x58
 80062e4:	f000 80c1 	beq.w	800646a <_printf_i+0x1aa>
 80062e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062f0:	e03a      	b.n	8006368 <_printf_i+0xa8>
 80062f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062f6:	2b15      	cmp	r3, #21
 80062f8:	d8f6      	bhi.n	80062e8 <_printf_i+0x28>
 80062fa:	a101      	add	r1, pc, #4	; (adr r1, 8006300 <_printf_i+0x40>)
 80062fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006300:	08006359 	.word	0x08006359
 8006304:	0800636d 	.word	0x0800636d
 8006308:	080062e9 	.word	0x080062e9
 800630c:	080062e9 	.word	0x080062e9
 8006310:	080062e9 	.word	0x080062e9
 8006314:	080062e9 	.word	0x080062e9
 8006318:	0800636d 	.word	0x0800636d
 800631c:	080062e9 	.word	0x080062e9
 8006320:	080062e9 	.word	0x080062e9
 8006324:	080062e9 	.word	0x080062e9
 8006328:	080062e9 	.word	0x080062e9
 800632c:	08006473 	.word	0x08006473
 8006330:	08006399 	.word	0x08006399
 8006334:	0800642d 	.word	0x0800642d
 8006338:	080062e9 	.word	0x080062e9
 800633c:	080062e9 	.word	0x080062e9
 8006340:	08006495 	.word	0x08006495
 8006344:	080062e9 	.word	0x080062e9
 8006348:	08006399 	.word	0x08006399
 800634c:	080062e9 	.word	0x080062e9
 8006350:	080062e9 	.word	0x080062e9
 8006354:	08006435 	.word	0x08006435
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	602a      	str	r2, [r5, #0]
 8006360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006368:	2301      	movs	r3, #1
 800636a:	e0a0      	b.n	80064ae <_printf_i+0x1ee>
 800636c:	6820      	ldr	r0, [r4, #0]
 800636e:	682b      	ldr	r3, [r5, #0]
 8006370:	0607      	lsls	r7, r0, #24
 8006372:	f103 0104 	add.w	r1, r3, #4
 8006376:	6029      	str	r1, [r5, #0]
 8006378:	d501      	bpl.n	800637e <_printf_i+0xbe>
 800637a:	681e      	ldr	r6, [r3, #0]
 800637c:	e003      	b.n	8006386 <_printf_i+0xc6>
 800637e:	0646      	lsls	r6, r0, #25
 8006380:	d5fb      	bpl.n	800637a <_printf_i+0xba>
 8006382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006386:	2e00      	cmp	r6, #0
 8006388:	da03      	bge.n	8006392 <_printf_i+0xd2>
 800638a:	232d      	movs	r3, #45	; 0x2d
 800638c:	4276      	negs	r6, r6
 800638e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006392:	230a      	movs	r3, #10
 8006394:	4859      	ldr	r0, [pc, #356]	; (80064fc <_printf_i+0x23c>)
 8006396:	e012      	b.n	80063be <_printf_i+0xfe>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	6820      	ldr	r0, [r4, #0]
 800639c:	1d19      	adds	r1, r3, #4
 800639e:	6029      	str	r1, [r5, #0]
 80063a0:	0605      	lsls	r5, r0, #24
 80063a2:	d501      	bpl.n	80063a8 <_printf_i+0xe8>
 80063a4:	681e      	ldr	r6, [r3, #0]
 80063a6:	e002      	b.n	80063ae <_printf_i+0xee>
 80063a8:	0641      	lsls	r1, r0, #25
 80063aa:	d5fb      	bpl.n	80063a4 <_printf_i+0xe4>
 80063ac:	881e      	ldrh	r6, [r3, #0]
 80063ae:	2f6f      	cmp	r7, #111	; 0x6f
 80063b0:	bf0c      	ite	eq
 80063b2:	2308      	moveq	r3, #8
 80063b4:	230a      	movne	r3, #10
 80063b6:	4851      	ldr	r0, [pc, #324]	; (80064fc <_printf_i+0x23c>)
 80063b8:	2100      	movs	r1, #0
 80063ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063be:	6865      	ldr	r5, [r4, #4]
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	bfa8      	it	ge
 80063c4:	6821      	ldrge	r1, [r4, #0]
 80063c6:	60a5      	str	r5, [r4, #8]
 80063c8:	bfa4      	itt	ge
 80063ca:	f021 0104 	bicge.w	r1, r1, #4
 80063ce:	6021      	strge	r1, [r4, #0]
 80063d0:	b90e      	cbnz	r6, 80063d6 <_printf_i+0x116>
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	d04b      	beq.n	800646e <_printf_i+0x1ae>
 80063d6:	4615      	mov	r5, r2
 80063d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80063dc:	fb03 6711 	mls	r7, r3, r1, r6
 80063e0:	5dc7      	ldrb	r7, [r0, r7]
 80063e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063e6:	4637      	mov	r7, r6
 80063e8:	42bb      	cmp	r3, r7
 80063ea:	460e      	mov	r6, r1
 80063ec:	d9f4      	bls.n	80063d8 <_printf_i+0x118>
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d10b      	bne.n	800640a <_printf_i+0x14a>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	07de      	lsls	r6, r3, #31
 80063f6:	d508      	bpl.n	800640a <_printf_i+0x14a>
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	6861      	ldr	r1, [r4, #4]
 80063fc:	4299      	cmp	r1, r3
 80063fe:	bfde      	ittt	le
 8006400:	2330      	movle	r3, #48	; 0x30
 8006402:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006406:	f105 35ff 	addle.w	r5, r5, #4294967295
 800640a:	1b52      	subs	r2, r2, r5
 800640c:	6122      	str	r2, [r4, #16]
 800640e:	464b      	mov	r3, r9
 8006410:	4621      	mov	r1, r4
 8006412:	4640      	mov	r0, r8
 8006414:	f8cd a000 	str.w	sl, [sp]
 8006418:	aa03      	add	r2, sp, #12
 800641a:	f7ff fedf 	bl	80061dc <_printf_common>
 800641e:	3001      	adds	r0, #1
 8006420:	d14a      	bne.n	80064b8 <_printf_i+0x1f8>
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
 8006426:	b004      	add	sp, #16
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f043 0320 	orr.w	r3, r3, #32
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	2778      	movs	r7, #120	; 0x78
 8006436:	4832      	ldr	r0, [pc, #200]	; (8006500 <_printf_i+0x240>)
 8006438:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	6829      	ldr	r1, [r5, #0]
 8006440:	061f      	lsls	r7, r3, #24
 8006442:	f851 6b04 	ldr.w	r6, [r1], #4
 8006446:	d402      	bmi.n	800644e <_printf_i+0x18e>
 8006448:	065f      	lsls	r7, r3, #25
 800644a:	bf48      	it	mi
 800644c:	b2b6      	uxthmi	r6, r6
 800644e:	07df      	lsls	r7, r3, #31
 8006450:	bf48      	it	mi
 8006452:	f043 0320 	orrmi.w	r3, r3, #32
 8006456:	6029      	str	r1, [r5, #0]
 8006458:	bf48      	it	mi
 800645a:	6023      	strmi	r3, [r4, #0]
 800645c:	b91e      	cbnz	r6, 8006466 <_printf_i+0x1a6>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	f023 0320 	bic.w	r3, r3, #32
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	2310      	movs	r3, #16
 8006468:	e7a6      	b.n	80063b8 <_printf_i+0xf8>
 800646a:	4824      	ldr	r0, [pc, #144]	; (80064fc <_printf_i+0x23c>)
 800646c:	e7e4      	b.n	8006438 <_printf_i+0x178>
 800646e:	4615      	mov	r5, r2
 8006470:	e7bd      	b.n	80063ee <_printf_i+0x12e>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	6826      	ldr	r6, [r4, #0]
 8006476:	1d18      	adds	r0, r3, #4
 8006478:	6961      	ldr	r1, [r4, #20]
 800647a:	6028      	str	r0, [r5, #0]
 800647c:	0635      	lsls	r5, r6, #24
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	d501      	bpl.n	8006486 <_printf_i+0x1c6>
 8006482:	6019      	str	r1, [r3, #0]
 8006484:	e002      	b.n	800648c <_printf_i+0x1cc>
 8006486:	0670      	lsls	r0, r6, #25
 8006488:	d5fb      	bpl.n	8006482 <_printf_i+0x1c2>
 800648a:	8019      	strh	r1, [r3, #0]
 800648c:	2300      	movs	r3, #0
 800648e:	4615      	mov	r5, r2
 8006490:	6123      	str	r3, [r4, #16]
 8006492:	e7bc      	b.n	800640e <_printf_i+0x14e>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	2100      	movs	r1, #0
 8006498:	1d1a      	adds	r2, r3, #4
 800649a:	602a      	str	r2, [r5, #0]
 800649c:	681d      	ldr	r5, [r3, #0]
 800649e:	6862      	ldr	r2, [r4, #4]
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 f9d4 	bl	800684e <memchr>
 80064a6:	b108      	cbz	r0, 80064ac <_printf_i+0x1ec>
 80064a8:	1b40      	subs	r0, r0, r5
 80064aa:	6060      	str	r0, [r4, #4]
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	2300      	movs	r3, #0
 80064b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b6:	e7aa      	b.n	800640e <_printf_i+0x14e>
 80064b8:	462a      	mov	r2, r5
 80064ba:	4649      	mov	r1, r9
 80064bc:	4640      	mov	r0, r8
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	47d0      	blx	sl
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0ad      	beq.n	8006422 <_printf_i+0x162>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	079b      	lsls	r3, r3, #30
 80064ca:	d413      	bmi.n	80064f4 <_printf_i+0x234>
 80064cc:	68e0      	ldr	r0, [r4, #12]
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	4298      	cmp	r0, r3
 80064d2:	bfb8      	it	lt
 80064d4:	4618      	movlt	r0, r3
 80064d6:	e7a6      	b.n	8006426 <_printf_i+0x166>
 80064d8:	2301      	movs	r3, #1
 80064da:	4632      	mov	r2, r6
 80064dc:	4649      	mov	r1, r9
 80064de:	4640      	mov	r0, r8
 80064e0:	47d0      	blx	sl
 80064e2:	3001      	adds	r0, #1
 80064e4:	d09d      	beq.n	8006422 <_printf_i+0x162>
 80064e6:	3501      	adds	r5, #1
 80064e8:	68e3      	ldr	r3, [r4, #12]
 80064ea:	9903      	ldr	r1, [sp, #12]
 80064ec:	1a5b      	subs	r3, r3, r1
 80064ee:	42ab      	cmp	r3, r5
 80064f0:	dcf2      	bgt.n	80064d8 <_printf_i+0x218>
 80064f2:	e7eb      	b.n	80064cc <_printf_i+0x20c>
 80064f4:	2500      	movs	r5, #0
 80064f6:	f104 0619 	add.w	r6, r4, #25
 80064fa:	e7f5      	b.n	80064e8 <_printf_i+0x228>
 80064fc:	080089c4 	.word	0x080089c4
 8006500:	080089d5 	.word	0x080089d5

08006504 <std>:
 8006504:	2300      	movs	r3, #0
 8006506:	b510      	push	{r4, lr}
 8006508:	4604      	mov	r4, r0
 800650a:	e9c0 3300 	strd	r3, r3, [r0]
 800650e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006512:	6083      	str	r3, [r0, #8]
 8006514:	8181      	strh	r1, [r0, #12]
 8006516:	6643      	str	r3, [r0, #100]	; 0x64
 8006518:	81c2      	strh	r2, [r0, #14]
 800651a:	6183      	str	r3, [r0, #24]
 800651c:	4619      	mov	r1, r3
 800651e:	2208      	movs	r2, #8
 8006520:	305c      	adds	r0, #92	; 0x5c
 8006522:	f000 f914 	bl	800674e <memset>
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <std+0x58>)
 8006528:	6224      	str	r4, [r4, #32]
 800652a:	6263      	str	r3, [r4, #36]	; 0x24
 800652c:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <std+0x5c>)
 800652e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <std+0x60>)
 8006532:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <std+0x64>)
 8006536:	6323      	str	r3, [r4, #48]	; 0x30
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <std+0x68>)
 800653a:	429c      	cmp	r4, r3
 800653c:	d006      	beq.n	800654c <std+0x48>
 800653e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006542:	4294      	cmp	r4, r2
 8006544:	d002      	beq.n	800654c <std+0x48>
 8006546:	33d0      	adds	r3, #208	; 0xd0
 8006548:	429c      	cmp	r4, r3
 800654a:	d105      	bne.n	8006558 <std+0x54>
 800654c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006554:	f000 b978 	b.w	8006848 <__retarget_lock_init_recursive>
 8006558:	bd10      	pop	{r4, pc}
 800655a:	bf00      	nop
 800655c:	080066c9 	.word	0x080066c9
 8006560:	080066eb 	.word	0x080066eb
 8006564:	08006723 	.word	0x08006723
 8006568:	08006747 	.word	0x08006747
 800656c:	200004b4 	.word	0x200004b4

08006570 <stdio_exit_handler>:
 8006570:	4a02      	ldr	r2, [pc, #8]	; (800657c <stdio_exit_handler+0xc>)
 8006572:	4903      	ldr	r1, [pc, #12]	; (8006580 <stdio_exit_handler+0x10>)
 8006574:	4803      	ldr	r0, [pc, #12]	; (8006584 <stdio_exit_handler+0x14>)
 8006576:	f000 b869 	b.w	800664c <_fwalk_sglue>
 800657a:	bf00      	nop
 800657c:	20000018 	.word	0x20000018
 8006580:	080081e5 	.word	0x080081e5
 8006584:	20000024 	.word	0x20000024

08006588 <cleanup_stdio>:
 8006588:	6841      	ldr	r1, [r0, #4]
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <cleanup_stdio+0x34>)
 800658c:	b510      	push	{r4, lr}
 800658e:	4299      	cmp	r1, r3
 8006590:	4604      	mov	r4, r0
 8006592:	d001      	beq.n	8006598 <cleanup_stdio+0x10>
 8006594:	f001 fe26 	bl	80081e4 <_fflush_r>
 8006598:	68a1      	ldr	r1, [r4, #8]
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <cleanup_stdio+0x38>)
 800659c:	4299      	cmp	r1, r3
 800659e:	d002      	beq.n	80065a6 <cleanup_stdio+0x1e>
 80065a0:	4620      	mov	r0, r4
 80065a2:	f001 fe1f 	bl	80081e4 <_fflush_r>
 80065a6:	68e1      	ldr	r1, [r4, #12]
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <cleanup_stdio+0x3c>)
 80065aa:	4299      	cmp	r1, r3
 80065ac:	d004      	beq.n	80065b8 <cleanup_stdio+0x30>
 80065ae:	4620      	mov	r0, r4
 80065b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b4:	f001 be16 	b.w	80081e4 <_fflush_r>
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	bf00      	nop
 80065bc:	200004b4 	.word	0x200004b4
 80065c0:	2000051c 	.word	0x2000051c
 80065c4:	20000584 	.word	0x20000584

080065c8 <global_stdio_init.part.0>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <global_stdio_init.part.0+0x30>)
 80065cc:	4c0b      	ldr	r4, [pc, #44]	; (80065fc <global_stdio_init.part.0+0x34>)
 80065ce:	4a0c      	ldr	r2, [pc, #48]	; (8006600 <global_stdio_init.part.0+0x38>)
 80065d0:	4620      	mov	r0, r4
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	2104      	movs	r1, #4
 80065d6:	2200      	movs	r2, #0
 80065d8:	f7ff ff94 	bl	8006504 <std>
 80065dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065e0:	2201      	movs	r2, #1
 80065e2:	2109      	movs	r1, #9
 80065e4:	f7ff ff8e 	bl	8006504 <std>
 80065e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065ec:	2202      	movs	r2, #2
 80065ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f2:	2112      	movs	r1, #18
 80065f4:	f7ff bf86 	b.w	8006504 <std>
 80065f8:	200005ec 	.word	0x200005ec
 80065fc:	200004b4 	.word	0x200004b4
 8006600:	08006571 	.word	0x08006571

08006604 <__sfp_lock_acquire>:
 8006604:	4801      	ldr	r0, [pc, #4]	; (800660c <__sfp_lock_acquire+0x8>)
 8006606:	f000 b920 	b.w	800684a <__retarget_lock_acquire_recursive>
 800660a:	bf00      	nop
 800660c:	200005f5 	.word	0x200005f5

08006610 <__sfp_lock_release>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__sfp_lock_release+0x8>)
 8006612:	f000 b91b 	b.w	800684c <__retarget_lock_release_recursive>
 8006616:	bf00      	nop
 8006618:	200005f5 	.word	0x200005f5

0800661c <__sinit>:
 800661c:	b510      	push	{r4, lr}
 800661e:	4604      	mov	r4, r0
 8006620:	f7ff fff0 	bl	8006604 <__sfp_lock_acquire>
 8006624:	6a23      	ldr	r3, [r4, #32]
 8006626:	b11b      	cbz	r3, 8006630 <__sinit+0x14>
 8006628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662c:	f7ff bff0 	b.w	8006610 <__sfp_lock_release>
 8006630:	4b04      	ldr	r3, [pc, #16]	; (8006644 <__sinit+0x28>)
 8006632:	6223      	str	r3, [r4, #32]
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <__sinit+0x2c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f5      	bne.n	8006628 <__sinit+0xc>
 800663c:	f7ff ffc4 	bl	80065c8 <global_stdio_init.part.0>
 8006640:	e7f2      	b.n	8006628 <__sinit+0xc>
 8006642:	bf00      	nop
 8006644:	08006589 	.word	0x08006589
 8006648:	200005ec 	.word	0x200005ec

0800664c <_fwalk_sglue>:
 800664c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006650:	4607      	mov	r7, r0
 8006652:	4688      	mov	r8, r1
 8006654:	4614      	mov	r4, r2
 8006656:	2600      	movs	r6, #0
 8006658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800665c:	f1b9 0901 	subs.w	r9, r9, #1
 8006660:	d505      	bpl.n	800666e <_fwalk_sglue+0x22>
 8006662:	6824      	ldr	r4, [r4, #0]
 8006664:	2c00      	cmp	r4, #0
 8006666:	d1f7      	bne.n	8006658 <_fwalk_sglue+0xc>
 8006668:	4630      	mov	r0, r6
 800666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d907      	bls.n	8006684 <_fwalk_sglue+0x38>
 8006674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006678:	3301      	adds	r3, #1
 800667a:	d003      	beq.n	8006684 <_fwalk_sglue+0x38>
 800667c:	4629      	mov	r1, r5
 800667e:	4638      	mov	r0, r7
 8006680:	47c0      	blx	r8
 8006682:	4306      	orrs	r6, r0
 8006684:	3568      	adds	r5, #104	; 0x68
 8006686:	e7e9      	b.n	800665c <_fwalk_sglue+0x10>

08006688 <siprintf>:
 8006688:	b40e      	push	{r1, r2, r3}
 800668a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800668e:	b500      	push	{lr}
 8006690:	b09c      	sub	sp, #112	; 0x70
 8006692:	ab1d      	add	r3, sp, #116	; 0x74
 8006694:	9002      	str	r0, [sp, #8]
 8006696:	9006      	str	r0, [sp, #24]
 8006698:	9107      	str	r1, [sp, #28]
 800669a:	9104      	str	r1, [sp, #16]
 800669c:	4808      	ldr	r0, [pc, #32]	; (80066c0 <siprintf+0x38>)
 800669e:	4909      	ldr	r1, [pc, #36]	; (80066c4 <siprintf+0x3c>)
 80066a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066a4:	9105      	str	r1, [sp, #20]
 80066a6:	6800      	ldr	r0, [r0, #0]
 80066a8:	a902      	add	r1, sp, #8
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	f001 fc1a 	bl	8007ee4 <_svfiprintf_r>
 80066b0:	2200      	movs	r2, #0
 80066b2:	9b02      	ldr	r3, [sp, #8]
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	b01c      	add	sp, #112	; 0x70
 80066b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066bc:	b003      	add	sp, #12
 80066be:	4770      	bx	lr
 80066c0:	20000070 	.word	0x20000070
 80066c4:	ffff0208 	.word	0xffff0208

080066c8 <__sread>:
 80066c8:	b510      	push	{r4, lr}
 80066ca:	460c      	mov	r4, r1
 80066cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d0:	f000 f86c 	bl	80067ac <_read_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	bfab      	itete	ge
 80066d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066da:	89a3      	ldrhlt	r3, [r4, #12]
 80066dc:	181b      	addge	r3, r3, r0
 80066de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066e2:	bfac      	ite	ge
 80066e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066e6:	81a3      	strhlt	r3, [r4, #12]
 80066e8:	bd10      	pop	{r4, pc}

080066ea <__swrite>:
 80066ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ee:	461f      	mov	r7, r3
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	4605      	mov	r5, r0
 80066f4:	05db      	lsls	r3, r3, #23
 80066f6:	460c      	mov	r4, r1
 80066f8:	4616      	mov	r6, r2
 80066fa:	d505      	bpl.n	8006708 <__swrite+0x1e>
 80066fc:	2302      	movs	r3, #2
 80066fe:	2200      	movs	r2, #0
 8006700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006704:	f000 f840 	bl	8006788 <_lseek_r>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	4632      	mov	r2, r6
 800670c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	4628      	mov	r0, r5
 8006714:	463b      	mov	r3, r7
 8006716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800671a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	f000 b857 	b.w	80067d0 <_write_r>

08006722 <__sseek>:
 8006722:	b510      	push	{r4, lr}
 8006724:	460c      	mov	r4, r1
 8006726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672a:	f000 f82d 	bl	8006788 <_lseek_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	bf15      	itete	ne
 8006734:	6560      	strne	r0, [r4, #84]	; 0x54
 8006736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800673a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800673e:	81a3      	strheq	r3, [r4, #12]
 8006740:	bf18      	it	ne
 8006742:	81a3      	strhne	r3, [r4, #12]
 8006744:	bd10      	pop	{r4, pc}

08006746 <__sclose>:
 8006746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674a:	f000 b80d 	b.w	8006768 <_close_r>

0800674e <memset>:
 800674e:	4603      	mov	r3, r0
 8006750:	4402      	add	r2, r0
 8006752:	4293      	cmp	r3, r2
 8006754:	d100      	bne.n	8006758 <memset+0xa>
 8006756:	4770      	bx	lr
 8006758:	f803 1b01 	strb.w	r1, [r3], #1
 800675c:	e7f9      	b.n	8006752 <memset+0x4>
	...

08006760 <_localeconv_r>:
 8006760:	4800      	ldr	r0, [pc, #0]	; (8006764 <_localeconv_r+0x4>)
 8006762:	4770      	bx	lr
 8006764:	20000164 	.word	0x20000164

08006768 <_close_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	2300      	movs	r3, #0
 800676c:	4d05      	ldr	r5, [pc, #20]	; (8006784 <_close_r+0x1c>)
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fb ff5a 	bl	800262c <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_close_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_close_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	200005f0 	.word	0x200005f0

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4604      	mov	r4, r0
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	2200      	movs	r2, #0
 8006792:	4d05      	ldr	r5, [pc, #20]	; (80067a8 <_lseek_r+0x20>)
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fb ff6c 	bl	8002674 <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	200005f0 	.word	0x200005f0

080067ac <_read_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4604      	mov	r4, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	2200      	movs	r2, #0
 80067b6:	4d05      	ldr	r5, [pc, #20]	; (80067cc <_read_r+0x20>)
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fb fefd 	bl	80025ba <_read>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_read_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_read_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	200005f0 	.word	0x200005f0

080067d0 <_write_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4604      	mov	r4, r0
 80067d4:	4608      	mov	r0, r1
 80067d6:	4611      	mov	r1, r2
 80067d8:	2200      	movs	r2, #0
 80067da:	4d05      	ldr	r5, [pc, #20]	; (80067f0 <_write_r+0x20>)
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	f7fb ff08 	bl	80025f4 <_write>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_write_r+0x1e>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_write_r+0x1e>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	200005f0 	.word	0x200005f0

080067f4 <__errno>:
 80067f4:	4b01      	ldr	r3, [pc, #4]	; (80067fc <__errno+0x8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000070 	.word	0x20000070

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	2600      	movs	r6, #0
 8006804:	4d0c      	ldr	r5, [pc, #48]	; (8006838 <__libc_init_array+0x38>)
 8006806:	4c0d      	ldr	r4, [pc, #52]	; (800683c <__libc_init_array+0x3c>)
 8006808:	1b64      	subs	r4, r4, r5
 800680a:	10a4      	asrs	r4, r4, #2
 800680c:	42a6      	cmp	r6, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	f002 f888 	bl	8008924 <_init>
 8006814:	2600      	movs	r6, #0
 8006816:	4d0a      	ldr	r5, [pc, #40]	; (8006840 <__libc_init_array+0x40>)
 8006818:	4c0a      	ldr	r4, [pc, #40]	; (8006844 <__libc_init_array+0x44>)
 800681a:	1b64      	subs	r4, r4, r5
 800681c:	10a4      	asrs	r4, r4, #2
 800681e:	42a6      	cmp	r6, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f855 3b04 	ldr.w	r3, [r5], #4
 8006828:	4798      	blx	r3
 800682a:	3601      	adds	r6, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006832:	4798      	blx	r3
 8006834:	3601      	adds	r6, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	08008d24 	.word	0x08008d24
 800683c:	08008d24 	.word	0x08008d24
 8006840:	08008d24 	.word	0x08008d24
 8006844:	08008d28 	.word	0x08008d28

08006848 <__retarget_lock_init_recursive>:
 8006848:	4770      	bx	lr

0800684a <__retarget_lock_acquire_recursive>:
 800684a:	4770      	bx	lr

0800684c <__retarget_lock_release_recursive>:
 800684c:	4770      	bx	lr

0800684e <memchr>:
 800684e:	4603      	mov	r3, r0
 8006850:	b510      	push	{r4, lr}
 8006852:	b2c9      	uxtb	r1, r1
 8006854:	4402      	add	r2, r0
 8006856:	4293      	cmp	r3, r2
 8006858:	4618      	mov	r0, r3
 800685a:	d101      	bne.n	8006860 <memchr+0x12>
 800685c:	2000      	movs	r0, #0
 800685e:	e003      	b.n	8006868 <memchr+0x1a>
 8006860:	7804      	ldrb	r4, [r0, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	428c      	cmp	r4, r1
 8006866:	d1f6      	bne.n	8006856 <memchr+0x8>
 8006868:	bd10      	pop	{r4, pc}

0800686a <quorem>:
 800686a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686e:	6903      	ldr	r3, [r0, #16]
 8006870:	690c      	ldr	r4, [r1, #16]
 8006872:	4607      	mov	r7, r0
 8006874:	42a3      	cmp	r3, r4
 8006876:	db7f      	blt.n	8006978 <quorem+0x10e>
 8006878:	3c01      	subs	r4, #1
 800687a:	f100 0514 	add.w	r5, r0, #20
 800687e:	f101 0814 	add.w	r8, r1, #20
 8006882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800688c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006890:	3301      	adds	r3, #1
 8006892:	429a      	cmp	r2, r3
 8006894:	fbb2 f6f3 	udiv	r6, r2, r3
 8006898:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800689c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068a0:	d331      	bcc.n	8006906 <quorem+0x9c>
 80068a2:	f04f 0e00 	mov.w	lr, #0
 80068a6:	4640      	mov	r0, r8
 80068a8:	46ac      	mov	ip, r5
 80068aa:	46f2      	mov	sl, lr
 80068ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80068b0:	b293      	uxth	r3, r2
 80068b2:	fb06 e303 	mla	r3, r6, r3, lr
 80068b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068ba:	0c1a      	lsrs	r2, r3, #16
 80068bc:	b29b      	uxth	r3, r3
 80068be:	fb06 220e 	mla	r2, r6, lr, r2
 80068c2:	ebaa 0303 	sub.w	r3, sl, r3
 80068c6:	f8dc a000 	ldr.w	sl, [ip]
 80068ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068ce:	fa1f fa8a 	uxth.w	sl, sl
 80068d2:	4453      	add	r3, sl
 80068d4:	f8dc a000 	ldr.w	sl, [ip]
 80068d8:	b292      	uxth	r2, r2
 80068da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068e8:	4581      	cmp	r9, r0
 80068ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068ee:	f84c 3b04 	str.w	r3, [ip], #4
 80068f2:	d2db      	bcs.n	80068ac <quorem+0x42>
 80068f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80068f8:	b92b      	cbnz	r3, 8006906 <quorem+0x9c>
 80068fa:	9b01      	ldr	r3, [sp, #4]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	429d      	cmp	r5, r3
 8006900:	461a      	mov	r2, r3
 8006902:	d32d      	bcc.n	8006960 <quorem+0xf6>
 8006904:	613c      	str	r4, [r7, #16]
 8006906:	4638      	mov	r0, r7
 8006908:	f001 f994 	bl	8007c34 <__mcmp>
 800690c:	2800      	cmp	r0, #0
 800690e:	db23      	blt.n	8006958 <quorem+0xee>
 8006910:	4629      	mov	r1, r5
 8006912:	2000      	movs	r0, #0
 8006914:	3601      	adds	r6, #1
 8006916:	f858 2b04 	ldr.w	r2, [r8], #4
 800691a:	f8d1 c000 	ldr.w	ip, [r1]
 800691e:	b293      	uxth	r3, r2
 8006920:	1ac3      	subs	r3, r0, r3
 8006922:	0c12      	lsrs	r2, r2, #16
 8006924:	fa1f f08c 	uxth.w	r0, ip
 8006928:	4403      	add	r3, r0
 800692a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800692e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006932:	b29b      	uxth	r3, r3
 8006934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006938:	45c1      	cmp	r9, r8
 800693a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800693e:	f841 3b04 	str.w	r3, [r1], #4
 8006942:	d2e8      	bcs.n	8006916 <quorem+0xac>
 8006944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006948:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800694c:	b922      	cbnz	r2, 8006958 <quorem+0xee>
 800694e:	3b04      	subs	r3, #4
 8006950:	429d      	cmp	r5, r3
 8006952:	461a      	mov	r2, r3
 8006954:	d30a      	bcc.n	800696c <quorem+0x102>
 8006956:	613c      	str	r4, [r7, #16]
 8006958:	4630      	mov	r0, r6
 800695a:	b003      	add	sp, #12
 800695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	3b04      	subs	r3, #4
 8006964:	2a00      	cmp	r2, #0
 8006966:	d1cd      	bne.n	8006904 <quorem+0x9a>
 8006968:	3c01      	subs	r4, #1
 800696a:	e7c8      	b.n	80068fe <quorem+0x94>
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	3b04      	subs	r3, #4
 8006970:	2a00      	cmp	r2, #0
 8006972:	d1f0      	bne.n	8006956 <quorem+0xec>
 8006974:	3c01      	subs	r4, #1
 8006976:	e7eb      	b.n	8006950 <quorem+0xe6>
 8006978:	2000      	movs	r0, #0
 800697a:	e7ee      	b.n	800695a <quorem+0xf0>
 800697c:	0000      	movs	r0, r0
	...

08006980 <_dtoa_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	4616      	mov	r6, r2
 8006986:	461f      	mov	r7, r3
 8006988:	69c4      	ldr	r4, [r0, #28]
 800698a:	b099      	sub	sp, #100	; 0x64
 800698c:	4605      	mov	r5, r0
 800698e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006992:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006996:	b974      	cbnz	r4, 80069b6 <_dtoa_r+0x36>
 8006998:	2010      	movs	r0, #16
 800699a:	f000 fe1d 	bl	80075d8 <malloc>
 800699e:	4602      	mov	r2, r0
 80069a0:	61e8      	str	r0, [r5, #28]
 80069a2:	b920      	cbnz	r0, 80069ae <_dtoa_r+0x2e>
 80069a4:	21ef      	movs	r1, #239	; 0xef
 80069a6:	4bac      	ldr	r3, [pc, #688]	; (8006c58 <_dtoa_r+0x2d8>)
 80069a8:	48ac      	ldr	r0, [pc, #688]	; (8006c5c <_dtoa_r+0x2dc>)
 80069aa:	f001 fc7b 	bl	80082a4 <__assert_func>
 80069ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069b2:	6004      	str	r4, [r0, #0]
 80069b4:	60c4      	str	r4, [r0, #12]
 80069b6:	69eb      	ldr	r3, [r5, #28]
 80069b8:	6819      	ldr	r1, [r3, #0]
 80069ba:	b151      	cbz	r1, 80069d2 <_dtoa_r+0x52>
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	2301      	movs	r3, #1
 80069c0:	4093      	lsls	r3, r2
 80069c2:	604a      	str	r2, [r1, #4]
 80069c4:	608b      	str	r3, [r1, #8]
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 fefa 	bl	80077c0 <_Bfree>
 80069cc:	2200      	movs	r2, #0
 80069ce:	69eb      	ldr	r3, [r5, #28]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	1e3b      	subs	r3, r7, #0
 80069d4:	bfaf      	iteee	ge
 80069d6:	2300      	movge	r3, #0
 80069d8:	2201      	movlt	r2, #1
 80069da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069de:	9305      	strlt	r3, [sp, #20]
 80069e0:	bfa8      	it	ge
 80069e2:	f8c8 3000 	strge.w	r3, [r8]
 80069e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80069ea:	4b9d      	ldr	r3, [pc, #628]	; (8006c60 <_dtoa_r+0x2e0>)
 80069ec:	bfb8      	it	lt
 80069ee:	f8c8 2000 	strlt.w	r2, [r8]
 80069f2:	ea33 0309 	bics.w	r3, r3, r9
 80069f6:	d119      	bne.n	8006a2c <_dtoa_r+0xac>
 80069f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80069fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a04:	4333      	orrs	r3, r6
 8006a06:	f000 8589 	beq.w	800751c <_dtoa_r+0xb9c>
 8006a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a0c:	b953      	cbnz	r3, 8006a24 <_dtoa_r+0xa4>
 8006a0e:	4b95      	ldr	r3, [pc, #596]	; (8006c64 <_dtoa_r+0x2e4>)
 8006a10:	e023      	b.n	8006a5a <_dtoa_r+0xda>
 8006a12:	4b95      	ldr	r3, [pc, #596]	; (8006c68 <_dtoa_r+0x2e8>)
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	3308      	adds	r3, #8
 8006a18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	9803      	ldr	r0, [sp, #12]
 8006a1e:	b019      	add	sp, #100	; 0x64
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	4b8f      	ldr	r3, [pc, #572]	; (8006c64 <_dtoa_r+0x2e4>)
 8006a26:	9303      	str	r3, [sp, #12]
 8006a28:	3303      	adds	r3, #3
 8006a2a:	e7f5      	b.n	8006a18 <_dtoa_r+0x98>
 8006a2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006a34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f7f9 ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006a40:	4680      	mov	r8, r0
 8006a42:	b160      	cbz	r0, 8006a5e <_dtoa_r+0xde>
 8006a44:	2301      	movs	r3, #1
 8006a46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8562 	beq.w	8007516 <_dtoa_r+0xb96>
 8006a52:	4b86      	ldr	r3, [pc, #536]	; (8006c6c <_dtoa_r+0x2ec>)
 8006a54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	9303      	str	r3, [sp, #12]
 8006a5c:	e7de      	b.n	8006a1c <_dtoa_r+0x9c>
 8006a5e:	ab16      	add	r3, sp, #88	; 0x58
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	ab17      	add	r3, sp, #92	; 0x5c
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4628      	mov	r0, r5
 8006a68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a6c:	f001 f98a 	bl	8007d84 <__d2b>
 8006a70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006a74:	4682      	mov	sl, r0
 8006a76:	2c00      	cmp	r4, #0
 8006a78:	d07e      	beq.n	8006b78 <_dtoa_r+0x1f8>
 8006a7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a88:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a90:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006a94:	4619      	mov	r1, r3
 8006a96:	2200      	movs	r2, #0
 8006a98:	4b75      	ldr	r3, [pc, #468]	; (8006c70 <_dtoa_r+0x2f0>)
 8006a9a:	f7f9 fb65 	bl	8000168 <__aeabi_dsub>
 8006a9e:	a368      	add	r3, pc, #416	; (adr r3, 8006c40 <_dtoa_r+0x2c0>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fd18 	bl	80004d8 <__aeabi_dmul>
 8006aa8:	a367      	add	r3, pc, #412	; (adr r3, 8006c48 <_dtoa_r+0x2c8>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f7f9 fb5d 	bl	800016c <__adddf3>
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	f7f9 fca4 	bl	8000404 <__aeabi_i2d>
 8006abc:	a364      	add	r3, pc, #400	; (adr r3, 8006c50 <_dtoa_r+0x2d0>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fd09 	bl	80004d8 <__aeabi_dmul>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4630      	mov	r0, r6
 8006acc:	4639      	mov	r1, r7
 8006ace:	f7f9 fb4d 	bl	800016c <__adddf3>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	460f      	mov	r7, r1
 8006ad6:	f7f9 ffaf 	bl	8000a38 <__aeabi_d2iz>
 8006ada:	2200      	movs	r2, #0
 8006adc:	4683      	mov	fp, r0
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7f9 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8006ae8:	b148      	cbz	r0, 8006afe <_dtoa_r+0x17e>
 8006aea:	4658      	mov	r0, fp
 8006aec:	f7f9 fc8a 	bl	8000404 <__aeabi_i2d>
 8006af0:	4632      	mov	r2, r6
 8006af2:	463b      	mov	r3, r7
 8006af4:	f7f9 ff58 	bl	80009a8 <__aeabi_dcmpeq>
 8006af8:	b908      	cbnz	r0, 8006afe <_dtoa_r+0x17e>
 8006afa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006afe:	f1bb 0f16 	cmp.w	fp, #22
 8006b02:	d857      	bhi.n	8006bb4 <_dtoa_r+0x234>
 8006b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b08:	4b5a      	ldr	r3, [pc, #360]	; (8006c74 <_dtoa_r+0x2f4>)
 8006b0a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f7f9 ff53 	bl	80009bc <__aeabi_dcmplt>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d04e      	beq.n	8006bb8 <_dtoa_r+0x238>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b24:	1b1b      	subs	r3, r3, r4
 8006b26:	1e5a      	subs	r2, r3, #1
 8006b28:	bf46      	itte	mi
 8006b2a:	f1c3 0901 	rsbmi	r9, r3, #1
 8006b2e:	2300      	movmi	r3, #0
 8006b30:	f04f 0900 	movpl.w	r9, #0
 8006b34:	9209      	str	r2, [sp, #36]	; 0x24
 8006b36:	bf48      	it	mi
 8006b38:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006b3a:	f1bb 0f00 	cmp.w	fp, #0
 8006b3e:	db3d      	blt.n	8006bbc <_dtoa_r+0x23c>
 8006b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b42:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006b46:	445b      	add	r3, fp
 8006b48:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b50:	2b09      	cmp	r3, #9
 8006b52:	d867      	bhi.n	8006c24 <_dtoa_r+0x2a4>
 8006b54:	2b05      	cmp	r3, #5
 8006b56:	bfc4      	itt	gt
 8006b58:	3b04      	subgt	r3, #4
 8006b5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b5e:	bfc8      	it	gt
 8006b60:	2400      	movgt	r4, #0
 8006b62:	f1a3 0302 	sub.w	r3, r3, #2
 8006b66:	bfd8      	it	le
 8006b68:	2401      	movle	r4, #1
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	f200 8086 	bhi.w	8006c7c <_dtoa_r+0x2fc>
 8006b70:	e8df f003 	tbb	[pc, r3]
 8006b74:	5637392c 	.word	0x5637392c
 8006b78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006b7c:	441c      	add	r4, r3
 8006b7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	bfc1      	itttt	gt
 8006b86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b8a:	fa09 f903 	lslgt.w	r9, r9, r3
 8006b8e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006b92:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006b96:	bfd6      	itet	le
 8006b98:	f1c3 0320 	rsble	r3, r3, #32
 8006b9c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006ba0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ba4:	f7f9 fc1e 	bl	80003e4 <__aeabi_ui2d>
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bae:	3c01      	subs	r4, #1
 8006bb0:	9213      	str	r2, [sp, #76]	; 0x4c
 8006bb2:	e76f      	b.n	8006a94 <_dtoa_r+0x114>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e7b3      	b.n	8006b20 <_dtoa_r+0x1a0>
 8006bb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006bba:	e7b2      	b.n	8006b22 <_dtoa_r+0x1a2>
 8006bbc:	f1cb 0300 	rsb	r3, fp, #0
 8006bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	eba9 090b 	sub.w	r9, r9, fp
 8006bc8:	930e      	str	r3, [sp, #56]	; 0x38
 8006bca:	e7c0      	b.n	8006b4e <_dtoa_r+0x1ce>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	dc55      	bgt.n	8006c82 <_dtoa_r+0x302>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	461a      	mov	r2, r3
 8006bda:	9306      	str	r3, [sp, #24]
 8006bdc:	9308      	str	r3, [sp, #32]
 8006bde:	9223      	str	r2, [sp, #140]	; 0x8c
 8006be0:	e00b      	b.n	8006bfa <_dtoa_r+0x27a>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e7f3      	b.n	8006bce <_dtoa_r+0x24e>
 8006be6:	2300      	movs	r3, #0
 8006be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bec:	445b      	add	r3, fp
 8006bee:	9306      	str	r3, [sp, #24]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	9308      	str	r3, [sp, #32]
 8006bf6:	bfb8      	it	lt
 8006bf8:	2301      	movlt	r3, #1
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	69e8      	ldr	r0, [r5, #28]
 8006c00:	f102 0614 	add.w	r6, r2, #20
 8006c04:	429e      	cmp	r6, r3
 8006c06:	d940      	bls.n	8006c8a <_dtoa_r+0x30a>
 8006c08:	6041      	str	r1, [r0, #4]
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 fd98 	bl	8007740 <_Balloc>
 8006c10:	9003      	str	r0, [sp, #12]
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d13c      	bne.n	8006c90 <_dtoa_r+0x310>
 8006c16:	4602      	mov	r2, r0
 8006c18:	f240 11af 	movw	r1, #431	; 0x1af
 8006c1c:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <_dtoa_r+0x2f8>)
 8006c1e:	e6c3      	b.n	80069a8 <_dtoa_r+0x28>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e7e1      	b.n	8006be8 <_dtoa_r+0x268>
 8006c24:	2401      	movs	r4, #1
 8006c26:	2300      	movs	r3, #0
 8006c28:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c2a:	9322      	str	r3, [sp, #136]	; 0x88
 8006c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c30:	2200      	movs	r2, #0
 8006c32:	9306      	str	r3, [sp, #24]
 8006c34:	9308      	str	r3, [sp, #32]
 8006c36:	2312      	movs	r3, #18
 8006c38:	e7d1      	b.n	8006bde <_dtoa_r+0x25e>
 8006c3a:	bf00      	nop
 8006c3c:	f3af 8000 	nop.w
 8006c40:	636f4361 	.word	0x636f4361
 8006c44:	3fd287a7 	.word	0x3fd287a7
 8006c48:	8b60c8b3 	.word	0x8b60c8b3
 8006c4c:	3fc68a28 	.word	0x3fc68a28
 8006c50:	509f79fb 	.word	0x509f79fb
 8006c54:	3fd34413 	.word	0x3fd34413
 8006c58:	080089f3 	.word	0x080089f3
 8006c5c:	08008a0a 	.word	0x08008a0a
 8006c60:	7ff00000 	.word	0x7ff00000
 8006c64:	080089ef 	.word	0x080089ef
 8006c68:	080089e6 	.word	0x080089e6
 8006c6c:	080089c3 	.word	0x080089c3
 8006c70:	3ff80000 	.word	0x3ff80000
 8006c74:	08008af8 	.word	0x08008af8
 8006c78:	08008a62 	.word	0x08008a62
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c80:	e7d4      	b.n	8006c2c <_dtoa_r+0x2ac>
 8006c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c84:	9306      	str	r3, [sp, #24]
 8006c86:	9308      	str	r3, [sp, #32]
 8006c88:	e7b7      	b.n	8006bfa <_dtoa_r+0x27a>
 8006c8a:	3101      	adds	r1, #1
 8006c8c:	0052      	lsls	r2, r2, #1
 8006c8e:	e7b7      	b.n	8006c00 <_dtoa_r+0x280>
 8006c90:	69eb      	ldr	r3, [r5, #28]
 8006c92:	9a03      	ldr	r2, [sp, #12]
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	9b08      	ldr	r3, [sp, #32]
 8006c98:	2b0e      	cmp	r3, #14
 8006c9a:	f200 80a8 	bhi.w	8006dee <_dtoa_r+0x46e>
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	f000 80a5 	beq.w	8006dee <_dtoa_r+0x46e>
 8006ca4:	f1bb 0f00 	cmp.w	fp, #0
 8006ca8:	dd34      	ble.n	8006d14 <_dtoa_r+0x394>
 8006caa:	4b9a      	ldr	r3, [pc, #616]	; (8006f14 <_dtoa_r+0x594>)
 8006cac:	f00b 020f 	and.w	r2, fp, #15
 8006cb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cbc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cc0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006cc4:	d016      	beq.n	8006cf4 <_dtoa_r+0x374>
 8006cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cca:	4b93      	ldr	r3, [pc, #588]	; (8006f18 <_dtoa_r+0x598>)
 8006ccc:	2703      	movs	r7, #3
 8006cce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cd2:	f7f9 fd2b 	bl	800072c <__aeabi_ddiv>
 8006cd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cda:	f004 040f 	and.w	r4, r4, #15
 8006cde:	4e8e      	ldr	r6, [pc, #568]	; (8006f18 <_dtoa_r+0x598>)
 8006ce0:	b954      	cbnz	r4, 8006cf8 <_dtoa_r+0x378>
 8006ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cea:	f7f9 fd1f 	bl	800072c <__aeabi_ddiv>
 8006cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cf2:	e029      	b.n	8006d48 <_dtoa_r+0x3c8>
 8006cf4:	2702      	movs	r7, #2
 8006cf6:	e7f2      	b.n	8006cde <_dtoa_r+0x35e>
 8006cf8:	07e1      	lsls	r1, r4, #31
 8006cfa:	d508      	bpl.n	8006d0e <_dtoa_r+0x38e>
 8006cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d04:	f7f9 fbe8 	bl	80004d8 <__aeabi_dmul>
 8006d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d0c:	3701      	adds	r7, #1
 8006d0e:	1064      	asrs	r4, r4, #1
 8006d10:	3608      	adds	r6, #8
 8006d12:	e7e5      	b.n	8006ce0 <_dtoa_r+0x360>
 8006d14:	f000 80a5 	beq.w	8006e62 <_dtoa_r+0x4e2>
 8006d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d1c:	f1cb 0400 	rsb	r4, fp, #0
 8006d20:	4b7c      	ldr	r3, [pc, #496]	; (8006f14 <_dtoa_r+0x594>)
 8006d22:	f004 020f 	and.w	r2, r4, #15
 8006d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fbd3 	bl	80004d8 <__aeabi_dmul>
 8006d32:	2702      	movs	r7, #2
 8006d34:	2300      	movs	r3, #0
 8006d36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d3a:	4e77      	ldr	r6, [pc, #476]	; (8006f18 <_dtoa_r+0x598>)
 8006d3c:	1124      	asrs	r4, r4, #4
 8006d3e:	2c00      	cmp	r4, #0
 8006d40:	f040 8084 	bne.w	8006e4c <_dtoa_r+0x4cc>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1d2      	bne.n	8006cee <_dtoa_r+0x36e>
 8006d48:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8087 	beq.w	8006e66 <_dtoa_r+0x4e6>
 8006d58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4b6f      	ldr	r3, [pc, #444]	; (8006f1c <_dtoa_r+0x59c>)
 8006d60:	f7f9 fe2c 	bl	80009bc <__aeabi_dcmplt>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d07e      	beq.n	8006e66 <_dtoa_r+0x4e6>
 8006d68:	9b08      	ldr	r3, [sp, #32]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d07b      	beq.n	8006e66 <_dtoa_r+0x4e6>
 8006d6e:	9b06      	ldr	r3, [sp, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dd38      	ble.n	8006de6 <_dtoa_r+0x466>
 8006d74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <_dtoa_r+0x5a0>)
 8006d7c:	f7f9 fbac 	bl	80004d8 <__aeabi_dmul>
 8006d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d84:	9c06      	ldr	r4, [sp, #24]
 8006d86:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006d8a:	3701      	adds	r7, #1
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f7f9 fb39 	bl	8000404 <__aeabi_i2d>
 8006d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d96:	f7f9 fb9f 	bl	80004d8 <__aeabi_dmul>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4b61      	ldr	r3, [pc, #388]	; (8006f24 <_dtoa_r+0x5a4>)
 8006d9e:	f7f9 f9e5 	bl	800016c <__adddf3>
 8006da2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006daa:	9611      	str	r6, [sp, #68]	; 0x44
 8006dac:	2c00      	cmp	r4, #0
 8006dae:	d15d      	bne.n	8006e6c <_dtoa_r+0x4ec>
 8006db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db4:	2200      	movs	r2, #0
 8006db6:	4b5c      	ldr	r3, [pc, #368]	; (8006f28 <_dtoa_r+0x5a8>)
 8006db8:	f7f9 f9d6 	bl	8000168 <__aeabi_dsub>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dc4:	4633      	mov	r3, r6
 8006dc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dc8:	f7f9 fe16 	bl	80009f8 <__aeabi_dcmpgt>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	f040 8295 	bne.w	80072fc <_dtoa_r+0x97c>
 8006dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ddc:	f7f9 fdee 	bl	80009bc <__aeabi_dcmplt>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f040 8289 	bne.w	80072f8 <_dtoa_r+0x978>
 8006de6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006dea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006dee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f2c0 8151 	blt.w	8007098 <_dtoa_r+0x718>
 8006df6:	f1bb 0f0e 	cmp.w	fp, #14
 8006dfa:	f300 814d 	bgt.w	8007098 <_dtoa_r+0x718>
 8006dfe:	4b45      	ldr	r3, [pc, #276]	; (8006f14 <_dtoa_r+0x594>)
 8006e00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f280 80da 	bge.w	8006fc8 <_dtoa_r+0x648>
 8006e14:	9b08      	ldr	r3, [sp, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f300 80d6 	bgt.w	8006fc8 <_dtoa_r+0x648>
 8006e1c:	f040 826b 	bne.w	80072f6 <_dtoa_r+0x976>
 8006e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e24:	2200      	movs	r2, #0
 8006e26:	4b40      	ldr	r3, [pc, #256]	; (8006f28 <_dtoa_r+0x5a8>)
 8006e28:	f7f9 fb56 	bl	80004d8 <__aeabi_dmul>
 8006e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e30:	f7f9 fdd8 	bl	80009e4 <__aeabi_dcmpge>
 8006e34:	9c08      	ldr	r4, [sp, #32]
 8006e36:	4626      	mov	r6, r4
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f040 8241 	bne.w	80072c0 <_dtoa_r+0x940>
 8006e3e:	2331      	movs	r3, #49	; 0x31
 8006e40:	9f03      	ldr	r7, [sp, #12]
 8006e42:	f10b 0b01 	add.w	fp, fp, #1
 8006e46:	f807 3b01 	strb.w	r3, [r7], #1
 8006e4a:	e23d      	b.n	80072c8 <_dtoa_r+0x948>
 8006e4c:	07e2      	lsls	r2, r4, #31
 8006e4e:	d505      	bpl.n	8006e5c <_dtoa_r+0x4dc>
 8006e50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e54:	f7f9 fb40 	bl	80004d8 <__aeabi_dmul>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	3701      	adds	r7, #1
 8006e5c:	1064      	asrs	r4, r4, #1
 8006e5e:	3608      	adds	r6, #8
 8006e60:	e76d      	b.n	8006d3e <_dtoa_r+0x3be>
 8006e62:	2702      	movs	r7, #2
 8006e64:	e770      	b.n	8006d48 <_dtoa_r+0x3c8>
 8006e66:	46d8      	mov	r8, fp
 8006e68:	9c08      	ldr	r4, [sp, #32]
 8006e6a:	e78f      	b.n	8006d8c <_dtoa_r+0x40c>
 8006e6c:	9903      	ldr	r1, [sp, #12]
 8006e6e:	4b29      	ldr	r3, [pc, #164]	; (8006f14 <_dtoa_r+0x594>)
 8006e70:	4421      	add	r1, r4
 8006e72:	9112      	str	r1, [sp, #72]	; 0x48
 8006e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e7a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d054      	beq.n	8006f30 <_dtoa_r+0x5b0>
 8006e86:	2000      	movs	r0, #0
 8006e88:	4928      	ldr	r1, [pc, #160]	; (8006f2c <_dtoa_r+0x5ac>)
 8006e8a:	f7f9 fc4f 	bl	800072c <__aeabi_ddiv>
 8006e8e:	463b      	mov	r3, r7
 8006e90:	4632      	mov	r2, r6
 8006e92:	f7f9 f969 	bl	8000168 <__aeabi_dsub>
 8006e96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e9a:	9f03      	ldr	r7, [sp, #12]
 8006e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ea0:	f7f9 fdca 	bl	8000a38 <__aeabi_d2iz>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	f7f9 faad 	bl	8000404 <__aeabi_i2d>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb2:	f7f9 f959 	bl	8000168 <__aeabi_dsub>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	3430      	adds	r4, #48	; 0x30
 8006ebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ec4:	f807 4b01 	strb.w	r4, [r7], #1
 8006ec8:	f7f9 fd78 	bl	80009bc <__aeabi_dcmplt>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d173      	bne.n	8006fb8 <_dtoa_r+0x638>
 8006ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	4911      	ldr	r1, [pc, #68]	; (8006f1c <_dtoa_r+0x59c>)
 8006ed8:	f7f9 f946 	bl	8000168 <__aeabi_dsub>
 8006edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ee0:	f7f9 fd6c 	bl	80009bc <__aeabi_dcmplt>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f040 80b6 	bne.w	8007056 <_dtoa_r+0x6d6>
 8006eea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eec:	429f      	cmp	r7, r3
 8006eee:	f43f af7a 	beq.w	8006de6 <_dtoa_r+0x466>
 8006ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <_dtoa_r+0x5a0>)
 8006efa:	f7f9 faed 	bl	80004d8 <__aeabi_dmul>
 8006efe:	2200      	movs	r2, #0
 8006f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <_dtoa_r+0x5a0>)
 8006f0a:	f7f9 fae5 	bl	80004d8 <__aeabi_dmul>
 8006f0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f12:	e7c3      	b.n	8006e9c <_dtoa_r+0x51c>
 8006f14:	08008af8 	.word	0x08008af8
 8006f18:	08008ad0 	.word	0x08008ad0
 8006f1c:	3ff00000 	.word	0x3ff00000
 8006f20:	40240000 	.word	0x40240000
 8006f24:	401c0000 	.word	0x401c0000
 8006f28:	40140000 	.word	0x40140000
 8006f2c:	3fe00000 	.word	0x3fe00000
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 fad0 	bl	80004d8 <__aeabi_dmul>
 8006f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f3e:	9c03      	ldr	r4, [sp, #12]
 8006f40:	9314      	str	r3, [sp, #80]	; 0x50
 8006f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f46:	f7f9 fd77 	bl	8000a38 <__aeabi_d2iz>
 8006f4a:	9015      	str	r0, [sp, #84]	; 0x54
 8006f4c:	f7f9 fa5a 	bl	8000404 <__aeabi_i2d>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f58:	f7f9 f906 	bl	8000168 <__aeabi_dsub>
 8006f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f5e:	4606      	mov	r6, r0
 8006f60:	3330      	adds	r3, #48	; 0x30
 8006f62:	f804 3b01 	strb.w	r3, [r4], #1
 8006f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f68:	460f      	mov	r7, r1
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	d124      	bne.n	8006fbc <_dtoa_r+0x63c>
 8006f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f76:	4baf      	ldr	r3, [pc, #700]	; (8007234 <_dtoa_r+0x8b4>)
 8006f78:	f7f9 f8f8 	bl	800016c <__adddf3>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	f7f9 fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d163      	bne.n	8007054 <_dtoa_r+0x6d4>
 8006f8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f90:	2000      	movs	r0, #0
 8006f92:	49a8      	ldr	r1, [pc, #672]	; (8007234 <_dtoa_r+0x8b4>)
 8006f94:	f7f9 f8e8 	bl	8000168 <__aeabi_dsub>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 fd0c 	bl	80009bc <__aeabi_dcmplt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f43f af1e 	beq.w	8006de6 <_dtoa_r+0x466>
 8006faa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006fac:	1e7b      	subs	r3, r7, #1
 8006fae:	9314      	str	r3, [sp, #80]	; 0x50
 8006fb0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006fb4:	2b30      	cmp	r3, #48	; 0x30
 8006fb6:	d0f8      	beq.n	8006faa <_dtoa_r+0x62a>
 8006fb8:	46c3      	mov	fp, r8
 8006fba:	e03b      	b.n	8007034 <_dtoa_r+0x6b4>
 8006fbc:	4b9e      	ldr	r3, [pc, #632]	; (8007238 <_dtoa_r+0x8b8>)
 8006fbe:	f7f9 fa8b 	bl	80004d8 <__aeabi_dmul>
 8006fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc6:	e7bc      	b.n	8006f42 <_dtoa_r+0x5c2>
 8006fc8:	9f03      	ldr	r7, [sp, #12]
 8006fca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006fce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 fba9 	bl	800072c <__aeabi_ddiv>
 8006fda:	f7f9 fd2d 	bl	8000a38 <__aeabi_d2iz>
 8006fde:	4604      	mov	r4, r0
 8006fe0:	f7f9 fa10 	bl	8000404 <__aeabi_i2d>
 8006fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fe8:	f7f9 fa76 	bl	80004d8 <__aeabi_dmul>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 f8b8 	bl	8000168 <__aeabi_dsub>
 8006ff8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ffc:	f807 6b01 	strb.w	r6, [r7], #1
 8007000:	9e03      	ldr	r6, [sp, #12]
 8007002:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007006:	1bbe      	subs	r6, r7, r6
 8007008:	45b4      	cmp	ip, r6
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	d136      	bne.n	800707e <_dtoa_r+0x6fe>
 8007010:	f7f9 f8ac 	bl	800016c <__adddf3>
 8007014:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007018:	4680      	mov	r8, r0
 800701a:	4689      	mov	r9, r1
 800701c:	f7f9 fcec 	bl	80009f8 <__aeabi_dcmpgt>
 8007020:	bb58      	cbnz	r0, 800707a <_dtoa_r+0x6fa>
 8007022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007026:	4640      	mov	r0, r8
 8007028:	4649      	mov	r1, r9
 800702a:	f7f9 fcbd 	bl	80009a8 <__aeabi_dcmpeq>
 800702e:	b108      	cbz	r0, 8007034 <_dtoa_r+0x6b4>
 8007030:	07e3      	lsls	r3, r4, #31
 8007032:	d422      	bmi.n	800707a <_dtoa_r+0x6fa>
 8007034:	4651      	mov	r1, sl
 8007036:	4628      	mov	r0, r5
 8007038:	f000 fbc2 	bl	80077c0 <_Bfree>
 800703c:	2300      	movs	r3, #0
 800703e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007040:	703b      	strb	r3, [r7, #0]
 8007042:	f10b 0301 	add.w	r3, fp, #1
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800704a:	2b00      	cmp	r3, #0
 800704c:	f43f ace6 	beq.w	8006a1c <_dtoa_r+0x9c>
 8007050:	601f      	str	r7, [r3, #0]
 8007052:	e4e3      	b.n	8006a1c <_dtoa_r+0x9c>
 8007054:	4627      	mov	r7, r4
 8007056:	463b      	mov	r3, r7
 8007058:	461f      	mov	r7, r3
 800705a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800705e:	2a39      	cmp	r2, #57	; 0x39
 8007060:	d107      	bne.n	8007072 <_dtoa_r+0x6f2>
 8007062:	9a03      	ldr	r2, [sp, #12]
 8007064:	429a      	cmp	r2, r3
 8007066:	d1f7      	bne.n	8007058 <_dtoa_r+0x6d8>
 8007068:	2230      	movs	r2, #48	; 0x30
 800706a:	9903      	ldr	r1, [sp, #12]
 800706c:	f108 0801 	add.w	r8, r8, #1
 8007070:	700a      	strb	r2, [r1, #0]
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	3201      	adds	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e79e      	b.n	8006fb8 <_dtoa_r+0x638>
 800707a:	46d8      	mov	r8, fp
 800707c:	e7eb      	b.n	8007056 <_dtoa_r+0x6d6>
 800707e:	2200      	movs	r2, #0
 8007080:	4b6d      	ldr	r3, [pc, #436]	; (8007238 <_dtoa_r+0x8b8>)
 8007082:	f7f9 fa29 	bl	80004d8 <__aeabi_dmul>
 8007086:	2200      	movs	r2, #0
 8007088:	2300      	movs	r3, #0
 800708a:	4680      	mov	r8, r0
 800708c:	4689      	mov	r9, r1
 800708e:	f7f9 fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 8007092:	2800      	cmp	r0, #0
 8007094:	d09b      	beq.n	8006fce <_dtoa_r+0x64e>
 8007096:	e7cd      	b.n	8007034 <_dtoa_r+0x6b4>
 8007098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800709a:	2a00      	cmp	r2, #0
 800709c:	f000 80c4 	beq.w	8007228 <_dtoa_r+0x8a8>
 80070a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070a2:	2a01      	cmp	r2, #1
 80070a4:	f300 80a8 	bgt.w	80071f8 <_dtoa_r+0x878>
 80070a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070aa:	2a00      	cmp	r2, #0
 80070ac:	f000 80a0 	beq.w	80071f0 <_dtoa_r+0x870>
 80070b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070b4:	464f      	mov	r7, r9
 80070b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ba:	2101      	movs	r1, #1
 80070bc:	441a      	add	r2, r3
 80070be:	4628      	mov	r0, r5
 80070c0:	4499      	add	r9, r3
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	f000 fc32 	bl	800792c <__i2b>
 80070c8:	4606      	mov	r6, r0
 80070ca:	b15f      	cbz	r7, 80070e4 <_dtoa_r+0x764>
 80070cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dd08      	ble.n	80070e4 <_dtoa_r+0x764>
 80070d2:	42bb      	cmp	r3, r7
 80070d4:	bfa8      	it	ge
 80070d6:	463b      	movge	r3, r7
 80070d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070da:	eba9 0903 	sub.w	r9, r9, r3
 80070de:	1aff      	subs	r7, r7, r3
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	9309      	str	r3, [sp, #36]	; 0x24
 80070e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e6:	b1f3      	cbz	r3, 8007126 <_dtoa_r+0x7a6>
 80070e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 80a0 	beq.w	8007230 <_dtoa_r+0x8b0>
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	dd10      	ble.n	8007116 <_dtoa_r+0x796>
 80070f4:	4631      	mov	r1, r6
 80070f6:	4622      	mov	r2, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 fcd5 	bl	8007aa8 <__pow5mult>
 80070fe:	4652      	mov	r2, sl
 8007100:	4601      	mov	r1, r0
 8007102:	4606      	mov	r6, r0
 8007104:	4628      	mov	r0, r5
 8007106:	f000 fc27 	bl	8007958 <__multiply>
 800710a:	4680      	mov	r8, r0
 800710c:	4651      	mov	r1, sl
 800710e:	4628      	mov	r0, r5
 8007110:	f000 fb56 	bl	80077c0 <_Bfree>
 8007114:	46c2      	mov	sl, r8
 8007116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007118:	1b1a      	subs	r2, r3, r4
 800711a:	d004      	beq.n	8007126 <_dtoa_r+0x7a6>
 800711c:	4651      	mov	r1, sl
 800711e:	4628      	mov	r0, r5
 8007120:	f000 fcc2 	bl	8007aa8 <__pow5mult>
 8007124:	4682      	mov	sl, r0
 8007126:	2101      	movs	r1, #1
 8007128:	4628      	mov	r0, r5
 800712a:	f000 fbff 	bl	800792c <__i2b>
 800712e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007130:	4604      	mov	r4, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	f340 8082 	ble.w	800723c <_dtoa_r+0x8bc>
 8007138:	461a      	mov	r2, r3
 800713a:	4601      	mov	r1, r0
 800713c:	4628      	mov	r0, r5
 800713e:	f000 fcb3 	bl	8007aa8 <__pow5mult>
 8007142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007144:	4604      	mov	r4, r0
 8007146:	2b01      	cmp	r3, #1
 8007148:	dd7b      	ble.n	8007242 <_dtoa_r+0x8c2>
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007154:	6918      	ldr	r0, [r3, #16]
 8007156:	f000 fb9b 	bl	8007890 <__hi0bits>
 800715a:	f1c0 0020 	rsb	r0, r0, #32
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	4418      	add	r0, r3
 8007162:	f010 001f 	ands.w	r0, r0, #31
 8007166:	f000 8092 	beq.w	800728e <_dtoa_r+0x90e>
 800716a:	f1c0 0320 	rsb	r3, r0, #32
 800716e:	2b04      	cmp	r3, #4
 8007170:	f340 8085 	ble.w	800727e <_dtoa_r+0x8fe>
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	f1c0 001c 	rsb	r0, r0, #28
 800717a:	4403      	add	r3, r0
 800717c:	4481      	add	r9, r0
 800717e:	4407      	add	r7, r0
 8007180:	9309      	str	r3, [sp, #36]	; 0x24
 8007182:	f1b9 0f00 	cmp.w	r9, #0
 8007186:	dd05      	ble.n	8007194 <_dtoa_r+0x814>
 8007188:	4651      	mov	r1, sl
 800718a:	464a      	mov	r2, r9
 800718c:	4628      	mov	r0, r5
 800718e:	f000 fce5 	bl	8007b5c <__lshift>
 8007192:	4682      	mov	sl, r0
 8007194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	dd05      	ble.n	80071a6 <_dtoa_r+0x826>
 800719a:	4621      	mov	r1, r4
 800719c:	461a      	mov	r2, r3
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 fcdc 	bl	8007b5c <__lshift>
 80071a4:	4604      	mov	r4, r0
 80071a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d072      	beq.n	8007292 <_dtoa_r+0x912>
 80071ac:	4621      	mov	r1, r4
 80071ae:	4650      	mov	r0, sl
 80071b0:	f000 fd40 	bl	8007c34 <__mcmp>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	da6c      	bge.n	8007292 <_dtoa_r+0x912>
 80071b8:	2300      	movs	r3, #0
 80071ba:	4651      	mov	r1, sl
 80071bc:	220a      	movs	r2, #10
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 fb20 	bl	8007804 <__multadd>
 80071c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c6:	4682      	mov	sl, r0
 80071c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 81ac 	beq.w	800752a <_dtoa_r+0xbaa>
 80071d2:	2300      	movs	r3, #0
 80071d4:	4631      	mov	r1, r6
 80071d6:	220a      	movs	r2, #10
 80071d8:	4628      	mov	r0, r5
 80071da:	f000 fb13 	bl	8007804 <__multadd>
 80071de:	9b06      	ldr	r3, [sp, #24]
 80071e0:	4606      	mov	r6, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f300 8093 	bgt.w	800730e <_dtoa_r+0x98e>
 80071e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	dc59      	bgt.n	80072a2 <_dtoa_r+0x922>
 80071ee:	e08e      	b.n	800730e <_dtoa_r+0x98e>
 80071f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071f6:	e75d      	b.n	80070b4 <_dtoa_r+0x734>
 80071f8:	9b08      	ldr	r3, [sp, #32]
 80071fa:	1e5c      	subs	r4, r3, #1
 80071fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fe:	42a3      	cmp	r3, r4
 8007200:	bfbf      	itttt	lt
 8007202:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007204:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007206:	1ae3      	sublt	r3, r4, r3
 8007208:	18d2      	addlt	r2, r2, r3
 800720a:	bfa8      	it	ge
 800720c:	1b1c      	subge	r4, r3, r4
 800720e:	9b08      	ldr	r3, [sp, #32]
 8007210:	bfbe      	ittt	lt
 8007212:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007214:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007216:	2400      	movlt	r4, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfb5      	itete	lt
 800721c:	eba9 0703 	sublt.w	r7, r9, r3
 8007220:	464f      	movge	r7, r9
 8007222:	2300      	movlt	r3, #0
 8007224:	9b08      	ldrge	r3, [sp, #32]
 8007226:	e747      	b.n	80070b8 <_dtoa_r+0x738>
 8007228:	464f      	mov	r7, r9
 800722a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800722c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800722e:	e74c      	b.n	80070ca <_dtoa_r+0x74a>
 8007230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007232:	e773      	b.n	800711c <_dtoa_r+0x79c>
 8007234:	3fe00000 	.word	0x3fe00000
 8007238:	40240000 	.word	0x40240000
 800723c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800723e:	2b01      	cmp	r3, #1
 8007240:	dc18      	bgt.n	8007274 <_dtoa_r+0x8f4>
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	b9b3      	cbnz	r3, 8007274 <_dtoa_r+0x8f4>
 8007246:	9b05      	ldr	r3, [sp, #20]
 8007248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800724c:	b993      	cbnz	r3, 8007274 <_dtoa_r+0x8f4>
 800724e:	9b05      	ldr	r3, [sp, #20]
 8007250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007254:	0d1b      	lsrs	r3, r3, #20
 8007256:	051b      	lsls	r3, r3, #20
 8007258:	b17b      	cbz	r3, 800727a <_dtoa_r+0x8fa>
 800725a:	f04f 0801 	mov.w	r8, #1
 800725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007260:	f109 0901 	add.w	r9, r9, #1
 8007264:	3301      	adds	r3, #1
 8007266:	9309      	str	r3, [sp, #36]	; 0x24
 8007268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800726a:	2b00      	cmp	r3, #0
 800726c:	f47f af6f 	bne.w	800714e <_dtoa_r+0x7ce>
 8007270:	2001      	movs	r0, #1
 8007272:	e774      	b.n	800715e <_dtoa_r+0x7de>
 8007274:	f04f 0800 	mov.w	r8, #0
 8007278:	e7f6      	b.n	8007268 <_dtoa_r+0x8e8>
 800727a:	4698      	mov	r8, r3
 800727c:	e7f4      	b.n	8007268 <_dtoa_r+0x8e8>
 800727e:	d080      	beq.n	8007182 <_dtoa_r+0x802>
 8007280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007282:	331c      	adds	r3, #28
 8007284:	441a      	add	r2, r3
 8007286:	4499      	add	r9, r3
 8007288:	441f      	add	r7, r3
 800728a:	9209      	str	r2, [sp, #36]	; 0x24
 800728c:	e779      	b.n	8007182 <_dtoa_r+0x802>
 800728e:	4603      	mov	r3, r0
 8007290:	e7f6      	b.n	8007280 <_dtoa_r+0x900>
 8007292:	9b08      	ldr	r3, [sp, #32]
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc34      	bgt.n	8007302 <_dtoa_r+0x982>
 8007298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800729a:	2b02      	cmp	r3, #2
 800729c:	dd31      	ble.n	8007302 <_dtoa_r+0x982>
 800729e:	9b08      	ldr	r3, [sp, #32]
 80072a0:	9306      	str	r3, [sp, #24]
 80072a2:	9b06      	ldr	r3, [sp, #24]
 80072a4:	b963      	cbnz	r3, 80072c0 <_dtoa_r+0x940>
 80072a6:	4621      	mov	r1, r4
 80072a8:	2205      	movs	r2, #5
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 faaa 	bl	8007804 <__multadd>
 80072b0:	4601      	mov	r1, r0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4650      	mov	r0, sl
 80072b6:	f000 fcbd 	bl	8007c34 <__mcmp>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f73f adbf 	bgt.w	8006e3e <_dtoa_r+0x4be>
 80072c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072c2:	9f03      	ldr	r7, [sp, #12]
 80072c4:	ea6f 0b03 	mvn.w	fp, r3
 80072c8:	f04f 0800 	mov.w	r8, #0
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 fa76 	bl	80077c0 <_Bfree>
 80072d4:	2e00      	cmp	r6, #0
 80072d6:	f43f aead 	beq.w	8007034 <_dtoa_r+0x6b4>
 80072da:	f1b8 0f00 	cmp.w	r8, #0
 80072de:	d005      	beq.n	80072ec <_dtoa_r+0x96c>
 80072e0:	45b0      	cmp	r8, r6
 80072e2:	d003      	beq.n	80072ec <_dtoa_r+0x96c>
 80072e4:	4641      	mov	r1, r8
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fa6a 	bl	80077c0 <_Bfree>
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 fa66 	bl	80077c0 <_Bfree>
 80072f4:	e69e      	b.n	8007034 <_dtoa_r+0x6b4>
 80072f6:	2400      	movs	r4, #0
 80072f8:	4626      	mov	r6, r4
 80072fa:	e7e1      	b.n	80072c0 <_dtoa_r+0x940>
 80072fc:	46c3      	mov	fp, r8
 80072fe:	4626      	mov	r6, r4
 8007300:	e59d      	b.n	8006e3e <_dtoa_r+0x4be>
 8007302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 80c8 	beq.w	800749a <_dtoa_r+0xb1a>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	9306      	str	r3, [sp, #24]
 800730e:	2f00      	cmp	r7, #0
 8007310:	dd05      	ble.n	800731e <_dtoa_r+0x99e>
 8007312:	4631      	mov	r1, r6
 8007314:	463a      	mov	r2, r7
 8007316:	4628      	mov	r0, r5
 8007318:	f000 fc20 	bl	8007b5c <__lshift>
 800731c:	4606      	mov	r6, r0
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	d05b      	beq.n	80073dc <_dtoa_r+0xa5c>
 8007324:	4628      	mov	r0, r5
 8007326:	6871      	ldr	r1, [r6, #4]
 8007328:	f000 fa0a 	bl	8007740 <_Balloc>
 800732c:	4607      	mov	r7, r0
 800732e:	b928      	cbnz	r0, 800733c <_dtoa_r+0x9bc>
 8007330:	4602      	mov	r2, r0
 8007332:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007336:	4b81      	ldr	r3, [pc, #516]	; (800753c <_dtoa_r+0xbbc>)
 8007338:	f7ff bb36 	b.w	80069a8 <_dtoa_r+0x28>
 800733c:	6932      	ldr	r2, [r6, #16]
 800733e:	f106 010c 	add.w	r1, r6, #12
 8007342:	3202      	adds	r2, #2
 8007344:	0092      	lsls	r2, r2, #2
 8007346:	300c      	adds	r0, #12
 8007348:	f000 ff9e 	bl	8008288 <memcpy>
 800734c:	2201      	movs	r2, #1
 800734e:	4639      	mov	r1, r7
 8007350:	4628      	mov	r0, r5
 8007352:	f000 fc03 	bl	8007b5c <__lshift>
 8007356:	46b0      	mov	r8, r6
 8007358:	4606      	mov	r6, r0
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	9a03      	ldr	r2, [sp, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	9308      	str	r3, [sp, #32]
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	4413      	add	r3, r2
 8007366:	930b      	str	r3, [sp, #44]	; 0x2c
 8007368:	9b04      	ldr	r3, [sp, #16]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	930a      	str	r3, [sp, #40]	; 0x28
 8007370:	9b08      	ldr	r3, [sp, #32]
 8007372:	4621      	mov	r1, r4
 8007374:	3b01      	subs	r3, #1
 8007376:	4650      	mov	r0, sl
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	f7ff fa76 	bl	800686a <quorem>
 800737e:	4641      	mov	r1, r8
 8007380:	9006      	str	r0, [sp, #24]
 8007382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007386:	4650      	mov	r0, sl
 8007388:	f000 fc54 	bl	8007c34 <__mcmp>
 800738c:	4632      	mov	r2, r6
 800738e:	9009      	str	r0, [sp, #36]	; 0x24
 8007390:	4621      	mov	r1, r4
 8007392:	4628      	mov	r0, r5
 8007394:	f000 fc6a 	bl	8007c6c <__mdiff>
 8007398:	68c2      	ldr	r2, [r0, #12]
 800739a:	4607      	mov	r7, r0
 800739c:	bb02      	cbnz	r2, 80073e0 <_dtoa_r+0xa60>
 800739e:	4601      	mov	r1, r0
 80073a0:	4650      	mov	r0, sl
 80073a2:	f000 fc47 	bl	8007c34 <__mcmp>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4639      	mov	r1, r7
 80073aa:	4628      	mov	r0, r5
 80073ac:	920c      	str	r2, [sp, #48]	; 0x30
 80073ae:	f000 fa07 	bl	80077c0 <_Bfree>
 80073b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073b6:	9f08      	ldr	r7, [sp, #32]
 80073b8:	ea43 0102 	orr.w	r1, r3, r2
 80073bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073be:	4319      	orrs	r1, r3
 80073c0:	d110      	bne.n	80073e4 <_dtoa_r+0xa64>
 80073c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073c6:	d029      	beq.n	800741c <_dtoa_r+0xa9c>
 80073c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	dd02      	ble.n	80073d4 <_dtoa_r+0xa54>
 80073ce:	9b06      	ldr	r3, [sp, #24]
 80073d0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	f883 9000 	strb.w	r9, [r3]
 80073da:	e777      	b.n	80072cc <_dtoa_r+0x94c>
 80073dc:	4630      	mov	r0, r6
 80073de:	e7ba      	b.n	8007356 <_dtoa_r+0x9d6>
 80073e0:	2201      	movs	r2, #1
 80073e2:	e7e1      	b.n	80073a8 <_dtoa_r+0xa28>
 80073e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	db04      	blt.n	80073f4 <_dtoa_r+0xa74>
 80073ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80073ec:	430b      	orrs	r3, r1
 80073ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073f0:	430b      	orrs	r3, r1
 80073f2:	d120      	bne.n	8007436 <_dtoa_r+0xab6>
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	dded      	ble.n	80073d4 <_dtoa_r+0xa54>
 80073f8:	4651      	mov	r1, sl
 80073fa:	2201      	movs	r2, #1
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 fbad 	bl	8007b5c <__lshift>
 8007402:	4621      	mov	r1, r4
 8007404:	4682      	mov	sl, r0
 8007406:	f000 fc15 	bl	8007c34 <__mcmp>
 800740a:	2800      	cmp	r0, #0
 800740c:	dc03      	bgt.n	8007416 <_dtoa_r+0xa96>
 800740e:	d1e1      	bne.n	80073d4 <_dtoa_r+0xa54>
 8007410:	f019 0f01 	tst.w	r9, #1
 8007414:	d0de      	beq.n	80073d4 <_dtoa_r+0xa54>
 8007416:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800741a:	d1d8      	bne.n	80073ce <_dtoa_r+0xa4e>
 800741c:	2339      	movs	r3, #57	; 0x39
 800741e:	9a04      	ldr	r2, [sp, #16]
 8007420:	7013      	strb	r3, [r2, #0]
 8007422:	463b      	mov	r3, r7
 8007424:	461f      	mov	r7, r3
 8007426:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800742a:	3b01      	subs	r3, #1
 800742c:	2a39      	cmp	r2, #57	; 0x39
 800742e:	d06b      	beq.n	8007508 <_dtoa_r+0xb88>
 8007430:	3201      	adds	r2, #1
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	e74a      	b.n	80072cc <_dtoa_r+0x94c>
 8007436:	2a00      	cmp	r2, #0
 8007438:	dd07      	ble.n	800744a <_dtoa_r+0xaca>
 800743a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800743e:	d0ed      	beq.n	800741c <_dtoa_r+0xa9c>
 8007440:	9a04      	ldr	r2, [sp, #16]
 8007442:	f109 0301 	add.w	r3, r9, #1
 8007446:	7013      	strb	r3, [r2, #0]
 8007448:	e740      	b.n	80072cc <_dtoa_r+0x94c>
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800744e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007452:	4293      	cmp	r3, r2
 8007454:	d042      	beq.n	80074dc <_dtoa_r+0xb5c>
 8007456:	4651      	mov	r1, sl
 8007458:	2300      	movs	r3, #0
 800745a:	220a      	movs	r2, #10
 800745c:	4628      	mov	r0, r5
 800745e:	f000 f9d1 	bl	8007804 <__multadd>
 8007462:	45b0      	cmp	r8, r6
 8007464:	4682      	mov	sl, r0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	f04f 020a 	mov.w	r2, #10
 800746e:	4641      	mov	r1, r8
 8007470:	4628      	mov	r0, r5
 8007472:	d107      	bne.n	8007484 <_dtoa_r+0xb04>
 8007474:	f000 f9c6 	bl	8007804 <__multadd>
 8007478:	4680      	mov	r8, r0
 800747a:	4606      	mov	r6, r0
 800747c:	9b08      	ldr	r3, [sp, #32]
 800747e:	3301      	adds	r3, #1
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	e775      	b.n	8007370 <_dtoa_r+0x9f0>
 8007484:	f000 f9be 	bl	8007804 <__multadd>
 8007488:	4631      	mov	r1, r6
 800748a:	4680      	mov	r8, r0
 800748c:	2300      	movs	r3, #0
 800748e:	220a      	movs	r2, #10
 8007490:	4628      	mov	r0, r5
 8007492:	f000 f9b7 	bl	8007804 <__multadd>
 8007496:	4606      	mov	r6, r0
 8007498:	e7f0      	b.n	800747c <_dtoa_r+0xafc>
 800749a:	9b08      	ldr	r3, [sp, #32]
 800749c:	9306      	str	r3, [sp, #24]
 800749e:	9f03      	ldr	r7, [sp, #12]
 80074a0:	4621      	mov	r1, r4
 80074a2:	4650      	mov	r0, sl
 80074a4:	f7ff f9e1 	bl	800686a <quorem>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074ae:	f807 9b01 	strb.w	r9, [r7], #1
 80074b2:	1afa      	subs	r2, r7, r3
 80074b4:	9b06      	ldr	r3, [sp, #24]
 80074b6:	4293      	cmp	r3, r2
 80074b8:	dd07      	ble.n	80074ca <_dtoa_r+0xb4a>
 80074ba:	4651      	mov	r1, sl
 80074bc:	2300      	movs	r3, #0
 80074be:	220a      	movs	r2, #10
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 f99f 	bl	8007804 <__multadd>
 80074c6:	4682      	mov	sl, r0
 80074c8:	e7ea      	b.n	80074a0 <_dtoa_r+0xb20>
 80074ca:	9b06      	ldr	r3, [sp, #24]
 80074cc:	f04f 0800 	mov.w	r8, #0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	bfcc      	ite	gt
 80074d4:	461f      	movgt	r7, r3
 80074d6:	2701      	movle	r7, #1
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	441f      	add	r7, r3
 80074dc:	4651      	mov	r1, sl
 80074de:	2201      	movs	r2, #1
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 fb3b 	bl	8007b5c <__lshift>
 80074e6:	4621      	mov	r1, r4
 80074e8:	4682      	mov	sl, r0
 80074ea:	f000 fba3 	bl	8007c34 <__mcmp>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	dc97      	bgt.n	8007422 <_dtoa_r+0xaa2>
 80074f2:	d102      	bne.n	80074fa <_dtoa_r+0xb7a>
 80074f4:	f019 0f01 	tst.w	r9, #1
 80074f8:	d193      	bne.n	8007422 <_dtoa_r+0xaa2>
 80074fa:	463b      	mov	r3, r7
 80074fc:	461f      	mov	r7, r3
 80074fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007502:	2a30      	cmp	r2, #48	; 0x30
 8007504:	d0fa      	beq.n	80074fc <_dtoa_r+0xb7c>
 8007506:	e6e1      	b.n	80072cc <_dtoa_r+0x94c>
 8007508:	9a03      	ldr	r2, [sp, #12]
 800750a:	429a      	cmp	r2, r3
 800750c:	d18a      	bne.n	8007424 <_dtoa_r+0xaa4>
 800750e:	2331      	movs	r3, #49	; 0x31
 8007510:	f10b 0b01 	add.w	fp, fp, #1
 8007514:	e797      	b.n	8007446 <_dtoa_r+0xac6>
 8007516:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <_dtoa_r+0xbc0>)
 8007518:	f7ff ba9f 	b.w	8006a5a <_dtoa_r+0xda>
 800751c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800751e:	2b00      	cmp	r3, #0
 8007520:	f47f aa77 	bne.w	8006a12 <_dtoa_r+0x92>
 8007524:	4b07      	ldr	r3, [pc, #28]	; (8007544 <_dtoa_r+0xbc4>)
 8007526:	f7ff ba98 	b.w	8006a5a <_dtoa_r+0xda>
 800752a:	9b06      	ldr	r3, [sp, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	dcb6      	bgt.n	800749e <_dtoa_r+0xb1e>
 8007530:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007532:	2b02      	cmp	r3, #2
 8007534:	f73f aeb5 	bgt.w	80072a2 <_dtoa_r+0x922>
 8007538:	e7b1      	b.n	800749e <_dtoa_r+0xb1e>
 800753a:	bf00      	nop
 800753c:	08008a62 	.word	0x08008a62
 8007540:	080089c2 	.word	0x080089c2
 8007544:	080089e6 	.word	0x080089e6

08007548 <_free_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4605      	mov	r5, r0
 800754c:	2900      	cmp	r1, #0
 800754e:	d040      	beq.n	80075d2 <_free_r+0x8a>
 8007550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007554:	1f0c      	subs	r4, r1, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	bfb8      	it	lt
 800755a:	18e4      	addlt	r4, r4, r3
 800755c:	f000 f8e4 	bl	8007728 <__malloc_lock>
 8007560:	4a1c      	ldr	r2, [pc, #112]	; (80075d4 <_free_r+0x8c>)
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	b933      	cbnz	r3, 8007574 <_free_r+0x2c>
 8007566:	6063      	str	r3, [r4, #4]
 8007568:	6014      	str	r4, [r2, #0]
 800756a:	4628      	mov	r0, r5
 800756c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007570:	f000 b8e0 	b.w	8007734 <__malloc_unlock>
 8007574:	42a3      	cmp	r3, r4
 8007576:	d908      	bls.n	800758a <_free_r+0x42>
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	1821      	adds	r1, r4, r0
 800757c:	428b      	cmp	r3, r1
 800757e:	bf01      	itttt	eq
 8007580:	6819      	ldreq	r1, [r3, #0]
 8007582:	685b      	ldreq	r3, [r3, #4]
 8007584:	1809      	addeq	r1, r1, r0
 8007586:	6021      	streq	r1, [r4, #0]
 8007588:	e7ed      	b.n	8007566 <_free_r+0x1e>
 800758a:	461a      	mov	r2, r3
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	b10b      	cbz	r3, 8007594 <_free_r+0x4c>
 8007590:	42a3      	cmp	r3, r4
 8007592:	d9fa      	bls.n	800758a <_free_r+0x42>
 8007594:	6811      	ldr	r1, [r2, #0]
 8007596:	1850      	adds	r0, r2, r1
 8007598:	42a0      	cmp	r0, r4
 800759a:	d10b      	bne.n	80075b4 <_free_r+0x6c>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	4401      	add	r1, r0
 80075a0:	1850      	adds	r0, r2, r1
 80075a2:	4283      	cmp	r3, r0
 80075a4:	6011      	str	r1, [r2, #0]
 80075a6:	d1e0      	bne.n	800756a <_free_r+0x22>
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	4408      	add	r0, r1
 80075ae:	6010      	str	r0, [r2, #0]
 80075b0:	6053      	str	r3, [r2, #4]
 80075b2:	e7da      	b.n	800756a <_free_r+0x22>
 80075b4:	d902      	bls.n	80075bc <_free_r+0x74>
 80075b6:	230c      	movs	r3, #12
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	e7d6      	b.n	800756a <_free_r+0x22>
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	1821      	adds	r1, r4, r0
 80075c0:	428b      	cmp	r3, r1
 80075c2:	bf01      	itttt	eq
 80075c4:	6819      	ldreq	r1, [r3, #0]
 80075c6:	685b      	ldreq	r3, [r3, #4]
 80075c8:	1809      	addeq	r1, r1, r0
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	6063      	str	r3, [r4, #4]
 80075ce:	6054      	str	r4, [r2, #4]
 80075d0:	e7cb      	b.n	800756a <_free_r+0x22>
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	200005f8 	.word	0x200005f8

080075d8 <malloc>:
 80075d8:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <malloc+0xc>)
 80075da:	4601      	mov	r1, r0
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	f000 b823 	b.w	8007628 <_malloc_r>
 80075e2:	bf00      	nop
 80075e4:	20000070 	.word	0x20000070

080075e8 <sbrk_aligned>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4e0e      	ldr	r6, [pc, #56]	; (8007624 <sbrk_aligned+0x3c>)
 80075ec:	460c      	mov	r4, r1
 80075ee:	6831      	ldr	r1, [r6, #0]
 80075f0:	4605      	mov	r5, r0
 80075f2:	b911      	cbnz	r1, 80075fa <sbrk_aligned+0x12>
 80075f4:	f000 fe38 	bl	8008268 <_sbrk_r>
 80075f8:	6030      	str	r0, [r6, #0]
 80075fa:	4621      	mov	r1, r4
 80075fc:	4628      	mov	r0, r5
 80075fe:	f000 fe33 	bl	8008268 <_sbrk_r>
 8007602:	1c43      	adds	r3, r0, #1
 8007604:	d00a      	beq.n	800761c <sbrk_aligned+0x34>
 8007606:	1cc4      	adds	r4, r0, #3
 8007608:	f024 0403 	bic.w	r4, r4, #3
 800760c:	42a0      	cmp	r0, r4
 800760e:	d007      	beq.n	8007620 <sbrk_aligned+0x38>
 8007610:	1a21      	subs	r1, r4, r0
 8007612:	4628      	mov	r0, r5
 8007614:	f000 fe28 	bl	8008268 <_sbrk_r>
 8007618:	3001      	adds	r0, #1
 800761a:	d101      	bne.n	8007620 <sbrk_aligned+0x38>
 800761c:	f04f 34ff 	mov.w	r4, #4294967295
 8007620:	4620      	mov	r0, r4
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	200005fc 	.word	0x200005fc

08007628 <_malloc_r>:
 8007628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800762c:	1ccd      	adds	r5, r1, #3
 800762e:	f025 0503 	bic.w	r5, r5, #3
 8007632:	3508      	adds	r5, #8
 8007634:	2d0c      	cmp	r5, #12
 8007636:	bf38      	it	cc
 8007638:	250c      	movcc	r5, #12
 800763a:	2d00      	cmp	r5, #0
 800763c:	4607      	mov	r7, r0
 800763e:	db01      	blt.n	8007644 <_malloc_r+0x1c>
 8007640:	42a9      	cmp	r1, r5
 8007642:	d905      	bls.n	8007650 <_malloc_r+0x28>
 8007644:	230c      	movs	r3, #12
 8007646:	2600      	movs	r6, #0
 8007648:	603b      	str	r3, [r7, #0]
 800764a:	4630      	mov	r0, r6
 800764c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007650:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007724 <_malloc_r+0xfc>
 8007654:	f000 f868 	bl	8007728 <__malloc_lock>
 8007658:	f8d8 3000 	ldr.w	r3, [r8]
 800765c:	461c      	mov	r4, r3
 800765e:	bb5c      	cbnz	r4, 80076b8 <_malloc_r+0x90>
 8007660:	4629      	mov	r1, r5
 8007662:	4638      	mov	r0, r7
 8007664:	f7ff ffc0 	bl	80075e8 <sbrk_aligned>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	4604      	mov	r4, r0
 800766c:	d155      	bne.n	800771a <_malloc_r+0xf2>
 800766e:	f8d8 4000 	ldr.w	r4, [r8]
 8007672:	4626      	mov	r6, r4
 8007674:	2e00      	cmp	r6, #0
 8007676:	d145      	bne.n	8007704 <_malloc_r+0xdc>
 8007678:	2c00      	cmp	r4, #0
 800767a:	d048      	beq.n	800770e <_malloc_r+0xe6>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	4631      	mov	r1, r6
 8007680:	4638      	mov	r0, r7
 8007682:	eb04 0903 	add.w	r9, r4, r3
 8007686:	f000 fdef 	bl	8008268 <_sbrk_r>
 800768a:	4581      	cmp	r9, r0
 800768c:	d13f      	bne.n	800770e <_malloc_r+0xe6>
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	4638      	mov	r0, r7
 8007692:	1a6d      	subs	r5, r5, r1
 8007694:	4629      	mov	r1, r5
 8007696:	f7ff ffa7 	bl	80075e8 <sbrk_aligned>
 800769a:	3001      	adds	r0, #1
 800769c:	d037      	beq.n	800770e <_malloc_r+0xe6>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	442b      	add	r3, r5
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	f8d8 3000 	ldr.w	r3, [r8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d038      	beq.n	800771e <_malloc_r+0xf6>
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	42a2      	cmp	r2, r4
 80076b0:	d12b      	bne.n	800770a <_malloc_r+0xe2>
 80076b2:	2200      	movs	r2, #0
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	e00f      	b.n	80076d8 <_malloc_r+0xb0>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	1b52      	subs	r2, r2, r5
 80076bc:	d41f      	bmi.n	80076fe <_malloc_r+0xd6>
 80076be:	2a0b      	cmp	r2, #11
 80076c0:	d917      	bls.n	80076f2 <_malloc_r+0xca>
 80076c2:	1961      	adds	r1, r4, r5
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	6025      	str	r5, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	6059      	strne	r1, [r3, #4]
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	bf08      	it	eq
 80076d0:	f8c8 1000 	streq.w	r1, [r8]
 80076d4:	5162      	str	r2, [r4, r5]
 80076d6:	604b      	str	r3, [r1, #4]
 80076d8:	4638      	mov	r0, r7
 80076da:	f104 060b 	add.w	r6, r4, #11
 80076de:	f000 f829 	bl	8007734 <__malloc_unlock>
 80076e2:	f026 0607 	bic.w	r6, r6, #7
 80076e6:	1d23      	adds	r3, r4, #4
 80076e8:	1af2      	subs	r2, r6, r3
 80076ea:	d0ae      	beq.n	800764a <_malloc_r+0x22>
 80076ec:	1b9b      	subs	r3, r3, r6
 80076ee:	50a3      	str	r3, [r4, r2]
 80076f0:	e7ab      	b.n	800764a <_malloc_r+0x22>
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	6862      	ldr	r2, [r4, #4]
 80076f6:	d1dd      	bne.n	80076b4 <_malloc_r+0x8c>
 80076f8:	f8c8 2000 	str.w	r2, [r8]
 80076fc:	e7ec      	b.n	80076d8 <_malloc_r+0xb0>
 80076fe:	4623      	mov	r3, r4
 8007700:	6864      	ldr	r4, [r4, #4]
 8007702:	e7ac      	b.n	800765e <_malloc_r+0x36>
 8007704:	4634      	mov	r4, r6
 8007706:	6876      	ldr	r6, [r6, #4]
 8007708:	e7b4      	b.n	8007674 <_malloc_r+0x4c>
 800770a:	4613      	mov	r3, r2
 800770c:	e7cc      	b.n	80076a8 <_malloc_r+0x80>
 800770e:	230c      	movs	r3, #12
 8007710:	4638      	mov	r0, r7
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	f000 f80e 	bl	8007734 <__malloc_unlock>
 8007718:	e797      	b.n	800764a <_malloc_r+0x22>
 800771a:	6025      	str	r5, [r4, #0]
 800771c:	e7dc      	b.n	80076d8 <_malloc_r+0xb0>
 800771e:	605b      	str	r3, [r3, #4]
 8007720:	deff      	udf	#255	; 0xff
 8007722:	bf00      	nop
 8007724:	200005f8 	.word	0x200005f8

08007728 <__malloc_lock>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__malloc_lock+0x8>)
 800772a:	f7ff b88e 	b.w	800684a <__retarget_lock_acquire_recursive>
 800772e:	bf00      	nop
 8007730:	200005f4 	.word	0x200005f4

08007734 <__malloc_unlock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_unlock+0x8>)
 8007736:	f7ff b889 	b.w	800684c <__retarget_lock_release_recursive>
 800773a:	bf00      	nop
 800773c:	200005f4 	.word	0x200005f4

08007740 <_Balloc>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	69c6      	ldr	r6, [r0, #28]
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Balloc+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f7ff ff44 	bl	80075d8 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	61e0      	str	r0, [r4, #28]
 8007754:	b920      	cbnz	r0, 8007760 <_Balloc+0x20>
 8007756:	216b      	movs	r1, #107	; 0x6b
 8007758:	4b17      	ldr	r3, [pc, #92]	; (80077b8 <_Balloc+0x78>)
 800775a:	4818      	ldr	r0, [pc, #96]	; (80077bc <_Balloc+0x7c>)
 800775c:	f000 fda2 	bl	80082a4 <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	69e6      	ldr	r6, [r4, #28]
 800776a:	68f3      	ldr	r3, [r6, #12]
 800776c:	b183      	cbz	r3, 8007790 <_Balloc+0x50>
 800776e:	69e3      	ldr	r3, [r4, #28]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007776:	b9b8      	cbnz	r0, 80077a8 <_Balloc+0x68>
 8007778:	2101      	movs	r1, #1
 800777a:	fa01 f605 	lsl.w	r6, r1, r5
 800777e:	1d72      	adds	r2, r6, #5
 8007780:	4620      	mov	r0, r4
 8007782:	0092      	lsls	r2, r2, #2
 8007784:	f000 fdac 	bl	80082e0 <_calloc_r>
 8007788:	b160      	cbz	r0, 80077a4 <_Balloc+0x64>
 800778a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800778e:	e00e      	b.n	80077ae <_Balloc+0x6e>
 8007790:	2221      	movs	r2, #33	; 0x21
 8007792:	2104      	movs	r1, #4
 8007794:	4620      	mov	r0, r4
 8007796:	f000 fda3 	bl	80082e0 <_calloc_r>
 800779a:	69e3      	ldr	r3, [r4, #28]
 800779c:	60f0      	str	r0, [r6, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e4      	bne.n	800776e <_Balloc+0x2e>
 80077a4:	2000      	movs	r0, #0
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	6802      	ldr	r2, [r0, #0]
 80077aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ae:	2300      	movs	r3, #0
 80077b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077b4:	e7f7      	b.n	80077a6 <_Balloc+0x66>
 80077b6:	bf00      	nop
 80077b8:	080089f3 	.word	0x080089f3
 80077bc:	08008a73 	.word	0x08008a73

080077c0 <_Bfree>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	69c6      	ldr	r6, [r0, #28]
 80077c4:	4605      	mov	r5, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	b976      	cbnz	r6, 80077e8 <_Bfree+0x28>
 80077ca:	2010      	movs	r0, #16
 80077cc:	f7ff ff04 	bl	80075d8 <malloc>
 80077d0:	4602      	mov	r2, r0
 80077d2:	61e8      	str	r0, [r5, #28]
 80077d4:	b920      	cbnz	r0, 80077e0 <_Bfree+0x20>
 80077d6:	218f      	movs	r1, #143	; 0x8f
 80077d8:	4b08      	ldr	r3, [pc, #32]	; (80077fc <_Bfree+0x3c>)
 80077da:	4809      	ldr	r0, [pc, #36]	; (8007800 <_Bfree+0x40>)
 80077dc:	f000 fd62 	bl	80082a4 <__assert_func>
 80077e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e4:	6006      	str	r6, [r0, #0]
 80077e6:	60c6      	str	r6, [r0, #12]
 80077e8:	b13c      	cbz	r4, 80077fa <_Bfree+0x3a>
 80077ea:	69eb      	ldr	r3, [r5, #28]
 80077ec:	6862      	ldr	r2, [r4, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077f4:	6021      	str	r1, [r4, #0]
 80077f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	080089f3 	.word	0x080089f3
 8007800:	08008a73 	.word	0x08008a73

08007804 <__multadd>:
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	4607      	mov	r7, r0
 800780a:	460c      	mov	r4, r1
 800780c:	461e      	mov	r6, r3
 800780e:	2000      	movs	r0, #0
 8007810:	690d      	ldr	r5, [r1, #16]
 8007812:	f101 0c14 	add.w	ip, r1, #20
 8007816:	f8dc 3000 	ldr.w	r3, [ip]
 800781a:	3001      	adds	r0, #1
 800781c:	b299      	uxth	r1, r3
 800781e:	fb02 6101 	mla	r1, r2, r1, r6
 8007822:	0c1e      	lsrs	r6, r3, #16
 8007824:	0c0b      	lsrs	r3, r1, #16
 8007826:	fb02 3306 	mla	r3, r2, r6, r3
 800782a:	b289      	uxth	r1, r1
 800782c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007830:	4285      	cmp	r5, r0
 8007832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007836:	f84c 1b04 	str.w	r1, [ip], #4
 800783a:	dcec      	bgt.n	8007816 <__multadd+0x12>
 800783c:	b30e      	cbz	r6, 8007882 <__multadd+0x7e>
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc19      	bgt.n	8007878 <__multadd+0x74>
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	4638      	mov	r0, r7
 8007848:	3101      	adds	r1, #1
 800784a:	f7ff ff79 	bl	8007740 <_Balloc>
 800784e:	4680      	mov	r8, r0
 8007850:	b928      	cbnz	r0, 800785e <__multadd+0x5a>
 8007852:	4602      	mov	r2, r0
 8007854:	21ba      	movs	r1, #186	; 0xba
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <__multadd+0x84>)
 8007858:	480c      	ldr	r0, [pc, #48]	; (800788c <__multadd+0x88>)
 800785a:	f000 fd23 	bl	80082a4 <__assert_func>
 800785e:	6922      	ldr	r2, [r4, #16]
 8007860:	f104 010c 	add.w	r1, r4, #12
 8007864:	3202      	adds	r2, #2
 8007866:	0092      	lsls	r2, r2, #2
 8007868:	300c      	adds	r0, #12
 800786a:	f000 fd0d 	bl	8008288 <memcpy>
 800786e:	4621      	mov	r1, r4
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ffa5 	bl	80077c0 <_Bfree>
 8007876:	4644      	mov	r4, r8
 8007878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800787c:	3501      	adds	r5, #1
 800787e:	615e      	str	r6, [r3, #20]
 8007880:	6125      	str	r5, [r4, #16]
 8007882:	4620      	mov	r0, r4
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	08008a62 	.word	0x08008a62
 800788c:	08008a73 	.word	0x08008a73

08007890 <__hi0bits>:
 8007890:	0c02      	lsrs	r2, r0, #16
 8007892:	0412      	lsls	r2, r2, #16
 8007894:	4603      	mov	r3, r0
 8007896:	b9ca      	cbnz	r2, 80078cc <__hi0bits+0x3c>
 8007898:	0403      	lsls	r3, r0, #16
 800789a:	2010      	movs	r0, #16
 800789c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078a0:	bf04      	itt	eq
 80078a2:	021b      	lsleq	r3, r3, #8
 80078a4:	3008      	addeq	r0, #8
 80078a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078aa:	bf04      	itt	eq
 80078ac:	011b      	lsleq	r3, r3, #4
 80078ae:	3004      	addeq	r0, #4
 80078b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078b4:	bf04      	itt	eq
 80078b6:	009b      	lsleq	r3, r3, #2
 80078b8:	3002      	addeq	r0, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	db05      	blt.n	80078ca <__hi0bits+0x3a>
 80078be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078c2:	f100 0001 	add.w	r0, r0, #1
 80078c6:	bf08      	it	eq
 80078c8:	2020      	moveq	r0, #32
 80078ca:	4770      	bx	lr
 80078cc:	2000      	movs	r0, #0
 80078ce:	e7e5      	b.n	800789c <__hi0bits+0xc>

080078d0 <__lo0bits>:
 80078d0:	6803      	ldr	r3, [r0, #0]
 80078d2:	4602      	mov	r2, r0
 80078d4:	f013 0007 	ands.w	r0, r3, #7
 80078d8:	d00b      	beq.n	80078f2 <__lo0bits+0x22>
 80078da:	07d9      	lsls	r1, r3, #31
 80078dc:	d421      	bmi.n	8007922 <__lo0bits+0x52>
 80078de:	0798      	lsls	r0, r3, #30
 80078e0:	bf49      	itett	mi
 80078e2:	085b      	lsrmi	r3, r3, #1
 80078e4:	089b      	lsrpl	r3, r3, #2
 80078e6:	2001      	movmi	r0, #1
 80078e8:	6013      	strmi	r3, [r2, #0]
 80078ea:	bf5c      	itt	pl
 80078ec:	2002      	movpl	r0, #2
 80078ee:	6013      	strpl	r3, [r2, #0]
 80078f0:	4770      	bx	lr
 80078f2:	b299      	uxth	r1, r3
 80078f4:	b909      	cbnz	r1, 80078fa <__lo0bits+0x2a>
 80078f6:	2010      	movs	r0, #16
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	b2d9      	uxtb	r1, r3
 80078fc:	b909      	cbnz	r1, 8007902 <__lo0bits+0x32>
 80078fe:	3008      	adds	r0, #8
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	0719      	lsls	r1, r3, #28
 8007904:	bf04      	itt	eq
 8007906:	091b      	lsreq	r3, r3, #4
 8007908:	3004      	addeq	r0, #4
 800790a:	0799      	lsls	r1, r3, #30
 800790c:	bf04      	itt	eq
 800790e:	089b      	lsreq	r3, r3, #2
 8007910:	3002      	addeq	r0, #2
 8007912:	07d9      	lsls	r1, r3, #31
 8007914:	d403      	bmi.n	800791e <__lo0bits+0x4e>
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	f100 0001 	add.w	r0, r0, #1
 800791c:	d003      	beq.n	8007926 <__lo0bits+0x56>
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	4770      	bx	lr
 8007922:	2000      	movs	r0, #0
 8007924:	4770      	bx	lr
 8007926:	2020      	movs	r0, #32
 8007928:	4770      	bx	lr
	...

0800792c <__i2b>:
 800792c:	b510      	push	{r4, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	2101      	movs	r1, #1
 8007932:	f7ff ff05 	bl	8007740 <_Balloc>
 8007936:	4602      	mov	r2, r0
 8007938:	b928      	cbnz	r0, 8007946 <__i2b+0x1a>
 800793a:	f240 1145 	movw	r1, #325	; 0x145
 800793e:	4b04      	ldr	r3, [pc, #16]	; (8007950 <__i2b+0x24>)
 8007940:	4804      	ldr	r0, [pc, #16]	; (8007954 <__i2b+0x28>)
 8007942:	f000 fcaf 	bl	80082a4 <__assert_func>
 8007946:	2301      	movs	r3, #1
 8007948:	6144      	str	r4, [r0, #20]
 800794a:	6103      	str	r3, [r0, #16]
 800794c:	bd10      	pop	{r4, pc}
 800794e:	bf00      	nop
 8007950:	08008a62 	.word	0x08008a62
 8007954:	08008a73 	.word	0x08008a73

08007958 <__multiply>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	4691      	mov	r9, r2
 800795e:	690a      	ldr	r2, [r1, #16]
 8007960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007964:	460c      	mov	r4, r1
 8007966:	429a      	cmp	r2, r3
 8007968:	bfbe      	ittt	lt
 800796a:	460b      	movlt	r3, r1
 800796c:	464c      	movlt	r4, r9
 800796e:	4699      	movlt	r9, r3
 8007970:	6927      	ldr	r7, [r4, #16]
 8007972:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	eb07 060a 	add.w	r6, r7, sl
 800797e:	42b3      	cmp	r3, r6
 8007980:	b085      	sub	sp, #20
 8007982:	bfb8      	it	lt
 8007984:	3101      	addlt	r1, #1
 8007986:	f7ff fedb 	bl	8007740 <_Balloc>
 800798a:	b930      	cbnz	r0, 800799a <__multiply+0x42>
 800798c:	4602      	mov	r2, r0
 800798e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007992:	4b43      	ldr	r3, [pc, #268]	; (8007aa0 <__multiply+0x148>)
 8007994:	4843      	ldr	r0, [pc, #268]	; (8007aa4 <__multiply+0x14c>)
 8007996:	f000 fc85 	bl	80082a4 <__assert_func>
 800799a:	f100 0514 	add.w	r5, r0, #20
 800799e:	462b      	mov	r3, r5
 80079a0:	2200      	movs	r2, #0
 80079a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079a6:	4543      	cmp	r3, r8
 80079a8:	d321      	bcc.n	80079ee <__multiply+0x96>
 80079aa:	f104 0314 	add.w	r3, r4, #20
 80079ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079b2:	f109 0314 	add.w	r3, r9, #20
 80079b6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079ba:	9202      	str	r2, [sp, #8]
 80079bc:	1b3a      	subs	r2, r7, r4
 80079be:	3a15      	subs	r2, #21
 80079c0:	f022 0203 	bic.w	r2, r2, #3
 80079c4:	3204      	adds	r2, #4
 80079c6:	f104 0115 	add.w	r1, r4, #21
 80079ca:	428f      	cmp	r7, r1
 80079cc:	bf38      	it	cc
 80079ce:	2204      	movcc	r2, #4
 80079d0:	9201      	str	r2, [sp, #4]
 80079d2:	9a02      	ldr	r2, [sp, #8]
 80079d4:	9303      	str	r3, [sp, #12]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d80c      	bhi.n	80079f4 <__multiply+0x9c>
 80079da:	2e00      	cmp	r6, #0
 80079dc:	dd03      	ble.n	80079e6 <__multiply+0x8e>
 80079de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d05a      	beq.n	8007a9c <__multiply+0x144>
 80079e6:	6106      	str	r6, [r0, #16]
 80079e8:	b005      	add	sp, #20
 80079ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ee:	f843 2b04 	str.w	r2, [r3], #4
 80079f2:	e7d8      	b.n	80079a6 <__multiply+0x4e>
 80079f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80079f8:	f1ba 0f00 	cmp.w	sl, #0
 80079fc:	d023      	beq.n	8007a46 <__multiply+0xee>
 80079fe:	46a9      	mov	r9, r5
 8007a00:	f04f 0c00 	mov.w	ip, #0
 8007a04:	f104 0e14 	add.w	lr, r4, #20
 8007a08:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a0c:	f8d9 1000 	ldr.w	r1, [r9]
 8007a10:	fa1f fb82 	uxth.w	fp, r2
 8007a14:	b289      	uxth	r1, r1
 8007a16:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a1a:	4461      	add	r1, ip
 8007a1c:	f8d9 c000 	ldr.w	ip, [r9]
 8007a20:	0c12      	lsrs	r2, r2, #16
 8007a22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a26:	fb0a c202 	mla	r2, sl, r2, ip
 8007a2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a2e:	b289      	uxth	r1, r1
 8007a30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a34:	4577      	cmp	r7, lr
 8007a36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a3a:	f849 1b04 	str.w	r1, [r9], #4
 8007a3e:	d8e3      	bhi.n	8007a08 <__multiply+0xb0>
 8007a40:	9a01      	ldr	r2, [sp, #4]
 8007a42:	f845 c002 	str.w	ip, [r5, r2]
 8007a46:	9a03      	ldr	r2, [sp, #12]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a4e:	f1b9 0f00 	cmp.w	r9, #0
 8007a52:	d021      	beq.n	8007a98 <__multiply+0x140>
 8007a54:	46ae      	mov	lr, r5
 8007a56:	f04f 0a00 	mov.w	sl, #0
 8007a5a:	6829      	ldr	r1, [r5, #0]
 8007a5c:	f104 0c14 	add.w	ip, r4, #20
 8007a60:	f8bc b000 	ldrh.w	fp, [ip]
 8007a64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a68:	b289      	uxth	r1, r1
 8007a6a:	fb09 220b 	mla	r2, r9, fp, r2
 8007a6e:	4452      	add	r2, sl
 8007a70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a74:	f84e 1b04 	str.w	r1, [lr], #4
 8007a78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a80:	f8be 1000 	ldrh.w	r1, [lr]
 8007a84:	4567      	cmp	r7, ip
 8007a86:	fb09 110a 	mla	r1, r9, sl, r1
 8007a8a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a92:	d8e5      	bhi.n	8007a60 <__multiply+0x108>
 8007a94:	9a01      	ldr	r2, [sp, #4]
 8007a96:	50a9      	str	r1, [r5, r2]
 8007a98:	3504      	adds	r5, #4
 8007a9a:	e79a      	b.n	80079d2 <__multiply+0x7a>
 8007a9c:	3e01      	subs	r6, #1
 8007a9e:	e79c      	b.n	80079da <__multiply+0x82>
 8007aa0:	08008a62 	.word	0x08008a62
 8007aa4:	08008a73 	.word	0x08008a73

08007aa8 <__pow5mult>:
 8007aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aac:	4615      	mov	r5, r2
 8007aae:	f012 0203 	ands.w	r2, r2, #3
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	d007      	beq.n	8007ac8 <__pow5mult+0x20>
 8007ab8:	4c25      	ldr	r4, [pc, #148]	; (8007b50 <__pow5mult+0xa8>)
 8007aba:	3a01      	subs	r2, #1
 8007abc:	2300      	movs	r3, #0
 8007abe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ac2:	f7ff fe9f 	bl	8007804 <__multadd>
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	10ad      	asrs	r5, r5, #2
 8007aca:	d03d      	beq.n	8007b48 <__pow5mult+0xa0>
 8007acc:	69f4      	ldr	r4, [r6, #28]
 8007ace:	b97c      	cbnz	r4, 8007af0 <__pow5mult+0x48>
 8007ad0:	2010      	movs	r0, #16
 8007ad2:	f7ff fd81 	bl	80075d8 <malloc>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	61f0      	str	r0, [r6, #28]
 8007ada:	b928      	cbnz	r0, 8007ae8 <__pow5mult+0x40>
 8007adc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007ae0:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <__pow5mult+0xac>)
 8007ae2:	481d      	ldr	r0, [pc, #116]	; (8007b58 <__pow5mult+0xb0>)
 8007ae4:	f000 fbde 	bl	80082a4 <__assert_func>
 8007ae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007aec:	6004      	str	r4, [r0, #0]
 8007aee:	60c4      	str	r4, [r0, #12]
 8007af0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007af4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007af8:	b94c      	cbnz	r4, 8007b0e <__pow5mult+0x66>
 8007afa:	f240 2171 	movw	r1, #625	; 0x271
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7ff ff14 	bl	800792c <__i2b>
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	f04f 0900 	mov.w	r9, #0
 8007b12:	07eb      	lsls	r3, r5, #31
 8007b14:	d50a      	bpl.n	8007b2c <__pow5mult+0x84>
 8007b16:	4639      	mov	r1, r7
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ff1c 	bl	8007958 <__multiply>
 8007b20:	4680      	mov	r8, r0
 8007b22:	4639      	mov	r1, r7
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff fe4b 	bl	80077c0 <_Bfree>
 8007b2a:	4647      	mov	r7, r8
 8007b2c:	106d      	asrs	r5, r5, #1
 8007b2e:	d00b      	beq.n	8007b48 <__pow5mult+0xa0>
 8007b30:	6820      	ldr	r0, [r4, #0]
 8007b32:	b938      	cbnz	r0, 8007b44 <__pow5mult+0x9c>
 8007b34:	4622      	mov	r2, r4
 8007b36:	4621      	mov	r1, r4
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff ff0d 	bl	8007958 <__multiply>
 8007b3e:	6020      	str	r0, [r4, #0]
 8007b40:	f8c0 9000 	str.w	r9, [r0]
 8007b44:	4604      	mov	r4, r0
 8007b46:	e7e4      	b.n	8007b12 <__pow5mult+0x6a>
 8007b48:	4638      	mov	r0, r7
 8007b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4e:	bf00      	nop
 8007b50:	08008bc0 	.word	0x08008bc0
 8007b54:	080089f3 	.word	0x080089f3
 8007b58:	08008a73 	.word	0x08008a73

08007b5c <__lshift>:
 8007b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	460c      	mov	r4, r1
 8007b62:	4607      	mov	r7, r0
 8007b64:	4691      	mov	r9, r2
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	6849      	ldr	r1, [r1, #4]
 8007b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b6e:	68a3      	ldr	r3, [r4, #8]
 8007b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b74:	f108 0601 	add.w	r6, r8, #1
 8007b78:	42b3      	cmp	r3, r6
 8007b7a:	db0b      	blt.n	8007b94 <__lshift+0x38>
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff fddf 	bl	8007740 <_Balloc>
 8007b82:	4605      	mov	r5, r0
 8007b84:	b948      	cbnz	r0, 8007b9a <__lshift+0x3e>
 8007b86:	4602      	mov	r2, r0
 8007b88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b8c:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <__lshift+0xd0>)
 8007b8e:	4828      	ldr	r0, [pc, #160]	; (8007c30 <__lshift+0xd4>)
 8007b90:	f000 fb88 	bl	80082a4 <__assert_func>
 8007b94:	3101      	adds	r1, #1
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	e7ee      	b.n	8007b78 <__lshift+0x1c>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f100 0114 	add.w	r1, r0, #20
 8007ba0:	f100 0210 	add.w	r2, r0, #16
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	4553      	cmp	r3, sl
 8007ba8:	db33      	blt.n	8007c12 <__lshift+0xb6>
 8007baa:	6920      	ldr	r0, [r4, #16]
 8007bac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bb0:	f104 0314 	add.w	r3, r4, #20
 8007bb4:	f019 091f 	ands.w	r9, r9, #31
 8007bb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bc0:	d02b      	beq.n	8007c1a <__lshift+0xbe>
 8007bc2:	468a      	mov	sl, r1
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	fa00 f009 	lsl.w	r0, r0, r9
 8007bd0:	4310      	orrs	r0, r2
 8007bd2:	f84a 0b04 	str.w	r0, [sl], #4
 8007bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bda:	459c      	cmp	ip, r3
 8007bdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007be0:	d8f3      	bhi.n	8007bca <__lshift+0x6e>
 8007be2:	ebac 0304 	sub.w	r3, ip, r4
 8007be6:	3b15      	subs	r3, #21
 8007be8:	f023 0303 	bic.w	r3, r3, #3
 8007bec:	3304      	adds	r3, #4
 8007bee:	f104 0015 	add.w	r0, r4, #21
 8007bf2:	4584      	cmp	ip, r0
 8007bf4:	bf38      	it	cc
 8007bf6:	2304      	movcc	r3, #4
 8007bf8:	50ca      	str	r2, [r1, r3]
 8007bfa:	b10a      	cbz	r2, 8007c00 <__lshift+0xa4>
 8007bfc:	f108 0602 	add.w	r6, r8, #2
 8007c00:	3e01      	subs	r6, #1
 8007c02:	4638      	mov	r0, r7
 8007c04:	4621      	mov	r1, r4
 8007c06:	612e      	str	r6, [r5, #16]
 8007c08:	f7ff fdda 	bl	80077c0 <_Bfree>
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c12:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c16:	3301      	adds	r3, #1
 8007c18:	e7c5      	b.n	8007ba6 <__lshift+0x4a>
 8007c1a:	3904      	subs	r1, #4
 8007c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c20:	459c      	cmp	ip, r3
 8007c22:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c26:	d8f9      	bhi.n	8007c1c <__lshift+0xc0>
 8007c28:	e7ea      	b.n	8007c00 <__lshift+0xa4>
 8007c2a:	bf00      	nop
 8007c2c:	08008a62 	.word	0x08008a62
 8007c30:	08008a73 	.word	0x08008a73

08007c34 <__mcmp>:
 8007c34:	4603      	mov	r3, r0
 8007c36:	690a      	ldr	r2, [r1, #16]
 8007c38:	6900      	ldr	r0, [r0, #16]
 8007c3a:	b530      	push	{r4, r5, lr}
 8007c3c:	1a80      	subs	r0, r0, r2
 8007c3e:	d10d      	bne.n	8007c5c <__mcmp+0x28>
 8007c40:	3314      	adds	r3, #20
 8007c42:	3114      	adds	r1, #20
 8007c44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c54:	4295      	cmp	r5, r2
 8007c56:	d002      	beq.n	8007c5e <__mcmp+0x2a>
 8007c58:	d304      	bcc.n	8007c64 <__mcmp+0x30>
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	bd30      	pop	{r4, r5, pc}
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	d3f4      	bcc.n	8007c4c <__mcmp+0x18>
 8007c62:	e7fb      	b.n	8007c5c <__mcmp+0x28>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	e7f8      	b.n	8007c5c <__mcmp+0x28>
	...

08007c6c <__mdiff>:
 8007c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c70:	460d      	mov	r5, r1
 8007c72:	4607      	mov	r7, r0
 8007c74:	4611      	mov	r1, r2
 8007c76:	4628      	mov	r0, r5
 8007c78:	4614      	mov	r4, r2
 8007c7a:	f7ff ffdb 	bl	8007c34 <__mcmp>
 8007c7e:	1e06      	subs	r6, r0, #0
 8007c80:	d111      	bne.n	8007ca6 <__mdiff+0x3a>
 8007c82:	4631      	mov	r1, r6
 8007c84:	4638      	mov	r0, r7
 8007c86:	f7ff fd5b 	bl	8007740 <_Balloc>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	b928      	cbnz	r0, 8007c9a <__mdiff+0x2e>
 8007c8e:	f240 2137 	movw	r1, #567	; 0x237
 8007c92:	4b3a      	ldr	r3, [pc, #232]	; (8007d7c <__mdiff+0x110>)
 8007c94:	483a      	ldr	r0, [pc, #232]	; (8007d80 <__mdiff+0x114>)
 8007c96:	f000 fb05 	bl	80082a4 <__assert_func>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca6:	bfa4      	itt	ge
 8007ca8:	4623      	movge	r3, r4
 8007caa:	462c      	movge	r4, r5
 8007cac:	4638      	mov	r0, r7
 8007cae:	6861      	ldr	r1, [r4, #4]
 8007cb0:	bfa6      	itte	ge
 8007cb2:	461d      	movge	r5, r3
 8007cb4:	2600      	movge	r6, #0
 8007cb6:	2601      	movlt	r6, #1
 8007cb8:	f7ff fd42 	bl	8007740 <_Balloc>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	b918      	cbnz	r0, 8007cc8 <__mdiff+0x5c>
 8007cc0:	f240 2145 	movw	r1, #581	; 0x245
 8007cc4:	4b2d      	ldr	r3, [pc, #180]	; (8007d7c <__mdiff+0x110>)
 8007cc6:	e7e5      	b.n	8007c94 <__mdiff+0x28>
 8007cc8:	f102 0814 	add.w	r8, r2, #20
 8007ccc:	46c2      	mov	sl, r8
 8007cce:	f04f 0c00 	mov.w	ip, #0
 8007cd2:	6927      	ldr	r7, [r4, #16]
 8007cd4:	60c6      	str	r6, [r0, #12]
 8007cd6:	692e      	ldr	r6, [r5, #16]
 8007cd8:	f104 0014 	add.w	r0, r4, #20
 8007cdc:	f105 0914 	add.w	r9, r5, #20
 8007ce0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007ce4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ce8:	3410      	adds	r4, #16
 8007cea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007cee:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cf2:	fa1f f18b 	uxth.w	r1, fp
 8007cf6:	4461      	add	r1, ip
 8007cf8:	fa1f fc83 	uxth.w	ip, r3
 8007cfc:	0c1b      	lsrs	r3, r3, #16
 8007cfe:	eba1 010c 	sub.w	r1, r1, ip
 8007d02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d0a:	b289      	uxth	r1, r1
 8007d0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d10:	454e      	cmp	r6, r9
 8007d12:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d16:	f84a 1b04 	str.w	r1, [sl], #4
 8007d1a:	d8e6      	bhi.n	8007cea <__mdiff+0x7e>
 8007d1c:	1b73      	subs	r3, r6, r5
 8007d1e:	3b15      	subs	r3, #21
 8007d20:	f023 0303 	bic.w	r3, r3, #3
 8007d24:	3515      	adds	r5, #21
 8007d26:	3304      	adds	r3, #4
 8007d28:	42ae      	cmp	r6, r5
 8007d2a:	bf38      	it	cc
 8007d2c:	2304      	movcc	r3, #4
 8007d2e:	4418      	add	r0, r3
 8007d30:	4443      	add	r3, r8
 8007d32:	461e      	mov	r6, r3
 8007d34:	4605      	mov	r5, r0
 8007d36:	4575      	cmp	r5, lr
 8007d38:	d30e      	bcc.n	8007d58 <__mdiff+0xec>
 8007d3a:	f10e 0103 	add.w	r1, lr, #3
 8007d3e:	1a09      	subs	r1, r1, r0
 8007d40:	f021 0103 	bic.w	r1, r1, #3
 8007d44:	3803      	subs	r0, #3
 8007d46:	4586      	cmp	lr, r0
 8007d48:	bf38      	it	cc
 8007d4a:	2100      	movcc	r1, #0
 8007d4c:	440b      	add	r3, r1
 8007d4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d52:	b189      	cbz	r1, 8007d78 <__mdiff+0x10c>
 8007d54:	6117      	str	r7, [r2, #16]
 8007d56:	e7a3      	b.n	8007ca0 <__mdiff+0x34>
 8007d58:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d5c:	fa1f f188 	uxth.w	r1, r8
 8007d60:	4461      	add	r1, ip
 8007d62:	140c      	asrs	r4, r1, #16
 8007d64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d68:	b289      	uxth	r1, r1
 8007d6a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d6e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007d72:	f846 1b04 	str.w	r1, [r6], #4
 8007d76:	e7de      	b.n	8007d36 <__mdiff+0xca>
 8007d78:	3f01      	subs	r7, #1
 8007d7a:	e7e8      	b.n	8007d4e <__mdiff+0xe2>
 8007d7c:	08008a62 	.word	0x08008a62
 8007d80:	08008a73 	.word	0x08008a73

08007d84 <__d2b>:
 8007d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d86:	2101      	movs	r1, #1
 8007d88:	4617      	mov	r7, r2
 8007d8a:	461c      	mov	r4, r3
 8007d8c:	9e08      	ldr	r6, [sp, #32]
 8007d8e:	f7ff fcd7 	bl	8007740 <_Balloc>
 8007d92:	4605      	mov	r5, r0
 8007d94:	b930      	cbnz	r0, 8007da4 <__d2b+0x20>
 8007d96:	4602      	mov	r2, r0
 8007d98:	f240 310f 	movw	r1, #783	; 0x30f
 8007d9c:	4b22      	ldr	r3, [pc, #136]	; (8007e28 <__d2b+0xa4>)
 8007d9e:	4823      	ldr	r0, [pc, #140]	; (8007e2c <__d2b+0xa8>)
 8007da0:	f000 fa80 	bl	80082a4 <__assert_func>
 8007da4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007da8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007dac:	bb24      	cbnz	r4, 8007df8 <__d2b+0x74>
 8007dae:	2f00      	cmp	r7, #0
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	d026      	beq.n	8007e02 <__d2b+0x7e>
 8007db4:	4668      	mov	r0, sp
 8007db6:	9700      	str	r7, [sp, #0]
 8007db8:	f7ff fd8a 	bl	80078d0 <__lo0bits>
 8007dbc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dc0:	b1e8      	cbz	r0, 8007dfe <__d2b+0x7a>
 8007dc2:	f1c0 0320 	rsb	r3, r0, #32
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	40c2      	lsrs	r2, r0
 8007dce:	616b      	str	r3, [r5, #20]
 8007dd0:	9201      	str	r2, [sp, #4]
 8007dd2:	9b01      	ldr	r3, [sp, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf14      	ite	ne
 8007dd8:	2102      	movne	r1, #2
 8007dda:	2101      	moveq	r1, #1
 8007ddc:	61ab      	str	r3, [r5, #24]
 8007dde:	6129      	str	r1, [r5, #16]
 8007de0:	b1bc      	cbz	r4, 8007e12 <__d2b+0x8e>
 8007de2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007de6:	4404      	add	r4, r0
 8007de8:	6034      	str	r4, [r6, #0]
 8007dea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df0:	6018      	str	r0, [r3, #0]
 8007df2:	4628      	mov	r0, r5
 8007df4:	b003      	add	sp, #12
 8007df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dfc:	e7d7      	b.n	8007dae <__d2b+0x2a>
 8007dfe:	6169      	str	r1, [r5, #20]
 8007e00:	e7e7      	b.n	8007dd2 <__d2b+0x4e>
 8007e02:	a801      	add	r0, sp, #4
 8007e04:	f7ff fd64 	bl	80078d0 <__lo0bits>
 8007e08:	9b01      	ldr	r3, [sp, #4]
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	616b      	str	r3, [r5, #20]
 8007e0e:	3020      	adds	r0, #32
 8007e10:	e7e5      	b.n	8007dde <__d2b+0x5a>
 8007e12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e16:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007e1a:	6030      	str	r0, [r6, #0]
 8007e1c:	6918      	ldr	r0, [r3, #16]
 8007e1e:	f7ff fd37 	bl	8007890 <__hi0bits>
 8007e22:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e26:	e7e2      	b.n	8007dee <__d2b+0x6a>
 8007e28:	08008a62 	.word	0x08008a62
 8007e2c:	08008a73 	.word	0x08008a73

08007e30 <__ssputs_r>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	461f      	mov	r7, r3
 8007e36:	688e      	ldr	r6, [r1, #8]
 8007e38:	4682      	mov	sl, r0
 8007e3a:	42be      	cmp	r6, r7
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	4690      	mov	r8, r2
 8007e40:	680b      	ldr	r3, [r1, #0]
 8007e42:	d82c      	bhi.n	8007e9e <__ssputs_r+0x6e>
 8007e44:	898a      	ldrh	r2, [r1, #12]
 8007e46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e4a:	d026      	beq.n	8007e9a <__ssputs_r+0x6a>
 8007e4c:	6965      	ldr	r5, [r4, #20]
 8007e4e:	6909      	ldr	r1, [r1, #16]
 8007e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e54:	eba3 0901 	sub.w	r9, r3, r1
 8007e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e5c:	1c7b      	adds	r3, r7, #1
 8007e5e:	444b      	add	r3, r9
 8007e60:	106d      	asrs	r5, r5, #1
 8007e62:	429d      	cmp	r5, r3
 8007e64:	bf38      	it	cc
 8007e66:	461d      	movcc	r5, r3
 8007e68:	0553      	lsls	r3, r2, #21
 8007e6a:	d527      	bpl.n	8007ebc <__ssputs_r+0x8c>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	f7ff fbdb 	bl	8007628 <_malloc_r>
 8007e72:	4606      	mov	r6, r0
 8007e74:	b360      	cbz	r0, 8007ed0 <__ssputs_r+0xa0>
 8007e76:	464a      	mov	r2, r9
 8007e78:	6921      	ldr	r1, [r4, #16]
 8007e7a:	f000 fa05 	bl	8008288 <memcpy>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	6126      	str	r6, [r4, #16]
 8007e8c:	444e      	add	r6, r9
 8007e8e:	6026      	str	r6, [r4, #0]
 8007e90:	463e      	mov	r6, r7
 8007e92:	6165      	str	r5, [r4, #20]
 8007e94:	eba5 0509 	sub.w	r5, r5, r9
 8007e98:	60a5      	str	r5, [r4, #8]
 8007e9a:	42be      	cmp	r6, r7
 8007e9c:	d900      	bls.n	8007ea0 <__ssputs_r+0x70>
 8007e9e:	463e      	mov	r6, r7
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	f000 f9c5 	bl	8008234 <memmove>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	68a3      	ldr	r3, [r4, #8]
 8007eae:	1b9b      	subs	r3, r3, r6
 8007eb0:	60a3      	str	r3, [r4, #8]
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	4433      	add	r3, r6
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	f000 fa35 	bl	800832c <_realloc_r>
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1e0      	bne.n	8007e8a <__ssputs_r+0x5a>
 8007ec8:	4650      	mov	r0, sl
 8007eca:	6921      	ldr	r1, [r4, #16]
 8007ecc:	f7ff fb3c 	bl	8007548 <_free_r>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	f8ca 3000 	str.w	r3, [sl]
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	e7e9      	b.n	8007eb8 <__ssputs_r+0x88>

08007ee4 <_svfiprintf_r>:
 8007ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	4698      	mov	r8, r3
 8007eea:	898b      	ldrh	r3, [r1, #12]
 8007eec:	4607      	mov	r7, r0
 8007eee:	061b      	lsls	r3, r3, #24
 8007ef0:	460d      	mov	r5, r1
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	b09d      	sub	sp, #116	; 0x74
 8007ef6:	d50e      	bpl.n	8007f16 <_svfiprintf_r+0x32>
 8007ef8:	690b      	ldr	r3, [r1, #16]
 8007efa:	b963      	cbnz	r3, 8007f16 <_svfiprintf_r+0x32>
 8007efc:	2140      	movs	r1, #64	; 0x40
 8007efe:	f7ff fb93 	bl	8007628 <_malloc_r>
 8007f02:	6028      	str	r0, [r5, #0]
 8007f04:	6128      	str	r0, [r5, #16]
 8007f06:	b920      	cbnz	r0, 8007f12 <_svfiprintf_r+0x2e>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	e0d0      	b.n	80080b4 <_svfiprintf_r+0x1d0>
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	616b      	str	r3, [r5, #20]
 8007f16:	2300      	movs	r3, #0
 8007f18:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1a:	2320      	movs	r3, #32
 8007f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f20:	2330      	movs	r3, #48	; 0x30
 8007f22:	f04f 0901 	mov.w	r9, #1
 8007f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80080cc <_svfiprintf_r+0x1e8>
 8007f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f32:	4623      	mov	r3, r4
 8007f34:	469a      	mov	sl, r3
 8007f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f3a:	b10a      	cbz	r2, 8007f40 <_svfiprintf_r+0x5c>
 8007f3c:	2a25      	cmp	r2, #37	; 0x25
 8007f3e:	d1f9      	bne.n	8007f34 <_svfiprintf_r+0x50>
 8007f40:	ebba 0b04 	subs.w	fp, sl, r4
 8007f44:	d00b      	beq.n	8007f5e <_svfiprintf_r+0x7a>
 8007f46:	465b      	mov	r3, fp
 8007f48:	4622      	mov	r2, r4
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7ff ff6f 	bl	8007e30 <__ssputs_r>
 8007f52:	3001      	adds	r0, #1
 8007f54:	f000 80a9 	beq.w	80080aa <_svfiprintf_r+0x1c6>
 8007f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f5a:	445a      	add	r2, fp
 8007f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 80a1 	beq.w	80080aa <_svfiprintf_r+0x1c6>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f72:	f10a 0a01 	add.w	sl, sl, #1
 8007f76:	9304      	str	r3, [sp, #16]
 8007f78:	9307      	str	r3, [sp, #28]
 8007f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f80:	4654      	mov	r4, sl
 8007f82:	2205      	movs	r2, #5
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	4850      	ldr	r0, [pc, #320]	; (80080cc <_svfiprintf_r+0x1e8>)
 8007f8a:	f7fe fc60 	bl	800684e <memchr>
 8007f8e:	9a04      	ldr	r2, [sp, #16]
 8007f90:	b9d8      	cbnz	r0, 8007fca <_svfiprintf_r+0xe6>
 8007f92:	06d0      	lsls	r0, r2, #27
 8007f94:	bf44      	itt	mi
 8007f96:	2320      	movmi	r3, #32
 8007f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f9c:	0711      	lsls	r1, r2, #28
 8007f9e:	bf44      	itt	mi
 8007fa0:	232b      	movmi	r3, #43	; 0x2b
 8007fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007faa:	2b2a      	cmp	r3, #42	; 0x2a
 8007fac:	d015      	beq.n	8007fda <_svfiprintf_r+0xf6>
 8007fae:	4654      	mov	r4, sl
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	f04f 0c0a 	mov.w	ip, #10
 8007fb6:	9a07      	ldr	r2, [sp, #28]
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fbe:	3b30      	subs	r3, #48	; 0x30
 8007fc0:	2b09      	cmp	r3, #9
 8007fc2:	d94d      	bls.n	8008060 <_svfiprintf_r+0x17c>
 8007fc4:	b1b0      	cbz	r0, 8007ff4 <_svfiprintf_r+0x110>
 8007fc6:	9207      	str	r2, [sp, #28]
 8007fc8:	e014      	b.n	8007ff4 <_svfiprintf_r+0x110>
 8007fca:	eba0 0308 	sub.w	r3, r0, r8
 8007fce:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	46a2      	mov	sl, r4
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	e7d2      	b.n	8007f80 <_svfiprintf_r+0x9c>
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	1d19      	adds	r1, r3, #4
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	9103      	str	r1, [sp, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bfbb      	ittet	lt
 8007fe6:	425b      	neglt	r3, r3
 8007fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8007fec:	9307      	strge	r3, [sp, #28]
 8007fee:	9307      	strlt	r3, [sp, #28]
 8007ff0:	bfb8      	it	lt
 8007ff2:	9204      	strlt	r2, [sp, #16]
 8007ff4:	7823      	ldrb	r3, [r4, #0]
 8007ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ff8:	d10c      	bne.n	8008014 <_svfiprintf_r+0x130>
 8007ffa:	7863      	ldrb	r3, [r4, #1]
 8007ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffe:	d134      	bne.n	800806a <_svfiprintf_r+0x186>
 8008000:	9b03      	ldr	r3, [sp, #12]
 8008002:	3402      	adds	r4, #2
 8008004:	1d1a      	adds	r2, r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	9203      	str	r2, [sp, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bfb8      	it	lt
 800800e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80080d0 <_svfiprintf_r+0x1ec>
 8008018:	2203      	movs	r2, #3
 800801a:	4650      	mov	r0, sl
 800801c:	7821      	ldrb	r1, [r4, #0]
 800801e:	f7fe fc16 	bl	800684e <memchr>
 8008022:	b138      	cbz	r0, 8008034 <_svfiprintf_r+0x150>
 8008024:	2240      	movs	r2, #64	; 0x40
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	eba0 000a 	sub.w	r0, r0, sl
 800802c:	4082      	lsls	r2, r0
 800802e:	4313      	orrs	r3, r2
 8008030:	3401      	adds	r4, #1
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008038:	2206      	movs	r2, #6
 800803a:	4826      	ldr	r0, [pc, #152]	; (80080d4 <_svfiprintf_r+0x1f0>)
 800803c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008040:	f7fe fc05 	bl	800684e <memchr>
 8008044:	2800      	cmp	r0, #0
 8008046:	d038      	beq.n	80080ba <_svfiprintf_r+0x1d6>
 8008048:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <_svfiprintf_r+0x1f4>)
 800804a:	bb1b      	cbnz	r3, 8008094 <_svfiprintf_r+0x1b0>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	3307      	adds	r3, #7
 8008050:	f023 0307 	bic.w	r3, r3, #7
 8008054:	3308      	adds	r3, #8
 8008056:	9303      	str	r3, [sp, #12]
 8008058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805a:	4433      	add	r3, r6
 800805c:	9309      	str	r3, [sp, #36]	; 0x24
 800805e:	e768      	b.n	8007f32 <_svfiprintf_r+0x4e>
 8008060:	460c      	mov	r4, r1
 8008062:	2001      	movs	r0, #1
 8008064:	fb0c 3202 	mla	r2, ip, r2, r3
 8008068:	e7a6      	b.n	8007fb8 <_svfiprintf_r+0xd4>
 800806a:	2300      	movs	r3, #0
 800806c:	f04f 0c0a 	mov.w	ip, #10
 8008070:	4619      	mov	r1, r3
 8008072:	3401      	adds	r4, #1
 8008074:	9305      	str	r3, [sp, #20]
 8008076:	4620      	mov	r0, r4
 8008078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800807c:	3a30      	subs	r2, #48	; 0x30
 800807e:	2a09      	cmp	r2, #9
 8008080:	d903      	bls.n	800808a <_svfiprintf_r+0x1a6>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0c6      	beq.n	8008014 <_svfiprintf_r+0x130>
 8008086:	9105      	str	r1, [sp, #20]
 8008088:	e7c4      	b.n	8008014 <_svfiprintf_r+0x130>
 800808a:	4604      	mov	r4, r0
 800808c:	2301      	movs	r3, #1
 800808e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008092:	e7f0      	b.n	8008076 <_svfiprintf_r+0x192>
 8008094:	ab03      	add	r3, sp, #12
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	462a      	mov	r2, r5
 800809a:	4638      	mov	r0, r7
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <_svfiprintf_r+0x1f8>)
 800809e:	a904      	add	r1, sp, #16
 80080a0:	f7fd fe6e 	bl	8005d80 <_printf_float>
 80080a4:	1c42      	adds	r2, r0, #1
 80080a6:	4606      	mov	r6, r0
 80080a8:	d1d6      	bne.n	8008058 <_svfiprintf_r+0x174>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	065b      	lsls	r3, r3, #25
 80080ae:	f53f af2d 	bmi.w	8007f0c <_svfiprintf_r+0x28>
 80080b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080b4:	b01d      	add	sp, #116	; 0x74
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	ab03      	add	r3, sp, #12
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	462a      	mov	r2, r5
 80080c0:	4638      	mov	r0, r7
 80080c2:	4b06      	ldr	r3, [pc, #24]	; (80080dc <_svfiprintf_r+0x1f8>)
 80080c4:	a904      	add	r1, sp, #16
 80080c6:	f7fe f8fb 	bl	80062c0 <_printf_i>
 80080ca:	e7eb      	b.n	80080a4 <_svfiprintf_r+0x1c0>
 80080cc:	08008bcc 	.word	0x08008bcc
 80080d0:	08008bd2 	.word	0x08008bd2
 80080d4:	08008bd6 	.word	0x08008bd6
 80080d8:	08005d81 	.word	0x08005d81
 80080dc:	08007e31 	.word	0x08007e31

080080e0 <__sflush_r>:
 80080e0:	898a      	ldrh	r2, [r1, #12]
 80080e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e4:	4605      	mov	r5, r0
 80080e6:	0710      	lsls	r0, r2, #28
 80080e8:	460c      	mov	r4, r1
 80080ea:	d457      	bmi.n	800819c <__sflush_r+0xbc>
 80080ec:	684b      	ldr	r3, [r1, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dc04      	bgt.n	80080fc <__sflush_r+0x1c>
 80080f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	dc01      	bgt.n	80080fc <__sflush_r+0x1c>
 80080f8:	2000      	movs	r0, #0
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080fe:	2e00      	cmp	r6, #0
 8008100:	d0fa      	beq.n	80080f8 <__sflush_r+0x18>
 8008102:	2300      	movs	r3, #0
 8008104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008108:	682f      	ldr	r7, [r5, #0]
 800810a:	6a21      	ldr	r1, [r4, #32]
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	d032      	beq.n	8008176 <__sflush_r+0x96>
 8008110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	075a      	lsls	r2, r3, #29
 8008116:	d505      	bpl.n	8008124 <__sflush_r+0x44>
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	1ac0      	subs	r0, r0, r3
 800811c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800811e:	b10b      	cbz	r3, 8008124 <__sflush_r+0x44>
 8008120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008122:	1ac0      	subs	r0, r0, r3
 8008124:	2300      	movs	r3, #0
 8008126:	4602      	mov	r2, r0
 8008128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812a:	4628      	mov	r0, r5
 800812c:	6a21      	ldr	r1, [r4, #32]
 800812e:	47b0      	blx	r6
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	d106      	bne.n	8008144 <__sflush_r+0x64>
 8008136:	6829      	ldr	r1, [r5, #0]
 8008138:	291d      	cmp	r1, #29
 800813a:	d82b      	bhi.n	8008194 <__sflush_r+0xb4>
 800813c:	4a28      	ldr	r2, [pc, #160]	; (80081e0 <__sflush_r+0x100>)
 800813e:	410a      	asrs	r2, r1
 8008140:	07d6      	lsls	r6, r2, #31
 8008142:	d427      	bmi.n	8008194 <__sflush_r+0xb4>
 8008144:	2200      	movs	r2, #0
 8008146:	6062      	str	r2, [r4, #4]
 8008148:	6922      	ldr	r2, [r4, #16]
 800814a:	04d9      	lsls	r1, r3, #19
 800814c:	6022      	str	r2, [r4, #0]
 800814e:	d504      	bpl.n	800815a <__sflush_r+0x7a>
 8008150:	1c42      	adds	r2, r0, #1
 8008152:	d101      	bne.n	8008158 <__sflush_r+0x78>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b903      	cbnz	r3, 800815a <__sflush_r+0x7a>
 8008158:	6560      	str	r0, [r4, #84]	; 0x54
 800815a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800815c:	602f      	str	r7, [r5, #0]
 800815e:	2900      	cmp	r1, #0
 8008160:	d0ca      	beq.n	80080f8 <__sflush_r+0x18>
 8008162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008166:	4299      	cmp	r1, r3
 8008168:	d002      	beq.n	8008170 <__sflush_r+0x90>
 800816a:	4628      	mov	r0, r5
 800816c:	f7ff f9ec 	bl	8007548 <_free_r>
 8008170:	2000      	movs	r0, #0
 8008172:	6360      	str	r0, [r4, #52]	; 0x34
 8008174:	e7c1      	b.n	80080fa <__sflush_r+0x1a>
 8008176:	2301      	movs	r3, #1
 8008178:	4628      	mov	r0, r5
 800817a:	47b0      	blx	r6
 800817c:	1c41      	adds	r1, r0, #1
 800817e:	d1c8      	bne.n	8008112 <__sflush_r+0x32>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0c5      	beq.n	8008112 <__sflush_r+0x32>
 8008186:	2b1d      	cmp	r3, #29
 8008188:	d001      	beq.n	800818e <__sflush_r+0xae>
 800818a:	2b16      	cmp	r3, #22
 800818c:	d101      	bne.n	8008192 <__sflush_r+0xb2>
 800818e:	602f      	str	r7, [r5, #0]
 8008190:	e7b2      	b.n	80080f8 <__sflush_r+0x18>
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	e7ae      	b.n	80080fa <__sflush_r+0x1a>
 800819c:	690f      	ldr	r7, [r1, #16]
 800819e:	2f00      	cmp	r7, #0
 80081a0:	d0aa      	beq.n	80080f8 <__sflush_r+0x18>
 80081a2:	0793      	lsls	r3, r2, #30
 80081a4:	bf18      	it	ne
 80081a6:	2300      	movne	r3, #0
 80081a8:	680e      	ldr	r6, [r1, #0]
 80081aa:	bf08      	it	eq
 80081ac:	694b      	ldreq	r3, [r1, #20]
 80081ae:	1bf6      	subs	r6, r6, r7
 80081b0:	600f      	str	r7, [r1, #0]
 80081b2:	608b      	str	r3, [r1, #8]
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	dd9f      	ble.n	80080f8 <__sflush_r+0x18>
 80081b8:	4633      	mov	r3, r6
 80081ba:	463a      	mov	r2, r7
 80081bc:	4628      	mov	r0, r5
 80081be:	6a21      	ldr	r1, [r4, #32]
 80081c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80081c4:	47e0      	blx	ip
 80081c6:	2800      	cmp	r0, #0
 80081c8:	dc06      	bgt.n	80081d8 <__sflush_r+0xf8>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	e790      	b.n	80080fa <__sflush_r+0x1a>
 80081d8:	4407      	add	r7, r0
 80081da:	1a36      	subs	r6, r6, r0
 80081dc:	e7ea      	b.n	80081b4 <__sflush_r+0xd4>
 80081de:	bf00      	nop
 80081e0:	dfbffffe 	.word	0xdfbffffe

080081e4 <_fflush_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	690b      	ldr	r3, [r1, #16]
 80081e8:	4605      	mov	r5, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	b913      	cbnz	r3, 80081f4 <_fflush_r+0x10>
 80081ee:	2500      	movs	r5, #0
 80081f0:	4628      	mov	r0, r5
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	b118      	cbz	r0, 80081fe <_fflush_r+0x1a>
 80081f6:	6a03      	ldr	r3, [r0, #32]
 80081f8:	b90b      	cbnz	r3, 80081fe <_fflush_r+0x1a>
 80081fa:	f7fe fa0f 	bl	800661c <__sinit>
 80081fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f3      	beq.n	80081ee <_fflush_r+0xa>
 8008206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008208:	07d0      	lsls	r0, r2, #31
 800820a:	d404      	bmi.n	8008216 <_fflush_r+0x32>
 800820c:	0599      	lsls	r1, r3, #22
 800820e:	d402      	bmi.n	8008216 <_fflush_r+0x32>
 8008210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008212:	f7fe fb1a 	bl	800684a <__retarget_lock_acquire_recursive>
 8008216:	4628      	mov	r0, r5
 8008218:	4621      	mov	r1, r4
 800821a:	f7ff ff61 	bl	80080e0 <__sflush_r>
 800821e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008220:	4605      	mov	r5, r0
 8008222:	07da      	lsls	r2, r3, #31
 8008224:	d4e4      	bmi.n	80081f0 <_fflush_r+0xc>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	059b      	lsls	r3, r3, #22
 800822a:	d4e1      	bmi.n	80081f0 <_fflush_r+0xc>
 800822c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800822e:	f7fe fb0d 	bl	800684c <__retarget_lock_release_recursive>
 8008232:	e7dd      	b.n	80081f0 <_fflush_r+0xc>

08008234 <memmove>:
 8008234:	4288      	cmp	r0, r1
 8008236:	b510      	push	{r4, lr}
 8008238:	eb01 0402 	add.w	r4, r1, r2
 800823c:	d902      	bls.n	8008244 <memmove+0x10>
 800823e:	4284      	cmp	r4, r0
 8008240:	4623      	mov	r3, r4
 8008242:	d807      	bhi.n	8008254 <memmove+0x20>
 8008244:	1e43      	subs	r3, r0, #1
 8008246:	42a1      	cmp	r1, r4
 8008248:	d008      	beq.n	800825c <memmove+0x28>
 800824a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800824e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008252:	e7f8      	b.n	8008246 <memmove+0x12>
 8008254:	4601      	mov	r1, r0
 8008256:	4402      	add	r2, r0
 8008258:	428a      	cmp	r2, r1
 800825a:	d100      	bne.n	800825e <memmove+0x2a>
 800825c:	bd10      	pop	{r4, pc}
 800825e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008266:	e7f7      	b.n	8008258 <memmove+0x24>

08008268 <_sbrk_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	2300      	movs	r3, #0
 800826c:	4d05      	ldr	r5, [pc, #20]	; (8008284 <_sbrk_r+0x1c>)
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7fa fa0a 	bl	800268c <_sbrk>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_sbrk_r+0x1a>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_sbrk_r+0x1a>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	200005f0 	.word	0x200005f0

08008288 <memcpy>:
 8008288:	440a      	add	r2, r1
 800828a:	4291      	cmp	r1, r2
 800828c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008290:	d100      	bne.n	8008294 <memcpy+0xc>
 8008292:	4770      	bx	lr
 8008294:	b510      	push	{r4, lr}
 8008296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800829a:	4291      	cmp	r1, r2
 800829c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082a0:	d1f9      	bne.n	8008296 <memcpy+0xe>
 80082a2:	bd10      	pop	{r4, pc}

080082a4 <__assert_func>:
 80082a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082a6:	4614      	mov	r4, r2
 80082a8:	461a      	mov	r2, r3
 80082aa:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <__assert_func+0x2c>)
 80082ac:	4605      	mov	r5, r0
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68d8      	ldr	r0, [r3, #12]
 80082b2:	b14c      	cbz	r4, 80082c8 <__assert_func+0x24>
 80082b4:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <__assert_func+0x30>)
 80082b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082ba:	9100      	str	r1, [sp, #0]
 80082bc:	462b      	mov	r3, r5
 80082be:	4906      	ldr	r1, [pc, #24]	; (80082d8 <__assert_func+0x34>)
 80082c0:	f000 f870 	bl	80083a4 <fiprintf>
 80082c4:	f000 f880 	bl	80083c8 <abort>
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <__assert_func+0x38>)
 80082ca:	461c      	mov	r4, r3
 80082cc:	e7f3      	b.n	80082b6 <__assert_func+0x12>
 80082ce:	bf00      	nop
 80082d0:	20000070 	.word	0x20000070
 80082d4:	08008be7 	.word	0x08008be7
 80082d8:	08008bf4 	.word	0x08008bf4
 80082dc:	08008c22 	.word	0x08008c22

080082e0 <_calloc_r>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	fba1 5402 	umull	r5, r4, r1, r2
 80082e6:	b934      	cbnz	r4, 80082f6 <_calloc_r+0x16>
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7ff f99d 	bl	8007628 <_malloc_r>
 80082ee:	4606      	mov	r6, r0
 80082f0:	b928      	cbnz	r0, 80082fe <_calloc_r+0x1e>
 80082f2:	4630      	mov	r0, r6
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	220c      	movs	r2, #12
 80082f8:	2600      	movs	r6, #0
 80082fa:	6002      	str	r2, [r0, #0]
 80082fc:	e7f9      	b.n	80082f2 <_calloc_r+0x12>
 80082fe:	462a      	mov	r2, r5
 8008300:	4621      	mov	r1, r4
 8008302:	f7fe fa24 	bl	800674e <memset>
 8008306:	e7f4      	b.n	80082f2 <_calloc_r+0x12>

08008308 <__ascii_mbtowc>:
 8008308:	b082      	sub	sp, #8
 800830a:	b901      	cbnz	r1, 800830e <__ascii_mbtowc+0x6>
 800830c:	a901      	add	r1, sp, #4
 800830e:	b142      	cbz	r2, 8008322 <__ascii_mbtowc+0x1a>
 8008310:	b14b      	cbz	r3, 8008326 <__ascii_mbtowc+0x1e>
 8008312:	7813      	ldrb	r3, [r2, #0]
 8008314:	600b      	str	r3, [r1, #0]
 8008316:	7812      	ldrb	r2, [r2, #0]
 8008318:	1e10      	subs	r0, r2, #0
 800831a:	bf18      	it	ne
 800831c:	2001      	movne	r0, #1
 800831e:	b002      	add	sp, #8
 8008320:	4770      	bx	lr
 8008322:	4610      	mov	r0, r2
 8008324:	e7fb      	b.n	800831e <__ascii_mbtowc+0x16>
 8008326:	f06f 0001 	mvn.w	r0, #1
 800832a:	e7f8      	b.n	800831e <__ascii_mbtowc+0x16>

0800832c <_realloc_r>:
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	4680      	mov	r8, r0
 8008332:	4614      	mov	r4, r2
 8008334:	460e      	mov	r6, r1
 8008336:	b921      	cbnz	r1, 8008342 <_realloc_r+0x16>
 8008338:	4611      	mov	r1, r2
 800833a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800833e:	f7ff b973 	b.w	8007628 <_malloc_r>
 8008342:	b92a      	cbnz	r2, 8008350 <_realloc_r+0x24>
 8008344:	f7ff f900 	bl	8007548 <_free_r>
 8008348:	4625      	mov	r5, r4
 800834a:	4628      	mov	r0, r5
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	f000 f841 	bl	80083d6 <_malloc_usable_size_r>
 8008354:	4284      	cmp	r4, r0
 8008356:	4607      	mov	r7, r0
 8008358:	d802      	bhi.n	8008360 <_realloc_r+0x34>
 800835a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800835e:	d812      	bhi.n	8008386 <_realloc_r+0x5a>
 8008360:	4621      	mov	r1, r4
 8008362:	4640      	mov	r0, r8
 8008364:	f7ff f960 	bl	8007628 <_malloc_r>
 8008368:	4605      	mov	r5, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	d0ed      	beq.n	800834a <_realloc_r+0x1e>
 800836e:	42bc      	cmp	r4, r7
 8008370:	4622      	mov	r2, r4
 8008372:	4631      	mov	r1, r6
 8008374:	bf28      	it	cs
 8008376:	463a      	movcs	r2, r7
 8008378:	f7ff ff86 	bl	8008288 <memcpy>
 800837c:	4631      	mov	r1, r6
 800837e:	4640      	mov	r0, r8
 8008380:	f7ff f8e2 	bl	8007548 <_free_r>
 8008384:	e7e1      	b.n	800834a <_realloc_r+0x1e>
 8008386:	4635      	mov	r5, r6
 8008388:	e7df      	b.n	800834a <_realloc_r+0x1e>

0800838a <__ascii_wctomb>:
 800838a:	4603      	mov	r3, r0
 800838c:	4608      	mov	r0, r1
 800838e:	b141      	cbz	r1, 80083a2 <__ascii_wctomb+0x18>
 8008390:	2aff      	cmp	r2, #255	; 0xff
 8008392:	d904      	bls.n	800839e <__ascii_wctomb+0x14>
 8008394:	228a      	movs	r2, #138	; 0x8a
 8008396:	f04f 30ff 	mov.w	r0, #4294967295
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	4770      	bx	lr
 800839e:	2001      	movs	r0, #1
 80083a0:	700a      	strb	r2, [r1, #0]
 80083a2:	4770      	bx	lr

080083a4 <fiprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	b503      	push	{r0, r1, lr}
 80083a8:	4601      	mov	r1, r0
 80083aa:	ab03      	add	r3, sp, #12
 80083ac:	4805      	ldr	r0, [pc, #20]	; (80083c4 <fiprintf+0x20>)
 80083ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b2:	6800      	ldr	r0, [r0, #0]
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	f000 f83d 	bl	8008434 <_vfiprintf_r>
 80083ba:	b002      	add	sp, #8
 80083bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083c0:	b003      	add	sp, #12
 80083c2:	4770      	bx	lr
 80083c4:	20000070 	.word	0x20000070

080083c8 <abort>:
 80083c8:	2006      	movs	r0, #6
 80083ca:	b508      	push	{r3, lr}
 80083cc:	f000 fa0a 	bl	80087e4 <raise>
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7fa f8e8 	bl	80025a6 <_exit>

080083d6 <_malloc_usable_size_r>:
 80083d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083da:	1f18      	subs	r0, r3, #4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bfbc      	itt	lt
 80083e0:	580b      	ldrlt	r3, [r1, r0]
 80083e2:	18c0      	addlt	r0, r0, r3
 80083e4:	4770      	bx	lr

080083e6 <__sfputc_r>:
 80083e6:	6893      	ldr	r3, [r2, #8]
 80083e8:	b410      	push	{r4}
 80083ea:	3b01      	subs	r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	6093      	str	r3, [r2, #8]
 80083f0:	da07      	bge.n	8008402 <__sfputc_r+0x1c>
 80083f2:	6994      	ldr	r4, [r2, #24]
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	db01      	blt.n	80083fc <__sfputc_r+0x16>
 80083f8:	290a      	cmp	r1, #10
 80083fa:	d102      	bne.n	8008402 <__sfputc_r+0x1c>
 80083fc:	bc10      	pop	{r4}
 80083fe:	f000 b933 	b.w	8008668 <__swbuf_r>
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	1c58      	adds	r0, r3, #1
 8008406:	6010      	str	r0, [r2, #0]
 8008408:	7019      	strb	r1, [r3, #0]
 800840a:	4608      	mov	r0, r1
 800840c:	bc10      	pop	{r4}
 800840e:	4770      	bx	lr

08008410 <__sfputs_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	4614      	mov	r4, r2
 8008418:	18d5      	adds	r5, r2, r3
 800841a:	42ac      	cmp	r4, r5
 800841c:	d101      	bne.n	8008422 <__sfputs_r+0x12>
 800841e:	2000      	movs	r0, #0
 8008420:	e007      	b.n	8008432 <__sfputs_r+0x22>
 8008422:	463a      	mov	r2, r7
 8008424:	4630      	mov	r0, r6
 8008426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842a:	f7ff ffdc 	bl	80083e6 <__sfputc_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d1f3      	bne.n	800841a <__sfputs_r+0xa>
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008434 <_vfiprintf_r>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	460d      	mov	r5, r1
 800843a:	4614      	mov	r4, r2
 800843c:	4698      	mov	r8, r3
 800843e:	4606      	mov	r6, r0
 8008440:	b09d      	sub	sp, #116	; 0x74
 8008442:	b118      	cbz	r0, 800844c <_vfiprintf_r+0x18>
 8008444:	6a03      	ldr	r3, [r0, #32]
 8008446:	b90b      	cbnz	r3, 800844c <_vfiprintf_r+0x18>
 8008448:	f7fe f8e8 	bl	800661c <__sinit>
 800844c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d405      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d402      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800845a:	f7fe f9f6 	bl	800684a <__retarget_lock_acquire_recursive>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	071b      	lsls	r3, r3, #28
 8008462:	d501      	bpl.n	8008468 <_vfiprintf_r+0x34>
 8008464:	692b      	ldr	r3, [r5, #16]
 8008466:	b99b      	cbnz	r3, 8008490 <_vfiprintf_r+0x5c>
 8008468:	4629      	mov	r1, r5
 800846a:	4630      	mov	r0, r6
 800846c:	f000 f93a 	bl	80086e4 <__swsetup_r>
 8008470:	b170      	cbz	r0, 8008490 <_vfiprintf_r+0x5c>
 8008472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008474:	07dc      	lsls	r4, r3, #31
 8008476:	d504      	bpl.n	8008482 <_vfiprintf_r+0x4e>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	b01d      	add	sp, #116	; 0x74
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	0598      	lsls	r0, r3, #22
 8008486:	d4f7      	bmi.n	8008478 <_vfiprintf_r+0x44>
 8008488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800848a:	f7fe f9df 	bl	800684c <__retarget_lock_release_recursive>
 800848e:	e7f3      	b.n	8008478 <_vfiprintf_r+0x44>
 8008490:	2300      	movs	r3, #0
 8008492:	9309      	str	r3, [sp, #36]	; 0x24
 8008494:	2320      	movs	r3, #32
 8008496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800849a:	2330      	movs	r3, #48	; 0x30
 800849c:	f04f 0901 	mov.w	r9, #1
 80084a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008654 <_vfiprintf_r+0x220>
 80084a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ac:	4623      	mov	r3, r4
 80084ae:	469a      	mov	sl, r3
 80084b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b4:	b10a      	cbz	r2, 80084ba <_vfiprintf_r+0x86>
 80084b6:	2a25      	cmp	r2, #37	; 0x25
 80084b8:	d1f9      	bne.n	80084ae <_vfiprintf_r+0x7a>
 80084ba:	ebba 0b04 	subs.w	fp, sl, r4
 80084be:	d00b      	beq.n	80084d8 <_vfiprintf_r+0xa4>
 80084c0:	465b      	mov	r3, fp
 80084c2:	4622      	mov	r2, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff ffa2 	bl	8008410 <__sfputs_r>
 80084cc:	3001      	adds	r0, #1
 80084ce:	f000 80a9 	beq.w	8008624 <_vfiprintf_r+0x1f0>
 80084d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d4:	445a      	add	r2, fp
 80084d6:	9209      	str	r2, [sp, #36]	; 0x24
 80084d8:	f89a 3000 	ldrb.w	r3, [sl]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80a1 	beq.w	8008624 <_vfiprintf_r+0x1f0>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ec:	f10a 0a01 	add.w	sl, sl, #1
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	9307      	str	r3, [sp, #28]
 80084f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084f8:	931a      	str	r3, [sp, #104]	; 0x68
 80084fa:	4654      	mov	r4, sl
 80084fc:	2205      	movs	r2, #5
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	4854      	ldr	r0, [pc, #336]	; (8008654 <_vfiprintf_r+0x220>)
 8008504:	f7fe f9a3 	bl	800684e <memchr>
 8008508:	9a04      	ldr	r2, [sp, #16]
 800850a:	b9d8      	cbnz	r0, 8008544 <_vfiprintf_r+0x110>
 800850c:	06d1      	lsls	r1, r2, #27
 800850e:	bf44      	itt	mi
 8008510:	2320      	movmi	r3, #32
 8008512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008516:	0713      	lsls	r3, r2, #28
 8008518:	bf44      	itt	mi
 800851a:	232b      	movmi	r3, #43	; 0x2b
 800851c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008520:	f89a 3000 	ldrb.w	r3, [sl]
 8008524:	2b2a      	cmp	r3, #42	; 0x2a
 8008526:	d015      	beq.n	8008554 <_vfiprintf_r+0x120>
 8008528:	4654      	mov	r4, sl
 800852a:	2000      	movs	r0, #0
 800852c:	f04f 0c0a 	mov.w	ip, #10
 8008530:	9a07      	ldr	r2, [sp, #28]
 8008532:	4621      	mov	r1, r4
 8008534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008538:	3b30      	subs	r3, #48	; 0x30
 800853a:	2b09      	cmp	r3, #9
 800853c:	d94d      	bls.n	80085da <_vfiprintf_r+0x1a6>
 800853e:	b1b0      	cbz	r0, 800856e <_vfiprintf_r+0x13a>
 8008540:	9207      	str	r2, [sp, #28]
 8008542:	e014      	b.n	800856e <_vfiprintf_r+0x13a>
 8008544:	eba0 0308 	sub.w	r3, r0, r8
 8008548:	fa09 f303 	lsl.w	r3, r9, r3
 800854c:	4313      	orrs	r3, r2
 800854e:	46a2      	mov	sl, r4
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	e7d2      	b.n	80084fa <_vfiprintf_r+0xc6>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	1d19      	adds	r1, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	9103      	str	r1, [sp, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfbb      	ittet	lt
 8008560:	425b      	neglt	r3, r3
 8008562:	f042 0202 	orrlt.w	r2, r2, #2
 8008566:	9307      	strge	r3, [sp, #28]
 8008568:	9307      	strlt	r3, [sp, #28]
 800856a:	bfb8      	it	lt
 800856c:	9204      	strlt	r2, [sp, #16]
 800856e:	7823      	ldrb	r3, [r4, #0]
 8008570:	2b2e      	cmp	r3, #46	; 0x2e
 8008572:	d10c      	bne.n	800858e <_vfiprintf_r+0x15a>
 8008574:	7863      	ldrb	r3, [r4, #1]
 8008576:	2b2a      	cmp	r3, #42	; 0x2a
 8008578:	d134      	bne.n	80085e4 <_vfiprintf_r+0x1b0>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3402      	adds	r4, #2
 800857e:	1d1a      	adds	r2, r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	9203      	str	r2, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfb8      	it	lt
 8008588:	f04f 33ff 	movlt.w	r3, #4294967295
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008658 <_vfiprintf_r+0x224>
 8008592:	2203      	movs	r2, #3
 8008594:	4650      	mov	r0, sl
 8008596:	7821      	ldrb	r1, [r4, #0]
 8008598:	f7fe f959 	bl	800684e <memchr>
 800859c:	b138      	cbz	r0, 80085ae <_vfiprintf_r+0x17a>
 800859e:	2240      	movs	r2, #64	; 0x40
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	eba0 000a 	sub.w	r0, r0, sl
 80085a6:	4082      	lsls	r2, r0
 80085a8:	4313      	orrs	r3, r2
 80085aa:	3401      	adds	r4, #1
 80085ac:	9304      	str	r3, [sp, #16]
 80085ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b2:	2206      	movs	r2, #6
 80085b4:	4829      	ldr	r0, [pc, #164]	; (800865c <_vfiprintf_r+0x228>)
 80085b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085ba:	f7fe f948 	bl	800684e <memchr>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d03f      	beq.n	8008642 <_vfiprintf_r+0x20e>
 80085c2:	4b27      	ldr	r3, [pc, #156]	; (8008660 <_vfiprintf_r+0x22c>)
 80085c4:	bb1b      	cbnz	r3, 800860e <_vfiprintf_r+0x1da>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	3307      	adds	r3, #7
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	3308      	adds	r3, #8
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d4:	443b      	add	r3, r7
 80085d6:	9309      	str	r3, [sp, #36]	; 0x24
 80085d8:	e768      	b.n	80084ac <_vfiprintf_r+0x78>
 80085da:	460c      	mov	r4, r1
 80085dc:	2001      	movs	r0, #1
 80085de:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e2:	e7a6      	b.n	8008532 <_vfiprintf_r+0xfe>
 80085e4:	2300      	movs	r3, #0
 80085e6:	f04f 0c0a 	mov.w	ip, #10
 80085ea:	4619      	mov	r1, r3
 80085ec:	3401      	adds	r4, #1
 80085ee:	9305      	str	r3, [sp, #20]
 80085f0:	4620      	mov	r0, r4
 80085f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f6:	3a30      	subs	r2, #48	; 0x30
 80085f8:	2a09      	cmp	r2, #9
 80085fa:	d903      	bls.n	8008604 <_vfiprintf_r+0x1d0>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0c6      	beq.n	800858e <_vfiprintf_r+0x15a>
 8008600:	9105      	str	r1, [sp, #20]
 8008602:	e7c4      	b.n	800858e <_vfiprintf_r+0x15a>
 8008604:	4604      	mov	r4, r0
 8008606:	2301      	movs	r3, #1
 8008608:	fb0c 2101 	mla	r1, ip, r1, r2
 800860c:	e7f0      	b.n	80085f0 <_vfiprintf_r+0x1bc>
 800860e:	ab03      	add	r3, sp, #12
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	462a      	mov	r2, r5
 8008614:	4630      	mov	r0, r6
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <_vfiprintf_r+0x230>)
 8008618:	a904      	add	r1, sp, #16
 800861a:	f7fd fbb1 	bl	8005d80 <_printf_float>
 800861e:	4607      	mov	r7, r0
 8008620:	1c78      	adds	r0, r7, #1
 8008622:	d1d6      	bne.n	80085d2 <_vfiprintf_r+0x19e>
 8008624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008626:	07d9      	lsls	r1, r3, #31
 8008628:	d405      	bmi.n	8008636 <_vfiprintf_r+0x202>
 800862a:	89ab      	ldrh	r3, [r5, #12]
 800862c:	059a      	lsls	r2, r3, #22
 800862e:	d402      	bmi.n	8008636 <_vfiprintf_r+0x202>
 8008630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008632:	f7fe f90b 	bl	800684c <__retarget_lock_release_recursive>
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	065b      	lsls	r3, r3, #25
 800863a:	f53f af1d 	bmi.w	8008478 <_vfiprintf_r+0x44>
 800863e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008640:	e71c      	b.n	800847c <_vfiprintf_r+0x48>
 8008642:	ab03      	add	r3, sp, #12
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	462a      	mov	r2, r5
 8008648:	4630      	mov	r0, r6
 800864a:	4b06      	ldr	r3, [pc, #24]	; (8008664 <_vfiprintf_r+0x230>)
 800864c:	a904      	add	r1, sp, #16
 800864e:	f7fd fe37 	bl	80062c0 <_printf_i>
 8008652:	e7e4      	b.n	800861e <_vfiprintf_r+0x1ea>
 8008654:	08008bcc 	.word	0x08008bcc
 8008658:	08008bd2 	.word	0x08008bd2
 800865c:	08008bd6 	.word	0x08008bd6
 8008660:	08005d81 	.word	0x08005d81
 8008664:	08008411 	.word	0x08008411

08008668 <__swbuf_r>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	460e      	mov	r6, r1
 800866c:	4614      	mov	r4, r2
 800866e:	4605      	mov	r5, r0
 8008670:	b118      	cbz	r0, 800867a <__swbuf_r+0x12>
 8008672:	6a03      	ldr	r3, [r0, #32]
 8008674:	b90b      	cbnz	r3, 800867a <__swbuf_r+0x12>
 8008676:	f7fd ffd1 	bl	800661c <__sinit>
 800867a:	69a3      	ldr	r3, [r4, #24]
 800867c:	60a3      	str	r3, [r4, #8]
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	071a      	lsls	r2, r3, #28
 8008682:	d525      	bpl.n	80086d0 <__swbuf_r+0x68>
 8008684:	6923      	ldr	r3, [r4, #16]
 8008686:	b31b      	cbz	r3, 80086d0 <__swbuf_r+0x68>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	6922      	ldr	r2, [r4, #16]
 800868c:	b2f6      	uxtb	r6, r6
 800868e:	1a98      	subs	r0, r3, r2
 8008690:	6963      	ldr	r3, [r4, #20]
 8008692:	4637      	mov	r7, r6
 8008694:	4283      	cmp	r3, r0
 8008696:	dc04      	bgt.n	80086a2 <__swbuf_r+0x3a>
 8008698:	4621      	mov	r1, r4
 800869a:	4628      	mov	r0, r5
 800869c:	f7ff fda2 	bl	80081e4 <_fflush_r>
 80086a0:	b9e0      	cbnz	r0, 80086dc <__swbuf_r+0x74>
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	60a3      	str	r3, [r4, #8]
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	6022      	str	r2, [r4, #0]
 80086ae:	701e      	strb	r6, [r3, #0]
 80086b0:	6962      	ldr	r2, [r4, #20]
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d004      	beq.n	80086c2 <__swbuf_r+0x5a>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	07db      	lsls	r3, r3, #31
 80086bc:	d506      	bpl.n	80086cc <__swbuf_r+0x64>
 80086be:	2e0a      	cmp	r6, #10
 80086c0:	d104      	bne.n	80086cc <__swbuf_r+0x64>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f7ff fd8d 	bl	80081e4 <_fflush_r>
 80086ca:	b938      	cbnz	r0, 80086dc <__swbuf_r+0x74>
 80086cc:	4638      	mov	r0, r7
 80086ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f806 	bl	80086e4 <__swsetup_r>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d0d5      	beq.n	8008688 <__swbuf_r+0x20>
 80086dc:	f04f 37ff 	mov.w	r7, #4294967295
 80086e0:	e7f4      	b.n	80086cc <__swbuf_r+0x64>
	...

080086e4 <__swsetup_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4b2a      	ldr	r3, [pc, #168]	; (8008790 <__swsetup_r+0xac>)
 80086e8:	4605      	mov	r5, r0
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	460c      	mov	r4, r1
 80086ee:	b118      	cbz	r0, 80086f8 <__swsetup_r+0x14>
 80086f0:	6a03      	ldr	r3, [r0, #32]
 80086f2:	b90b      	cbnz	r3, 80086f8 <__swsetup_r+0x14>
 80086f4:	f7fd ff92 	bl	800661c <__sinit>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086fe:	0718      	lsls	r0, r3, #28
 8008700:	d422      	bmi.n	8008748 <__swsetup_r+0x64>
 8008702:	06d9      	lsls	r1, r3, #27
 8008704:	d407      	bmi.n	8008716 <__swsetup_r+0x32>
 8008706:	2309      	movs	r3, #9
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	e034      	b.n	8008780 <__swsetup_r+0x9c>
 8008716:	0758      	lsls	r0, r3, #29
 8008718:	d512      	bpl.n	8008740 <__swsetup_r+0x5c>
 800871a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800871c:	b141      	cbz	r1, 8008730 <__swsetup_r+0x4c>
 800871e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008722:	4299      	cmp	r1, r3
 8008724:	d002      	beq.n	800872c <__swsetup_r+0x48>
 8008726:	4628      	mov	r0, r5
 8008728:	f7fe ff0e 	bl	8007548 <_free_r>
 800872c:	2300      	movs	r3, #0
 800872e:	6363      	str	r3, [r4, #52]	; 0x34
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	2300      	movs	r3, #0
 800873a:	6063      	str	r3, [r4, #4]
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f043 0308 	orr.w	r3, r3, #8
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	b94b      	cbnz	r3, 8008760 <__swsetup_r+0x7c>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008756:	d003      	beq.n	8008760 <__swsetup_r+0x7c>
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f883 	bl	8008866 <__smakebuf_r>
 8008760:	89a0      	ldrh	r0, [r4, #12]
 8008762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008766:	f010 0301 	ands.w	r3, r0, #1
 800876a:	d00a      	beq.n	8008782 <__swsetup_r+0x9e>
 800876c:	2300      	movs	r3, #0
 800876e:	60a3      	str	r3, [r4, #8]
 8008770:	6963      	ldr	r3, [r4, #20]
 8008772:	425b      	negs	r3, r3
 8008774:	61a3      	str	r3, [r4, #24]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	b943      	cbnz	r3, 800878c <__swsetup_r+0xa8>
 800877a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800877e:	d1c4      	bne.n	800870a <__swsetup_r+0x26>
 8008780:	bd38      	pop	{r3, r4, r5, pc}
 8008782:	0781      	lsls	r1, r0, #30
 8008784:	bf58      	it	pl
 8008786:	6963      	ldrpl	r3, [r4, #20]
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	e7f4      	b.n	8008776 <__swsetup_r+0x92>
 800878c:	2000      	movs	r0, #0
 800878e:	e7f7      	b.n	8008780 <__swsetup_r+0x9c>
 8008790:	20000070 	.word	0x20000070

08008794 <_raise_r>:
 8008794:	291f      	cmp	r1, #31
 8008796:	b538      	push	{r3, r4, r5, lr}
 8008798:	4604      	mov	r4, r0
 800879a:	460d      	mov	r5, r1
 800879c:	d904      	bls.n	80087a8 <_raise_r+0x14>
 800879e:	2316      	movs	r3, #22
 80087a0:	6003      	str	r3, [r0, #0]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80087aa:	b112      	cbz	r2, 80087b2 <_raise_r+0x1e>
 80087ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087b0:	b94b      	cbnz	r3, 80087c6 <_raise_r+0x32>
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 f830 	bl	8008818 <_getpid_r>
 80087b8:	462a      	mov	r2, r5
 80087ba:	4601      	mov	r1, r0
 80087bc:	4620      	mov	r0, r4
 80087be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c2:	f000 b817 	b.w	80087f4 <_kill_r>
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d00a      	beq.n	80087e0 <_raise_r+0x4c>
 80087ca:	1c59      	adds	r1, r3, #1
 80087cc:	d103      	bne.n	80087d6 <_raise_r+0x42>
 80087ce:	2316      	movs	r3, #22
 80087d0:	6003      	str	r3, [r0, #0]
 80087d2:	2001      	movs	r0, #1
 80087d4:	e7e7      	b.n	80087a6 <_raise_r+0x12>
 80087d6:	2400      	movs	r4, #0
 80087d8:	4628      	mov	r0, r5
 80087da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087de:	4798      	blx	r3
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7e0      	b.n	80087a6 <_raise_r+0x12>

080087e4 <raise>:
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <raise+0xc>)
 80087e6:	4601      	mov	r1, r0
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f7ff bfd3 	b.w	8008794 <_raise_r>
 80087ee:	bf00      	nop
 80087f0:	20000070 	.word	0x20000070

080087f4 <_kill_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	2300      	movs	r3, #0
 80087f8:	4d06      	ldr	r5, [pc, #24]	; (8008814 <_kill_r+0x20>)
 80087fa:	4604      	mov	r4, r0
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	602b      	str	r3, [r5, #0]
 8008802:	f7f9 fec0 	bl	8002586 <_kill>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d102      	bne.n	8008810 <_kill_r+0x1c>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	b103      	cbz	r3, 8008810 <_kill_r+0x1c>
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	bd38      	pop	{r3, r4, r5, pc}
 8008812:	bf00      	nop
 8008814:	200005f0 	.word	0x200005f0

08008818 <_getpid_r>:
 8008818:	f7f9 beae 	b.w	8002578 <_getpid>

0800881c <__swhatbuf_r>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	460c      	mov	r4, r1
 8008820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008824:	4615      	mov	r5, r2
 8008826:	2900      	cmp	r1, #0
 8008828:	461e      	mov	r6, r3
 800882a:	b096      	sub	sp, #88	; 0x58
 800882c:	da0c      	bge.n	8008848 <__swhatbuf_r+0x2c>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	2100      	movs	r1, #0
 8008832:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008836:	bf0c      	ite	eq
 8008838:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800883c:	2340      	movne	r3, #64	; 0x40
 800883e:	2000      	movs	r0, #0
 8008840:	6031      	str	r1, [r6, #0]
 8008842:	602b      	str	r3, [r5, #0]
 8008844:	b016      	add	sp, #88	; 0x58
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	466a      	mov	r2, sp
 800884a:	f000 f849 	bl	80088e0 <_fstat_r>
 800884e:	2800      	cmp	r0, #0
 8008850:	dbed      	blt.n	800882e <__swhatbuf_r+0x12>
 8008852:	9901      	ldr	r1, [sp, #4]
 8008854:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008858:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800885c:	4259      	negs	r1, r3
 800885e:	4159      	adcs	r1, r3
 8008860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008864:	e7eb      	b.n	800883e <__swhatbuf_r+0x22>

08008866 <__smakebuf_r>:
 8008866:	898b      	ldrh	r3, [r1, #12]
 8008868:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800886a:	079d      	lsls	r5, r3, #30
 800886c:	4606      	mov	r6, r0
 800886e:	460c      	mov	r4, r1
 8008870:	d507      	bpl.n	8008882 <__smakebuf_r+0x1c>
 8008872:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	6123      	str	r3, [r4, #16]
 800887a:	2301      	movs	r3, #1
 800887c:	6163      	str	r3, [r4, #20]
 800887e:	b002      	add	sp, #8
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	466a      	mov	r2, sp
 8008884:	ab01      	add	r3, sp, #4
 8008886:	f7ff ffc9 	bl	800881c <__swhatbuf_r>
 800888a:	9900      	ldr	r1, [sp, #0]
 800888c:	4605      	mov	r5, r0
 800888e:	4630      	mov	r0, r6
 8008890:	f7fe feca 	bl	8007628 <_malloc_r>
 8008894:	b948      	cbnz	r0, 80088aa <__smakebuf_r+0x44>
 8008896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800889a:	059a      	lsls	r2, r3, #22
 800889c:	d4ef      	bmi.n	800887e <__smakebuf_r+0x18>
 800889e:	f023 0303 	bic.w	r3, r3, #3
 80088a2:	f043 0302 	orr.w	r3, r3, #2
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	e7e3      	b.n	8008872 <__smakebuf_r+0xc>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	6020      	str	r0, [r4, #0]
 80088ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	9b00      	ldr	r3, [sp, #0]
 80088b6:	6120      	str	r0, [r4, #16]
 80088b8:	6163      	str	r3, [r4, #20]
 80088ba:	9b01      	ldr	r3, [sp, #4]
 80088bc:	b15b      	cbz	r3, 80088d6 <__smakebuf_r+0x70>
 80088be:	4630      	mov	r0, r6
 80088c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c4:	f000 f81e 	bl	8008904 <_isatty_r>
 80088c8:	b128      	cbz	r0, 80088d6 <__smakebuf_r+0x70>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	f023 0303 	bic.w	r3, r3, #3
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	81a3      	strh	r3, [r4, #12]
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	431d      	orrs	r5, r3
 80088da:	81a5      	strh	r5, [r4, #12]
 80088dc:	e7cf      	b.n	800887e <__smakebuf_r+0x18>
	...

080088e0 <_fstat_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	2300      	movs	r3, #0
 80088e4:	4d06      	ldr	r5, [pc, #24]	; (8008900 <_fstat_r+0x20>)
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	4611      	mov	r1, r2
 80088ec:	602b      	str	r3, [r5, #0]
 80088ee:	f7f9 fea8 	bl	8002642 <_fstat>
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	d102      	bne.n	80088fc <_fstat_r+0x1c>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	b103      	cbz	r3, 80088fc <_fstat_r+0x1c>
 80088fa:	6023      	str	r3, [r4, #0]
 80088fc:	bd38      	pop	{r3, r4, r5, pc}
 80088fe:	bf00      	nop
 8008900:	200005f0 	.word	0x200005f0

08008904 <_isatty_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	2300      	movs	r3, #0
 8008908:	4d05      	ldr	r5, [pc, #20]	; (8008920 <_isatty_r+0x1c>)
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	602b      	str	r3, [r5, #0]
 8008910:	f7f9 fea6 	bl	8002660 <_isatty>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_isatty_r+0x1a>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_isatty_r+0x1a>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	200005f0 	.word	0x200005f0

08008924 <_init>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr

08008930 <_fini>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	bf00      	nop
 8008934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008936:	bc08      	pop	{r3}
 8008938:	469e      	mov	lr, r3
 800893a:	4770      	bx	lr
