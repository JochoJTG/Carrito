
PlantIdentification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e94  08003e94  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003e94  08003e94  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e94  08003e94  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000060  08003efc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08003efc  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5e0  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df8  00000000  00000000  0002e6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  000304a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb0  00000000  00000000  00031360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e74  00000000  00000000  00031f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001117a  00000000  00000000  00049d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c994  00000000  00000000  0005aefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043d8  00000000  00000000  000e7894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000ebc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e10 	.word	0x08003e10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003e10 	.word	0x08003e10

0800014c <Forward>:
 *      Author: Jorge
 */

#include "main.h"

void Forward(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); //izq atras
 8000150:	2200      	movs	r2, #0
 8000152:	2101      	movs	r1, #1
 8000154:	4814      	ldr	r0, [pc, #80]	; (80001a8 <Forward+0x5c>)
 8000156:	f001 fa65 	bl	8001624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); //izq atras
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	4812      	ldr	r0, [pc, #72]	; (80001a8 <Forward+0x5c>)
 8000160:	f001 fa60 	bl	8001624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //derehca atras
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	480f      	ldr	r0, [pc, #60]	; (80001a8 <Forward+0x5c>)
 800016a:	f001 fa5b 	bl	8001624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //derecha atrasa
 800016e:	2200      	movs	r2, #0
 8000170:	2108      	movs	r1, #8
 8000172:	480d      	ldr	r0, [pc, #52]	; (80001a8 <Forward+0x5c>)
 8000174:	f001 fa56 	bl	8001624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0); //derecha enfrente
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800017e:	480a      	ldr	r0, [pc, #40]	; (80001a8 <Forward+0x5c>)
 8000180:	f001 fa50 	bl	8001624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); //derecha enfrente
 8000184:	2201      	movs	r2, #1
 8000186:	2108      	movs	r1, #8
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <Forward+0x60>)
 800018a:	f001 fa4b 	bl	8001624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //izq enfrente
 800018e:	2201      	movs	r2, #1
 8000190:	2110      	movs	r1, #16
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <Forward+0x60>)
 8000194:	f001 fa46 	bl	8001624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // ezq enfrente
 8000198:	2200      	movs	r2, #0
 800019a:	2120      	movs	r1, #32
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <Forward+0x60>)
 800019e:	f001 fa41 	bl	8001624 <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <Stop>:
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
}

void Stop(void){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2101      	movs	r1, #1
 80001b8:	4814      	ldr	r0, [pc, #80]	; (800020c <Stop+0x5c>)
 80001ba:	f001 fa33 	bl	8001624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	2102      	movs	r1, #2
 80001c2:	4812      	ldr	r0, [pc, #72]	; (800020c <Stop+0x5c>)
 80001c4:	f001 fa2e 	bl	8001624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2104      	movs	r1, #4
 80001cc:	480f      	ldr	r0, [pc, #60]	; (800020c <Stop+0x5c>)
 80001ce:	f001 fa29 	bl	8001624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2108      	movs	r1, #8
 80001d6:	480d      	ldr	r0, [pc, #52]	; (800020c <Stop+0x5c>)
 80001d8:	f001 fa24 	bl	8001624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e2:	480a      	ldr	r0, [pc, #40]	; (800020c <Stop+0x5c>)
 80001e4:	f001 fa1e 	bl	8001624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2108      	movs	r1, #8
 80001ec:	4808      	ldr	r0, [pc, #32]	; (8000210 <Stop+0x60>)
 80001ee:	f001 fa19 	bl	8001624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2110      	movs	r1, #16
 80001f6:	4806      	ldr	r0, [pc, #24]	; (8000210 <Stop+0x60>)
 80001f8:	f001 fa14 	bl	8001624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2120      	movs	r1, #32
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <Stop+0x60>)
 8000202:	f001 fa0f 	bl	8001624 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010800 	.word	0x40010800
 8000210:	40010c00 	.word	0x40010c00

08000214 <Back>:

void Back(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //izq atras
 8000218:	2201      	movs	r2, #1
 800021a:	2101      	movs	r1, #1
 800021c:	4814      	ldr	r0, [pc, #80]	; (8000270 <Back+0x5c>)
 800021e:	f001 fa01 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); //izq atras
 8000222:	2200      	movs	r2, #0
 8000224:	2102      	movs	r1, #2
 8000226:	4812      	ldr	r0, [pc, #72]	; (8000270 <Back+0x5c>)
 8000228:	f001 f9fc 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0); //derehca atras
 800022c:	2200      	movs	r2, #0
 800022e:	2104      	movs	r1, #4
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <Back+0x5c>)
 8000232:	f001 f9f7 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //derecha atrasa
 8000236:	2201      	movs	r2, #1
 8000238:	2108      	movs	r1, #8
 800023a:	480d      	ldr	r0, [pc, #52]	; (8000270 <Back+0x5c>)
 800023c:	f001 f9f2 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1); //derecha enfrente
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <Back+0x5c>)
 8000248:	f001 f9ec 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); //derecha enfrente
 800024c:	2200      	movs	r2, #0
 800024e:	2108      	movs	r1, #8
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <Back+0x60>)
 8000252:	f001 f9e7 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); //izq enfrente
 8000256:	2200      	movs	r2, #0
 8000258:	2110      	movs	r1, #16
 800025a:	4806      	ldr	r0, [pc, #24]	; (8000274 <Back+0x60>)
 800025c:	f001 f9e2 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); // ezq enfrente
 8000260:	2201      	movs	r2, #1
 8000262:	2120      	movs	r1, #32
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <Back+0x60>)
 8000266:	f001 f9dd 	bl	8001624 <HAL_GPIO_WritePin>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010800 	.word	0x40010800
 8000274:	40010c00 	.word	0x40010c00

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027e:	f000 fedd 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f000 f907 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f000 fb25 	bl	80008d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800028a:	f000 f965 	bl	8000558 <MX_I2C1_Init>
  MX_TIM3_Init();
 800028e:	f000 fa2f 	bl	80006f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000292:	f000 faf5 	bl	8000880 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000296:	f000 faa5 	bl	80007e4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800029a:	f000 f9db 	bl	8000654 <MX_TIM2_Init>
  MX_TIM1_Init();
 800029e:	f000 f989 	bl	80005b4 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80002a2:	f000 f93c 	bl	800051e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_TIM_Base_Start_IT(&htim2);
 80002a6:	4871      	ldr	r0, [pc, #452]	; (800046c <main+0x1f4>)
 80002a8:	f001 ff90 	bl	80021cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002ac:	2100      	movs	r1, #0
 80002ae:	4870      	ldr	r0, [pc, #448]	; (8000470 <main+0x1f8>)
 80002b0:	f002 f82e 	bl	8002310 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002b4:	2104      	movs	r1, #4
 80002b6:	486e      	ldr	r0, [pc, #440]	; (8000470 <main+0x1f8>)
 80002b8:	f002 f82a 	bl	8002310 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002bc:	2108      	movs	r1, #8
 80002be:	486c      	ldr	r0, [pc, #432]	; (8000470 <main+0x1f8>)
 80002c0:	f002 f826 	bl	8002310 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80002c4:	210c      	movs	r1, #12
 80002c6:	486a      	ldr	r0, [pc, #424]	; (8000470 <main+0x1f8>)
 80002c8:	f002 f822 	bl	8002310 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 80002cc:	2364      	movs	r3, #100	; 0x64
 80002ce:	2203      	movs	r2, #3
 80002d0:	4968      	ldr	r1, [pc, #416]	; (8000474 <main+0x1fc>)
 80002d2:	4869      	ldr	r0, [pc, #420]	; (8000478 <main+0x200>)
 80002d4:	f002 ff5b 	bl	800318e <HAL_UART_Receive>

	  if(state == 1){
 80002d8:	4b68      	ldr	r3, [pc, #416]	; (800047c <main+0x204>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	f040 8093 	bne.w	8000408 <main+0x190>
		  if(elapsedTime > 2000){
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002e8:	d928      	bls.n	800033c <main+0xc4>
			  Forward();
 80002ea:	f7ff ff2f 	bl	800014c <Forward>
			  pwm_lf = 2800;
 80002ee:	4b64      	ldr	r3, [pc, #400]	; (8000480 <main+0x208>)
 80002f0:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80002f4:	801a      	strh	r2, [r3, #0]
			  pwm_lb = 2800;
 80002f6:	4b63      	ldr	r3, [pc, #396]	; (8000484 <main+0x20c>)
 80002f8:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80002fc:	801a      	strh	r2, [r3, #0]
			  pwm_rb = 2800;
 80002fe:	4b62      	ldr	r3, [pc, #392]	; (8000488 <main+0x210>)
 8000300:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000304:	801a      	strh	r2, [r3, #0]
			  pwm_rf = 2800;
 8000306:	4b61      	ldr	r3, [pc, #388]	; (800048c <main+0x214>)
 8000308:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800030c:	801a      	strh	r2, [r3, #0]

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 800030e:	4b5f      	ldr	r3, [pc, #380]	; (800048c <main+0x214>)
 8000310:	881a      	ldrh	r2, [r3, #0]
 8000312:	4b57      	ldr	r3, [pc, #348]	; (8000470 <main+0x1f8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 8000318:	4b59      	ldr	r3, [pc, #356]	; (8000480 <main+0x208>)
 800031a:	881a      	ldrh	r2, [r3, #0]
 800031c:	4b54      	ldr	r3, [pc, #336]	; (8000470 <main+0x1f8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 8000322:	4b58      	ldr	r3, [pc, #352]	; (8000484 <main+0x20c>)
 8000324:	881a      	ldrh	r2, [r3, #0]
 8000326:	4b52      	ldr	r3, [pc, #328]	; (8000470 <main+0x1f8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 800032c:	4b56      	ldr	r3, [pc, #344]	; (8000488 <main+0x210>)
 800032e:	881a      	ldrh	r2, [r3, #0]
 8000330:	4b4f      	ldr	r3, [pc, #316]	; (8000470 <main+0x1f8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	641a      	str	r2, [r3, #64]	; 0x40

			  vel = 1;
 8000336:	4b56      	ldr	r3, [pc, #344]	; (8000490 <main+0x218>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
		  }
		  if(elapsedTime > 7000 && elapsedTime < 12000){
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000342:	4293      	cmp	r3, r2
 8000344:	d92d      	bls.n	80003a2 <main+0x12a>
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	f642 62df 	movw	r2, #11999	; 0x2edf
 800034c:	4293      	cmp	r3, r2
 800034e:	d828      	bhi.n	80003a2 <main+0x12a>
			  Forward();
 8000350:	f7ff fefc 	bl	800014c <Forward>
			  pwm_lf = 4095;
 8000354:	4b4a      	ldr	r3, [pc, #296]	; (8000480 <main+0x208>)
 8000356:	f640 72ff 	movw	r2, #4095	; 0xfff
 800035a:	801a      	strh	r2, [r3, #0]
			  pwm_lb = 4095;
 800035c:	4b49      	ldr	r3, [pc, #292]	; (8000484 <main+0x20c>)
 800035e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000362:	801a      	strh	r2, [r3, #0]
			  pwm_rb = 4095;
 8000364:	4b48      	ldr	r3, [pc, #288]	; (8000488 <main+0x210>)
 8000366:	f640 72ff 	movw	r2, #4095	; 0xfff
 800036a:	801a      	strh	r2, [r3, #0]
			  pwm_rf = 4095;
 800036c:	4b47      	ldr	r3, [pc, #284]	; (800048c <main+0x214>)
 800036e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000372:	801a      	strh	r2, [r3, #0]

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 8000374:	4b45      	ldr	r3, [pc, #276]	; (800048c <main+0x214>)
 8000376:	881a      	ldrh	r2, [r3, #0]
 8000378:	4b3d      	ldr	r3, [pc, #244]	; (8000470 <main+0x1f8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 800037e:	4b40      	ldr	r3, [pc, #256]	; (8000480 <main+0x208>)
 8000380:	881a      	ldrh	r2, [r3, #0]
 8000382:	4b3b      	ldr	r3, [pc, #236]	; (8000470 <main+0x1f8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 8000388:	4b3e      	ldr	r3, [pc, #248]	; (8000484 <main+0x20c>)
 800038a:	881a      	ldrh	r2, [r3, #0]
 800038c:	4b38      	ldr	r3, [pc, #224]	; (8000470 <main+0x1f8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 8000392:	4b3d      	ldr	r3, [pc, #244]	; (8000488 <main+0x210>)
 8000394:	881a      	ldrh	r2, [r3, #0]
 8000396:	4b36      	ldr	r3, [pc, #216]	; (8000470 <main+0x1f8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	641a      	str	r2, [r3, #64]	; 0x40

			  vel = 2;
 800039c:	4b3c      	ldr	r3, [pc, #240]	; (8000490 <main+0x218>)
 800039e:	2202      	movs	r2, #2
 80003a0:	701a      	strb	r2, [r3, #0]
		  }
		  if(elapsedTime > 12000 && elapsedTime < 18000){
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d92d      	bls.n	8000408 <main+0x190>
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	f244 624f 	movw	r2, #17999	; 0x464f
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d828      	bhi.n	8000408 <main+0x190>
			  Back();
 80003b6:	f7ff ff2d 	bl	8000214 <Back>
			  pwm_lf = 4095;
 80003ba:	4b31      	ldr	r3, [pc, #196]	; (8000480 <main+0x208>)
 80003bc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80003c0:	801a      	strh	r2, [r3, #0]
			  pwm_lb = 4095;
 80003c2:	4b30      	ldr	r3, [pc, #192]	; (8000484 <main+0x20c>)
 80003c4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80003c8:	801a      	strh	r2, [r3, #0]
			  pwm_rb = 4095;
 80003ca:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <main+0x210>)
 80003cc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80003d0:	801a      	strh	r2, [r3, #0]
			  pwm_rf = 4095;
 80003d2:	4b2e      	ldr	r3, [pc, #184]	; (800048c <main+0x214>)
 80003d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80003d8:	801a      	strh	r2, [r3, #0]

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <main+0x214>)
 80003dc:	881a      	ldrh	r2, [r3, #0]
 80003de:	4b24      	ldr	r3, [pc, #144]	; (8000470 <main+0x1f8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <main+0x208>)
 80003e6:	881a      	ldrh	r2, [r3, #0]
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <main+0x1f8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 80003ee:	4b25      	ldr	r3, [pc, #148]	; (8000484 <main+0x20c>)
 80003f0:	881a      	ldrh	r2, [r3, #0]
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <main+0x1f8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 80003f8:	4b23      	ldr	r3, [pc, #140]	; (8000488 <main+0x210>)
 80003fa:	881a      	ldrh	r2, [r3, #0]
 80003fc:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <main+0x1f8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	641a      	str	r2, [r3, #64]	; 0x40

			  vel = 3;
 8000402:	4b23      	ldr	r3, [pc, #140]	; (8000490 <main+0x218>)
 8000404:	2203      	movs	r2, #3
 8000406:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  millis2 = HAL_GetTick();
 8000408:	f000 fe70 	bl	80010ec <HAL_GetTick>
 800040c:	6078      	str	r0, [r7, #4]
	  elapsedTime = millis2 - millis;
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	1ad3      	subs	r3, r2, r3
 8000414:	60bb      	str	r3, [r7, #8]


	  if(state == 0){
 8000416:	4b19      	ldr	r3, [pc, #100]	; (800047c <main+0x204>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d10e      	bne.n	800043c <main+0x1c4>
		  if(Commands[0] == 'S'){
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <main+0x1fc>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b53      	cmp	r3, #83	; 0x53
 8000424:	d10a      	bne.n	800043c <main+0x1c4>
			  millis = HAL_GetTick();
 8000426:	f000 fe61 	bl	80010ec <HAL_GetTick>
 800042a:	60f8      	str	r0, [r7, #12]
			  elapsedTime = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
			  state++;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <main+0x204>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <main+0x204>)
 800043a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(Commands[0] == 'E'){
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <main+0x1fc>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b45      	cmp	r3, #69	; 0x45
 8000442:	f47f af43 	bne.w	80002cc <main+0x54>
		  state = 0;
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <main+0x204>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]

		  pwm_rf = 0;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <main+0x214>)
 800044e:	2200      	movs	r2, #0
 8000450:	801a      	strh	r2, [r3, #0]
		  pwm_lf = 0;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <main+0x208>)
 8000454:	2200      	movs	r2, #0
 8000456:	801a      	strh	r2, [r3, #0]
		  pwm_rb = 0;
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <main+0x210>)
 800045a:	2200      	movs	r2, #0
 800045c:	801a      	strh	r2, [r3, #0]
		  pwm_lb = 0;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <main+0x20c>)
 8000460:	2200      	movs	r2, #0
 8000462:	801a      	strh	r2, [r3, #0]
		  Stop();
 8000464:	f7ff fea4 	bl	80001b0 <Stop>
	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 8000468:	e730      	b.n	80002cc <main+0x54>
 800046a:	bf00      	nop
 800046c:	20000118 	.word	0x20000118
 8000470:	20000160 	.word	0x20000160
 8000474:	20000238 	.word	0x20000238
 8000478:	200001f0 	.word	0x200001f0
 800047c:	200002b9 	.word	0x200002b9
 8000480:	200002b0 	.word	0x200002b0
 8000484:	200002b4 	.word	0x200002b4
 8000488:	200002b6 	.word	0x200002b6
 800048c:	200002b2 	.word	0x200002b2
 8000490:	200002b8 	.word	0x200002b8

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b090      	sub	sp, #64	; 0x40
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0318 	add.w	r3, r7, #24
 800049e:	2228      	movs	r2, #40	; 0x28
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 f822 	bl	80034ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c4:	2301      	movs	r3, #1
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c8:	2302      	movs	r3, #2
 80004ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fa15 	bl	800190c <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004e8:	f000 fb86 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	2302      	movs	r3, #2
 80004f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2102      	movs	r1, #2
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fc82 	bl	8001e10 <HAL_RCC_ClockConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000512:	f000 fb71 	bl	8000bf8 <Error_Handler>
  }
}
 8000516:	bf00      	nop
 8000518:	3740      	adds	r7, #64	; 0x40
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	2028      	movs	r0, #40	; 0x28
 8000528:	f000 fec1 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800052c:	2028      	movs	r0, #40	; 0x28
 800052e:	f000 feda 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	201e      	movs	r0, #30
 8000538:	f000 feb9 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800053c:	201e      	movs	r0, #30
 800053e:	f000 fed2 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	201c      	movs	r0, #28
 8000548:	f000 feb1 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800054c:	201c      	movs	r0, #28
 800054e:	f000 feca 	bl	80012e6 <HAL_NVIC_EnableIRQ>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_I2C1_Init+0x50>)
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <MX_I2C1_Init+0x54>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x58>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_I2C1_Init+0x50>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800057a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_I2C1_Init+0x50>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_I2C1_Init+0x50>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000596:	f001 f875 	bl	8001684 <HAL_I2C_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 fb2a 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	40005400 	.word	0x40005400
 80005b0:	000186a0 	.word	0x000186a0

080005b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_TIM1_Init+0x98>)
 80005d2:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <MX_TIM1_Init+0x9c>)
 80005d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_TIM1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_TIM1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_TIM1_Init+0x98>)
 80005e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_TIM1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_TIM1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_TIM1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fc:	4813      	ldr	r0, [pc, #76]	; (800064c <MX_TIM1_Init+0x98>)
 80005fe:	f001 fd95 	bl	800212c <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000608:	f000 faf6 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	4619      	mov	r1, r3
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <MX_TIM1_Init+0x98>)
 800061a:	f002 f8e5 	bl	80027e8 <HAL_TIM_ConfigClockSource>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000624:	f000 fae8 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_TIM1_Init+0x98>)
 8000636:	f002 fc67 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 fada 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000d0 	.word	0x200000d0
 8000650:	40012c00 	.word	0x40012c00

08000654 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM2_Init+0x98>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_TIM2_Init+0x98>)
 800067a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800067e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_TIM2_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_TIM2_Init+0x98>)
 8000688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800068c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_TIM2_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_TIM2_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_TIM2_Init+0x98>)
 800069c:	f001 fd46 	bl	800212c <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006a6:	f000 faa7 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4619      	mov	r1, r3
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_TIM2_Init+0x98>)
 80006b8:	f002 f896 	bl	80027e8 <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006c2:	f000 fa99 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_TIM2_Init+0x98>)
 80006d4:	f002 fc18 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 fa8b 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000118 	.word	0x20000118

080006f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <MX_TIM3_Init+0xec>)
 8000714:	4a32      	ldr	r2, [pc, #200]	; (80007e0 <MX_TIM3_Init+0xf0>)
 8000716:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000718:	4b30      	ldr	r3, [pc, #192]	; (80007dc <MX_TIM3_Init+0xec>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <MX_TIM3_Init+0xec>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_TIM3_Init+0xec>)
 8000726:	f640 72ff 	movw	r2, #4095	; 0xfff
 800072a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_TIM3_Init+0xec>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_TIM3_Init+0xec>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000738:	4828      	ldr	r0, [pc, #160]	; (80007dc <MX_TIM3_Init+0xec>)
 800073a:	f001 fd99 	bl	8002270 <HAL_TIM_PWM_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 fa58 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4619      	mov	r1, r3
 8000756:	4821      	ldr	r0, [pc, #132]	; (80007dc <MX_TIM3_Init+0xec>)
 8000758:	f002 fbd6 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000762:	f000 fa49 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	; 0x60
 8000768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <MX_TIM3_Init+0xec>)
 800077e:	f001 ff71 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000788:	f000 fa36 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2204      	movs	r2, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_TIM3_Init+0xec>)
 8000794:	f001 ff66 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800079e:	f000 fa2b 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2208      	movs	r2, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_TIM3_Init+0xec>)
 80007aa:	f001 ff5b 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80007b4:	f000 fa20 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	220c      	movs	r2, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_TIM3_Init+0xec>)
 80007c0:	f001 ff50 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80007ca:	f000 fa15 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_TIM3_Init+0xec>)
 80007d0:	f000 faea 	bl	8000da8 <HAL_TIM_MspPostInit>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000160 	.word	0x20000160
 80007e0:	40000400 	.word	0x40000400

080007e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_TIM4_Init+0x94>)
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_TIM4_Init+0x98>)
 8000804:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_TIM4_Init+0x94>)
 8000808:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800080c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_TIM4_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_TIM4_Init+0x94>)
 8000816:	2263      	movs	r2, #99	; 0x63
 8000818:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_TIM4_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_TIM4_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <MX_TIM4_Init+0x94>)
 8000828:	f001 fc80 	bl	800212c <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f9e1 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	4619      	mov	r1, r3
 8000842:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_TIM4_Init+0x94>)
 8000844:	f001 ffd0 	bl	80027e8 <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f9d3 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <MX_TIM4_Init+0x94>)
 8000860:	f002 fb52 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800086a:	f000 f9c5 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001a8 	.word	0x200001a8
 800087c:	40000800 	.word	0x40000800

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f002 fb96 	bl	8002fe8 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f999 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200001f0 	.word	0x200001f0
 80008d0:	40013800 	.word	0x40013800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e8:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a44      	ldr	r2, [pc, #272]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <MX_GPIO_Init+0x12c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a3e      	ldr	r2, [pc, #248]	; (8000a00 <MX_GPIO_Init+0x12c>)
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <MX_GPIO_Init+0x12c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <MX_GPIO_Init+0x12c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x12c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <MX_GPIO_Init+0x12c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x12c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <MX_GPIO_Init+0x12c>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <MX_GPIO_Init+0x12c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	482d      	ldr	r0, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000950:	f000 fe68 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000954:	2200      	movs	r2, #0
 8000956:	f248 010f 	movw	r1, #32783	; 0x800f
 800095a:	482b      	ldr	r0, [pc, #172]	; (8000a08 <MX_GPIO_Init+0x134>)
 800095c:	f000 fe62 	bl	8001624 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2138      	movs	r1, #56	; 0x38
 8000964:	4829      	ldr	r0, [pc, #164]	; (8000a0c <MX_GPIO_Init+0x138>)
 8000966:	f000 fe5d 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4820      	ldr	r0, [pc, #128]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000984:	f000 fcca 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000988:	f248 030f 	movw	r3, #32783	; 0x800f
 800098c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4619      	mov	r1, r3
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <MX_GPIO_Init+0x134>)
 80009a2:	f000 fcbb 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_GPIO_Init+0x13c>)
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <MX_GPIO_Init+0x138>)
 80009bc:	f000 fcae 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_GPIO_Init+0x134>)
 80009d6:	f000 fca1 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009da:	2338      	movs	r3, #56	; 0x38
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x138>)
 80009f2:	f000 fc93 	bl	800131c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	10110000 	.word	0x10110000

08000a14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	6078      	str	r0, [r7, #4]

	if(htim -> Instance  == TIM2){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a24:	d16a      	bne.n	8000afc <HAL_TIM_PeriodElapsedCallback+0xe8>
		pid_output_rf = PIDpwm_Compute(&pidMotor_rf, rpm_rf);
		pid_output_lb = PIDpwm_Compute(&pidMotor_lb, rpm_lb);
		pid_output_rb = PIDpwm_Compute(&pidMotor_rb, rpm_rb);
*/

		rpm_rf =  (current_tick_rf * 1000 * 60) / (pulsesperturn * 100);
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000a30:	fb03 f202 	mul.w	r2, r3, r2
 8000a34:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	fb01 f303 	mul.w	r3, r1, r3
 8000a40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a48:	801a      	strh	r2, [r3, #0]
	    rpm_lf =  (current_tick_lf * 1000 * 60) / (pulsesperturn * 100);
 8000a4a:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000a54:	fb03 f202 	mul.w	r2, r3, r2
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	fb01 f303 	mul.w	r3, r1, r3
 8000a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a6c:	801a      	strh	r2, [r3, #0]
	    rpm_rb =  (current_tick_rb * 1000 * 60) / (pulsesperturn * 100);
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000a78:	fb03 f202 	mul.w	r2, r3, r2
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	2364      	movs	r3, #100	; 0x64
 8000a84:	fb01 f303 	mul.w	r3, r1, r3
 8000a88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a90:	801a      	strh	r2, [r3, #0]
	    rpm_lb =  (current_tick_lb * 1000 * 60) / (pulsesperturn * 100);
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000a9c:	fb03 f202 	mul.w	r2, r3, r2
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2364      	movs	r3, #100	; 0x64
 8000aa8:	fb01 f303 	mul.w	r3, r1, r3
 8000aac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ab4:	801a      	strh	r2, [r3, #0]

		current_tick_rf = 0;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
		current_tick_lf = 0;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
		current_tick_rb = 0;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
		current_tick_lb = 0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]

		uint8_t DataBuf = sprintf(DataTransmit,"%u,%lu,%u\n",vel,pwm_lf, rpm_lf);
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4913      	ldr	r1, [pc, #76]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ae6:	f002 fce1 	bl	80034ac <siprintf>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &DataTransmit, DataBuf, 100);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	490f      	ldr	r1, [pc, #60]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000af6:	4810      	ldr	r0, [pc, #64]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000af8:	f002 fac6 	bl	8003088 <HAL_UART_Transmit>
	}
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200002a0 	.word	0x200002a0
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	200002aa 	.word	0x200002aa
 8000b10:	200002a1 	.word	0x200002a1
 8000b14:	200002a8 	.word	0x200002a8
 8000b18:	200002a2 	.word	0x200002a2
 8000b1c:	200002ae 	.word	0x200002ae
 8000b20:	200002a3 	.word	0x200002a3
 8000b24:	200002ac 	.word	0x200002ac
 8000b28:	200002b8 	.word	0x200002b8
 8000b2c:	200002b0 	.word	0x200002b0
 8000b30:	08003e28 	.word	0x08003e28
 8000b34:	2000023c 	.word	0x2000023c
 8000b38:	200001f0 	.word	0x200001f0

08000b3c <HAL_GPIO_EXTI_Callback>:
 * @pin 15 Right front wheel
 * @pin 14 Left front wheel
 * @pin 13 Right back wheel
 * @pin 12 Left back wheel
 */
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == GPIO_PIN_13){
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b4c:	d10c      	bne.n	8000b68 <HAL_GPIO_EXTI_Callback+0x2c>
	  //Right front wheel

	  pulses_rb++;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b5a:	701a      	strb	r2, [r3, #0]
	  current_tick_rb++;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_GPIO_EXTI_Callback+0xa0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_GPIO_EXTI_Callback+0xa0>)
 8000b66:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_15){
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b6e:	d10c      	bne.n	8000b8a <HAL_GPIO_EXTI_Callback+0x4e>
	  //Left front wheel

	  pulses_rf++;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	3301      	adds	r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b7c:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b88:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_12){
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b90:	d10c      	bne.n	8000bac <HAL_GPIO_EXTI_Callback+0x70>
	  //Right back wheel
	  pulses_lb++;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	  current_tick_lb++;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_GPIO_EXTI_Callback+0xb0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_GPIO_EXTI_Callback+0xb0>)
 8000baa:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_14){
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bb2:	d10c      	bne.n	8000bce <HAL_GPIO_EXTI_Callback+0x92>
	  //Left back wheel
	  pulses_lf++;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000bc0:	701a      	strb	r2, [r3, #0]
	  current_tick_lf++;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bcc:	701a      	strb	r2, [r3, #0]
  }

}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	200002a6 	.word	0x200002a6
 8000bdc:	200002a2 	.word	0x200002a2
 8000be0:	200002a4 	.word	0x200002a4
 8000be4:	200002a0 	.word	0x200002a0
 8000be8:	200002a7 	.word	0x200002a7
 8000bec:	200002a3 	.word	0x200002a3
 8000bf0:	200002a5 	.word	0x200002a5
 8000bf4:	200002a1 	.word	0x200002a1

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_MspInit+0x60>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_MspInit+0x60>)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000

08000c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_I2C_MspInit+0x70>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d123      	bne.n	8000cd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_I2C_MspInit+0x74>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_I2C_MspInit+0x74>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_I2C_MspInit+0x74>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca0:	23c0      	movs	r3, #192	; 0xc0
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca4:	2312      	movs	r3, #18
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <HAL_I2C_MspInit+0x78>)
 8000cb4:	f000 fb32 	bl	800131c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_I2C_MspInit+0x74>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_I2C_MspInit+0x74>)
 8000cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_I2C_MspInit+0x74>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <HAL_TIM_Base_MspInit+0x7c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10c      	bne.n	8000d10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d0e:	e022      	b.n	8000d56 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d10c      	bne.n	8000d34 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
}
 8000d32:	e010      	b.n	8000d56 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_TIM_Base_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10b      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_TIM_Base_MspInit+0x80>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40012c00 	.word	0x40012c00
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40000800 	.word	0x40000800

08000d6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <HAL_TIM_PWM_MspInit+0x34>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10b      	bne.n	8000d96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_TIM_PWM_MspInit+0x38>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_TIM_PWM_MspInit+0x38>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_TIM_PWM_MspInit+0x38>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40000400 	.word	0x40000400
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_TIM_MspPostInit+0x88>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d12f      	bne.n	8000e28 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_TIM_MspPostInit+0x8c>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_TIM_MspPostInit+0x8c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_TIM_MspPostInit+0x8c>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_TIM_MspPostInit+0x8c>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_TIM_MspPostInit+0x8c>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_TIM_MspPostInit+0x8c>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df8:	23c0      	movs	r3, #192	; 0xc0
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <HAL_TIM_MspPostInit+0x90>)
 8000e0c:	f000 fa86 	bl	800131c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e10:	2303      	movs	r3, #3
 8000e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <HAL_TIM_MspPostInit+0x94>)
 8000e24:	f000 fa7a 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40000400 	.word	0x40000400
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d131      	bne.n	8000ec4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_UART_MspInit+0x90>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <HAL_UART_MspInit+0x90>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_UART_MspInit+0x90>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0x90>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_UART_MspInit+0x90>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_UART_MspInit+0x90>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <HAL_UART_MspInit+0x94>)
 8000ea6:	f000 fa39 	bl	800131c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0x94>)
 8000ec0:	f000 fa2c 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010800 	.word	0x40010800

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f8d3 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <TIM2_IRQHandler+0x10>)
 8000f2e:	f001 fa91 	bl	8002454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000118 	.word	0x20000118

08000f3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM4_IRQHandler+0x10>)
 8000f42:	f001 fa87 	bl	8002454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001a8 	.word	0x200001a8

08000f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f58:	f000 fb7c 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f60:	f000 fb78 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000f64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f68:	f000 fb74 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f70:	f000 fb70 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f002 faa8 	bl	80034fc <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20005000 	.word	0x20005000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	200002bc 	.word	0x200002bc
 8000fe0:	20000410 	.word	0x20000410

08000fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff0:	f7ff fff8 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ff6:	490c      	ldr	r1, [pc, #48]	; (8001028 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800100c:	4c09      	ldr	r4, [pc, #36]	; (8001034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f002 fa75 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101e:	f7ff f92b 	bl	8000278 <main>
  bx lr
 8001022:	4770      	bx	lr
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800102c:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 8001030:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001034:	2000040c 	.word	0x2000040c

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x28>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x28>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f923 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	200f      	movs	r0, #15
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fdd4 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f93b 	bl	8001302 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f903 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x1c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x20>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a03      	ldr	r2, [pc, #12]	; (80010e8 <HAL_IncTick+0x20>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	2000000c 	.word	0x2000000c
 80010e8:	200002c0 	.word	0x200002c0

080010ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <HAL_GetTick+0x10>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	200002c0 	.word	0x200002c0

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4906      	ldr	r1, [pc, #24]	; (8001198 <__NVIC_EnableIRQ+0x34>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff90 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2d 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff42 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff90 	bl	80011f0 <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5f 	bl	800119c <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff35 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b08b      	sub	sp, #44	; 0x2c
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132e:	e169      	b.n	8001604 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001330:	2201      	movs	r2, #1
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	429a      	cmp	r2, r3
 800134a:	f040 8158 	bne.w	80015fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a9a      	ldr	r2, [pc, #616]	; (80015bc <HAL_GPIO_Init+0x2a0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d05e      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001358:	4a98      	ldr	r2, [pc, #608]	; (80015bc <HAL_GPIO_Init+0x2a0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d875      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 800135e:	4a98      	ldr	r2, [pc, #608]	; (80015c0 <HAL_GPIO_Init+0x2a4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d058      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001364:	4a96      	ldr	r2, [pc, #600]	; (80015c0 <HAL_GPIO_Init+0x2a4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d86f      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 800136a:	4a96      	ldr	r2, [pc, #600]	; (80015c4 <HAL_GPIO_Init+0x2a8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d052      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001370:	4a94      	ldr	r2, [pc, #592]	; (80015c4 <HAL_GPIO_Init+0x2a8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d869      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 8001376:	4a94      	ldr	r2, [pc, #592]	; (80015c8 <HAL_GPIO_Init+0x2ac>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d04c      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 800137c:	4a92      	ldr	r2, [pc, #584]	; (80015c8 <HAL_GPIO_Init+0x2ac>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d863      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 8001382:	4a92      	ldr	r2, [pc, #584]	; (80015cc <HAL_GPIO_Init+0x2b0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d046      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001388:	4a90      	ldr	r2, [pc, #576]	; (80015cc <HAL_GPIO_Init+0x2b0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d85d      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d82a      	bhi.n	80013e8 <HAL_GPIO_Init+0xcc>
 8001392:	2b12      	cmp	r3, #18
 8001394:	d859      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 8001396:	a201      	add	r2, pc, #4	; (adr r2, 800139c <HAL_GPIO_Init+0x80>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	08001417 	.word	0x08001417
 80013a0:	080013f1 	.word	0x080013f1
 80013a4:	08001403 	.word	0x08001403
 80013a8:	08001445 	.word	0x08001445
 80013ac:	0800144b 	.word	0x0800144b
 80013b0:	0800144b 	.word	0x0800144b
 80013b4:	0800144b 	.word	0x0800144b
 80013b8:	0800144b 	.word	0x0800144b
 80013bc:	0800144b 	.word	0x0800144b
 80013c0:	0800144b 	.word	0x0800144b
 80013c4:	0800144b 	.word	0x0800144b
 80013c8:	0800144b 	.word	0x0800144b
 80013cc:	0800144b 	.word	0x0800144b
 80013d0:	0800144b 	.word	0x0800144b
 80013d4:	0800144b 	.word	0x0800144b
 80013d8:	0800144b 	.word	0x0800144b
 80013dc:	0800144b 	.word	0x0800144b
 80013e0:	080013f9 	.word	0x080013f9
 80013e4:	0800140d 	.word	0x0800140d
 80013e8:	4a79      	ldr	r2, [pc, #484]	; (80015d0 <HAL_GPIO_Init+0x2b4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ee:	e02c      	b.n	800144a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	623b      	str	r3, [r7, #32]
          break;
 80013f6:	e029      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	3304      	adds	r3, #4
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e024      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	3308      	adds	r3, #8
 8001408:	623b      	str	r3, [r7, #32]
          break;
 800140a:	e01f      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	330c      	adds	r3, #12
 8001412:	623b      	str	r3, [r7, #32]
          break;
 8001414:	e01a      	b.n	800144c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141e:	2304      	movs	r3, #4
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e013      	b.n	800144c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800142c:	2308      	movs	r3, #8
 800142e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	611a      	str	r2, [r3, #16]
          break;
 8001436:	e009      	b.n	800144c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001438:	2308      	movs	r3, #8
 800143a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	615a      	str	r2, [r3, #20]
          break;
 8001442:	e003      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x130>
          break;
 800144a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2bff      	cmp	r3, #255	; 0xff
 8001450:	d801      	bhi.n	8001456 <HAL_GPIO_Init+0x13a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	e001      	b.n	800145a <HAL_GPIO_Init+0x13e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d802      	bhi.n	8001468 <HAL_GPIO_Init+0x14c>
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x152>
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	3b08      	subs	r3, #8
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	210f      	movs	r1, #15
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	401a      	ands	r2, r3
 8001480:	6a39      	ldr	r1, [r7, #32]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	431a      	orrs	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80b1 	beq.w	80015fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800149c:	4b4d      	ldr	r3, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x2b8>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_GPIO_Init+0x2b8>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b4a      	ldr	r3, [pc, #296]	; (80015d4 <HAL_GPIO_Init+0x2b8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b4:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <HAL_GPIO_Init+0x2bc>)
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a40      	ldr	r2, [pc, #256]	; (80015dc <HAL_GPIO_Init+0x2c0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d013      	beq.n	8001508 <HAL_GPIO_Init+0x1ec>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <HAL_GPIO_Init+0x2c4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d00d      	beq.n	8001504 <HAL_GPIO_Init+0x1e8>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <HAL_GPIO_Init+0x2c8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d007      	beq.n	8001500 <HAL_GPIO_Init+0x1e4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3d      	ldr	r2, [pc, #244]	; (80015e8 <HAL_GPIO_Init+0x2cc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_GPIO_Init+0x1e0>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e006      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e004      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001500:	2302      	movs	r3, #2
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001508:	2300      	movs	r3, #0
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	f002 0203 	and.w	r2, r2, #3
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	4093      	lsls	r3, r2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800151a:	492f      	ldr	r1, [pc, #188]	; (80015d8 <HAL_GPIO_Init+0x2bc>)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	492c      	ldr	r1, [pc, #176]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	4928      	ldr	r1, [pc, #160]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800154c:	4013      	ands	r3, r2
 800154e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	4922      	ldr	r1, [pc, #136]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	60cb      	str	r3, [r1, #12]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	491e      	ldr	r1, [pc, #120]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4918      	ldr	r1, [pc, #96]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4914      	ldr	r1, [pc, #80]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d021      	beq.n	80015f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e021      	b.n	80015fe <HAL_GPIO_Init+0x2e2>
 80015ba:	bf00      	nop
 80015bc:	10320000 	.word	0x10320000
 80015c0:	10310000 	.word	0x10310000
 80015c4:	10220000 	.word	0x10220000
 80015c8:	10210000 	.word	0x10210000
 80015cc:	10120000 	.word	0x10120000
 80015d0:	10110000 	.word	0x10110000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40010800 	.word	0x40010800
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	40011000 	.word	0x40011000
 80015e8:	40011400 	.word	0x40011400
 80015ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_GPIO_Init+0x304>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4909      	ldr	r1, [pc, #36]	; (8001620 <HAL_GPIO_Init+0x304>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	3301      	adds	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f ae8e 	bne.w	8001330 <HAL_GPIO_Init+0x14>
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	372c      	adds	r7, #44	; 0x2c
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	611a      	str	r2, [r3, #16]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fa62 	bl	8000b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e12b      	b.n	80018ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fadc 	bl	8000c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e8:	f000 fcda 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 80016ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a81      	ldr	r2, [pc, #516]	; (80018f8 <HAL_I2C_Init+0x274>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d807      	bhi.n	8001708 <HAL_I2C_Init+0x84>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a80      	ldr	r2, [pc, #512]	; (80018fc <HAL_I2C_Init+0x278>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	bf94      	ite	ls
 8001700:	2301      	movls	r3, #1
 8001702:	2300      	movhi	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	e006      	b.n	8001716 <HAL_I2C_Init+0x92>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a7d      	ldr	r2, [pc, #500]	; (8001900 <HAL_I2C_Init+0x27c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	bf94      	ite	ls
 8001710:	2301      	movls	r3, #1
 8001712:	2300      	movhi	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0e7      	b.n	80018ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a78      	ldr	r2, [pc, #480]	; (8001904 <HAL_I2C_Init+0x280>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_I2C_Init+0x274>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d802      	bhi.n	8001758 <HAL_I2C_Init+0xd4>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3301      	adds	r3, #1
 8001756:	e009      	b.n	800176c <HAL_I2C_Init+0xe8>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	4a69      	ldr	r2, [pc, #420]	; (8001908 <HAL_I2C_Init+0x284>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	3301      	adds	r3, #1
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800177e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	495c      	ldr	r1, [pc, #368]	; (80018f8 <HAL_I2C_Init+0x274>)
 8001788:	428b      	cmp	r3, r1
 800178a:	d819      	bhi.n	80017c0 <HAL_I2C_Init+0x13c>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e59      	subs	r1, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fbb1 f3f3 	udiv	r3, r1, r3
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017a0:	400b      	ands	r3, r1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <HAL_I2C_Init+0x138>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1e59      	subs	r1, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ba:	e051      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 80017bc:	2304      	movs	r3, #4
 80017be:	e04f      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d111      	bne.n	80017ec <HAL_I2C_Init+0x168>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1e58      	subs	r0, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	440b      	add	r3, r1
 80017d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	e012      	b.n	8001812 <HAL_I2C_Init+0x18e>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1e58      	subs	r0, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	0099      	lsls	r1, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001802:	3301      	adds	r3, #1
 8001804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Init+0x196>
 8001816:	2301      	movs	r3, #1
 8001818:	e022      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10e      	bne.n	8001840 <HAL_I2C_Init+0x1bc>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1e58      	subs	r0, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	440b      	add	r3, r1
 8001830:	fbb0 f3f3 	udiv	r3, r0, r3
 8001834:	3301      	adds	r3, #1
 8001836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	e00f      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e58      	subs	r0, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	0099      	lsls	r1, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	fbb0 f3f3 	udiv	r3, r0, r3
 8001856:	3301      	adds	r3, #1
 8001858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	6809      	ldr	r1, [r1, #0]
 8001864:	4313      	orrs	r3, r2
 8001866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800188e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6911      	ldr	r1, [r2, #16]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68d2      	ldr	r2, [r2, #12]
 800189a:	4311      	orrs	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	000186a0 	.word	0x000186a0
 80018fc:	001e847f 	.word	0x001e847f
 8001900:	003d08ff 	.word	0x003d08ff
 8001904:	431bde83 	.word	0x431bde83
 8001908:	10624dd3 	.word	0x10624dd3

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e272      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8087 	beq.w	8001a3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800192c:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	d00c      	beq.n	8001952 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001938:	4b8f      	ldr	r3, [pc, #572]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d112      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
 8001944:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d10b      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	4b89      	ldr	r3, [pc, #548]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x12c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d168      	bne.n	8001a38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e24c      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x76>
 8001974:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a7f      	ldr	r2, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e02e      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x98>
 800198a:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e01d      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0xbc>
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a71      	ldr	r2, [pc, #452]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019c8:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6a      	ldr	r2, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a67      	ldr	r2, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb80 	bl	80010ec <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fb7c 	bl	80010ec <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e200      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe4>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fb6c 	bl	80010ec <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fb68 	bl	80010ec <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1ec      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x10c>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d11c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e1c0      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4939      	ldr	r1, [pc, #228]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	e03a      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fb21 	bl	80010ec <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff fb1d 	bl	80010ec <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1a1      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fb00 	bl	80010ec <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af0:	f7ff fafc 	bl	80010ec <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e180      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03a      	beq.n	8001b90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d019      	beq.n	8001b56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fae0 	bl	80010ec <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff fadc 	bl	80010ec <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e160      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f000 face 	bl	80020f0 <RCC_Delay>
 8001b54:	e01c      	b.n	8001b90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fac6 	bl	80010ec <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b62:	e00f      	b.n	8001b84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff fac2 	bl	80010ec <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d908      	bls.n	8001b84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e146      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	42420000 	.word	0x42420000
 8001b80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e9      	bne.n	8001b64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a6 	beq.w	8001cea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a87      	ldr	r2, [pc, #540]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b85      	ldr	r3, [pc, #532]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b82      	ldr	r3, [pc, #520]	; (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	; (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7e      	ldr	r2, [pc, #504]	; (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fa83 	bl	80010ec <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff fa7f 	bl	80010ec <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	; 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e103      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <HAL_RCC_OscConfig+0x4c8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x312>
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x334>
 8001c26:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a69      	ldr	r2, [pc, #420]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x356>
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a60      	ldr	r2, [pc, #384]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fa33 	bl	80010ec <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fa2f 	bl	80010ec <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0b1      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x37e>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fa1d 	bl	80010ec <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fa19 	bl	80010ec <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e09b      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a3b      	ldr	r2, [pc, #236]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8087 	beq.w	8001e02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d061      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d146      	bne.n	8001d96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_RCC_OscConfig+0x4cc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f9ed 	bl	80010ec <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff f9e9 	bl	80010ec <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e06d      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4921      	ldr	r1, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a19      	ldr	r1, [r3, #32]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	430b      	orrs	r3, r1
 8001d62:	491b      	ldr	r1, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x4cc>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f9bd 	bl	80010ec <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff f9b9 	bl	80010ec <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e03d      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46a>
 8001d94:	e035      	b.n	8001e02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f9a6 	bl	80010ec <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f9a2 	bl	80010ec <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e026      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x498>
 8001dc2:	e01e      	b.n	8001e02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e019      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x500>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0d0      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4965      	ldr	r1, [pc, #404]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0b8      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a58      	ldr	r2, [pc, #352]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	494d      	ldr	r1, [pc, #308]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d040      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e07f      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e073      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06b      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4936      	ldr	r1, [pc, #216]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7ff f8f4 	bl	80010ec <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7ff f8f0 	bl	80010ec <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e053      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d210      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4922      	ldr	r1, [pc, #136]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e032      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4916      	ldr	r1, [pc, #88]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9e:	f000 f821 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	490a      	ldr	r1, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	5ccb      	ldrb	r3, [r1, r3]
 8001fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1cc>)
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f852 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08003e34 	.word	0x08003e34
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_GetSysClockFreq+0x94>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x30>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x36>
 8002012:	e027      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_RCC_GetSysClockFreq+0x98>)
 8002016:	613b      	str	r3, [r7, #16]
      break;
 8002018:	e027      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d010      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_GetSysClockFreq+0x94>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0c5b      	lsrs	r3, r3, #17
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_RCC_GetSysClockFreq+0xa0>)
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <HAL_RCC_GetSysClockFreq+0x98>)
 8002046:	fb03 f202 	mul.w	r2, r3, r2
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e004      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	613b      	str	r3, [r7, #16]
      break;
 8002062:	e002      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetSysClockFreq+0x98>)
 8002066:	613b      	str	r3, [r7, #16]
      break;
 8002068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206a:	693b      	ldr	r3, [r7, #16]
}
 800206c:	4618      	mov	r0, r3
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	007a1200 	.word	0x007a1200
 8002080:	08003e4c 	.word	0x08003e4c
 8002084:	08003e5c 	.word	0x08003e5c
 8002088:	003d0900 	.word	0x003d0900

0800208c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002090:	4b02      	ldr	r3, [pc, #8]	; (800209c <HAL_RCC_GetHCLKFreq+0x10>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a4:	f7ff fff2 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08003e44 	.word	0x08003e44

080020c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020cc:	f7ff ffde 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	0adb      	lsrs	r3, r3, #11
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08003e44 	.word	0x08003e44

080020f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <RCC_Delay+0x34>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <RCC_Delay+0x38>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0a5b      	lsrs	r3, r3, #9
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800210c:	bf00      	nop
  }
  while (Delay --);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1e5a      	subs	r2, r3, #1
 8002112:	60fa      	str	r2, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f9      	bne.n	800210c <RCC_Delay+0x1c>
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	20000004 	.word	0x20000004
 8002128:	10624dd3 	.word	0x10624dd3

0800212c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e041      	b.n	80021c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fdc6 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 fc28 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d001      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e03a      	b.n	800225a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a18      	ldr	r2, [pc, #96]	; (8002264 <HAL_TIM_Base_Start_IT+0x98>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <HAL_TIM_Base_Start_IT+0x58>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220e:	d009      	beq.n	8002224 <HAL_TIM_Base_Start_IT+0x58>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <HAL_TIM_Base_Start_IT+0x9c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_TIM_Base_Start_IT+0x58>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_TIM_Base_Start_IT+0xa0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d111      	bne.n	8002248 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d010      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002246:	e007      	b.n	8002258 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800

08002270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e041      	b.n	8002306 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fd68 	bl	8000d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 fb86 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_TIM_PWM_Start+0x24>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e022      	b.n	800237a <HAL_TIM_PWM_Start+0x6a>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d109      	bne.n	800234e <HAL_TIM_PWM_Start+0x3e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	e015      	b.n	800237a <HAL_TIM_PWM_Start+0x6a>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d109      	bne.n	8002368 <HAL_TIM_PWM_Start+0x58>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	bf14      	ite	ne
 8002360:	2301      	movne	r3, #1
 8002362:	2300      	moveq	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e008      	b.n	800237a <HAL_TIM_PWM_Start+0x6a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e05e      	b.n	8002440 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Start+0x82>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002390:	e013      	b.n	80023ba <HAL_TIM_PWM_Start+0xaa>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0x92>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a0:	e00b      	b.n	80023ba <HAL_TIM_PWM_Start+0xaa>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Start+0xa2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b0:	e003      	b.n	80023ba <HAL_TIM_PWM_Start+0xaa>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fd7c 	bl	8002ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_TIM_PWM_Start+0x138>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d107      	bne.n	80023e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a18      	ldr	r2, [pc, #96]	; (8002448 <HAL_TIM_PWM_Start+0x138>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00e      	beq.n	800240a <HAL_TIM_PWM_Start+0xfa>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d009      	beq.n	800240a <HAL_TIM_PWM_Start+0xfa>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_TIM_PWM_Start+0x13c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_TIM_PWM_Start+0xfa>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_TIM_PWM_Start+0x140>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d111      	bne.n	800242e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b06      	cmp	r3, #6
 800241a:	d010      	beq.n	800243e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242c:	e007      	b.n	800243e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800

08002454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d122      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0202 	mvn.w	r2, #2
 8002480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa76 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa69 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fa78 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0204 	mvn.w	r2, #4
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa4c 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa3f 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa4e 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b08      	cmp	r3, #8
 8002510:	d122      	bne.n	8002558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b08      	cmp	r3, #8
 800251e:	d11b      	bne.n	8002558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0208 	mvn.w	r2, #8
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa22 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa15 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fa24 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b10      	cmp	r3, #16
 8002564:	d122      	bne.n	80025ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b10      	cmp	r3, #16
 8002572:	d11b      	bne.n	80025ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0210 	mvn.w	r2, #16
 800257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2208      	movs	r2, #8
 8002582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f9f8 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f9eb 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f9fa 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0201 	mvn.w	r2, #1
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fa1e 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d10e      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d107      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fce9 	bl	8002fd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f9be 	bl	80029ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b20      	cmp	r3, #32
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b20      	cmp	r3, #32
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0220 	mvn.w	r2, #32
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fcb4 	bl	8002fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e0ae      	b.n	80027e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	f200 809f 	bhi.w	80027d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	080026cd 	.word	0x080026cd
 800269c:	080027d1 	.word	0x080027d1
 80026a0:	080027d1 	.word	0x080027d1
 80026a4:	080027d1 	.word	0x080027d1
 80026a8:	0800270d 	.word	0x0800270d
 80026ac:	080027d1 	.word	0x080027d1
 80026b0:	080027d1 	.word	0x080027d1
 80026b4:	080027d1 	.word	0x080027d1
 80026b8:	0800274f 	.word	0x0800274f
 80026bc:	080027d1 	.word	0x080027d1
 80026c0:	080027d1 	.word	0x080027d1
 80026c4:	080027d1 	.word	0x080027d1
 80026c8:	0800278f 	.word	0x0800278f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f9d6 	bl	8002a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
      break;
 800270a:	e064      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fa1c 	bl	8002b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6999      	ldr	r1, [r3, #24]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	619a      	str	r2, [r3, #24]
      break;
 800274c:	e043      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fa65 	bl	8002c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0208 	orr.w	r2, r2, #8
 8002768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0204 	bic.w	r2, r2, #4
 8002778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	61da      	str	r2, [r3, #28]
      break;
 800278c:	e023      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 faaf 	bl	8002cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69d9      	ldr	r1, [r3, #28]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	61da      	str	r2, [r3, #28]
      break;
 80027ce:	e002      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
      break;
 80027d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_TIM_ConfigClockSource+0x1c>
 8002800:	2302      	movs	r3, #2
 8002802:	e0b4      	b.n	800296e <HAL_TIM_ConfigClockSource+0x186>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283c:	d03e      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0xd4>
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002842:	f200 8087 	bhi.w	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	f000 8086 	beq.w	800295a <HAL_TIM_ConfigClockSource+0x172>
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002852:	d87f      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b70      	cmp	r3, #112	; 0x70
 8002856:	d01a      	beq.n	800288e <HAL_TIM_ConfigClockSource+0xa6>
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d87b      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b60      	cmp	r3, #96	; 0x60
 800285e:	d050      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x11a>
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d877      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b50      	cmp	r3, #80	; 0x50
 8002866:	d03c      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d873      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d058      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x13a>
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d86f      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002874:	2b30      	cmp	r3, #48	; 0x30
 8002876:	d064      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	d86b      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b20      	cmp	r3, #32
 800287e:	d060      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d867      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d05c      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 8002888:	2b10      	cmp	r3, #16
 800288a:	d05a      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	e062      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800289e:	f000 faf0 	bl	8002e82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	609a      	str	r2, [r3, #8]
      break;
 80028ba:	e04f      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028cc:	f000 fad9 	bl	8002e82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028de:	609a      	str	r2, [r3, #8]
      break;
 80028e0:	e03c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 fa50 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2150      	movs	r1, #80	; 0x50
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 faa7 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002900:	e02c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800290e:	461a      	mov	r2, r3
 8002910:	f000 fa6e 	bl	8002df0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2160      	movs	r1, #96	; 0x60
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fa97 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002920:	e01c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	461a      	mov	r2, r3
 8002930:	f000 fa30 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2140      	movs	r1, #64	; 0x40
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fa87 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002940:	e00c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f000 fa7e 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002952:	e003      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e000      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800295a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
	...

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <TIM_Base_SetConfig+0xb8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <TIM_Base_SetConfig+0xbc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <TIM_Base_SetConfig+0xc0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <TIM_Base_SetConfig+0xb8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <TIM_Base_SetConfig+0xbc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <TIM_Base_SetConfig+0xc0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <TIM_Base_SetConfig+0xb8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800

08002a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 0201 	bic.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f023 0302 	bic.w	r3, r3, #2
 8002acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <TIM_OC1_SetConfig+0xc8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10c      	bne.n	8002afa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0308 	bic.w	r3, r3, #8
 8002ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <TIM_OC1_SetConfig+0xc8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00

08002b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 0210 	bic.w	r2, r3, #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0320 	bic.w	r3, r3, #32
 8002b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <TIM_OC2_SetConfig+0xd0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10d      	bne.n	8002bcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <TIM_OC2_SetConfig+0xd0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d113      	bne.n	8002bfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	621a      	str	r2, [r3, #32]
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00

08002c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <TIM_OC3_SetConfig+0xd0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10d      	bne.n	8002c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <TIM_OC3_SetConfig+0xd0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d113      	bne.n	8002cce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00

08002cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <TIM_OC4_SetConfig+0x98>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d109      	bne.n	8002d6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00

08002d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 030a 	bic.w	r3, r3, #10
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0210 	bic.w	r2, r3, #16
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f043 0307 	orr.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e046      	b.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00e      	beq.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d009      	beq.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10c      	bne.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e042      	b.n	8003080 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd ff16 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9af 	bl	8003390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d16d      	bne.n	8003184 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_UART_Transmit+0x2c>
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e066      	b.n	8003186 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2221      	movs	r2, #33	; 0x21
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c6:	f7fe f811 	bl	80010ec <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e0:	d108      	bne.n	80030f4 <HAL_UART_Transmit+0x6c>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	e003      	b.n	80030fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030fc:	e02a      	b.n	8003154 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f8d2 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e036      	b.n	8003186 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3302      	adds	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e007      	b.n	8003146 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3301      	adds	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1cf      	bne.n	80030fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f8a2 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e006      	b.n	8003186 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08a      	sub	sp, #40	; 0x28
 8003192:	af02      	add	r7, sp, #8
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d17c      	bne.n	80032a8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_UART_Receive+0x2c>
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e075      	b.n	80032aa <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2222      	movs	r2, #34	; 0x22
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031d2:	f7fd ff8b 	bl	80010ec <HAL_GetTick>
 80031d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	88fa      	ldrh	r2, [r7, #6]
 80031dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	88fa      	ldrh	r2, [r7, #6]
 80031e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ec:	d108      	bne.n	8003200 <HAL_UART_Receive+0x72>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e003      	b.n	8003208 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003208:	e043      	b.n	8003292 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2120      	movs	r1, #32
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f84c 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e042      	b.n	80032aa <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003236:	b29a      	uxth	r2, r3
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	3302      	adds	r3, #2
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e01f      	b.n	8003284 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d007      	beq.n	800325e <HAL_UART_Receive+0xd0>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_UART_Receive+0xde>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e008      	b.n	800327e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003278:	b2da      	uxtb	r2, r3
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3301      	adds	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1b6      	bne.n	800320a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b090      	sub	sp, #64	; 0x40
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	e050      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d04c      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d2:	f7fd ff0b 	bl	80010ec <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	429a      	cmp	r2, r3
 80032e0:	d241      	bcs.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003302:	637a      	str	r2, [r7, #52]	; 0x34
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e5      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	613b      	str	r3, [r7, #16]
   return(result);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003336:	623a      	str	r2, [r7, #32]
 8003338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	61bb      	str	r3, [r7, #24]
   return(result);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d09f      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3740      	adds	r7, #64	; 0x40
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033ca:	f023 030c 	bic.w	r3, r3, #12
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2c      	ldr	r2, [pc, #176]	; (80034a4 <UART_SetConfig+0x114>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033f8:	f7fe fe66 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	e002      	b.n	8003406 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003400:	f7fe fe4e 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003404:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009a      	lsls	r2, r3, #2
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <UART_SetConfig+0x118>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	0119      	lsls	r1, r3, #4
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <UART_SetConfig+0x118>)
 800343e:	fba3 0302 	umull	r0, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	fb00 f303 	mul.w	r3, r0, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <UART_SetConfig+0x118>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345c:	4419      	add	r1, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009a      	lsls	r2, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fbb2 f2f3 	udiv	r2, r2, r3
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <UART_SetConfig+0x118>)
 8003476:	fba3 0302 	umull	r0, r3, r3, r2
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2064      	movs	r0, #100	; 0x64
 800347e:	fb00 f303 	mul.w	r3, r0, r3
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	3332      	adds	r3, #50	; 0x32
 8003488:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <UART_SetConfig+0x118>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	440a      	add	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40013800 	.word	0x40013800
 80034a8:	51eb851f 	.word	0x51eb851f

080034ac <siprintf>:
 80034ac:	b40e      	push	{r1, r2, r3}
 80034ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034b2:	b500      	push	{lr}
 80034b4:	b09c      	sub	sp, #112	; 0x70
 80034b6:	ab1d      	add	r3, sp, #116	; 0x74
 80034b8:	9002      	str	r0, [sp, #8]
 80034ba:	9006      	str	r0, [sp, #24]
 80034bc:	9107      	str	r1, [sp, #28]
 80034be:	9104      	str	r1, [sp, #16]
 80034c0:	4808      	ldr	r0, [pc, #32]	; (80034e4 <siprintf+0x38>)
 80034c2:	4909      	ldr	r1, [pc, #36]	; (80034e8 <siprintf+0x3c>)
 80034c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c8:	9105      	str	r1, [sp, #20]
 80034ca:	6800      	ldr	r0, [r0, #0]
 80034cc:	a902      	add	r1, sp, #8
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	f000 f98e 	bl	80037f0 <_svfiprintf_r>
 80034d4:	2200      	movs	r2, #0
 80034d6:	9b02      	ldr	r3, [sp, #8]
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	b01c      	add	sp, #112	; 0x70
 80034dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80034e0:	b003      	add	sp, #12
 80034e2:	4770      	bx	lr
 80034e4:	2000005c 	.word	0x2000005c
 80034e8:	ffff0208 	.word	0xffff0208

080034ec <memset>:
 80034ec:	4603      	mov	r3, r0
 80034ee:	4402      	add	r2, r0
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d100      	bne.n	80034f6 <memset+0xa>
 80034f4:	4770      	bx	lr
 80034f6:	f803 1b01 	strb.w	r1, [r3], #1
 80034fa:	e7f9      	b.n	80034f0 <memset+0x4>

080034fc <__errno>:
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <__errno+0x8>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	2000005c 	.word	0x2000005c

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	2600      	movs	r6, #0
 800350c:	4d0c      	ldr	r5, [pc, #48]	; (8003540 <__libc_init_array+0x38>)
 800350e:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 8003510:	1b64      	subs	r4, r4, r5
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	f000 fc7a 	bl	8003e10 <_init>
 800351c:	2600      	movs	r6, #0
 800351e:	4d0a      	ldr	r5, [pc, #40]	; (8003548 <__libc_init_array+0x40>)
 8003520:	4c0a      	ldr	r4, [pc, #40]	; (800354c <__libc_init_array+0x44>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08003e94 	.word	0x08003e94
 8003544:	08003e94 	.word	0x08003e94
 8003548:	08003e94 	.word	0x08003e94
 800354c:	08003e98 	.word	0x08003e98

08003550 <__retarget_lock_acquire_recursive>:
 8003550:	4770      	bx	lr

08003552 <__retarget_lock_release_recursive>:
 8003552:	4770      	bx	lr

08003554 <_free_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4605      	mov	r5, r0
 8003558:	2900      	cmp	r1, #0
 800355a:	d040      	beq.n	80035de <_free_r+0x8a>
 800355c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003560:	1f0c      	subs	r4, r1, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bfb8      	it	lt
 8003566:	18e4      	addlt	r4, r4, r3
 8003568:	f000 f8dc 	bl	8003724 <__malloc_lock>
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <_free_r+0x8c>)
 800356e:	6813      	ldr	r3, [r2, #0]
 8003570:	b933      	cbnz	r3, 8003580 <_free_r+0x2c>
 8003572:	6063      	str	r3, [r4, #4]
 8003574:	6014      	str	r4, [r2, #0]
 8003576:	4628      	mov	r0, r5
 8003578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800357c:	f000 b8d8 	b.w	8003730 <__malloc_unlock>
 8003580:	42a3      	cmp	r3, r4
 8003582:	d908      	bls.n	8003596 <_free_r+0x42>
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	1821      	adds	r1, r4, r0
 8003588:	428b      	cmp	r3, r1
 800358a:	bf01      	itttt	eq
 800358c:	6819      	ldreq	r1, [r3, #0]
 800358e:	685b      	ldreq	r3, [r3, #4]
 8003590:	1809      	addeq	r1, r1, r0
 8003592:	6021      	streq	r1, [r4, #0]
 8003594:	e7ed      	b.n	8003572 <_free_r+0x1e>
 8003596:	461a      	mov	r2, r3
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b10b      	cbz	r3, 80035a0 <_free_r+0x4c>
 800359c:	42a3      	cmp	r3, r4
 800359e:	d9fa      	bls.n	8003596 <_free_r+0x42>
 80035a0:	6811      	ldr	r1, [r2, #0]
 80035a2:	1850      	adds	r0, r2, r1
 80035a4:	42a0      	cmp	r0, r4
 80035a6:	d10b      	bne.n	80035c0 <_free_r+0x6c>
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	4401      	add	r1, r0
 80035ac:	1850      	adds	r0, r2, r1
 80035ae:	4283      	cmp	r3, r0
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	d1e0      	bne.n	8003576 <_free_r+0x22>
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4408      	add	r0, r1
 80035ba:	6010      	str	r0, [r2, #0]
 80035bc:	6053      	str	r3, [r2, #4]
 80035be:	e7da      	b.n	8003576 <_free_r+0x22>
 80035c0:	d902      	bls.n	80035c8 <_free_r+0x74>
 80035c2:	230c      	movs	r3, #12
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	e7d6      	b.n	8003576 <_free_r+0x22>
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	1821      	adds	r1, r4, r0
 80035cc:	428b      	cmp	r3, r1
 80035ce:	bf01      	itttt	eq
 80035d0:	6819      	ldreq	r1, [r3, #0]
 80035d2:	685b      	ldreq	r3, [r3, #4]
 80035d4:	1809      	addeq	r1, r1, r0
 80035d6:	6021      	streq	r1, [r4, #0]
 80035d8:	6063      	str	r3, [r4, #4]
 80035da:	6054      	str	r4, [r2, #4]
 80035dc:	e7cb      	b.n	8003576 <_free_r+0x22>
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	20000404 	.word	0x20000404

080035e4 <sbrk_aligned>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4e0e      	ldr	r6, [pc, #56]	; (8003620 <sbrk_aligned+0x3c>)
 80035e8:	460c      	mov	r4, r1
 80035ea:	6831      	ldr	r1, [r6, #0]
 80035ec:	4605      	mov	r5, r0
 80035ee:	b911      	cbnz	r1, 80035f6 <sbrk_aligned+0x12>
 80035f0:	f000 fbaa 	bl	8003d48 <_sbrk_r>
 80035f4:	6030      	str	r0, [r6, #0]
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 fba5 	bl	8003d48 <_sbrk_r>
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d00a      	beq.n	8003618 <sbrk_aligned+0x34>
 8003602:	1cc4      	adds	r4, r0, #3
 8003604:	f024 0403 	bic.w	r4, r4, #3
 8003608:	42a0      	cmp	r0, r4
 800360a:	d007      	beq.n	800361c <sbrk_aligned+0x38>
 800360c:	1a21      	subs	r1, r4, r0
 800360e:	4628      	mov	r0, r5
 8003610:	f000 fb9a 	bl	8003d48 <_sbrk_r>
 8003614:	3001      	adds	r0, #1
 8003616:	d101      	bne.n	800361c <sbrk_aligned+0x38>
 8003618:	f04f 34ff 	mov.w	r4, #4294967295
 800361c:	4620      	mov	r0, r4
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	20000408 	.word	0x20000408

08003624 <_malloc_r>:
 8003624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003628:	1ccd      	adds	r5, r1, #3
 800362a:	f025 0503 	bic.w	r5, r5, #3
 800362e:	3508      	adds	r5, #8
 8003630:	2d0c      	cmp	r5, #12
 8003632:	bf38      	it	cc
 8003634:	250c      	movcc	r5, #12
 8003636:	2d00      	cmp	r5, #0
 8003638:	4607      	mov	r7, r0
 800363a:	db01      	blt.n	8003640 <_malloc_r+0x1c>
 800363c:	42a9      	cmp	r1, r5
 800363e:	d905      	bls.n	800364c <_malloc_r+0x28>
 8003640:	230c      	movs	r3, #12
 8003642:	2600      	movs	r6, #0
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4630      	mov	r0, r6
 8003648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800364c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003720 <_malloc_r+0xfc>
 8003650:	f000 f868 	bl	8003724 <__malloc_lock>
 8003654:	f8d8 3000 	ldr.w	r3, [r8]
 8003658:	461c      	mov	r4, r3
 800365a:	bb5c      	cbnz	r4, 80036b4 <_malloc_r+0x90>
 800365c:	4629      	mov	r1, r5
 800365e:	4638      	mov	r0, r7
 8003660:	f7ff ffc0 	bl	80035e4 <sbrk_aligned>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	4604      	mov	r4, r0
 8003668:	d155      	bne.n	8003716 <_malloc_r+0xf2>
 800366a:	f8d8 4000 	ldr.w	r4, [r8]
 800366e:	4626      	mov	r6, r4
 8003670:	2e00      	cmp	r6, #0
 8003672:	d145      	bne.n	8003700 <_malloc_r+0xdc>
 8003674:	2c00      	cmp	r4, #0
 8003676:	d048      	beq.n	800370a <_malloc_r+0xe6>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	4631      	mov	r1, r6
 800367c:	4638      	mov	r0, r7
 800367e:	eb04 0903 	add.w	r9, r4, r3
 8003682:	f000 fb61 	bl	8003d48 <_sbrk_r>
 8003686:	4581      	cmp	r9, r0
 8003688:	d13f      	bne.n	800370a <_malloc_r+0xe6>
 800368a:	6821      	ldr	r1, [r4, #0]
 800368c:	4638      	mov	r0, r7
 800368e:	1a6d      	subs	r5, r5, r1
 8003690:	4629      	mov	r1, r5
 8003692:	f7ff ffa7 	bl	80035e4 <sbrk_aligned>
 8003696:	3001      	adds	r0, #1
 8003698:	d037      	beq.n	800370a <_malloc_r+0xe6>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	442b      	add	r3, r5
 800369e:	6023      	str	r3, [r4, #0]
 80036a0:	f8d8 3000 	ldr.w	r3, [r8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d038      	beq.n	800371a <_malloc_r+0xf6>
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	42a2      	cmp	r2, r4
 80036ac:	d12b      	bne.n	8003706 <_malloc_r+0xe2>
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e00f      	b.n	80036d4 <_malloc_r+0xb0>
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	1b52      	subs	r2, r2, r5
 80036b8:	d41f      	bmi.n	80036fa <_malloc_r+0xd6>
 80036ba:	2a0b      	cmp	r2, #11
 80036bc:	d917      	bls.n	80036ee <_malloc_r+0xca>
 80036be:	1961      	adds	r1, r4, r5
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	6025      	str	r5, [r4, #0]
 80036c4:	bf18      	it	ne
 80036c6:	6059      	strne	r1, [r3, #4]
 80036c8:	6863      	ldr	r3, [r4, #4]
 80036ca:	bf08      	it	eq
 80036cc:	f8c8 1000 	streq.w	r1, [r8]
 80036d0:	5162      	str	r2, [r4, r5]
 80036d2:	604b      	str	r3, [r1, #4]
 80036d4:	4638      	mov	r0, r7
 80036d6:	f104 060b 	add.w	r6, r4, #11
 80036da:	f000 f829 	bl	8003730 <__malloc_unlock>
 80036de:	f026 0607 	bic.w	r6, r6, #7
 80036e2:	1d23      	adds	r3, r4, #4
 80036e4:	1af2      	subs	r2, r6, r3
 80036e6:	d0ae      	beq.n	8003646 <_malloc_r+0x22>
 80036e8:	1b9b      	subs	r3, r3, r6
 80036ea:	50a3      	str	r3, [r4, r2]
 80036ec:	e7ab      	b.n	8003646 <_malloc_r+0x22>
 80036ee:	42a3      	cmp	r3, r4
 80036f0:	6862      	ldr	r2, [r4, #4]
 80036f2:	d1dd      	bne.n	80036b0 <_malloc_r+0x8c>
 80036f4:	f8c8 2000 	str.w	r2, [r8]
 80036f8:	e7ec      	b.n	80036d4 <_malloc_r+0xb0>
 80036fa:	4623      	mov	r3, r4
 80036fc:	6864      	ldr	r4, [r4, #4]
 80036fe:	e7ac      	b.n	800365a <_malloc_r+0x36>
 8003700:	4634      	mov	r4, r6
 8003702:	6876      	ldr	r6, [r6, #4]
 8003704:	e7b4      	b.n	8003670 <_malloc_r+0x4c>
 8003706:	4613      	mov	r3, r2
 8003708:	e7cc      	b.n	80036a4 <_malloc_r+0x80>
 800370a:	230c      	movs	r3, #12
 800370c:	4638      	mov	r0, r7
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	f000 f80e 	bl	8003730 <__malloc_unlock>
 8003714:	e797      	b.n	8003646 <_malloc_r+0x22>
 8003716:	6025      	str	r5, [r4, #0]
 8003718:	e7dc      	b.n	80036d4 <_malloc_r+0xb0>
 800371a:	605b      	str	r3, [r3, #4]
 800371c:	deff      	udf	#255	; 0xff
 800371e:	bf00      	nop
 8003720:	20000404 	.word	0x20000404

08003724 <__malloc_lock>:
 8003724:	4801      	ldr	r0, [pc, #4]	; (800372c <__malloc_lock+0x8>)
 8003726:	f7ff bf13 	b.w	8003550 <__retarget_lock_acquire_recursive>
 800372a:	bf00      	nop
 800372c:	20000400 	.word	0x20000400

08003730 <__malloc_unlock>:
 8003730:	4801      	ldr	r0, [pc, #4]	; (8003738 <__malloc_unlock+0x8>)
 8003732:	f7ff bf0e 	b.w	8003552 <__retarget_lock_release_recursive>
 8003736:	bf00      	nop
 8003738:	20000400 	.word	0x20000400

0800373c <__ssputs_r>:
 800373c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	461f      	mov	r7, r3
 8003742:	688e      	ldr	r6, [r1, #8]
 8003744:	4682      	mov	sl, r0
 8003746:	42be      	cmp	r6, r7
 8003748:	460c      	mov	r4, r1
 800374a:	4690      	mov	r8, r2
 800374c:	680b      	ldr	r3, [r1, #0]
 800374e:	d82c      	bhi.n	80037aa <__ssputs_r+0x6e>
 8003750:	898a      	ldrh	r2, [r1, #12]
 8003752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003756:	d026      	beq.n	80037a6 <__ssputs_r+0x6a>
 8003758:	6965      	ldr	r5, [r4, #20]
 800375a:	6909      	ldr	r1, [r1, #16]
 800375c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003760:	eba3 0901 	sub.w	r9, r3, r1
 8003764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003768:	1c7b      	adds	r3, r7, #1
 800376a:	444b      	add	r3, r9
 800376c:	106d      	asrs	r5, r5, #1
 800376e:	429d      	cmp	r5, r3
 8003770:	bf38      	it	cc
 8003772:	461d      	movcc	r5, r3
 8003774:	0553      	lsls	r3, r2, #21
 8003776:	d527      	bpl.n	80037c8 <__ssputs_r+0x8c>
 8003778:	4629      	mov	r1, r5
 800377a:	f7ff ff53 	bl	8003624 <_malloc_r>
 800377e:	4606      	mov	r6, r0
 8003780:	b360      	cbz	r0, 80037dc <__ssputs_r+0xa0>
 8003782:	464a      	mov	r2, r9
 8003784:	6921      	ldr	r1, [r4, #16]
 8003786:	f000 fafd 	bl	8003d84 <memcpy>
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003794:	81a3      	strh	r3, [r4, #12]
 8003796:	6126      	str	r6, [r4, #16]
 8003798:	444e      	add	r6, r9
 800379a:	6026      	str	r6, [r4, #0]
 800379c:	463e      	mov	r6, r7
 800379e:	6165      	str	r5, [r4, #20]
 80037a0:	eba5 0509 	sub.w	r5, r5, r9
 80037a4:	60a5      	str	r5, [r4, #8]
 80037a6:	42be      	cmp	r6, r7
 80037a8:	d900      	bls.n	80037ac <__ssputs_r+0x70>
 80037aa:	463e      	mov	r6, r7
 80037ac:	4632      	mov	r2, r6
 80037ae:	4641      	mov	r1, r8
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	f000 faaf 	bl	8003d14 <memmove>
 80037b6:	2000      	movs	r0, #0
 80037b8:	68a3      	ldr	r3, [r4, #8]
 80037ba:	1b9b      	subs	r3, r3, r6
 80037bc:	60a3      	str	r3, [r4, #8]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	4433      	add	r3, r6
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	462a      	mov	r2, r5
 80037ca:	f000 fae9 	bl	8003da0 <_realloc_r>
 80037ce:	4606      	mov	r6, r0
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d1e0      	bne.n	8003796 <__ssputs_r+0x5a>
 80037d4:	4650      	mov	r0, sl
 80037d6:	6921      	ldr	r1, [r4, #16]
 80037d8:	f7ff febc 	bl	8003554 <_free_r>
 80037dc:	230c      	movs	r3, #12
 80037de:	f8ca 3000 	str.w	r3, [sl]
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	e7e9      	b.n	80037c4 <__ssputs_r+0x88>

080037f0 <_svfiprintf_r>:
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	4698      	mov	r8, r3
 80037f6:	898b      	ldrh	r3, [r1, #12]
 80037f8:	4607      	mov	r7, r0
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	460d      	mov	r5, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	b09d      	sub	sp, #116	; 0x74
 8003802:	d50e      	bpl.n	8003822 <_svfiprintf_r+0x32>
 8003804:	690b      	ldr	r3, [r1, #16]
 8003806:	b963      	cbnz	r3, 8003822 <_svfiprintf_r+0x32>
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	f7ff ff0b 	bl	8003624 <_malloc_r>
 800380e:	6028      	str	r0, [r5, #0]
 8003810:	6128      	str	r0, [r5, #16]
 8003812:	b920      	cbnz	r0, 800381e <_svfiprintf_r+0x2e>
 8003814:	230c      	movs	r3, #12
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	e0d0      	b.n	80039c0 <_svfiprintf_r+0x1d0>
 800381e:	2340      	movs	r3, #64	; 0x40
 8003820:	616b      	str	r3, [r5, #20]
 8003822:	2300      	movs	r3, #0
 8003824:	9309      	str	r3, [sp, #36]	; 0x24
 8003826:	2320      	movs	r3, #32
 8003828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800382c:	2330      	movs	r3, #48	; 0x30
 800382e:	f04f 0901 	mov.w	r9, #1
 8003832:	f8cd 800c 	str.w	r8, [sp, #12]
 8003836:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80039d8 <_svfiprintf_r+0x1e8>
 800383a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800383e:	4623      	mov	r3, r4
 8003840:	469a      	mov	sl, r3
 8003842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003846:	b10a      	cbz	r2, 800384c <_svfiprintf_r+0x5c>
 8003848:	2a25      	cmp	r2, #37	; 0x25
 800384a:	d1f9      	bne.n	8003840 <_svfiprintf_r+0x50>
 800384c:	ebba 0b04 	subs.w	fp, sl, r4
 8003850:	d00b      	beq.n	800386a <_svfiprintf_r+0x7a>
 8003852:	465b      	mov	r3, fp
 8003854:	4622      	mov	r2, r4
 8003856:	4629      	mov	r1, r5
 8003858:	4638      	mov	r0, r7
 800385a:	f7ff ff6f 	bl	800373c <__ssputs_r>
 800385e:	3001      	adds	r0, #1
 8003860:	f000 80a9 	beq.w	80039b6 <_svfiprintf_r+0x1c6>
 8003864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003866:	445a      	add	r2, fp
 8003868:	9209      	str	r2, [sp, #36]	; 0x24
 800386a:	f89a 3000 	ldrb.w	r3, [sl]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80a1 	beq.w	80039b6 <_svfiprintf_r+0x1c6>
 8003874:	2300      	movs	r3, #0
 8003876:	f04f 32ff 	mov.w	r2, #4294967295
 800387a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800387e:	f10a 0a01 	add.w	sl, sl, #1
 8003882:	9304      	str	r3, [sp, #16]
 8003884:	9307      	str	r3, [sp, #28]
 8003886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800388a:	931a      	str	r3, [sp, #104]	; 0x68
 800388c:	4654      	mov	r4, sl
 800388e:	2205      	movs	r2, #5
 8003890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003894:	4850      	ldr	r0, [pc, #320]	; (80039d8 <_svfiprintf_r+0x1e8>)
 8003896:	f000 fa67 	bl	8003d68 <memchr>
 800389a:	9a04      	ldr	r2, [sp, #16]
 800389c:	b9d8      	cbnz	r0, 80038d6 <_svfiprintf_r+0xe6>
 800389e:	06d0      	lsls	r0, r2, #27
 80038a0:	bf44      	itt	mi
 80038a2:	2320      	movmi	r3, #32
 80038a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038a8:	0711      	lsls	r1, r2, #28
 80038aa:	bf44      	itt	mi
 80038ac:	232b      	movmi	r3, #43	; 0x2b
 80038ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b2:	f89a 3000 	ldrb.w	r3, [sl]
 80038b6:	2b2a      	cmp	r3, #42	; 0x2a
 80038b8:	d015      	beq.n	80038e6 <_svfiprintf_r+0xf6>
 80038ba:	4654      	mov	r4, sl
 80038bc:	2000      	movs	r0, #0
 80038be:	f04f 0c0a 	mov.w	ip, #10
 80038c2:	9a07      	ldr	r2, [sp, #28]
 80038c4:	4621      	mov	r1, r4
 80038c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ca:	3b30      	subs	r3, #48	; 0x30
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d94d      	bls.n	800396c <_svfiprintf_r+0x17c>
 80038d0:	b1b0      	cbz	r0, 8003900 <_svfiprintf_r+0x110>
 80038d2:	9207      	str	r2, [sp, #28]
 80038d4:	e014      	b.n	8003900 <_svfiprintf_r+0x110>
 80038d6:	eba0 0308 	sub.w	r3, r0, r8
 80038da:	fa09 f303 	lsl.w	r3, r9, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	46a2      	mov	sl, r4
 80038e2:	9304      	str	r3, [sp, #16]
 80038e4:	e7d2      	b.n	800388c <_svfiprintf_r+0x9c>
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	1d19      	adds	r1, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9103      	str	r1, [sp, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfbb      	ittet	lt
 80038f2:	425b      	neglt	r3, r3
 80038f4:	f042 0202 	orrlt.w	r2, r2, #2
 80038f8:	9307      	strge	r3, [sp, #28]
 80038fa:	9307      	strlt	r3, [sp, #28]
 80038fc:	bfb8      	it	lt
 80038fe:	9204      	strlt	r2, [sp, #16]
 8003900:	7823      	ldrb	r3, [r4, #0]
 8003902:	2b2e      	cmp	r3, #46	; 0x2e
 8003904:	d10c      	bne.n	8003920 <_svfiprintf_r+0x130>
 8003906:	7863      	ldrb	r3, [r4, #1]
 8003908:	2b2a      	cmp	r3, #42	; 0x2a
 800390a:	d134      	bne.n	8003976 <_svfiprintf_r+0x186>
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	3402      	adds	r4, #2
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	9203      	str	r2, [sp, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	bfb8      	it	lt
 800391a:	f04f 33ff 	movlt.w	r3, #4294967295
 800391e:	9305      	str	r3, [sp, #20]
 8003920:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80039dc <_svfiprintf_r+0x1ec>
 8003924:	2203      	movs	r2, #3
 8003926:	4650      	mov	r0, sl
 8003928:	7821      	ldrb	r1, [r4, #0]
 800392a:	f000 fa1d 	bl	8003d68 <memchr>
 800392e:	b138      	cbz	r0, 8003940 <_svfiprintf_r+0x150>
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	9b04      	ldr	r3, [sp, #16]
 8003934:	eba0 000a 	sub.w	r0, r0, sl
 8003938:	4082      	lsls	r2, r0
 800393a:	4313      	orrs	r3, r2
 800393c:	3401      	adds	r4, #1
 800393e:	9304      	str	r3, [sp, #16]
 8003940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003944:	2206      	movs	r2, #6
 8003946:	4826      	ldr	r0, [pc, #152]	; (80039e0 <_svfiprintf_r+0x1f0>)
 8003948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800394c:	f000 fa0c 	bl	8003d68 <memchr>
 8003950:	2800      	cmp	r0, #0
 8003952:	d038      	beq.n	80039c6 <_svfiprintf_r+0x1d6>
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <_svfiprintf_r+0x1f4>)
 8003956:	bb1b      	cbnz	r3, 80039a0 <_svfiprintf_r+0x1b0>
 8003958:	9b03      	ldr	r3, [sp, #12]
 800395a:	3307      	adds	r3, #7
 800395c:	f023 0307 	bic.w	r3, r3, #7
 8003960:	3308      	adds	r3, #8
 8003962:	9303      	str	r3, [sp, #12]
 8003964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003966:	4433      	add	r3, r6
 8003968:	9309      	str	r3, [sp, #36]	; 0x24
 800396a:	e768      	b.n	800383e <_svfiprintf_r+0x4e>
 800396c:	460c      	mov	r4, r1
 800396e:	2001      	movs	r0, #1
 8003970:	fb0c 3202 	mla	r2, ip, r2, r3
 8003974:	e7a6      	b.n	80038c4 <_svfiprintf_r+0xd4>
 8003976:	2300      	movs	r3, #0
 8003978:	f04f 0c0a 	mov.w	ip, #10
 800397c:	4619      	mov	r1, r3
 800397e:	3401      	adds	r4, #1
 8003980:	9305      	str	r3, [sp, #20]
 8003982:	4620      	mov	r0, r4
 8003984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003988:	3a30      	subs	r2, #48	; 0x30
 800398a:	2a09      	cmp	r2, #9
 800398c:	d903      	bls.n	8003996 <_svfiprintf_r+0x1a6>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0c6      	beq.n	8003920 <_svfiprintf_r+0x130>
 8003992:	9105      	str	r1, [sp, #20]
 8003994:	e7c4      	b.n	8003920 <_svfiprintf_r+0x130>
 8003996:	4604      	mov	r4, r0
 8003998:	2301      	movs	r3, #1
 800399a:	fb0c 2101 	mla	r1, ip, r1, r2
 800399e:	e7f0      	b.n	8003982 <_svfiprintf_r+0x192>
 80039a0:	ab03      	add	r3, sp, #12
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	462a      	mov	r2, r5
 80039a6:	4638      	mov	r0, r7
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <_svfiprintf_r+0x1f8>)
 80039aa:	a904      	add	r1, sp, #16
 80039ac:	f3af 8000 	nop.w
 80039b0:	1c42      	adds	r2, r0, #1
 80039b2:	4606      	mov	r6, r0
 80039b4:	d1d6      	bne.n	8003964 <_svfiprintf_r+0x174>
 80039b6:	89ab      	ldrh	r3, [r5, #12]
 80039b8:	065b      	lsls	r3, r3, #25
 80039ba:	f53f af2d 	bmi.w	8003818 <_svfiprintf_r+0x28>
 80039be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039c0:	b01d      	add	sp, #116	; 0x74
 80039c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c6:	ab03      	add	r3, sp, #12
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	462a      	mov	r2, r5
 80039cc:	4638      	mov	r0, r7
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <_svfiprintf_r+0x1f8>)
 80039d0:	a904      	add	r1, sp, #16
 80039d2:	f000 f87d 	bl	8003ad0 <_printf_i>
 80039d6:	e7eb      	b.n	80039b0 <_svfiprintf_r+0x1c0>
 80039d8:	08003e5e 	.word	0x08003e5e
 80039dc:	08003e64 	.word	0x08003e64
 80039e0:	08003e68 	.word	0x08003e68
 80039e4:	00000000 	.word	0x00000000
 80039e8:	0800373d 	.word	0x0800373d

080039ec <_printf_common>:
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	4616      	mov	r6, r2
 80039f2:	4699      	mov	r9, r3
 80039f4:	688a      	ldr	r2, [r1, #8]
 80039f6:	690b      	ldr	r3, [r1, #16]
 80039f8:	4607      	mov	r7, r0
 80039fa:	4293      	cmp	r3, r2
 80039fc:	bfb8      	it	lt
 80039fe:	4613      	movlt	r3, r2
 8003a00:	6033      	str	r3, [r6, #0]
 8003a02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a06:	460c      	mov	r4, r1
 8003a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a0c:	b10a      	cbz	r2, 8003a12 <_printf_common+0x26>
 8003a0e:	3301      	adds	r3, #1
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	0699      	lsls	r1, r3, #26
 8003a16:	bf42      	ittt	mi
 8003a18:	6833      	ldrmi	r3, [r6, #0]
 8003a1a:	3302      	addmi	r3, #2
 8003a1c:	6033      	strmi	r3, [r6, #0]
 8003a1e:	6825      	ldr	r5, [r4, #0]
 8003a20:	f015 0506 	ands.w	r5, r5, #6
 8003a24:	d106      	bne.n	8003a34 <_printf_common+0x48>
 8003a26:	f104 0a19 	add.w	sl, r4, #25
 8003a2a:	68e3      	ldr	r3, [r4, #12]
 8003a2c:	6832      	ldr	r2, [r6, #0]
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	42ab      	cmp	r3, r5
 8003a32:	dc2b      	bgt.n	8003a8c <_printf_common+0xa0>
 8003a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a38:	1e13      	subs	r3, r2, #0
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	bf18      	it	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	0692      	lsls	r2, r2, #26
 8003a42:	d430      	bmi.n	8003aa6 <_printf_common+0xba>
 8003a44:	4649      	mov	r1, r9
 8003a46:	4638      	mov	r0, r7
 8003a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d023      	beq.n	8003a9a <_printf_common+0xae>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	6922      	ldr	r2, [r4, #16]
 8003a56:	f003 0306 	and.w	r3, r3, #6
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf14      	ite	ne
 8003a5e:	2500      	movne	r5, #0
 8003a60:	6833      	ldreq	r3, [r6, #0]
 8003a62:	f04f 0600 	mov.w	r6, #0
 8003a66:	bf08      	it	eq
 8003a68:	68e5      	ldreq	r5, [r4, #12]
 8003a6a:	f104 041a 	add.w	r4, r4, #26
 8003a6e:	bf08      	it	eq
 8003a70:	1aed      	subeq	r5, r5, r3
 8003a72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a76:	bf08      	it	eq
 8003a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bfc4      	itt	gt
 8003a80:	1a9b      	subgt	r3, r3, r2
 8003a82:	18ed      	addgt	r5, r5, r3
 8003a84:	42b5      	cmp	r5, r6
 8003a86:	d11a      	bne.n	8003abe <_printf_common+0xd2>
 8003a88:	2000      	movs	r0, #0
 8003a8a:	e008      	b.n	8003a9e <_printf_common+0xb2>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	4652      	mov	r2, sl
 8003a90:	4649      	mov	r1, r9
 8003a92:	4638      	mov	r0, r7
 8003a94:	47c0      	blx	r8
 8003a96:	3001      	adds	r0, #1
 8003a98:	d103      	bne.n	8003aa2 <_printf_common+0xb6>
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa2:	3501      	adds	r5, #1
 8003aa4:	e7c1      	b.n	8003a2a <_printf_common+0x3e>
 8003aa6:	2030      	movs	r0, #48	; 0x30
 8003aa8:	18e1      	adds	r1, r4, r3
 8003aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ab4:	4422      	add	r2, r4
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003abc:	e7c2      	b.n	8003a44 <_printf_common+0x58>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	47c0      	blx	r8
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d0e6      	beq.n	8003a9a <_printf_common+0xae>
 8003acc:	3601      	adds	r6, #1
 8003ace:	e7d9      	b.n	8003a84 <_printf_common+0x98>

08003ad0 <_printf_i>:
 8003ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad4:	7e0f      	ldrb	r7, [r1, #24]
 8003ad6:	4691      	mov	r9, r2
 8003ad8:	2f78      	cmp	r7, #120	; 0x78
 8003ada:	4680      	mov	r8, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	469a      	mov	sl, r3
 8003ae0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ae6:	d807      	bhi.n	8003af8 <_printf_i+0x28>
 8003ae8:	2f62      	cmp	r7, #98	; 0x62
 8003aea:	d80a      	bhi.n	8003b02 <_printf_i+0x32>
 8003aec:	2f00      	cmp	r7, #0
 8003aee:	f000 80d5 	beq.w	8003c9c <_printf_i+0x1cc>
 8003af2:	2f58      	cmp	r7, #88	; 0x58
 8003af4:	f000 80c1 	beq.w	8003c7a <_printf_i+0x1aa>
 8003af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b00:	e03a      	b.n	8003b78 <_printf_i+0xa8>
 8003b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b06:	2b15      	cmp	r3, #21
 8003b08:	d8f6      	bhi.n	8003af8 <_printf_i+0x28>
 8003b0a:	a101      	add	r1, pc, #4	; (adr r1, 8003b10 <_printf_i+0x40>)
 8003b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b10:	08003b69 	.word	0x08003b69
 8003b14:	08003b7d 	.word	0x08003b7d
 8003b18:	08003af9 	.word	0x08003af9
 8003b1c:	08003af9 	.word	0x08003af9
 8003b20:	08003af9 	.word	0x08003af9
 8003b24:	08003af9 	.word	0x08003af9
 8003b28:	08003b7d 	.word	0x08003b7d
 8003b2c:	08003af9 	.word	0x08003af9
 8003b30:	08003af9 	.word	0x08003af9
 8003b34:	08003af9 	.word	0x08003af9
 8003b38:	08003af9 	.word	0x08003af9
 8003b3c:	08003c83 	.word	0x08003c83
 8003b40:	08003ba9 	.word	0x08003ba9
 8003b44:	08003c3d 	.word	0x08003c3d
 8003b48:	08003af9 	.word	0x08003af9
 8003b4c:	08003af9 	.word	0x08003af9
 8003b50:	08003ca5 	.word	0x08003ca5
 8003b54:	08003af9 	.word	0x08003af9
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003af9 	.word	0x08003af9
 8003b60:	08003af9 	.word	0x08003af9
 8003b64:	08003c45 	.word	0x08003c45
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	1d1a      	adds	r2, r3, #4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	602a      	str	r2, [r5, #0]
 8003b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0a0      	b.n	8003cbe <_printf_i+0x1ee>
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	682b      	ldr	r3, [r5, #0]
 8003b80:	0607      	lsls	r7, r0, #24
 8003b82:	f103 0104 	add.w	r1, r3, #4
 8003b86:	6029      	str	r1, [r5, #0]
 8003b88:	d501      	bpl.n	8003b8e <_printf_i+0xbe>
 8003b8a:	681e      	ldr	r6, [r3, #0]
 8003b8c:	e003      	b.n	8003b96 <_printf_i+0xc6>
 8003b8e:	0646      	lsls	r6, r0, #25
 8003b90:	d5fb      	bpl.n	8003b8a <_printf_i+0xba>
 8003b92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b96:	2e00      	cmp	r6, #0
 8003b98:	da03      	bge.n	8003ba2 <_printf_i+0xd2>
 8003b9a:	232d      	movs	r3, #45	; 0x2d
 8003b9c:	4276      	negs	r6, r6
 8003b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	4859      	ldr	r0, [pc, #356]	; (8003d0c <_printf_i+0x23c>)
 8003ba6:	e012      	b.n	8003bce <_printf_i+0xfe>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	1d19      	adds	r1, r3, #4
 8003bae:	6029      	str	r1, [r5, #0]
 8003bb0:	0605      	lsls	r5, r0, #24
 8003bb2:	d501      	bpl.n	8003bb8 <_printf_i+0xe8>
 8003bb4:	681e      	ldr	r6, [r3, #0]
 8003bb6:	e002      	b.n	8003bbe <_printf_i+0xee>
 8003bb8:	0641      	lsls	r1, r0, #25
 8003bba:	d5fb      	bpl.n	8003bb4 <_printf_i+0xe4>
 8003bbc:	881e      	ldrh	r6, [r3, #0]
 8003bbe:	2f6f      	cmp	r7, #111	; 0x6f
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2308      	moveq	r3, #8
 8003bc4:	230a      	movne	r3, #10
 8003bc6:	4851      	ldr	r0, [pc, #324]	; (8003d0c <_printf_i+0x23c>)
 8003bc8:	2100      	movs	r1, #0
 8003bca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bce:	6865      	ldr	r5, [r4, #4]
 8003bd0:	2d00      	cmp	r5, #0
 8003bd2:	bfa8      	it	ge
 8003bd4:	6821      	ldrge	r1, [r4, #0]
 8003bd6:	60a5      	str	r5, [r4, #8]
 8003bd8:	bfa4      	itt	ge
 8003bda:	f021 0104 	bicge.w	r1, r1, #4
 8003bde:	6021      	strge	r1, [r4, #0]
 8003be0:	b90e      	cbnz	r6, 8003be6 <_printf_i+0x116>
 8003be2:	2d00      	cmp	r5, #0
 8003be4:	d04b      	beq.n	8003c7e <_printf_i+0x1ae>
 8003be6:	4615      	mov	r5, r2
 8003be8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bec:	fb03 6711 	mls	r7, r3, r1, r6
 8003bf0:	5dc7      	ldrb	r7, [r0, r7]
 8003bf2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bf6:	4637      	mov	r7, r6
 8003bf8:	42bb      	cmp	r3, r7
 8003bfa:	460e      	mov	r6, r1
 8003bfc:	d9f4      	bls.n	8003be8 <_printf_i+0x118>
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d10b      	bne.n	8003c1a <_printf_i+0x14a>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	07de      	lsls	r6, r3, #31
 8003c06:	d508      	bpl.n	8003c1a <_printf_i+0x14a>
 8003c08:	6923      	ldr	r3, [r4, #16]
 8003c0a:	6861      	ldr	r1, [r4, #4]
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	bfde      	ittt	le
 8003c10:	2330      	movle	r3, #48	; 0x30
 8003c12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c1a:	1b52      	subs	r2, r2, r5
 8003c1c:	6122      	str	r2, [r4, #16]
 8003c1e:	464b      	mov	r3, r9
 8003c20:	4621      	mov	r1, r4
 8003c22:	4640      	mov	r0, r8
 8003c24:	f8cd a000 	str.w	sl, [sp]
 8003c28:	aa03      	add	r2, sp, #12
 8003c2a:	f7ff fedf 	bl	80039ec <_printf_common>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d14a      	bne.n	8003cc8 <_printf_i+0x1f8>
 8003c32:	f04f 30ff 	mov.w	r0, #4294967295
 8003c36:	b004      	add	sp, #16
 8003c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	f043 0320 	orr.w	r3, r3, #32
 8003c42:	6023      	str	r3, [r4, #0]
 8003c44:	2778      	movs	r7, #120	; 0x78
 8003c46:	4832      	ldr	r0, [pc, #200]	; (8003d10 <_printf_i+0x240>)
 8003c48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	6829      	ldr	r1, [r5, #0]
 8003c50:	061f      	lsls	r7, r3, #24
 8003c52:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c56:	d402      	bmi.n	8003c5e <_printf_i+0x18e>
 8003c58:	065f      	lsls	r7, r3, #25
 8003c5a:	bf48      	it	mi
 8003c5c:	b2b6      	uxthmi	r6, r6
 8003c5e:	07df      	lsls	r7, r3, #31
 8003c60:	bf48      	it	mi
 8003c62:	f043 0320 	orrmi.w	r3, r3, #32
 8003c66:	6029      	str	r1, [r5, #0]
 8003c68:	bf48      	it	mi
 8003c6a:	6023      	strmi	r3, [r4, #0]
 8003c6c:	b91e      	cbnz	r6, 8003c76 <_printf_i+0x1a6>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	f023 0320 	bic.w	r3, r3, #32
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	2310      	movs	r3, #16
 8003c78:	e7a6      	b.n	8003bc8 <_printf_i+0xf8>
 8003c7a:	4824      	ldr	r0, [pc, #144]	; (8003d0c <_printf_i+0x23c>)
 8003c7c:	e7e4      	b.n	8003c48 <_printf_i+0x178>
 8003c7e:	4615      	mov	r5, r2
 8003c80:	e7bd      	b.n	8003bfe <_printf_i+0x12e>
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	6826      	ldr	r6, [r4, #0]
 8003c86:	1d18      	adds	r0, r3, #4
 8003c88:	6961      	ldr	r1, [r4, #20]
 8003c8a:	6028      	str	r0, [r5, #0]
 8003c8c:	0635      	lsls	r5, r6, #24
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	d501      	bpl.n	8003c96 <_printf_i+0x1c6>
 8003c92:	6019      	str	r1, [r3, #0]
 8003c94:	e002      	b.n	8003c9c <_printf_i+0x1cc>
 8003c96:	0670      	lsls	r0, r6, #25
 8003c98:	d5fb      	bpl.n	8003c92 <_printf_i+0x1c2>
 8003c9a:	8019      	strh	r1, [r3, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4615      	mov	r5, r2
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	e7bc      	b.n	8003c1e <_printf_i+0x14e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	1d1a      	adds	r2, r3, #4
 8003caa:	602a      	str	r2, [r5, #0]
 8003cac:	681d      	ldr	r5, [r3, #0]
 8003cae:	6862      	ldr	r2, [r4, #4]
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f859 	bl	8003d68 <memchr>
 8003cb6:	b108      	cbz	r0, 8003cbc <_printf_i+0x1ec>
 8003cb8:	1b40      	subs	r0, r0, r5
 8003cba:	6060      	str	r0, [r4, #4]
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc6:	e7aa      	b.n	8003c1e <_printf_i+0x14e>
 8003cc8:	462a      	mov	r2, r5
 8003cca:	4649      	mov	r1, r9
 8003ccc:	4640      	mov	r0, r8
 8003cce:	6923      	ldr	r3, [r4, #16]
 8003cd0:	47d0      	blx	sl
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d0ad      	beq.n	8003c32 <_printf_i+0x162>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	079b      	lsls	r3, r3, #30
 8003cda:	d413      	bmi.n	8003d04 <_printf_i+0x234>
 8003cdc:	68e0      	ldr	r0, [r4, #12]
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	4298      	cmp	r0, r3
 8003ce2:	bfb8      	it	lt
 8003ce4:	4618      	movlt	r0, r3
 8003ce6:	e7a6      	b.n	8003c36 <_printf_i+0x166>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4632      	mov	r2, r6
 8003cec:	4649      	mov	r1, r9
 8003cee:	4640      	mov	r0, r8
 8003cf0:	47d0      	blx	sl
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d09d      	beq.n	8003c32 <_printf_i+0x162>
 8003cf6:	3501      	adds	r5, #1
 8003cf8:	68e3      	ldr	r3, [r4, #12]
 8003cfa:	9903      	ldr	r1, [sp, #12]
 8003cfc:	1a5b      	subs	r3, r3, r1
 8003cfe:	42ab      	cmp	r3, r5
 8003d00:	dcf2      	bgt.n	8003ce8 <_printf_i+0x218>
 8003d02:	e7eb      	b.n	8003cdc <_printf_i+0x20c>
 8003d04:	2500      	movs	r5, #0
 8003d06:	f104 0619 	add.w	r6, r4, #25
 8003d0a:	e7f5      	b.n	8003cf8 <_printf_i+0x228>
 8003d0c:	08003e6f 	.word	0x08003e6f
 8003d10:	08003e80 	.word	0x08003e80

08003d14 <memmove>:
 8003d14:	4288      	cmp	r0, r1
 8003d16:	b510      	push	{r4, lr}
 8003d18:	eb01 0402 	add.w	r4, r1, r2
 8003d1c:	d902      	bls.n	8003d24 <memmove+0x10>
 8003d1e:	4284      	cmp	r4, r0
 8003d20:	4623      	mov	r3, r4
 8003d22:	d807      	bhi.n	8003d34 <memmove+0x20>
 8003d24:	1e43      	subs	r3, r0, #1
 8003d26:	42a1      	cmp	r1, r4
 8003d28:	d008      	beq.n	8003d3c <memmove+0x28>
 8003d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d32:	e7f8      	b.n	8003d26 <memmove+0x12>
 8003d34:	4601      	mov	r1, r0
 8003d36:	4402      	add	r2, r0
 8003d38:	428a      	cmp	r2, r1
 8003d3a:	d100      	bne.n	8003d3e <memmove+0x2a>
 8003d3c:	bd10      	pop	{r4, pc}
 8003d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d46:	e7f7      	b.n	8003d38 <memmove+0x24>

08003d48 <_sbrk_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	4d05      	ldr	r5, [pc, #20]	; (8003d64 <_sbrk_r+0x1c>)
 8003d4e:	4604      	mov	r4, r0
 8003d50:	4608      	mov	r0, r1
 8003d52:	602b      	str	r3, [r5, #0]
 8003d54:	f7fd f910 	bl	8000f78 <_sbrk>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d102      	bne.n	8003d62 <_sbrk_r+0x1a>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	b103      	cbz	r3, 8003d62 <_sbrk_r+0x1a>
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	200003fc 	.word	0x200003fc

08003d68 <memchr>:
 8003d68:	4603      	mov	r3, r0
 8003d6a:	b510      	push	{r4, lr}
 8003d6c:	b2c9      	uxtb	r1, r1
 8003d6e:	4402      	add	r2, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	d101      	bne.n	8003d7a <memchr+0x12>
 8003d76:	2000      	movs	r0, #0
 8003d78:	e003      	b.n	8003d82 <memchr+0x1a>
 8003d7a:	7804      	ldrb	r4, [r0, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	428c      	cmp	r4, r1
 8003d80:	d1f6      	bne.n	8003d70 <memchr+0x8>
 8003d82:	bd10      	pop	{r4, pc}

08003d84 <memcpy>:
 8003d84:	440a      	add	r2, r1
 8003d86:	4291      	cmp	r1, r2
 8003d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d8c:	d100      	bne.n	8003d90 <memcpy+0xc>
 8003d8e:	4770      	bx	lr
 8003d90:	b510      	push	{r4, lr}
 8003d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d96:	4291      	cmp	r1, r2
 8003d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d9c:	d1f9      	bne.n	8003d92 <memcpy+0xe>
 8003d9e:	bd10      	pop	{r4, pc}

08003da0 <_realloc_r>:
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	4680      	mov	r8, r0
 8003da6:	4614      	mov	r4, r2
 8003da8:	460e      	mov	r6, r1
 8003daa:	b921      	cbnz	r1, 8003db6 <_realloc_r+0x16>
 8003dac:	4611      	mov	r1, r2
 8003dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db2:	f7ff bc37 	b.w	8003624 <_malloc_r>
 8003db6:	b92a      	cbnz	r2, 8003dc4 <_realloc_r+0x24>
 8003db8:	f7ff fbcc 	bl	8003554 <_free_r>
 8003dbc:	4625      	mov	r5, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc4:	f000 f81b 	bl	8003dfe <_malloc_usable_size_r>
 8003dc8:	4284      	cmp	r4, r0
 8003dca:	4607      	mov	r7, r0
 8003dcc:	d802      	bhi.n	8003dd4 <_realloc_r+0x34>
 8003dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dd2:	d812      	bhi.n	8003dfa <_realloc_r+0x5a>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	f7ff fc24 	bl	8003624 <_malloc_r>
 8003ddc:	4605      	mov	r5, r0
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d0ed      	beq.n	8003dbe <_realloc_r+0x1e>
 8003de2:	42bc      	cmp	r4, r7
 8003de4:	4622      	mov	r2, r4
 8003de6:	4631      	mov	r1, r6
 8003de8:	bf28      	it	cs
 8003dea:	463a      	movcs	r2, r7
 8003dec:	f7ff ffca 	bl	8003d84 <memcpy>
 8003df0:	4631      	mov	r1, r6
 8003df2:	4640      	mov	r0, r8
 8003df4:	f7ff fbae 	bl	8003554 <_free_r>
 8003df8:	e7e1      	b.n	8003dbe <_realloc_r+0x1e>
 8003dfa:	4635      	mov	r5, r6
 8003dfc:	e7df      	b.n	8003dbe <_realloc_r+0x1e>

08003dfe <_malloc_usable_size_r>:
 8003dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e02:	1f18      	subs	r0, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bfbc      	itt	lt
 8003e08:	580b      	ldrlt	r3, [r1, r0]
 8003e0a:	18c0      	addlt	r0, r0, r3
 8003e0c:	4770      	bx	lr
	...

08003e10 <_init>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr

08003e1c <_fini>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr
