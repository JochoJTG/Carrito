
Carritov3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080094e8  080094e8  000194e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098cc  080098cc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080098cc  080098cc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098cc  080098cc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098cc  080098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098d0  080098d0  000198d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080098d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001ec  08009ac0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  08009ac0  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7da  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bf  00000000  00000000  0002fa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00031af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb1  00000000  00000000  00032b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d07  00000000  00000000  000337b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012127  00000000  00000000  0004c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f376  00000000  00000000  0005e5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056cc  00000000  00000000  000ed960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f302c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080094cc 	.word	0x080094cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080094cc 	.word	0x080094cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <Stop>:
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
}

void Stop(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2101      	movs	r1, #1
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <Stop+0x5c>)
 800111a:	f002 fbd9 	bl	80038d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2102      	movs	r1, #2
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <Stop+0x5c>)
 8001124:	f002 fbd4 	bl	80038d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2104      	movs	r1, #4
 800112c:	480f      	ldr	r0, [pc, #60]	; (800116c <Stop+0x5c>)
 800112e:	f002 fbcf 	bl	80038d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <Stop+0x5c>)
 8001138:	f002 fbca 	bl	80038d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <Stop+0x5c>)
 8001144:	f002 fbc4 	bl	80038d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2108      	movs	r1, #8
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <Stop+0x60>)
 800114e:	f002 fbbf 	bl	80038d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <Stop+0x60>)
 8001158:	f002 fbba 	bl	80038d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2120      	movs	r1, #32
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <Stop+0x60>)
 8001162:	f002 fbb5 	bl	80038d0 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00

08001174 <RightFront_back>:
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
}
void RightFront_back(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0); //derecha enfrente
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <RightFront_back+0x20>)
 8001180:	f002 fba6 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); //derecha enfrente
 8001184:	2201      	movs	r2, #1
 8001186:	2108      	movs	r1, #8
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <RightFront_back+0x24>)
 800118a:	f002 fba1 	bl	80038d0 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40010800 	.word	0x40010800
 8001198:	40010c00 	.word	0x40010c00

0800119c <LeftFront_back>:


void LeftFront_back(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); //izq enfrente
 80011a0:	2200      	movs	r2, #0
 80011a2:	2110      	movs	r1, #16
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <LeftFront_back+0x1c>)
 80011a6:	f002 fb93 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); // ezq enfrente
 80011aa:	2201      	movs	r2, #1
 80011ac:	2120      	movs	r1, #32
 80011ae:	4802      	ldr	r0, [pc, #8]	; (80011b8 <LeftFront_back+0x1c>)
 80011b0:	f002 fb8e 	bl	80038d0 <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40010c00 	.word	0x40010c00

080011bc <RightBack_back>:

void RightBack_back(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0); //derehca atras
 80011c0:	2200      	movs	r2, #0
 80011c2:	2104      	movs	r1, #4
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <RightBack_back+0x1c>)
 80011c6:	f002 fb83 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //derecha atrasa
 80011ca:	2201      	movs	r2, #1
 80011cc:	2108      	movs	r1, #8
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <RightBack_back+0x1c>)
 80011d0:	f002 fb7e 	bl	80038d0 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010800 	.word	0x40010800

080011dc <LeftBack_back>:

void LeftBack_back(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); //izq atras
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <LeftBack_back+0x1c>)
 80011e6:	f002 fb73 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); //izq atras
 80011ea:	2201      	movs	r2, #1
 80011ec:	2102      	movs	r1, #2
 80011ee:	4802      	ldr	r0, [pc, #8]	; (80011f8 <LeftBack_back+0x1c>)
 80011f0:	f002 fb6e 	bl	80038d0 <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010800 	.word	0x40010800

080011fc <RightFront_forward>:

void RightFront_forward(void){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1); //derecha enfrente
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <RightFront_forward+0x20>)
 8001208:	f002 fb62 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); //derecha enfrente
 800120c:	2200      	movs	r2, #0
 800120e:	2108      	movs	r1, #8
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <RightFront_forward+0x24>)
 8001212:	f002 fb5d 	bl	80038d0 <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800
 8001220:	40010c00 	.word	0x40010c00

08001224 <LeftFront_forward>:

void LeftFront_forward(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //izq enfrente
 8001228:	2201      	movs	r2, #1
 800122a:	2110      	movs	r1, #16
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <LeftFront_forward+0x1c>)
 800122e:	f002 fb4f 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // ezq enfrente
 8001232:	2200      	movs	r2, #0
 8001234:	2120      	movs	r1, #32
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <LeftFront_forward+0x1c>)
 8001238:	f002 fb4a 	bl	80038d0 <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010c00 	.word	0x40010c00

08001244 <RightBack_forward>:

void RightBack_forward(void){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //derehca atras
 8001248:	2201      	movs	r2, #1
 800124a:	2104      	movs	r1, #4
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <RightBack_forward+0x1c>)
 800124e:	f002 fb3f 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //derecha atrasa
 8001252:	2200      	movs	r2, #0
 8001254:	2108      	movs	r1, #8
 8001256:	4802      	ldr	r0, [pc, #8]	; (8001260 <RightBack_forward+0x1c>)
 8001258:	f002 fb3a 	bl	80038d0 <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010800 	.word	0x40010800

08001264 <LeftBack_forward>:

void LeftBack_forward(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //izq atras
 8001268:	2201      	movs	r2, #1
 800126a:	2101      	movs	r1, #1
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <LeftBack_forward+0x1c>)
 800126e:	f002 fb2f 	bl	80038d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); //izq atras
 8001272:	2200      	movs	r2, #0
 8001274:	2102      	movs	r1, #2
 8001276:	4802      	ldr	r0, [pc, #8]	; (8001280 <LeftBack_forward+0x1c>)
 8001278:	f002 fb2a 	bl	80038d0 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40010800 	.word	0x40010800

08001284 <PIDpwm_Init>:
 */
#include "PIDpwm.h"
#include "Directions.h"

//definicion de funciones
void PIDpwm_Init(PIDpwm_Controller* pid, float Kp, float Ti, float Td, float min_output, float max_output, float setpoint){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	601a      	str	r2, [r3, #0]
	pid->Ki = Kp/Ti;
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	68b8      	ldr	r0, [r7, #8]
 800129c:	f7ff fe06 	bl	8000eac <__aeabi_fdiv>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
	pid->Kd = Kp * Td;
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff fd4a 	bl	8000d44 <__aeabi_fmul>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	609a      	str	r2, [r3, #8]
	//inicializar variables tipo float
    pid->setpoint = setpoint;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a3a      	ldr	r2, [r7, #32]
 80012bc:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
	pid->errorAnterior = 0.0f;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
    pid->medicionSensor_Anterior = 0.0f;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
    //limites del PID
    pid->min_output = min_output;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	61da      	str	r2, [r3, #28]
    pid->max_output = max_output;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	621a      	str	r2, [r3, #32]

    pid->Prev_output = 0.0;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24


}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <PIDpwm_Compute>:

float PIDpwm_Compute(PIDpwm_Controller* pid, float medicionSensor, int MotorVariable) {
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b08b      	sub	sp, #44	; 0x2c
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]


	float voltageOutput;
	float output2;

    float errorpid = pid->setpoint - medicionSensor;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc12 	bl	8000b30 <__aeabi_fsub>
 800130c:	4603      	mov	r3, r0
 800130e:	61fb      	str	r3, [r7, #28]
    pid->integral += errorpid * 250;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	691c      	ldr	r4, [r3, #16]
 8001314:	4963      	ldr	r1, [pc, #396]	; (80014a4 <PIDpwm_Compute+0x1b0>)
 8001316:	69f8      	ldr	r0, [r7, #28]
 8001318:	f7ff fd14 	bl	8000d44 <__aeabi_fmul>
 800131c:	4603      	mov	r3, r0
 800131e:	4619      	mov	r1, r3
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff fc07 	bl	8000b34 <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	611a      	str	r2, [r3, #16]
    float derivativo = (errorpid - pid->errorAnterior)/250;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4619      	mov	r1, r3
 8001334:	69f8      	ldr	r0, [r7, #28]
 8001336:	f7ff fbfb 	bl	8000b30 <__aeabi_fsub>
 800133a:	4603      	mov	r3, r0
 800133c:	4959      	ldr	r1, [pc, #356]	; (80014a4 <PIDpwm_Compute+0x1b0>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fdb4 	bl	8000eac <__aeabi_fdiv>
 8001344:	4603      	mov	r3, r0
 8001346:	61bb      	str	r3, [r7, #24]
    float output = pid->Kp * errorpid + pid->Ki * pid->integral + pid->Kd * derivativo;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	69f9      	ldr	r1, [r7, #28]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fcf8 	bl	8000d44 <__aeabi_fmul>
 8001354:	4603      	mov	r3, r0
 8001356:	461c      	mov	r4, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fcee 	bl	8000d44 <__aeabi_fmul>
 8001368:	4603      	mov	r3, r0
 800136a:	4619      	mov	r1, r3
 800136c:	4620      	mov	r0, r4
 800136e:	f7ff fbe1 	bl	8000b34 <__addsf3>
 8001372:	4603      	mov	r3, r0
 8001374:	461c      	mov	r4, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fce1 	bl	8000d44 <__aeabi_fmul>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff fbd4 	bl	8000b34 <__addsf3>
 800138c:	4603      	mov	r3, r0
 800138e:	623b      	str	r3, [r7, #32]

    //saturación de la salida
    if (output > pid->max_output) {
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4619      	mov	r1, r3
 8001396:	6a38      	ldr	r0, [r7, #32]
 8001398:	f7ff fe90 	bl	80010bc <__aeabi_fcmpgt>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <PIDpwm_Compute+0xb4>
    	output = pid->max_output;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	623b      	str	r3, [r7, #32]
    }
    if (output < pid->min_output){
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	4619      	mov	r1, r3
 80013ae:	6a38      	ldr	r0, [r7, #32]
 80013b0:	f7ff fe66 	bl	8001080 <__aeabi_fcmplt>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <PIDpwm_Compute+0xcc>
    	output = pid->min_output;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	623b      	str	r3, [r7, #32]

    }

    output2 = output ;
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    if(output2 < 0){
 80013c4:	f04f 0100 	mov.w	r1, #0
 80013c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ca:	f7ff fe59 	bl	8001080 <__aeabi_fcmplt>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <PIDpwm_Compute+0xe8>
    	output2 *= -1;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    }

    //voltageOutput = errorpid;


    voltageOutput = (output2 * 4095 )/ pid-> max_output ;
 80013dc:	4932      	ldr	r1, [pc, #200]	; (80014a8 <PIDpwm_Compute+0x1b4>)
 80013de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013e0:	f7ff fcb0 	bl	8000d44 <__aeabi_fmul>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f7ff fd5c 	bl	8000eac <__aeabi_fdiv>
 80013f4:	4603      	mov	r3, r0
 80013f6:	617b      	str	r3, [r7, #20]

		if(output < 0){
 80013f8:	f04f 0100 	mov.w	r1, #0
 80013fc:	6a38      	ldr	r0, [r7, #32]
 80013fe:	f7ff fe3f 	bl	8001080 <__aeabi_fcmplt>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01a      	beq.n	800143e <PIDpwm_Compute+0x14a>
			output *= -1;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800140e:	623b      	str	r3, [r7, #32]

    	if(MotorVariable == 1){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d102      	bne.n	800141c <PIDpwm_Compute+0x128>
    		//Left Front
    		LeftFront_back();
 8001416:	f7ff fec1 	bl	800119c <LeftFront_back>
 800141a:	e010      	b.n	800143e <PIDpwm_Compute+0x14a>
    	}
    	else if(MotorVariable == 2){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d102      	bne.n	8001428 <PIDpwm_Compute+0x134>
    		//Right Front
    		RightFront_back();
 8001422:	f7ff fea7 	bl	8001174 <RightFront_back>
 8001426:	e00a      	b.n	800143e <PIDpwm_Compute+0x14a>
    	}
    	else if(MotorVariable == 3){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d102      	bne.n	8001434 <PIDpwm_Compute+0x140>
    		// Left Back
    		LeftBack_back();
 800142e:	f7ff fed5 	bl	80011dc <LeftBack_back>
 8001432:	e004      	b.n	800143e <PIDpwm_Compute+0x14a>
    	}
    	else if(MotorVariable == 4){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d101      	bne.n	800143e <PIDpwm_Compute+0x14a>
    		// Right Back
    		RightBack_back();
 800143a:	f7ff febf 	bl	80011bc <RightBack_back>
    	}
    }

    if(output > 0){
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	6a38      	ldr	r0, [r7, #32]
 8001444:	f7ff fe3a 	bl	80010bc <__aeabi_fcmpgt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <PIDpwm_Compute+0x188>
    	if(MotorVariable == 1){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <PIDpwm_Compute+0x166>
    		//Left Front
    		LeftFront_forward();
 8001454:	f7ff fee6 	bl	8001224 <LeftFront_forward>
 8001458:	e010      	b.n	800147c <PIDpwm_Compute+0x188>
    	}
    	else if(MotorVariable == 2){
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d102      	bne.n	8001466 <PIDpwm_Compute+0x172>
    		//Right Front
    		RightFront_forward();
 8001460:	f7ff fecc 	bl	80011fc <RightFront_forward>
 8001464:	e00a      	b.n	800147c <PIDpwm_Compute+0x188>
    	}
    	else if(MotorVariable == 3){
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d102      	bne.n	8001472 <PIDpwm_Compute+0x17e>
    		// Left Back
    		LeftBack_forward();
 800146c:	f7ff fefa 	bl	8001264 <LeftBack_forward>
 8001470:	e004      	b.n	800147c <PIDpwm_Compute+0x188>
    	}
    	else if(MotorVariable == 4){
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d101      	bne.n	800147c <PIDpwm_Compute+0x188>
    		// Right Back
    		RightBack_forward();
 8001478:	f7ff fee4 	bl	8001244 <RightBack_forward>
    	   voltageOutput =  output*(4095.0/pid->max_output) + pid->Prev_output; //255 es el max PWM, maxOutput es valor en PWM
    }
    */

    //actualizar para la próxima iteración
    pid->errorAnterior = errorpid;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	615a      	str	r2, [r3, #20]
    pid->medicionSensor_Anterior = medicionSensor;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	619a      	str	r2, [r3, #24]
    pid->Prev_output = voltageOutput;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
   	 return voltageOutput + pid->Prev_output;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fb4d 	bl	8000b34 <__addsf3>
 800149a:	4603      	mov	r3, r0



}
 800149c:	4618      	mov	r0, r3
 800149e:	372c      	adds	r7, #44	; 0x2c
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	437a0000 	.word	0x437a0000
 80014a8:	457ff000 	.word	0x457ff000

080014ac <PIDangle_Init>:

void PIDangle_Init(PIDpwm_Controller *pid, float Kp, float Ti, float min_output, float max_output){
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	601a      	str	r2, [r3, #0]
	pid->Ki = 0;//Kp/Ti;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]

	//inicializar variables tipo float
    pid->setpoint = 0.0f;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
	pid->errorAnterior = 0.0f;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	615a      	str	r2, [r3, #20]

    //limites del PID
    pid->min_output = min_output;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	61da      	str	r2, [r3, #28]
    pid->max_output = max_output;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	621a      	str	r2, [r3, #32]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
	...

080014f8 <PIDangle_Compute>:

float PIDangle_Compute(PIDpwm_Controller *pid, float medicionAngulo){
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	if( -1.2 < medicionAngulo && medicionAngulo < 1.2 ){
 8001502:	6838      	ldr	r0, [r7, #0]
 8001504:	f7fe ff90 	bl	8000428 <__aeabi_f2d>
 8001508:	a34d      	add	r3, pc, #308	; (adr r3, 8001640 <PIDangle_Compute+0x148>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff fa73 	bl	80009f8 <__aeabi_dcmpgt>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00d      	beq.n	8001534 <PIDangle_Compute+0x3c>
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f7fe ff85 	bl	8000428 <__aeabi_f2d>
 800151e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001522:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <PIDangle_Compute+0x160>)
 8001524:	f7ff fa4a 	bl	80009bc <__aeabi_dcmplt>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <PIDangle_Compute+0x3c>
		medicionAngulo = pid->setpoint;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	603b      	str	r3, [r7, #0]
	}
	float error = pid->setpoint - medicionAngulo;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff faf8 	bl	8000b30 <__aeabi_fsub>
 8001540:	4603      	mov	r3, r0
 8001542:	613b      	str	r3, [r7, #16]
	pid->integral += error*0.05;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ff6d 	bl	8000428 <__aeabi_f2d>
 800154e:	4604      	mov	r4, r0
 8001550:	460d      	mov	r5, r1
 8001552:	6938      	ldr	r0, [r7, #16]
 8001554:	f7fe ff68 	bl	8000428 <__aeabi_f2d>
 8001558:	a33b      	add	r3, pc, #236	; (adr r3, 8001648 <PIDangle_Compute+0x150>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe ffbb 	bl	80004d8 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4620      	mov	r0, r4
 8001568:	4629      	mov	r1, r5
 800156a:	f7fe fdff 	bl	800016c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fa87 	bl	8000a88 <__aeabi_d2f>
 800157a:	4602      	mov	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
	float output = pid->Kp * error + pid->Ki * pid->integral;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fbdc 	bl	8000d44 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	461c      	mov	r4, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f7ff fbd2 	bl	8000d44 <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff fac5 	bl	8000b34 <__addsf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	617b      	str	r3, [r7, #20]

	//actualizar para la próxima iteración
	pid->medicionSensor_Anterior = medicionAngulo;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	619a      	str	r2, [r3, #24]

	//saturación de la salida
	if (output > pid->max_output) output = pid->max_output;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4619      	mov	r1, r3
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff fd7e 	bl	80010bc <__aeabi_fcmpgt>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <PIDangle_Compute+0xd4>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	617b      	str	r3, [r7, #20]
	if (output < pid->min_output) output = pid->min_output;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	4619      	mov	r1, r3
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff fd54 	bl	8001080 <__aeabi_fcmplt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <PIDangle_Compute+0xec>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	617b      	str	r3, [r7, #20]

	//Conversion
	 float voltageOutput = output*(4095.0/pid->max_output); //4095 es el max PWM, maxOutput es valor en PWM
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff18 	bl	8000428 <__aeabi_f2d>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	a114      	add	r1, pc, #80	; (adr r1, 8001650 <PIDangle_Compute+0x158>)
 80015fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001602:	f7ff f893 	bl	800072c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7fe ff63 	bl	80004d8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa35 	bl	8000a88 <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	60fb      	str	r3, [r7, #12]
	 pid->Prev_output = voltageOutput;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
	 return voltageOutput + pid->Prev_output;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	68f9      	ldr	r1, [r7, #12]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fa80 	bl	8000b34 <__addsf3>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	33333333 	.word	0x33333333
 8001644:	bff33333 	.word	0xbff33333
 8001648:	9999999a 	.word	0x9999999a
 800164c:	3fa99999 	.word	0x3fa99999
 8001650:	00000000 	.word	0x00000000
 8001654:	40affe00 	.word	0x40affe00
 8001658:	3ff33333 	.word	0x3ff33333

0800165c <MPU_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_init(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af04      	add	r7, sp, #16
	/*IMU 60050 configuration*/
	uint8_t check, data;

	/*WHO_AM_I register, returns 0x58 if connected*/
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x75, 1, &check, 1, 100);
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <MPU_init+0x120>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b299      	uxth	r1, r3
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2301      	movs	r3, #1
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	1d7b      	adds	r3, r7, #5
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2301      	movs	r3, #1
 8001676:	2275      	movs	r2, #117	; 0x75
 8001678:	4841      	ldr	r0, [pc, #260]	; (8001780 <MPU_init+0x124>)
 800167a:	f002 fb97 	bl	8003dac <HAL_I2C_Mem_Read>

	if(check == 104){
 800167e:	797b      	ldrb	r3, [r7, #5]
 8001680:	2b68      	cmp	r3, #104	; 0x68
 8001682:	d177      	bne.n	8001774 <MPU_init+0x118>
		/*PWR_MGMT_1 register. Write 0 for normal use*/
		data = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x6B, 1, &data, 1, 100);
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MPU_init+0x120>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b299      	uxth	r1, r3
 800168e:	2364      	movs	r3, #100	; 0x64
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	2301      	movs	r3, #1
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2301      	movs	r3, #1
 800169c:	226b      	movs	r2, #107	; 0x6b
 800169e:	4838      	ldr	r0, [pc, #224]	; (8001780 <MPU_init+0x124>)
 80016a0:	f002 fa8a 	bl	8003bb8 <HAL_I2C_Mem_Write>

		/*SMPRT_DIV register*/
		data = 0x07;
 80016a4:	2307      	movs	r3, #7
 80016a6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x19, 1, &data, 1, 100);
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <MPU_init+0x120>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b299      	uxth	r1, r3
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2301      	movs	r3, #1
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	2219      	movs	r2, #25
 80016be:	4830      	ldr	r0, [pc, #192]	; (8001780 <MPU_init+0x124>)
 80016c0:	f002 fa7a 	bl	8003bb8 <HAL_I2C_Mem_Write>

		/*Acceleration Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <MPU_init+0x120>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b299      	uxth	r1, r3
 80016ca:	2364      	movs	r3, #100	; 0x64
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	221c      	movs	r2, #28
 80016da:	4829      	ldr	r0, [pc, #164]	; (8001780 <MPU_init+0x124>)
 80016dc:	f002 fb66 	bl	8003dac <HAL_I2C_Mem_Read>

		uint8_t precission_selector = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]
		 * 0 for +- 2g
		 * 1 for +- 4g
		 * 2 for +- 8g
		 * 3 for +- 16g
		 */
		data = (data & ~(0b11<<3));
 80016e4:	793b      	ldrb	r3, [r7, #4]
 80016e6:	f023 0318 	bic.w	r3, r3, #24
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector << 3));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	b25a      	sxtb	r2, r3
 80016f4:	793b      	ldrb	r3, [r7, #4]
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MPU_init+0x120>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b299      	uxth	r1, r3
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2301      	movs	r3, #1
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	221c      	movs	r2, #28
 8001716:	481a      	ldr	r0, [pc, #104]	; (8001780 <MPU_init+0x124>)
 8001718:	f002 fa4e 	bl	8003bb8 <HAL_I2C_Mem_Write>


		/*Gyro Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1B, 1, &data, 1, 100);
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <MPU_init+0x120>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b299      	uxth	r1, r3
 8001722:	2364      	movs	r3, #100	; 0x64
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	2301      	movs	r3, #1
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2301      	movs	r3, #1
 8001730:	221b      	movs	r2, #27
 8001732:	4813      	ldr	r0, [pc, #76]	; (8001780 <MPU_init+0x124>)
 8001734:	f002 fb3a 	bl	8003dac <HAL_I2C_Mem_Read>

		uint8_t precission_selector_gyro = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	71bb      	strb	r3, [r7, #6]
		 * 0 for +- 250 deg/s
		 * 1 for +- 500 deg/s
		 * 2 for +- 1000 deg/s
		 * 3 for +- 2000 deg/s
		 */
		data = (data & ~(0b11<<3));
 800173c:	793b      	ldrb	r3, [r7, #4]
 800173e:	f023 0318 	bic.w	r3, r3, #24
 8001742:	b2db      	uxtb	r3, r3
 8001744:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector_gyro << 3));
 8001746:	79bb      	ldrb	r3, [r7, #6]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	b25a      	sxtb	r2, r3
 800174c:	793b      	ldrb	r3, [r7, #4]
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1B, 1,&data, 1, 100);
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <MPU_init+0x120>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b299      	uxth	r1, r3
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	221b      	movs	r2, #27
 800176e:	4804      	ldr	r0, [pc, #16]	; (8001780 <MPU_init+0x124>)
 8001770:	f002 fa22 	bl	8003bb8 <HAL_I2C_Mem_Write>

	}

}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000208 	.word	0x20000208

08001784 <MPU_Read_gyro>:
	 accel_x = accel_x * 9.81;
	 accel_y = accel_y * 9.81;
	 accel_z = accel_z * 9.81;
	}

void MPU_Read_gyro(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af04      	add	r7, sp, #16
	 * 0x46 ACCEL_YOUT_L
	 * 0x47 ACCEL_ZOUT_H
	 * 0x48 ACCEL_ZOUT_L
	 * */

	if(count < 5){
 800178a:	4b66      	ldr	r3, [pc, #408]	; (8001924 <MPU_Read_gyro+0x1a0>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b04      	cmp	r3, #4
 8001790:	f200 8094 	bhi.w	80018bc <MPU_Read_gyro+0x138>

		/*Read registers in order*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x43, 1, gyro_raw_data, 6, 1000);
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <MPU_Read_gyro+0x1a4>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b299      	uxth	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	2306      	movs	r3, #6
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <MPU_Read_gyro+0x1a8>)
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	2243      	movs	r2, #67	; 0x43
 80017ac:	4860      	ldr	r0, [pc, #384]	; (8001930 <MPU_Read_gyro+0x1ac>)
 80017ae:	f002 fafd 	bl	8003dac <HAL_I2C_Mem_Read>
		 * 250
		 * 500
		 * 1000
		 * 2000
		 * */
		float gyro_Precission = 250;
 80017b2:	4b60      	ldr	r3, [pc, #384]	; (8001934 <MPU_Read_gyro+0x1b0>)
 80017b4:	607b      	str	r3, [r7, #4]

		 gyro_x = (float)(((int16_t)(gyro_raw_data[0] << 8 | gyro_raw_data[1])) * gyro_Precission/32768);
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <MPU_Read_gyro+0x1a8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b5b      	ldr	r3, [pc, #364]	; (800192c <MPU_Read_gyro+0x1a8>)
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fa67 	bl	8000c9c <__aeabi_i2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fab6 	bl	8000d44 <__aeabi_fmul>
 80017d8:	4603      	mov	r3, r0
 80017da:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fb64 	bl	8000eac <__aeabi_fdiv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <MPU_Read_gyro+0x1b4>)
 80017ea:	601a      	str	r2, [r3, #0]
		 gyro_y = (float)(((int16_t)(gyro_raw_data[2] << 8 | gyro_raw_data[3])) * gyro_Precission/32768);
 80017ec:	4b4f      	ldr	r3, [pc, #316]	; (800192c <MPU_Read_gyro+0x1a8>)
 80017ee:	789b      	ldrb	r3, [r3, #2]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <MPU_Read_gyro+0x1a8>)
 80017f6:	78db      	ldrb	r3, [r3, #3]
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fa4c 	bl	8000c9c <__aeabi_i2f>
 8001804:	4603      	mov	r3, r0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fa9b 	bl	8000d44 <__aeabi_fmul>
 800180e:	4603      	mov	r3, r0
 8001810:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fb49 	bl	8000eac <__aeabi_fdiv>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <MPU_Read_gyro+0x1b8>)
 8001820:	601a      	str	r2, [r3, #0]
		 gyro_z = (float)(((int16_t)(gyro_raw_data[4] << 8 | gyro_raw_data[5])) * gyro_Precission/32768);
 8001822:	4b42      	ldr	r3, [pc, #264]	; (800192c <MPU_Read_gyro+0x1a8>)
 8001824:	791b      	ldrb	r3, [r3, #4]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b21a      	sxth	r2, r3
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <MPU_Read_gyro+0x1a8>)
 800182c:	795b      	ldrb	r3, [r3, #5]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fa31 	bl	8000c9c <__aeabi_i2f>
 800183a:	4603      	mov	r3, r0
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fa80 	bl	8000d44 <__aeabi_fmul>
 8001844:	4603      	mov	r3, r0
 8001846:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fb2e 	bl	8000eac <__aeabi_fdiv>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <MPU_Read_gyro+0x1bc>)
 8001856:	601a      	str	r2, [r3, #0]

		 /*Gyro values adjusted with calibration values*/
		 gyro_x += Gyro_X_calibration;
 8001858:	4b37      	ldr	r3, [pc, #220]	; (8001938 <MPU_Read_gyro+0x1b4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a39      	ldr	r2, [pc, #228]	; (8001944 <MPU_Read_gyro+0x1c0>)
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f966 	bl	8000b34 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <MPU_Read_gyro+0x1b4>)
 800186e:	601a      	str	r2, [r3, #0]
		 gyro_y += Gyro_Y_calibration;
 8001870:	4b32      	ldr	r3, [pc, #200]	; (800193c <MPU_Read_gyro+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a34      	ldr	r2, [pc, #208]	; (8001948 <MPU_Read_gyro+0x1c4>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f95a 	bl	8000b34 <__addsf3>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MPU_Read_gyro+0x1b8>)
 8001886:	601a      	str	r2, [r3, #0]
		 gyro_z += Gyro_Z_calibration;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MPU_Read_gyro+0x1bc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2f      	ldr	r2, [pc, #188]	; (800194c <MPU_Read_gyro+0x1c8>)
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f94e 	bl	8000b34 <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MPU_Read_gyro+0x1bc>)
 800189e:	601a      	str	r2, [r3, #0]

		 GyroMean[count] = gyro_z;
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <MPU_Read_gyro+0x1a0>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <MPU_Read_gyro+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a29      	ldr	r2, [pc, #164]	; (8001950 <MPU_Read_gyro+0x1cc>)
 80018ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		 count++;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MPU_Read_gyro+0x1a0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MPU_Read_gyro+0x1a0>)
 80018ba:	701a      	strb	r2, [r3, #0]
	}

	if(count == 5){
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MPU_Read_gyro+0x1a0>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d12b      	bne.n	800191c <MPU_Read_gyro+0x198>
		/*Moving average of 5*/
		gyro_mean = (GyroMean[0]+GyroMean[1]+GyroMean[2]+GyroMean[3]+GyroMean[4])/5;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MPU_Read_gyro+0x1cc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a21      	ldr	r2, [pc, #132]	; (8001950 <MPU_Read_gyro+0x1cc>)
 80018ca:	6852      	ldr	r2, [r2, #4]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f930 	bl	8000b34 <__addsf3>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MPU_Read_gyro+0x1cc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f7ff f928 	bl	8000b34 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MPU_Read_gyro+0x1cc>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f7ff f920 	bl	8000b34 <__addsf3>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MPU_Read_gyro+0x1cc>)
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f7ff f918 	bl	8000b34 <__addsf3>
 8001904:	4603      	mov	r3, r0
 8001906:	4913      	ldr	r1, [pc, #76]	; (8001954 <MPU_Read_gyro+0x1d0>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff facf 	bl	8000eac <__aeabi_fdiv>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MPU_Read_gyro+0x1d4>)
 8001914:	601a      	str	r2, [r3, #0]
		count = 0;
 8001916:	4b03      	ldr	r3, [pc, #12]	; (8001924 <MPU_Read_gyro+0x1a0>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	}
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000610 	.word	0x20000610
 8001928:	20000000 	.word	0x20000000
 800192c:	200003c4 	.word	0x200003c4
 8001930:	20000208 	.word	0x20000208
 8001934:	437a0000 	.word	0x437a0000
 8001938:	200003cc 	.word	0x200003cc
 800193c:	200003d0 	.word	0x200003d0
 8001940:	200003d4 	.word	0x200003d4
 8001944:	200003fc 	.word	0x200003fc
 8001948:	20000400 	.word	0x20000400
 800194c:	20000404 	.word	0x20000404
 8001950:	200003d8 	.word	0x200003d8
 8001954:	40a00000 	.word	0x40a00000
 8001958:	200003ec 	.word	0x200003ec

0800195c <Gyro_calibration>:


void Gyro_calibration(void){
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0

	uint16_t counter = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	81fb      	strh	r3, [r7, #14]
	uint32_t StartTime_cal = HAL_GetTick();
 8001966:	f001 fd17 	bl	8003398 <HAL_GetTick>
 800196a:	6078      	str	r0, [r7, #4]
	uint32_t ElapsedTime_cal = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]

	/*Calibrate value for 9 seconds*/
	while(ElapsedTime_cal < 9000){
 8001970:	e02f      	b.n	80019d2 <Gyro_calibration+0x76>

		MPU_Read_gyro();
 8001972:	f7ff ff07 	bl	8001784 <MPU_Read_gyro>
		GyroValuesx += gyro_x;
 8001976:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <Gyro_calibration+0xf0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a35      	ldr	r2, [pc, #212]	; (8001a50 <Gyro_calibration+0xf4>)
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f8d7 	bl	8000b34 <__addsf3>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <Gyro_calibration+0xf0>)
 800198c:	601a      	str	r2, [r3, #0]
		GyroValuesy += gyro_y;
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <Gyro_calibration+0xf8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <Gyro_calibration+0xfc>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f8cb 	bl	8000b34 <__addsf3>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <Gyro_calibration+0xf8>)
 80019a4:	601a      	str	r2, [r3, #0]
		GyroValuesz += gyro_z;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <Gyro_calibration+0x100>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <Gyro_calibration+0x104>)
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f8bf 	bl	8000b34 <__addsf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <Gyro_calibration+0x100>)
 80019bc:	601a      	str	r2, [r3, #0]

		counter++;
 80019be:	89fb      	ldrh	r3, [r7, #14]
 80019c0:	3301      	adds	r3, #1
 80019c2:	81fb      	strh	r3, [r7, #14]

		uint32_t CurrentTime_cal = HAL_GetTick();
 80019c4:	f001 fce8 	bl	8003398 <HAL_GetTick>
 80019c8:	6038      	str	r0, [r7, #0]
		ElapsedTime_cal = CurrentTime_cal - StartTime_cal;
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	60bb      	str	r3, [r7, #8]
	while(ElapsedTime_cal < 9000){
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f242 3227 	movw	r2, #8999	; 0x2327
 80019d8:	4293      	cmp	r3, r2
 80019da:	d9ca      	bls.n	8001972 <Gyro_calibration+0x16>
	}

	/*Calibration values, average of gyros values*/
	Gyro_X_calibration = -1 * GyroValuesx/counter;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <Gyro_calibration+0xf0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f958 	bl	8000c9c <__aeabi_i2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff fa5b 	bl	8000eac <__aeabi_fdiv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <Gyro_calibration+0x108>)
 80019fc:	601a      	str	r2, [r3, #0]
	Gyro_Y_calibration = -1 * GyroValuesy/counter;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <Gyro_calibration+0xf8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f947 	bl	8000c9c <__aeabi_i2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7ff fa4a 	bl	8000eac <__aeabi_fdiv>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <Gyro_calibration+0x10c>)
 8001a1e:	601a      	str	r2, [r3, #0]
	Gyro_Z_calibration = -1 * GyroValuesz/counter;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <Gyro_calibration+0x100>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f936 	bl	8000c9c <__aeabi_i2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4619      	mov	r1, r3
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff fa39 	bl	8000eac <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <Gyro_calibration+0x110>)
 8001a40:	601a      	str	r2, [r3, #0]

}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003f0 	.word	0x200003f0
 8001a50:	200003cc 	.word	0x200003cc
 8001a54:	200003f4 	.word	0x200003f4
 8001a58:	200003d0 	.word	0x200003d0
 8001a5c:	200003f8 	.word	0x200003f8
 8001a60:	200003d4 	.word	0x200003d4
 8001a64:	200003fc 	.word	0x200003fc
 8001a68:	20000400 	.word	0x20000400
 8001a6c:	20000404 	.word	0x20000404

08001a70 <MPU_GetYaw>:

void MPU_GetYaw(uint8_t elapsed){
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	uint8_t alfa = 0.98;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]

	yawangle_new = prev_yaw + gyro_z * elapsed/1000;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f90b 	bl	8000c9c <__aeabi_i2f>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <MPU_GetYaw+0xd4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f7ff f958 	bl	8000d44 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	492c      	ldr	r1, [pc, #176]	; (8001b48 <MPU_GetYaw+0xd8>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa07 	bl	8000eac <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <MPU_GetYaw+0xdc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f7ff f843 	bl	8000b34 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <MPU_GetYaw+0xe0>)
 8001ab4:	601a      	str	r2, [r3, #0]

	yawangle = (1-alfa) * prev_yaw + (alfa) * yawangle_new;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	f1c3 0301 	rsb	r3, r3, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f8ed 	bl	8000c9c <__aeabi_i2f>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MPU_GetYaw+0xdc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f7ff f93a 	bl	8000d44 <__aeabi_fmul>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461c      	mov	r4, r3
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f8e0 	bl	8000c9c <__aeabi_i2f>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MPU_GetYaw+0xe0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	f7ff f92d 	bl	8000d44 <__aeabi_fmul>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff f820 	bl	8000b34 <__addsf3>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MPU_GetYaw+0xe4>)
 8001afa:	601a      	str	r2, [r3, #0]

	prev_yaw = yawangle_new;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MPU_GetYaw+0xe0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MPU_GetYaw+0xdc>)
 8001b02:	6013      	str	r3, [r2, #0]

	if(yawangle <= -360){
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MPU_GetYaw+0xe4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4913      	ldr	r1, [pc, #76]	; (8001b58 <MPU_GetYaw+0xe8>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fac2 	bl	8001094 <__aeabi_fcmple>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <MPU_GetYaw+0xae>
		yawangle = 0;
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MPU_GetYaw+0xe4>)
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
	}
	if(yawangle > 360){
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <MPU_GetYaw+0xe4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <MPU_GetYaw+0xec>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fac9 	bl	80010bc <__aeabi_fcmpgt>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d100      	bne.n	8001b32 <MPU_GetYaw+0xc2>
		yawangle = 0;
	}

	//filteredYaw = alfa*(filteredYaw + gyro_z * elapsed/1000) + (1-alfa)*YawMag;
}
 8001b30:	e003      	b.n	8001b3a <MPU_GetYaw+0xca>
		yawangle = 0;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MPU_GetYaw+0xe4>)
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200003d4 	.word	0x200003d4
 8001b48:	447a0000 	.word	0x447a0000
 8001b4c:	20000410 	.word	0x20000410
 8001b50:	2000040c 	.word	0x2000040c
 8001b54:	20000408 	.word	0x20000408
 8001b58:	c3b40000 	.word	0xc3b40000
 8001b5c:	43b40000 	.word	0x43b40000

08001b60 <Mag_init>:

void Mag_init(void){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af04      	add	r7, sp, #16

	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x08,1, &array[0], 1, 100);
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <Mag_init+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	2301      	movs	r3, #1
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <Mag_init+0x48>)
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <Mag_init+0x4c>)
 8001b7e:	f002 f81b 	bl	8003bb8 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x09,1, &array[1], 1, 100);
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <Mag_init+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b299      	uxth	r1, r3
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <Mag_init+0x50>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	2209      	movs	r2, #9
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <Mag_init+0x4c>)
 8001b9a:	f002 f80d 	bl	8003bb8 <HAL_I2C_Mem_Write>
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000001 	.word	0x20000001
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	20000208 	.word	0x20000208
 8001bb0:	20000015 	.word	0x20000015
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bbc:	b0ab      	sub	sp, #172	; 0xac
 8001bbe:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc0:	f001 fb92 	bl	80032e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc4:	f000 fb80 	bl	80022c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc8:	f000 fdc4 	bl	8002754 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bcc:	f000 fbe6 	bl	800239c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001bd0:	f000 fcb0 	bl	8002534 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001bd4:	f000 fd94 	bl	8002700 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001bd8:	f000 fd44 	bl	8002664 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001bdc:	f000 fc5c 	bl	8002498 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001be0:	f000 fc0a 	bl	80023f8 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001be4:	f000 fbb5 	bl	8002352 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*Check if MPU6050 is connected*/
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDRESS, 10, 100);
 8001be8:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <main+0x254>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b299      	uxth	r1, r3
 8001bee:	2364      	movs	r3, #100	; 0x64
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	4887      	ldr	r0, [pc, #540]	; (8001e10 <main+0x258>)
 8001bf4:	f002 fb42 	bl	800427c <HAL_I2C_IsDeviceReady>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  /*Check if QMC5883 is connected*/
  HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c1, MAG_ADDRESS, 10, 1000);
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <main+0x25c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b299      	uxth	r1, r3
 8001c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c08:	220a      	movs	r2, #10
 8001c0a:	4881      	ldr	r0, [pc, #516]	; (8001e10 <main+0x258>)
 8001c0c:	f002 fb36 	bl	800427c <HAL_I2C_IsDeviceReady>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

  if(ret == HAL_OK /*&& ready == HAL_OK*/){
 8001c16:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d119      	bne.n	8001c52 <main+0x9a>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c24:	487c      	ldr	r0, [pc, #496]	; (8001e18 <main+0x260>)
 8001c26:	f001 fe53 	bl	80038d0 <HAL_GPIO_WritePin>
	  char transmission_buffer[17];
	  uint8_t transmission_size = sprintf(transmission_buffer,"Device connected \n");
 8001c2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c2e:	497b      	ldr	r1, [pc, #492]	; (8001e1c <main+0x264>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 fafd 	bl	8007230 <siprintf>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

	  HAL_UART_Transmit(&huart1,&transmission_buffer,transmission_size, 500);
 8001c3c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c4a:	4875      	ldr	r0, [pc, #468]	; (8001e20 <main+0x268>)
 8001c4c:	f004 fbbe 	bl	80063cc <HAL_UART_Transmit>
 8001c50:	e005      	b.n	8001c5e <main+0xa6>
  }
  else{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c58:	486f      	ldr	r0, [pc, #444]	; (8001e18 <main+0x260>)
 8001c5a:	f001 fe39 	bl	80038d0 <HAL_GPIO_WritePin>
  }

  Mag_init();
 8001c5e:	f7ff ff7f 	bl	8001b60 <Mag_init>
  MPU_init();
 8001c62:	f7ff fcfb 	bl	800165c <MPU_init>

  Gyro_calibration();
 8001c66:	f7ff fe79 	bl	800195c <Gyro_calibration>

  HAL_TIM_Base_Start_IT(&htim4);
 8001c6a:	486e      	ldr	r0, [pc, #440]	; (8001e24 <main+0x26c>)
 8001c6c:	f003 fc48 	bl	8005500 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c70:	486d      	ldr	r0, [pc, #436]	; (8001e28 <main+0x270>)
 8001c72:	f003 fc45 	bl	8005500 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c76:	2100      	movs	r1, #0
 8001c78:	486c      	ldr	r0, [pc, #432]	; (8001e2c <main+0x274>)
 8001c7a:	f003 fceb 	bl	8005654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c7e:	2104      	movs	r1, #4
 8001c80:	486a      	ldr	r0, [pc, #424]	; (8001e2c <main+0x274>)
 8001c82:	f003 fce7 	bl	8005654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c86:	2108      	movs	r1, #8
 8001c88:	4868      	ldr	r0, [pc, #416]	; (8001e2c <main+0x274>)
 8001c8a:	f003 fce3 	bl	8005654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c8e:	210c      	movs	r1, #12
 8001c90:	4866      	ldr	r0, [pc, #408]	; (8001e2c <main+0x274>)
 8001c92:	f003 fcdf 	bl	8005654 <HAL_TIM_PWM_Start>
  PIDpwm_Init(&pidMotor_rb, 2.4901f, 324.3345, 0.16109f, -300.0f, 300.0f);
  PIDpwm_Init(&pidMotor_lb, 2.131f, 380.4173f, 0.14994f, -300.0f, 300.0f);
*/


  pidMotor_rf.setpoint = 3.4;
 8001c96:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <main+0x278>)
 8001c98:	4a66      	ldr	r2, [pc, #408]	; (8001e34 <main+0x27c>)
 8001c9a:	60da      	str	r2, [r3, #12]
  pidMotor_lf.setpoint = setpoint;
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <main+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a66      	ldr	r2, [pc, #408]	; (8001e3c <main+0x284>)
 8001ca2:	60d3      	str	r3, [r2, #12]
  pidMotor_rb.setpoint = setpoint;
 8001ca4:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <main+0x280>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a65      	ldr	r2, [pc, #404]	; (8001e40 <main+0x288>)
 8001caa:	60d3      	str	r3, [r2, #12]
  pidMotor_lb.setpoint = setpoint;
 8001cac:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <main+0x280>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <main+0x28c>)
 8001cb2:	60d3      	str	r3, [r2, #12]

  pidAngle.setpoint = 0;
 8001cb4:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <main+0x290>)
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
  PIDpwm_Init(&pidMotor_rf, 0.90f, 0.0f, 0.0f, -300.0f, 300.0f);
  PIDpwm_Init(&pidMotor_lf, 1.0f, 0.0f, 0.0f, -300.0f, 300.0f);
  PIDpwm_Init(&pidMotor_rb, 0.8f, 0.0f, 0.0f, -300.0f, 300.0f);
  PIDpwm_Init(&pidMotor_lb, 0.9f, 0.0f, 0.0f, -300.0f, 300.0f);
  */
  PIDpwm_Init(&pidMotor_rf, 140.0f, 400.0f, 0.0f, -4.0f, 4.0f,3.4);
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <main+0x27c>)
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <main+0x294>)
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	4a60      	ldr	r2, [pc, #384]	; (8001e50 <main+0x298>)
 8001cd0:	4960      	ldr	r1, [pc, #384]	; (8001e54 <main+0x29c>)
 8001cd2:	4857      	ldr	r0, [pc, #348]	; (8001e30 <main+0x278>)
 8001cd4:	f7ff fad6 	bl	8001284 <PIDpwm_Init>
  PIDpwm_Init(&pidMotor_lf, 140.0f, 400.0f, 0.0f, -4.0f, 4.0f,3.4);
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <main+0x27c>)
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <main+0x294>)
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	4a59      	ldr	r2, [pc, #356]	; (8001e50 <main+0x298>)
 8001cec:	4959      	ldr	r1, [pc, #356]	; (8001e54 <main+0x29c>)
 8001cee:	4853      	ldr	r0, [pc, #332]	; (8001e3c <main+0x284>)
 8001cf0:	f7ff fac8 	bl	8001284 <PIDpwm_Init>
  PIDpwm_Init(&pidMotor_rb, 140.0f, 400.0f, 0.0f, -4.0f, 4.0f,3.4);
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <main+0x27c>)
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <main+0x294>)
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <main+0x298>)
 8001d08:	4952      	ldr	r1, [pc, #328]	; (8001e54 <main+0x29c>)
 8001d0a:	484d      	ldr	r0, [pc, #308]	; (8001e40 <main+0x288>)
 8001d0c:	f7ff faba 	bl	8001284 <PIDpwm_Init>
  PIDpwm_Init(&pidMotor_lb, 140.0f, 400.0f, 0.0f, -4.0f, 4.0f,3.4);
 8001d10:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <main+0x27c>)
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <main+0x294>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	4a4b      	ldr	r2, [pc, #300]	; (8001e50 <main+0x298>)
 8001d24:	494b      	ldr	r1, [pc, #300]	; (8001e54 <main+0x29c>)
 8001d26:	4847      	ldr	r0, [pc, #284]	; (8001e44 <main+0x28c>)
 8001d28:	f7ff faac 	bl	8001284 <PIDpwm_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	2203      	movs	r2, #3
 8001d30:	4949      	ldr	r1, [pc, #292]	; (8001e58 <main+0x2a0>)
 8001d32:	483b      	ldr	r0, [pc, #236]	; (8001e20 <main+0x268>)
 8001d34:	f004 fbcd 	bl	80064d2 <HAL_UART_Receive>

	  /*State Machine for going forward and turning right.*/
	  switch(state){
 8001d38:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <main+0x2a4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d002      	beq.n	8001d46 <main+0x18e>
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d031      	beq.n	8001da8 <main+0x1f0>
 8001d44:	e0a0      	b.n	8001e88 <main+0x2d0>

		  case 1:
			  //Forward path
			  //Forward();

			  pwm_lf = 4095;
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <main+0x2a8>)
 8001d48:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <main+0x2ac>)
 8001d4a:	601a      	str	r2, [r3, #0]
			  pwm_lb = 4095;
 8001d4c:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <main+0x2b0>)
 8001d4e:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <main+0x2ac>)
 8001d50:	601a      	str	r2, [r3, #0]
			  pwm_rb = 4095;
 8001d52:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <main+0x2b4>)
 8001d54:	4a43      	ldr	r2, [pc, #268]	; (8001e64 <main+0x2ac>)
 8001d56:	601a      	str	r2, [r3, #0]
			  pwm_rf = 4095;
 8001d58:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <main+0x2b8>)
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <main+0x2ac>)
 8001d5c:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_rf);//pid_output_lf);
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);//pid_output_lb);
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);//pid_output_rb);
*/

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pid_output_lf);
 8001d5e:	4b45      	ldr	r3, [pc, #276]	; (8001e74 <main+0x2bc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <main+0x274>)
 8001d64:	6814      	ldr	r4, [r2, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9b2 	bl	80010d0 <__aeabi_f2uiz>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	6363      	str	r3, [r4, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pid_output_rf);
 8001d70:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <main+0x2c0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2d      	ldr	r2, [pc, #180]	; (8001e2c <main+0x274>)
 8001d76:	6814      	ldr	r4, [r2, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f9a9 	bl	80010d0 <__aeabi_f2uiz>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	63a3      	str	r3, [r4, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pid_output_lb);
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <main+0x2c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <main+0x274>)
 8001d88:	6814      	ldr	r4, [r2, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f9a0 	bl	80010d0 <__aeabi_f2uiz>
 8001d90:	4603      	mov	r3, r0
 8001d92:	63e3      	str	r3, [r4, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pid_output_rb);
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <main+0x2c8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <main+0x274>)
 8001d9a:	6814      	ldr	r4, [r2, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f997 	bl	80010d0 <__aeabi_f2uiz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	6423      	str	r3, [r4, #64]	; 0x40
			  }
			  if(yawangle > yaw_reference_straightLine){
				  LeftTurn();
			  }
			  */
			  break;
 8001da6:	e072      	b.n	8001e8e <main+0x2d6>


		  case 2:
			  //Right turn

			  pwm_lb = 3500;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <main+0x2b0>)
 8001daa:	4a36      	ldr	r2, [pc, #216]	; (8001e84 <main+0x2cc>)
 8001dac:	601a      	str	r2, [r3, #0]
			  pwm_rb = 3500;
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <main+0x2b4>)
 8001db0:	4a34      	ldr	r2, [pc, #208]	; (8001e84 <main+0x2cc>)
 8001db2:	601a      	str	r2, [r3, #0]
			  pwm_rf = 3500;
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <main+0x2b8>)
 8001db6:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <main+0x2cc>)
 8001db8:	601a      	str	r2, [r3, #0]
			  pwm_lf = 3500;
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <main+0x2a8>)
 8001dbc:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <main+0x2cc>)
 8001dbe:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
			  */


			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pid_output_lf);
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <main+0x2bc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <main+0x274>)
 8001dc6:	6814      	ldr	r4, [r2, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f981 	bl	80010d0 <__aeabi_f2uiz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6363      	str	r3, [r4, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pid_output_rf);
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <main+0x2c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <main+0x274>)
 8001dd8:	6814      	ldr	r4, [r2, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f978 	bl	80010d0 <__aeabi_f2uiz>
 8001de0:	4603      	mov	r3, r0
 8001de2:	63a3      	str	r3, [r4, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pid_output_lb);
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <main+0x2c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <main+0x274>)
 8001dea:	6814      	ldr	r4, [r2, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f96f 	bl	80010d0 <__aeabi_f2uiz>
 8001df2:	4603      	mov	r3, r0
 8001df4:	63e3      	str	r3, [r4, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pid_output_rb);
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <main+0x2c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <main+0x274>)
 8001dfc:	6814      	ldr	r4, [r2, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f966 	bl	80010d0 <__aeabi_f2uiz>
 8001e04:	4603      	mov	r3, r0
 8001e06:	6423      	str	r3, [r4, #64]	; 0x40

			  break;
 8001e08:	e041      	b.n	8001e8e <main+0x2d6>
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000208 	.word	0x20000208
 8001e14:	20000001 	.word	0x20000001
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	080094e8 	.word	0x080094e8
 8001e20:	2000037c 	.word	0x2000037c
 8001e24:	20000334 	.word	0x20000334
 8001e28:	200002a4 	.word	0x200002a4
 8001e2c:	200002ec 	.word	0x200002ec
 8001e30:	2000047c 	.word	0x2000047c
 8001e34:	4059999a 	.word	0x4059999a
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	200004a4 	.word	0x200004a4
 8001e40:	200004cc 	.word	0x200004cc
 8001e44:	200004f4 	.word	0x200004f4
 8001e48:	2000051c 	.word	0x2000051c
 8001e4c:	c0800000 	.word	0xc0800000
 8001e50:	43c80000 	.word	0x43c80000
 8001e54:	430c0000 	.word	0x430c0000
 8001e58:	20000544 	.word	0x20000544
 8001e5c:	20000418 	.word	0x20000418
 8001e60:	2000045c 	.word	0x2000045c
 8001e64:	457ff000 	.word	0x457ff000
 8001e68:	20000464 	.word	0x20000464
 8001e6c:	20000460 	.word	0x20000460
 8001e70:	20000458 	.word	0x20000458
 8001e74:	20000440 	.word	0x20000440
 8001e78:	20000444 	.word	0x20000444
 8001e7c:	20000448 	.word	0x20000448
 8001e80:	2000044c 	.word	0x2000044c
 8001e84:	455ac000 	.word	0x455ac000

		  default:
			  Stop();
 8001e88:	f7ff f942 	bl	8001110 <Stop>

			  break;
 8001e8c:	bf00      	nop
	  }



	  current_time = HAL_GetTick();
 8001e8e:	f001 fa83 	bl	8003398 <HAL_GetTick>
 8001e92:	64f8      	str	r0, [r7, #76]	; 0x4c
	  elapsed_time = current_time - start_time;
 8001e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48


	  /*State machines logic */
	  if(state == 0){
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <main+0x3b4>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d12f      	bne.n	8001f04 <main+0x34c>
		  flag = 1;
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <main+0x3b8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
		  /*Start Command*/
		  if(Commands[0] == 'S'){
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <main+0x3bc>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b53      	cmp	r3, #83	; 0x53
 8001eb0:	f040 8104 	bne.w	80020bc <main+0x504>
			  start_time = HAL_GetTick();
 8001eb4:	f001 fa70 	bl	8003398 <HAL_GetTick>
 8001eb8:	6578      	str	r0, [r7, #84]	; 0x54
			  elapsed_time = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	64bb      	str	r3, [r7, #72]	; 0x48


			  PIDangle_Init(&pidAngle,30.0f,0.0f,-45.0f,45.0f);
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <main+0x3c0>)
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <main+0x3c4>)
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	492d      	ldr	r1, [pc, #180]	; (8001f80 <main+0x3c8>)
 8001eca:	482e      	ldr	r0, [pc, #184]	; (8001f84 <main+0x3cc>)
 8001ecc:	f7ff faee 	bl	80014ac <PIDangle_Init>





			  pidMotor_rf.setpoint = setpoint;
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <main+0x3d0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <main+0x3d4>)
 8001ed6:	60d3      	str	r3, [r2, #12]
			  pidMotor_lf.setpoint = setpoint;
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <main+0x3d0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <main+0x3d8>)
 8001ede:	60d3      	str	r3, [r2, #12]
			  pidMotor_rb.setpoint = setpoint;
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <main+0x3d0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <main+0x3dc>)
 8001ee6:	60d3      	str	r3, [r2, #12]
			  pidMotor_lb.setpoint = setpoint;
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <main+0x3d0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <main+0x3e0>)
 8001eee:	60d3      	str	r3, [r2, #12]

			  flag = 0;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <main+0x3b8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]

			  state++;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <main+0x3b4>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <main+0x3b4>)
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e0db      	b.n	80020bc <main+0x504>
		  }
	  }
	  else if(state == 1){
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <main+0x3b4>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d14f      	bne.n	8001fac <main+0x3f4>
		  flag = 0;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <main+0x3b8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
		  /*Drive Forward for 5 seconds*/ // Change THIS!!
		  if(distance_average > 950){
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <main+0x3e4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <main+0x3e8>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f8cf 	bl	80010bc <__aeabi_fcmpgt>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80cb 	beq.w	80020bc <main+0x504>

			  pidAngle.setpoint = yaw_reference;
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <main+0x3ec>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <main+0x3cc>)
 8001f2c:	60d3      	str	r3, [r2, #12]

			  setpoint = 3;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <main+0x3d0>)
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <main+0x3f0>)
 8001f32:	601a      	str	r2, [r3, #0]

			  pidMotor_rf.setpoint = setpoint;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <main+0x3d0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <main+0x3d4>)
 8001f3a:	60d3      	str	r3, [r2, #12]
			  pidMotor_lf.setpoint = setpoint;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <main+0x3d0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <main+0x3d8>)
 8001f42:	60d3      	str	r3, [r2, #12]
			  pidMotor_rb.setpoint = setpoint;
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <main+0x3d0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <main+0x3dc>)
 8001f4a:	60d3      	str	r3, [r2, #12]
			  pidMotor_lb.setpoint = setpoint;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <main+0x3d0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <main+0x3e0>)
 8001f52:	60d3      	str	r3, [r2, #12]





			  start_time = HAL_GetTick();
 8001f54:	f001 fa20 	bl	8003398 <HAL_GetTick>
 8001f58:	6578      	str	r0, [r7, #84]	; 0x54
			  elapsed_time = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
			  state++;
 8001f5e:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <main+0x3b4>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b01      	ldr	r3, [pc, #4]	; (8001f6c <main+0x3b4>)
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e0a7      	b.n	80020bc <main+0x504>
 8001f6c:	20000418 	.word	0x20000418
 8001f70:	20000611 	.word	0x20000611
 8001f74:	20000544 	.word	0x20000544
 8001f78:	42340000 	.word	0x42340000
 8001f7c:	c2340000 	.word	0xc2340000
 8001f80:	41f00000 	.word	0x41f00000
 8001f84:	2000051c 	.word	0x2000051c
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	2000047c 	.word	0x2000047c
 8001f90:	200004a4 	.word	0x200004a4
 8001f94:	200004cc 	.word	0x200004cc
 8001f98:	200004f4 	.word	0x200004f4
 8001f9c:	20000478 	.word	0x20000478
 8001fa0:	446d8000 	.word	0x446d8000
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	40400000 	.word	0x40400000
		  }
	  }
	  else if(state == 2){
 8001fac:	4b9c      	ldr	r3, [pc, #624]	; (8002220 <main+0x668>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	f040 8083 	bne.w	80020bc <main+0x504>

		  /*Turn right until yaw reference value*/
		  if(yawangle >= yaw_reference * 1.05 && yawangle <= yaw_reference * 0.95){
 8001fb6:	4b9b      	ldr	r3, [pc, #620]	; (8002224 <main+0x66c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fa34 	bl	8000428 <__aeabi_f2d>
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	4b98      	ldr	r3, [pc, #608]	; (8002228 <main+0x670>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa2d 	bl	8000428 <__aeabi_f2d>
 8001fce:	a390      	add	r3, pc, #576	; (adr r3, 8002210 <main+0x658>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fa80 	bl	80004d8 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4620      	mov	r0, r4
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f7fe fd00 	bl	80009e4 <__aeabi_dcmpge>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d068      	beq.n	80020bc <main+0x504>
 8001fea:	4b8e      	ldr	r3, [pc, #568]	; (8002224 <main+0x66c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa1a 	bl	8000428 <__aeabi_f2d>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460d      	mov	r5, r1
 8001ff8:	4b8b      	ldr	r3, [pc, #556]	; (8002228 <main+0x670>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa13 	bl	8000428 <__aeabi_f2d>
 8002002:	a385      	add	r3, pc, #532	; (adr r3, 8002218 <main+0x660>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fa66 	bl	80004d8 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4620      	mov	r0, r4
 8002012:	4629      	mov	r1, r5
 8002014:	f7fe fcdc 	bl	80009d0 <__aeabi_dcmple>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d04e      	beq.n	80020bc <main+0x504>
			  yaw_reference += -90 + (-yawangle + yaw_reference);
 800201e:	4b82      	ldr	r3, [pc, #520]	; (8002228 <main+0x670>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a80      	ldr	r2, [pc, #512]	; (8002224 <main+0x66c>)
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fd81 	bl	8000b30 <__aeabi_fsub>
 800202e:	4603      	mov	r3, r0
 8002030:	497e      	ldr	r1, [pc, #504]	; (800222c <main+0x674>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fd7c 	bl	8000b30 <__aeabi_fsub>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <main+0x670>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f7fe fd76 	bl	8000b34 <__addsf3>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <main+0x670>)
 800204e:	601a      	str	r2, [r3, #0]
			  distance_average = 0;
 8002050:	4b77      	ldr	r3, [pc, #476]	; (8002230 <main+0x678>)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
			  flag = 1;
 8002058:	4b76      	ldr	r3, [pc, #472]	; (8002234 <main+0x67c>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]


			//yaw_reference += -90;
			Stop();
 800205e:	f7ff f857 	bl	8001110 <Stop>
			/*Recalibrate at every stop*/
			 YawOffsetValue += yawangle;
 8002062:	4b75      	ldr	r3, [pc, #468]	; (8002238 <main+0x680>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6f      	ldr	r2, [pc, #444]	; (8002224 <main+0x66c>)
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fd61 	bl	8000b34 <__addsf3>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	4b70      	ldr	r3, [pc, #448]	; (8002238 <main+0x680>)
 8002078:	601a      	str	r2, [r3, #0]
			Gyro_calibration();
 800207a:	f7ff fc6f 	bl	800195c <Gyro_calibration>

			 setpoint = 3.4;
 800207e:	4b6f      	ldr	r3, [pc, #444]	; (800223c <main+0x684>)
 8002080:	4a6f      	ldr	r2, [pc, #444]	; (8002240 <main+0x688>)
 8002082:	601a      	str	r2, [r3, #0]

			  pidMotor_rf.setpoint = setpoint;
 8002084:	4b6d      	ldr	r3, [pc, #436]	; (800223c <main+0x684>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6e      	ldr	r2, [pc, #440]	; (8002244 <main+0x68c>)
 800208a:	60d3      	str	r3, [r2, #12]
			  pidMotor_lf.setpoint = setpoint;
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <main+0x684>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6d      	ldr	r2, [pc, #436]	; (8002248 <main+0x690>)
 8002092:	60d3      	str	r3, [r2, #12]
			  pidMotor_rb.setpoint = setpoint;
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <main+0x684>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6c      	ldr	r2, [pc, #432]	; (800224c <main+0x694>)
 800209a:	60d3      	str	r3, [r2, #12]
			  pidMotor_lb.setpoint = setpoint;
 800209c:	4b67      	ldr	r3, [pc, #412]	; (800223c <main+0x684>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6b      	ldr	r2, [pc, #428]	; (8002250 <main+0x698>)
 80020a2:	60d3      	str	r3, [r2, #12]

			  pidAngle.setpoint = yawangle;
 80020a4:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <main+0x66c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <main+0x69c>)
 80020aa:	60d3      	str	r3, [r2, #12]


				start_time = HAL_GetTick();
 80020ac:	f001 f974 	bl	8003398 <HAL_GetTick>
 80020b0:	6578      	str	r0, [r7, #84]	; 0x54
				elapsed_time = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	64bb      	str	r3, [r7, #72]	; 0x48
			  	state = 1;
 80020b6:	4b5a      	ldr	r3, [pc, #360]	; (8002220 <main+0x668>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /*Stop Command*/
	  if(Commands[0] == 'E'){
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <main+0x6a0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b45      	cmp	r3, #69	; 0x45
 80020c2:	d13c      	bne.n	800213e <main+0x586>
		  Stop();
 80020c4:	f7ff f824 	bl	8001110 <Stop>

		  state = 0;
 80020c8:	4b55      	ldr	r3, [pc, #340]	; (8002220 <main+0x668>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]

		  pwm_lb = 0;
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <main+0x6a4>)
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
		  pwm_rb = 0;
 80020d6:	4b62      	ldr	r3, [pc, #392]	; (8002260 <main+0x6a8>)
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
		  pwm_rf = 0;
 80020de:	4b61      	ldr	r3, [pc, #388]	; (8002264 <main+0x6ac>)
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
		  pwm_lf = 0;
 80020e6:	4b60      	ldr	r3, [pc, #384]	; (8002268 <main+0x6b0>)
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <main+0x6b4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80020f6:	4b5d      	ldr	r3, [pc, #372]	; (800226c <main+0x6b4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80020fe:	4b5b      	ldr	r3, [pc, #364]	; (800226c <main+0x6b4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8002106:	4b59      	ldr	r3, [pc, #356]	; (800226c <main+0x6b4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

		  setpoint = 0;
 800210e:	4b4b      	ldr	r3, [pc, #300]	; (800223c <main+0x684>)
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	601a      	str	r2, [r3, #0]

		  pidMotor_rf.setpoint = setpoint;
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <main+0x684>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a4a      	ldr	r2, [pc, #296]	; (8002244 <main+0x68c>)
 800211c:	60d3      	str	r3, [r2, #12]
		  pidMotor_lf.setpoint = setpoint;
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <main+0x684>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a49      	ldr	r2, [pc, #292]	; (8002248 <main+0x690>)
 8002124:	60d3      	str	r3, [r2, #12]
		  pidMotor_rb.setpoint = setpoint;
 8002126:	4b45      	ldr	r3, [pc, #276]	; (800223c <main+0x684>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a48      	ldr	r2, [pc, #288]	; (800224c <main+0x694>)
 800212c:	60d3      	str	r3, [r2, #12]
		  pidMotor_lb.setpoint = setpoint;
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <main+0x684>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a47      	ldr	r2, [pc, #284]	; (8002250 <main+0x698>)
 8002134:	60d3      	str	r3, [r2, #12]

		  pidAngle.setpoint = 0;
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <main+0x69c>)
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	60da      	str	r2, [r3, #12]

	  }

	  uint8_t num_chars =  sprintf(rpmdata,"%u, %.2f, %.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",state,pidMotor_rf.setpoint, pid_output_lf, pid_output_rf, pid_output_lb, pid_output_rb, rpm_lf, rpm_rf, rpm_lb, rpm_rb, yawangle);
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <main+0x668>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461e      	mov	r6, r3
 8002144:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <main+0x68c>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f96d 	bl	8000428 <__aeabi_f2d>
 800214e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <main+0x6b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f966 	bl	8000428 <__aeabi_f2d>
 800215c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <main+0x6bc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f95f 	bl	8000428 <__aeabi_f2d>
 800216a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800216e:	4b42      	ldr	r3, [pc, #264]	; (8002278 <main+0x6c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f958 	bl	8000428 <__aeabi_f2d>
 8002178:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <main+0x6c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f951 	bl	8000428 <__aeabi_f2d>
 8002186:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <main+0x6c8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f94a 	bl	8000428 <__aeabi_f2d>
 8002194:	e9c7 0100 	strd	r0, r1, [r7]
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <main+0x6cc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f943 	bl	8000428 <__aeabi_f2d>
 80021a2:	4682      	mov	sl, r0
 80021a4:	468b      	mov	fp, r1
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <main+0x6d0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f93c 	bl	8000428 <__aeabi_f2d>
 80021b0:	4680      	mov	r8, r0
 80021b2:	4689      	mov	r9, r1
 80021b4:	4b35      	ldr	r3, [pc, #212]	; (800228c <main+0x6d4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f935 	bl	8000428 <__aeabi_f2d>
 80021be:	4604      	mov	r4, r0
 80021c0:	460d      	mov	r5, r1
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <main+0x66c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f92e 	bl	8000428 <__aeabi_f2d>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80021d4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80021d8:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80021dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80021e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80021e4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80021e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021ec:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80021f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021f4:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80021f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002200:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002204:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002208:	e042      	b.n	8002290 <main+0x6d8>
 800220a:	bf00      	nop
 800220c:	f3af 8000 	nop.w
 8002210:	cccccccd 	.word	0xcccccccd
 8002214:	3ff0cccc 	.word	0x3ff0cccc
 8002218:	66666666 	.word	0x66666666
 800221c:	3fee6666 	.word	0x3fee6666
 8002220:	20000418 	.word	0x20000418
 8002224:	20000408 	.word	0x20000408
 8002228:	20000004 	.word	0x20000004
 800222c:	42b40000 	.word	0x42b40000
 8002230:	20000478 	.word	0x20000478
 8002234:	20000611 	.word	0x20000611
 8002238:	20000414 	.word	0x20000414
 800223c:	20000010 	.word	0x20000010
 8002240:	4059999a 	.word	0x4059999a
 8002244:	2000047c 	.word	0x2000047c
 8002248:	200004a4 	.word	0x200004a4
 800224c:	200004cc 	.word	0x200004cc
 8002250:	200004f4 	.word	0x200004f4
 8002254:	2000051c 	.word	0x2000051c
 8002258:	20000544 	.word	0x20000544
 800225c:	20000464 	.word	0x20000464
 8002260:	20000460 	.word	0x20000460
 8002264:	20000458 	.word	0x20000458
 8002268:	2000045c 	.word	0x2000045c
 800226c:	200002ec 	.word	0x200002ec
 8002270:	20000440 	.word	0x20000440
 8002274:	20000444 	.word	0x20000444
 8002278:	20000448 	.word	0x20000448
 800227c:	2000044c 	.word	0x2000044c
 8002280:	20000424 	.word	0x20000424
 8002284:	20000420 	.word	0x20000420
 8002288:	2000042c 	.word	0x2000042c
 800228c:	20000428 	.word	0x20000428
 8002290:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002294:	e9cd 3400 	strd	r3, r4, [sp]
 8002298:	4632      	mov	r2, r6
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <main+0x704>)
 800229c:	4808      	ldr	r0, [pc, #32]	; (80022c0 <main+0x708>)
 800229e:	f004 ffc7 	bl	8007230 <siprintf>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  //uint8_t num_chars =  sprintf(rpmdata,"%.2f,%.2f,%.2f,%.2f\n",rpm_lf, rpm_rf, rpm_lb, rpm_rb);

	  //uint8_t num_chars =  sprintf(rpmdata,"%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", pwm_lf, pwm_rf, pwm_lb, pwm_rb, rpm_lf, rpm_rf, rpm_lb, rpm_rb, yawangle);

	  HAL_UART_Transmit(&huart1, &rpmdata, num_chars, 100);
 80022a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	2364      	movs	r3, #100	; 0x64
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <main+0x708>)
 80022b2:	4804      	ldr	r0, [pc, #16]	; (80022c4 <main+0x70c>)
 80022b4:	f004 f88a 	bl	80063cc <HAL_UART_Transmit>
  {
 80022b8:	e538      	b.n	8001d2c <main+0x174>
 80022ba:	bf00      	nop
 80022bc:	080094fc 	.word	0x080094fc
 80022c0:	20000548 	.word	0x20000548
 80022c4:	2000037c 	.word	0x2000037c

080022c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b090      	sub	sp, #64	; 0x40
 80022cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ce:	f107 0318 	add.w	r3, r7, #24
 80022d2:	2228      	movs	r2, #40	; 0x28
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 f80d 	bl	80072f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f8:	2301      	movs	r3, #1
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fc:	2302      	movs	r3, #2
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002306:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230c:	f107 0318 	add.w	r3, r7, #24
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fc95 	bl	8004c40 <HAL_RCC_OscConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800231c:	f000 fd38 	bl	8002d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002320:	230f      	movs	r3, #15
 8002322:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002324:	2302      	movs	r3, #2
 8002326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800232c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002330:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f002 ff02 	bl	8005144 <HAL_RCC_ClockConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002346:	f000 fd23 	bl	8002d90 <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	3740      	adds	r7, #64	; 0x40
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2028      	movs	r0, #40	; 0x28
 800235c:	f001 f8fd 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002360:	2028      	movs	r0, #40	; 0x28
 8002362:	f001 f916 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	201e      	movs	r0, #30
 800236c:	f001 f8f5 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002370:	201e      	movs	r0, #30
 8002372:	f001 f90e 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	201c      	movs	r0, #28
 800237c:	f001 f8ed 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002380:	201c      	movs	r0, #28
 8002382:	f001 f906 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	201d      	movs	r0, #29
 800238c:	f001 f8e5 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002390:	201d      	movs	r0, #29
 8002392:	f001 f8fe 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <MX_I2C1_Init+0x50>)
 80023a2:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <MX_I2C1_Init+0x54>)
 80023a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_I2C1_Init+0x50>)
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MX_I2C1_Init+0x58>)
 80023aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <MX_I2C1_Init+0x50>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_I2C1_Init+0x50>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_I2C1_Init+0x50>)
 80023ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <MX_I2C1_Init+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_I2C1_Init+0x50>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <MX_I2C1_Init+0x50>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_I2C1_Init+0x50>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <MX_I2C1_Init+0x50>)
 80023da:	f001 faa9 	bl	8003930 <HAL_I2C_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023e4:	f000 fcd4 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000208 	.word	0x20000208
 80023f0:	40005400 	.word	0x40005400
 80023f4:	000186a0 	.word	0x000186a0

080023f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <MX_TIM1_Init+0x98>)
 8002416:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <MX_TIM1_Init+0x9c>)
 8002418:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <MX_TIM1_Init+0x98>)
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <MX_TIM1_Init+0x98>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_TIM1_Init+0x98>)
 8002428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800242c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <MX_TIM1_Init+0x98>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <MX_TIM1_Init+0x98>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <MX_TIM1_Init+0x98>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002440:	4813      	ldr	r0, [pc, #76]	; (8002490 <MX_TIM1_Init+0x98>)
 8002442:	f003 f80d 	bl	8005460 <HAL_TIM_Base_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800244c:	f000 fca0 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002454:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	4619      	mov	r1, r3
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <MX_TIM1_Init+0x98>)
 800245e:	f003 fb65 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002468:	f000 fc92 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246c:	2300      	movs	r3, #0
 800246e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002474:	463b      	mov	r3, r7
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_TIM1_Init+0x98>)
 800247a:	f003 fee7 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002484:	f000 fc84 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	2000025c 	.word	0x2000025c
 8002494:	40012c00 	.word	0x40012c00

08002498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249e:	f107 0308 	add.w	r3, r7, #8
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ac:	463b      	mov	r3, r7
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <MX_TIM2_Init+0x98>)
 80024b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MX_TIM2_Init+0x98>)
 80024be:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80024c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_TIM2_Init+0x98>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500 - 1;
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <MX_TIM2_Init+0x98>)
 80024cc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80024d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <MX_TIM2_Init+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_TIM2_Init+0x98>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024de:	4814      	ldr	r0, [pc, #80]	; (8002530 <MX_TIM2_Init+0x98>)
 80024e0:	f002 ffbe 	bl	8005460 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024ea:	f000 fc51 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4619      	mov	r1, r3
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <MX_TIM2_Init+0x98>)
 80024fc:	f003 fb16 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002506:	f000 fc43 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_TIM2_Init+0x98>)
 8002518:	f003 fe98 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002522:	f000 fc35 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200002a4 	.word	0x200002a4

08002534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	f107 0320 	add.w	r3, r7, #32
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <MX_TIM3_Init+0x128>)
 8002566:	4a3e      	ldr	r2, [pc, #248]	; (8002660 <MX_TIM3_Init+0x12c>)
 8002568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <MX_TIM3_Init+0x128>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	4b3a      	ldr	r3, [pc, #232]	; (800265c <MX_TIM3_Init+0x128>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <MX_TIM3_Init+0x128>)
 8002578:	f640 72ff 	movw	r2, #4095	; 0xfff
 800257c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <MX_TIM3_Init+0x128>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <MX_TIM3_Init+0x128>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258a:	4834      	ldr	r0, [pc, #208]	; (800265c <MX_TIM3_Init+0x128>)
 800258c:	f002 ff68 	bl	8005460 <HAL_TIM_Base_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002596:	f000 fbfb 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a4:	4619      	mov	r1, r3
 80025a6:	482d      	ldr	r0, [pc, #180]	; (800265c <MX_TIM3_Init+0x128>)
 80025a8:	f003 fac0 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80025b2:	f000 fbed 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b6:	4829      	ldr	r0, [pc, #164]	; (800265c <MX_TIM3_Init+0x128>)
 80025b8:	f002 fff4 	bl	80055a4 <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025c2:	f000 fbe5 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ce:	f107 0320 	add.w	r3, r7, #32
 80025d2:	4619      	mov	r1, r3
 80025d4:	4821      	ldr	r0, [pc, #132]	; (800265c <MX_TIM3_Init+0x128>)
 80025d6:	f003 fe39 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025e0:	f000 fbd6 	bl	8002d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e4:	2360      	movs	r3, #96	; 0x60
 80025e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	4619      	mov	r1, r3
 80025fa:	4818      	ldr	r0, [pc, #96]	; (800265c <MX_TIM3_Init+0x128>)
 80025fc:	f003 f9d4 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002606:	f000 fbc3 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2204      	movs	r2, #4
 800260e:	4619      	mov	r1, r3
 8002610:	4812      	ldr	r0, [pc, #72]	; (800265c <MX_TIM3_Init+0x128>)
 8002612:	f003 f9c9 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800261c:	f000 fbb8 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2208      	movs	r2, #8
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	; (800265c <MX_TIM3_Init+0x128>)
 8002628:	f003 f9be 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002632:	f000 fbad 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	220c      	movs	r2, #12
 800263a:	4619      	mov	r1, r3
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <MX_TIM3_Init+0x128>)
 800263e:	f003 f9b3 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002648:	f000 fba2 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <MX_TIM3_Init+0x128>)
 800264e:	f000 fc6d 	bl	8002f2c <HAL_TIM_MspPostInit>

}
 8002652:	bf00      	nop
 8002654:	3738      	adds	r7, #56	; 0x38
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200002ec 	.word	0x200002ec
 8002660:	40000400 	.word	0x40000400

08002664 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <MX_TIM4_Init+0x94>)
 8002682:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <MX_TIM4_Init+0x98>)
 8002684:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <MX_TIM4_Init+0x94>)
 8002688:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800268c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <MX_TIM4_Init+0x94>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <MX_TIM4_Init+0x94>)
 8002696:	2263      	movs	r2, #99	; 0x63
 8002698:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <MX_TIM4_Init+0x94>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <MX_TIM4_Init+0x94>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026a6:	4814      	ldr	r0, [pc, #80]	; (80026f8 <MX_TIM4_Init+0x94>)
 80026a8:	f002 feda 	bl	8005460 <HAL_TIM_Base_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80026b2:	f000 fb6d 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	4619      	mov	r1, r3
 80026c2:	480d      	ldr	r0, [pc, #52]	; (80026f8 <MX_TIM4_Init+0x94>)
 80026c4:	f003 fa32 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80026ce:	f000 fb5f 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026da:	463b      	mov	r3, r7
 80026dc:	4619      	mov	r1, r3
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <MX_TIM4_Init+0x94>)
 80026e0:	f003 fdb4 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026ea:	f000 fb51 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000334 	.word	0x20000334
 80026fc:	40000800 	.word	0x40000800

08002700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_USART1_UART_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800270c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002738:	f003 fdf8 	bl	800632c <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002742:	f000 fb25 	bl	8002d90 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000037c 	.word	0x2000037c
 8002750:	40013800 	.word	0x40013800

08002754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275a:	f107 0310 	add.w	r3, r7, #16
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002768:	4b45      	ldr	r3, [pc, #276]	; (8002880 <MX_GPIO_Init+0x12c>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a44      	ldr	r2, [pc, #272]	; (8002880 <MX_GPIO_Init+0x12c>)
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b42      	ldr	r3, [pc, #264]	; (8002880 <MX_GPIO_Init+0x12c>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002780:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <MX_GPIO_Init+0x12c>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a3e      	ldr	r2, [pc, #248]	; (8002880 <MX_GPIO_Init+0x12c>)
 8002786:	f043 0320 	orr.w	r3, r3, #32
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <MX_GPIO_Init+0x12c>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002798:	4b39      	ldr	r3, [pc, #228]	; (8002880 <MX_GPIO_Init+0x12c>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a38      	ldr	r2, [pc, #224]	; (8002880 <MX_GPIO_Init+0x12c>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b36      	ldr	r3, [pc, #216]	; (8002880 <MX_GPIO_Init+0x12c>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b0:	4b33      	ldr	r3, [pc, #204]	; (8002880 <MX_GPIO_Init+0x12c>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4a32      	ldr	r2, [pc, #200]	; (8002880 <MX_GPIO_Init+0x12c>)
 80027b6:	f043 0308 	orr.w	r3, r3, #8
 80027ba:	6193      	str	r3, [r2, #24]
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <MX_GPIO_Init+0x12c>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80027c8:	2200      	movs	r2, #0
 80027ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ce:	482d      	ldr	r0, [pc, #180]	; (8002884 <MX_GPIO_Init+0x130>)
 80027d0:	f001 f87e 	bl	80038d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027d4:	2200      	movs	r2, #0
 80027d6:	f248 010f 	movw	r1, #32783	; 0x800f
 80027da:	482b      	ldr	r0, [pc, #172]	; (8002888 <MX_GPIO_Init+0x134>)
 80027dc:	f001 f878 	bl	80038d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2138      	movs	r1, #56	; 0x38
 80027e4:	4829      	ldr	r0, [pc, #164]	; (800288c <MX_GPIO_Init+0x138>)
 80027e6:	f001 f873 	bl	80038d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80027ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	4619      	mov	r1, r3
 8002802:	4820      	ldr	r0, [pc, #128]	; (8002884 <MX_GPIO_Init+0x130>)
 8002804:	f000 fee0 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002808:	f248 030f 	movw	r3, #32783	; 0x800f
 800280c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2302      	movs	r3, #2
 8002818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4619      	mov	r1, r3
 8002820:	4819      	ldr	r0, [pc, #100]	; (8002888 <MX_GPIO_Init+0x134>)
 8002822:	f000 fed1 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002826:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800282a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <MX_GPIO_Init+0x13c>)
 800282e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4619      	mov	r1, r3
 800283a:	4814      	ldr	r0, [pc, #80]	; (800288c <MX_GPIO_Init+0x138>)
 800283c:	f000 fec4 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800284a:	2302      	movs	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	4619      	mov	r1, r3
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <MX_GPIO_Init+0x134>)
 8002856:	f000 feb7 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800285a:	2338      	movs	r3, #56	; 0x38
 800285c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285e:	2301      	movs	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2302      	movs	r3, #2
 8002868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	4619      	mov	r1, r3
 8002870:	4806      	ldr	r0, [pc, #24]	; (800288c <MX_GPIO_Init+0x138>)
 8002872:	f000 fea9 	bl	80035c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	40011000 	.word	0x40011000
 8002888:	40010800 	.word	0x40010800
 800288c:	40010c00 	.word	0x40010c00
 8002890:	10110000 	.word	0x10110000
 8002894:	00000000 	.word	0x00000000

08002898 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]


	if(htim -> Instance  == TIM2){
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	f040 818f 	bne.w	8002bca <HAL_TIM_PeriodElapsedCallback+0x332>


		if(flag == 0){
 80028ac:	4ba6      	ldr	r3, [pc, #664]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 818a 	bne.w	8002bca <HAL_TIM_PeriodElapsedCallback+0x332>

			rpm_rf =  (current_tick_rf * 1000 ) / (pulsesperturn * samplingTime);
 80028b6:	4ba5      	ldr	r3, [pc, #660]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	49a5      	ldr	r1, [pc, #660]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fa41 	bl	8000d44 <__aeabi_fmul>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461c      	mov	r4, r3
 80028c6:	4ba3      	ldr	r3, [pc, #652]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4aa3      	ldr	r2, [pc, #652]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fa37 	bl	8000d44 <__aeabi_fmul>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4619      	mov	r1, r3
 80028da:	4620      	mov	r0, r4
 80028dc:	f7fe fae6 	bl	8000eac <__aeabi_fdiv>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b9d      	ldr	r3, [pc, #628]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028e6:	601a      	str	r2, [r3, #0]
			rpm_lf =  (current_tick_lf * 1000 ) / (pulsesperturn * samplingTime);
 80028e8:	4b9d      	ldr	r3, [pc, #628]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4998      	ldr	r1, [pc, #608]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fa28 	bl	8000d44 <__aeabi_fmul>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461c      	mov	r4, r3
 80028f8:	4b96      	ldr	r3, [pc, #600]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a96      	ldr	r2, [pc, #600]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fa1e 	bl	8000d44 <__aeabi_fmul>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe facd 	bl	8000eac <__aeabi_fdiv>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	4b93      	ldr	r3, [pc, #588]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002918:	601a      	str	r2, [r3, #0]
			rpm_rb =  (current_tick_rb * 1000 ) / (pulsesperturn * samplingTime);
 800291a:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	498c      	ldr	r1, [pc, #560]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fa0f 	bl	8000d44 <__aeabi_fmul>
 8002926:	4603      	mov	r3, r0
 8002928:	461c      	mov	r4, r3
 800292a:	4b8a      	ldr	r3, [pc, #552]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a8a      	ldr	r2, [pc, #552]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fa05 	bl	8000d44 <__aeabi_fmul>
 800293a:	4603      	mov	r3, r0
 800293c:	4619      	mov	r1, r3
 800293e:	4620      	mov	r0, r4
 8002940:	f7fe fab4 	bl	8000eac <__aeabi_fdiv>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	4b88      	ldr	r3, [pc, #544]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800294a:	601a      	str	r2, [r3, #0]
			rpm_lb =  (current_tick_lb * 1000 ) / (pulsesperturn * samplingTime);
 800294c:	4b88      	ldr	r3, [pc, #544]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	497f      	ldr	r1, [pc, #508]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f9f6 	bl	8000d44 <__aeabi_fmul>
 8002958:	4603      	mov	r3, r0
 800295a:	461c      	mov	r4, r3
 800295c:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a7d      	ldr	r2, [pc, #500]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe f9ec 	bl	8000d44 <__aeabi_fmul>
 800296c:	4603      	mov	r3, r0
 800296e:	4619      	mov	r1, r3
 8002970:	4620      	mov	r0, r4
 8002972:	f7fe fa9b 	bl	8000eac <__aeabi_fdiv>
 8002976:	4603      	mov	r3, r0
 8002978:	461a      	mov	r2, r3
 800297a:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800297c:	601a      	str	r2, [r3, #0]

			distance_rf = current_tick_rf * 20.7345/pulsesperturn;
 800297e:	4b73      	ldr	r3, [pc, #460]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fd50 	bl	8000428 <__aeabi_f2d>
 8002988:	a36d      	add	r3, pc, #436	; (adr r3, 8002b40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f7fd fda3 	bl	80004d8 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4614      	mov	r4, r2
 8002998:	461d      	mov	r5, r3
 800299a:	4b6e      	ldr	r3, [pc, #440]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fd42 	bl	8000428 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd febe 	bl	800072c <__aeabi_ddiv>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f866 	bl	8000a88 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a6e      	ldr	r2, [pc, #440]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80029c0:	6013      	str	r3, [r2, #0]
			distance_lf = current_tick_lf * 20.7345/pulsesperturn;
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fd2e 	bl	8000428 <__aeabi_f2d>
 80029cc:	a35c      	add	r3, pc, #368	; (adr r3, 8002b40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fd fd81 	bl	80004d8 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4614      	mov	r4, r2
 80029dc:	461d      	mov	r5, r3
 80029de:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd20 	bl	8000428 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4620      	mov	r0, r4
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7fd fe9c 	bl	800072c <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f844 	bl	8000a88 <__aeabi_d2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4a5e      	ldr	r2, [pc, #376]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a04:	6013      	str	r3, [r2, #0]
			distance_rb = current_tick_rb * 20.7345/pulsesperturn;
 8002a06:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd0c 	bl	8000428 <__aeabi_f2d>
 8002a10:	a34b      	add	r3, pc, #300	; (adr r3, 8002b40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fd fd5f 	bl	80004d8 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4614      	mov	r4, r2
 8002a20:	461d      	mov	r5, r3
 8002a22:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fcfe 	bl	8000428 <__aeabi_f2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fe7a 	bl	800072c <__aeabi_ddiv>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f822 	bl	8000a88 <__aeabi_d2f>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4a4e      	ldr	r2, [pc, #312]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002a48:	6013      	str	r3, [r2, #0]
			distance_lb = current_tick_lb * 20.7345/pulsesperturn;
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fcea 	bl	8000428 <__aeabi_f2d>
 8002a54:	a33a      	add	r3, pc, #232	; (adr r3, 8002b40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fd3d 	bl	80004d8 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fcdc 	bl	8000428 <__aeabi_f2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fe58 	bl	800072c <__aeabi_ddiv>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f800 	bl	8000a88 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a3e      	ldr	r2, [pc, #248]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002a8c:	6013      	str	r3, [r2, #0]

			distance_average += (distance_rf + distance_lf + distance_rb + distance_lb)/4;
 8002a8e:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3a      	ldr	r2, [pc, #232]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f84b 	bl	8000b34 <__addsf3>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe f843 	bl	8000b34 <__addsf3>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f7fe f83b 	bl	8000b34 <__addsf3>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe f9f1 	bl	8000eac <__aeabi_fdiv>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f7fe f82d 	bl	8000b34 <__addsf3>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002ae0:	601a      	str	r2, [r3, #0]

			distance_rf = 0;
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
			distance_lf = 0;
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
			distance_rb = 0;
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
			distance_lb = 0;
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

			current_tick_rf = 0;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
			current_tick_lf = 0;
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
			current_tick_rb = 0;
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
			current_tick_lb = 0;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]


			pid_output_lf = PIDpwm_Compute(&pidMotor_lf, rpm_lf, 1);
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4818      	ldr	r0, [pc, #96]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002b2c:	f7fe fbe2 	bl	80012f4 <PIDpwm_Compute>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b34:	6013      	str	r3, [r2, #0]
			pid_output_rf = PIDpwm_Compute(&pidMotor_rf, rpm_rf, 2);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	e02a      	b.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x2fc>
 8002b3e:	bf00      	nop
 8002b40:	3126e979 	.word	0x3126e979
 8002b44:	4034bc08 	.word	0x4034bc08
 8002b48:	20000611 	.word	0x20000611
 8002b4c:	20000430 	.word	0x20000430
 8002b50:	447a0000 	.word	0x447a0000
 8002b54:	20000008 	.word	0x20000008
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	20000420 	.word	0x20000420
 8002b60:	20000434 	.word	0x20000434
 8002b64:	20000424 	.word	0x20000424
 8002b68:	20000438 	.word	0x20000438
 8002b6c:	20000428 	.word	0x20000428
 8002b70:	2000043c 	.word	0x2000043c
 8002b74:	2000042c 	.word	0x2000042c
 8002b78:	20000468 	.word	0x20000468
 8002b7c:	2000046c 	.word	0x2000046c
 8002b80:	20000470 	.word	0x20000470
 8002b84:	20000474 	.word	0x20000474
 8002b88:	20000478 	.word	0x20000478
 8002b8c:	200004a4 	.word	0x200004a4
 8002b90:	20000440 	.word	0x20000440
 8002b94:	4619      	mov	r1, r3
 8002b96:	4836      	ldr	r0, [pc, #216]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002b98:	f7fe fbac 	bl	80012f4 <PIDpwm_Compute>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002ba0:	6013      	str	r3, [r2, #0]
			pid_output_lb = PIDpwm_Compute(&pidMotor_lb, rpm_lb, 3);
 8002ba2:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4834      	ldr	r0, [pc, #208]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8002bac:	f7fe fba2 	bl	80012f4 <PIDpwm_Compute>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8002bb4:	6013      	str	r3, [r2, #0]
			pid_output_rb = PIDpwm_Compute(&pidMotor_rb, rpm_rb, 4);
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4832      	ldr	r0, [pc, #200]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002bc0:	f7fe fb98 	bl	80012f4 <PIDpwm_Compute>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002bc8:	6013      	str	r3, [r2, #0]
		}


	}

	if(htim -> Instance == TIM4){
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a30      	ldr	r2, [pc, #192]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d149      	bne.n	8002c68 <HAL_TIM_PeriodElapsedCallback+0x3d0>


		if(count == 4){
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d143      	bne.n	8002c64 <HAL_TIM_PeriodElapsedCallback+0x3cc>
			/*Integrate  every 50ms*/
			MPU_GetYaw(50);
 8002bdc:	2032      	movs	r0, #50	; 0x32
 8002bde:	f7fe ff47 	bl	8001a70 <MPU_GetYaw>
			Pid_angle_pwm_left = -1* PIDangle_Compute(&pidAngle, yawangle);
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	482c      	ldr	r0, [pc, #176]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002bea:	f7fe fc85 	bl	80014f8 <PIDangle_Compute>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002bf6:	6013      	str	r3, [r2, #0]
			Pid_angle_pwm_right = - Pid_angle_pwm_left;
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c00:	4a28      	ldr	r2, [pc, #160]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002c02:	6013      	str	r3, [r2, #0]
			pid_output_lf += Pid_angle_pwm_left;
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd ff90 	bl	8000b34 <__addsf3>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002c1a:	601a      	str	r2, [r3, #0]
			pid_output_lb += Pid_angle_pwm_left;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd ff84 	bl	8000b34 <__addsf3>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8002c32:	601a      	str	r2, [r3, #0]
			pid_output_rf += Pid_angle_pwm_right;
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd ff78 	bl	8000b34 <__addsf3>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002c4a:	601a      	str	r2, [r3, #0]
			pid_output_rb += Pid_angle_pwm_right;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd ff6c 	bl	8000b34 <__addsf3>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002c62:	601a      	str	r2, [r3, #0]
			//count = 0;

		}

		/*Readd gyro value every 10ms*/
		MPU_Read_gyro();
 8002c64:	f7fe fd8e 	bl	8001784 <MPU_Read_gyro>
	}

}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c70:	2000047c 	.word	0x2000047c
 8002c74:	20000444 	.word	0x20000444
 8002c78:	2000042c 	.word	0x2000042c
 8002c7c:	200004f4 	.word	0x200004f4
 8002c80:	20000448 	.word	0x20000448
 8002c84:	20000428 	.word	0x20000428
 8002c88:	200004cc 	.word	0x200004cc
 8002c8c:	2000044c 	.word	0x2000044c
 8002c90:	40000800 	.word	0x40000800
 8002c94:	20000610 	.word	0x20000610
 8002c98:	20000408 	.word	0x20000408
 8002c9c:	2000051c 	.word	0x2000051c
 8002ca0:	20000450 	.word	0x20000450
 8002ca4:	20000454 	.word	0x20000454
 8002ca8:	20000440 	.word	0x20000440

08002cac <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
 * @pin 14 Left front wheel
 * @pin 13 Right back wheel
 * @pin 12 Left back wheel
 */

  if(GPIO_Pin == GPIO_PIN_15){
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d111      	bne.n	8002ce2 <HAL_GPIO_EXTI_Callback+0x36>
	  //Right front wheel
	  pulses_rf++;
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002cca:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd ff2d 	bl	8000b34 <__addsf3>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002ce0:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_14){
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ce8:	d111      	bne.n	8002d0e <HAL_GPIO_EXTI_Callback+0x62>
	  //Left front wheel
	  pulses_lf++;
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002cf6:	701a      	strb	r2, [r3, #0]
	  current_tick_lf++;
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd ff17 	bl	8000b34 <__addsf3>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002d0c:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_13){
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d14:	d111      	bne.n	8002d3a <HAL_GPIO_EXTI_Callback+0x8e>
	  //Right back wheel
	  pulses_rb++;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d22:	701a      	strb	r2, [r3, #0]
	  current_tick_rb++;
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd ff01 	bl	8000b34 <__addsf3>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d38:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_12){
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d40:	d111      	bne.n	8002d66 <HAL_GPIO_EXTI_Callback+0xba>
	  //Left back wheel
	  pulses_lb++;
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002d4e:	701a      	strb	r2, [r3, #0]
	  current_tick_lb++;
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd feeb 	bl	8000b34 <__addsf3>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002d64:	601a      	str	r2, [r3, #0]

  }
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000419 	.word	0x20000419
 8002d74:	20000430 	.word	0x20000430
 8002d78:	2000041a 	.word	0x2000041a
 8002d7c:	20000434 	.word	0x20000434
 8002d80:	2000041b 	.word	0x2000041b
 8002d84:	20000438 	.word	0x20000438
 8002d88:	2000041c 	.word	0x2000041c
 8002d8c:	2000043c 	.word	0x2000043c

08002d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d94:	b672      	cpsid	i
}
 8002d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <Error_Handler+0x8>
	...

08002d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_MspInit+0x5c>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <HAL_MspInit+0x5c>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6193      	str	r3, [r2, #24]
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_MspInit+0x5c>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_MspInit+0x5c>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <HAL_MspInit+0x5c>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_MspInit+0x5c>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_MspInit+0x60>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <HAL_MspInit+0x60>)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000

08002e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <HAL_I2C_MspInit+0x70>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d123      	bne.n	8002e68 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_I2C_MspInit+0x74>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <HAL_I2C_MspInit+0x74>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	6193      	str	r3, [r2, #24]
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_I2C_MspInit+0x74>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e38:	23c0      	movs	r3, #192	; 0xc0
 8002e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	f107 0310 	add.w	r3, r7, #16
 8002e48:	4619      	mov	r1, r3
 8002e4a:	480b      	ldr	r0, [pc, #44]	; (8002e78 <HAL_I2C_MspInit+0x78>)
 8002e4c:	f000 fbbc 	bl	80035c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <HAL_I2C_MspInit+0x74>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <HAL_I2C_MspInit+0x74>)
 8002e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e5a:	61d3      	str	r3, [r2, #28]
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_I2C_MspInit+0x74>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40005400 	.word	0x40005400
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010c00 	.word	0x40010c00

08002e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <HAL_TIM_Base_MspInit+0xa0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002e94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e98:	6193      	str	r3, [r2, #24]
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ea6:	e034      	b.n	8002f12 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	61d3      	str	r3, [r2, #28]
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
}
 8002eca:	e022      	b.n	8002f12 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_TIM_Base_MspInit+0xa8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	61d3      	str	r3, [r2, #28]
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	e010      	b.n	8002f12 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_TIM_Base_MspInit+0xac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10b      	bne.n	8002f12 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	61d3      	str	r3, [r2, #28]
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_TIM_Base_MspInit+0xa4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800

08002f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_TIM_MspPostInit+0x88>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d12f      	bne.n	8002fac <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_TIM_MspPostInit+0x8c>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_TIM_MspPostInit+0x8c>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_TIM_MspPostInit+0x8c>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_TIM_MspPostInit+0x8c>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_TIM_MspPostInit+0x8c>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	6193      	str	r3, [r2, #24]
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_TIM_MspPostInit+0x8c>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7c:	23c0      	movs	r3, #192	; 0xc0
 8002f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2302      	movs	r3, #2
 8002f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	480b      	ldr	r0, [pc, #44]	; (8002fbc <HAL_TIM_MspPostInit+0x90>)
 8002f90:	f000 fb1a 	bl	80035c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f94:	2303      	movs	r3, #3
 8002f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa0:	f107 0310 	add.w	r3, r7, #16
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4806      	ldr	r0, [pc, #24]	; (8002fc0 <HAL_TIM_MspPostInit+0x94>)
 8002fa8:	f000 fb0e 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fac:	bf00      	nop
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40010800 	.word	0x40010800
 8002fc0:	40010c00 	.word	0x40010c00

08002fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_UART_MspInit+0x8c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d131      	bne.n	8003048 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_UART_MspInit+0x90>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_UART_MspInit+0x90>)
 8002fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fee:	6193      	str	r3, [r2, #24]
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_UART_MspInit+0x90>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffc:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_UART_MspInit+0x90>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <HAL_UART_MspInit+0x90>)
 8003002:	f043 0304 	orr.w	r3, r3, #4
 8003006:	6193      	str	r3, [r2, #24]
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_UART_MspInit+0x90>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800301e:	2303      	movs	r3, #3
 8003020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	4619      	mov	r1, r3
 8003028:	480b      	ldr	r0, [pc, #44]	; (8003058 <HAL_UART_MspInit+0x94>)
 800302a:	f000 facd 	bl	80035c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800302e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	4619      	mov	r1, r3
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <HAL_UART_MspInit+0x94>)
 8003044:	f000 fac0 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003048:	bf00      	nop
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40013800 	.word	0x40013800
 8003054:	40021000 	.word	0x40021000
 8003058:	40010800 	.word	0x40010800

0800305c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <NMI_Handler+0x4>

08003062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003066:	e7fe      	b.n	8003066 <HardFault_Handler+0x4>

08003068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800306c:	e7fe      	b.n	800306c <MemManage_Handler+0x4>

0800306e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003072:	e7fe      	b.n	8003072 <BusFault_Handler+0x4>

08003074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <UsageFault_Handler+0x4>

0800307a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a2:	f000 f967 	bl	8003374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <TIM2_IRQHandler+0x10>)
 80030b2:	f002 fb71 	bl	8005798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200002a4 	.word	0x200002a4

080030c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <TIM3_IRQHandler+0x10>)
 80030c6:	f002 fb67 	bl	8005798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200002ec 	.word	0x200002ec

080030d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <TIM4_IRQHandler+0x10>)
 80030da:	f002 fb5d 	bl	8005798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000334 	.word	0x20000334

080030e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80030ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030f0:	f000 fc06 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030f8:	f000 fc02 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80030fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003100:	f000 fbfe 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003104:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003108:	f000 fbfa 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}

08003110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return 1;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <_kill>:

int _kill(int pid, int sig)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003128:	f004 f938 	bl	800739c <__errno>
 800312c:	4603      	mov	r3, r0
 800312e:	2216      	movs	r2, #22
 8003130:	601a      	str	r2, [r3, #0]
  return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <_exit>:

void _exit (int status)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003146:	f04f 31ff 	mov.w	r1, #4294967295
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ffe7 	bl	800311e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003150:	e7fe      	b.n	8003150 <_exit+0x12>

08003152 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e00a      	b.n	800317a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003164:	f3af 8000 	nop.w
 8003168:	4601      	mov	r1, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	60ba      	str	r2, [r7, #8]
 8003170:	b2ca      	uxtb	r2, r1
 8003172:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3301      	adds	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	dbf0      	blt.n	8003164 <_read+0x12>
  }

  return len;
 8003182:	687b      	ldr	r3, [r7, #4]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e009      	b.n	80031b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	60ba      	str	r2, [r7, #8]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	3301      	adds	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	dbf1      	blt.n	800319e <_write+0x12>
  }
  return len;
 80031ba:	687b      	ldr	r3, [r7, #4]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <_close>:

int _close(int file)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ea:	605a      	str	r2, [r3, #4]
  return 0;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <_isatty>:

int _isatty(int file)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003200:	2301      	movs	r3, #1
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <_sbrk+0x5c>)
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <_sbrk+0x60>)
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <_sbrk+0x64>)
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <_sbrk+0x68>)
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d207      	bcs.n	8003264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003254:	f004 f8a2 	bl	800739c <__errno>
 8003258:	4603      	mov	r3, r0
 800325a:	220c      	movs	r2, #12
 800325c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	e009      	b.n	8003278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <_sbrk+0x64>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	4a05      	ldr	r2, [pc, #20]	; (8003288 <_sbrk+0x64>)
 8003274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20005000 	.word	0x20005000
 8003284:	00000400 	.word	0x00000400
 8003288:	20000614 	.word	0x20000614
 800328c:	20000768 	.word	0x20000768

08003290 <SystemInit>:
  * @param  None
  * @retval None
  */
void SystemInit (void)

{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800329c:	f7ff fff8 	bl	8003290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032a0:	480b      	ldr	r0, [pc, #44]	; (80032d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80032a2:	490c      	ldr	r1, [pc, #48]	; (80032d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a8:	e002      	b.n	80032b0 <LoopCopyDataInit>

080032aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ae:	3304      	adds	r3, #4

080032b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b4:	d3f9      	bcc.n	80032aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032b8:	4c09      	ldr	r4, [pc, #36]	; (80032e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032bc:	e001      	b.n	80032c2 <LoopFillZerobss>

080032be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c0:	3204      	adds	r2, #4

080032c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c4:	d3fb      	bcc.n	80032be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032c6:	f004 f86f 	bl	80073a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ca:	f7fe fc75 	bl	8001bb8 <main>
  bx lr
 80032ce:	4770      	bx	lr
  ldr r0, =_sdata
 80032d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80032d8:	080098d4 	.word	0x080098d4
  ldr r2, =_sbss
 80032dc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80032e0:	20000768 	.word	0x20000768

080032e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032e4:	e7fe      	b.n	80032e4 <ADC1_2_IRQHandler>
	...

080032e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_Init+0x28>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_Init+0x28>)
 80032f2:	f043 0310 	orr.w	r3, r3, #16
 80032f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f8:	2003      	movs	r0, #3
 80032fa:	f000 f923 	bl	8003544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fe:	200f      	movs	r0, #15
 8003300:	f000 f808 	bl	8003314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003304:	f7ff fd4a 	bl	8002d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40022000 	.word	0x40022000

08003314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_InitTick+0x54>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_InitTick+0x58>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800332a:	fbb3 f3f1 	udiv	r3, r3, r1
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f93b 	bl	80035ae <HAL_SYSTICK_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e00e      	b.n	8003360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d80a      	bhi.n	800335e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003348:	2200      	movs	r2, #0
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f000 f903 	bl	800355a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003354:	4a06      	ldr	r2, [pc, #24]	; (8003370 <HAL_InitTick+0x5c>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000018 	.word	0x20000018
 800336c:	20000020 	.word	0x20000020
 8003370:	2000001c 	.word	0x2000001c

08003374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_IncTick+0x1c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_IncTick+0x20>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a03      	ldr	r2, [pc, #12]	; (8003394 <HAL_IncTick+0x20>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000020 	.word	0x20000020
 8003394:	20000618 	.word	0x20000618

08003398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTick;
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <HAL_GetTick+0x10>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	20000618 	.word	0x20000618

080033ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_GetPriorityGrouping+0x18>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0307 	and.w	r3, r3, #7
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	2b00      	cmp	r3, #0
 8003420:	db0b      	blt.n	800343a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4906      	ldr	r1, [pc, #24]	; (8003444 <__NVIC_EnableIRQ+0x34>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2001      	movs	r0, #1
 8003432:	fa00 f202 	lsl.w	r2, r0, r2
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	; (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf28      	it	cs
 80034ba:	2304      	movcs	r3, #4
 80034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d902      	bls.n	80034cc <NVIC_EncodePriority+0x30>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3b03      	subs	r3, #3
 80034ca:	e000      	b.n	80034ce <NVIC_EncodePriority+0x32>
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	4313      	orrs	r3, r2
         );
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003510:	d301      	bcc.n	8003516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003512:	2301      	movs	r3, #1
 8003514:	e00f      	b.n	8003536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <SysTick_Config+0x40>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351e:	210f      	movs	r1, #15
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f7ff ff90 	bl	8003448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <SysTick_Config+0x40>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <SysTick_Config+0x40>)
 8003530:	2207      	movs	r2, #7
 8003532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	e000e010 	.word	0xe000e010

08003544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff2d 	bl	80033ac <__NVIC_SetPriorityGrouping>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff42 	bl	80033f4 <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff90 	bl	800349c <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5f 	bl	8003448 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff35 	bl	8003410 <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffa2 	bl	8003500 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b08b      	sub	sp, #44	; 0x2c
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035da:	e169      	b.n	80038b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035dc:	2201      	movs	r2, #1
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	f040 8158 	bne.w	80038aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a9a      	ldr	r2, [pc, #616]	; (8003868 <HAL_GPIO_Init+0x2a0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d05e      	beq.n	80036c2 <HAL_GPIO_Init+0xfa>
 8003604:	4a98      	ldr	r2, [pc, #608]	; (8003868 <HAL_GPIO_Init+0x2a0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d875      	bhi.n	80036f6 <HAL_GPIO_Init+0x12e>
 800360a:	4a98      	ldr	r2, [pc, #608]	; (800386c <HAL_GPIO_Init+0x2a4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d058      	beq.n	80036c2 <HAL_GPIO_Init+0xfa>
 8003610:	4a96      	ldr	r2, [pc, #600]	; (800386c <HAL_GPIO_Init+0x2a4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d86f      	bhi.n	80036f6 <HAL_GPIO_Init+0x12e>
 8003616:	4a96      	ldr	r2, [pc, #600]	; (8003870 <HAL_GPIO_Init+0x2a8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d052      	beq.n	80036c2 <HAL_GPIO_Init+0xfa>
 800361c:	4a94      	ldr	r2, [pc, #592]	; (8003870 <HAL_GPIO_Init+0x2a8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d869      	bhi.n	80036f6 <HAL_GPIO_Init+0x12e>
 8003622:	4a94      	ldr	r2, [pc, #592]	; (8003874 <HAL_GPIO_Init+0x2ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04c      	beq.n	80036c2 <HAL_GPIO_Init+0xfa>
 8003628:	4a92      	ldr	r2, [pc, #584]	; (8003874 <HAL_GPIO_Init+0x2ac>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d863      	bhi.n	80036f6 <HAL_GPIO_Init+0x12e>
 800362e:	4a92      	ldr	r2, [pc, #584]	; (8003878 <HAL_GPIO_Init+0x2b0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d046      	beq.n	80036c2 <HAL_GPIO_Init+0xfa>
 8003634:	4a90      	ldr	r2, [pc, #576]	; (8003878 <HAL_GPIO_Init+0x2b0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d85d      	bhi.n	80036f6 <HAL_GPIO_Init+0x12e>
 800363a:	2b12      	cmp	r3, #18
 800363c:	d82a      	bhi.n	8003694 <HAL_GPIO_Init+0xcc>
 800363e:	2b12      	cmp	r3, #18
 8003640:	d859      	bhi.n	80036f6 <HAL_GPIO_Init+0x12e>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_GPIO_Init+0x80>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	080036c3 	.word	0x080036c3
 800364c:	0800369d 	.word	0x0800369d
 8003650:	080036af 	.word	0x080036af
 8003654:	080036f1 	.word	0x080036f1
 8003658:	080036f7 	.word	0x080036f7
 800365c:	080036f7 	.word	0x080036f7
 8003660:	080036f7 	.word	0x080036f7
 8003664:	080036f7 	.word	0x080036f7
 8003668:	080036f7 	.word	0x080036f7
 800366c:	080036f7 	.word	0x080036f7
 8003670:	080036f7 	.word	0x080036f7
 8003674:	080036f7 	.word	0x080036f7
 8003678:	080036f7 	.word	0x080036f7
 800367c:	080036f7 	.word	0x080036f7
 8003680:	080036f7 	.word	0x080036f7
 8003684:	080036f7 	.word	0x080036f7
 8003688:	080036f7 	.word	0x080036f7
 800368c:	080036a5 	.word	0x080036a5
 8003690:	080036b9 	.word	0x080036b9
 8003694:	4a79      	ldr	r2, [pc, #484]	; (800387c <HAL_GPIO_Init+0x2b4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800369a:	e02c      	b.n	80036f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	623b      	str	r3, [r7, #32]
          break;
 80036a2:	e029      	b.n	80036f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	3304      	adds	r3, #4
 80036aa:	623b      	str	r3, [r7, #32]
          break;
 80036ac:	e024      	b.n	80036f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	3308      	adds	r3, #8
 80036b4:	623b      	str	r3, [r7, #32]
          break;
 80036b6:	e01f      	b.n	80036f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	330c      	adds	r3, #12
 80036be:	623b      	str	r3, [r7, #32]
          break;
 80036c0:	e01a      	b.n	80036f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036ca:	2304      	movs	r3, #4
 80036cc:	623b      	str	r3, [r7, #32]
          break;
 80036ce:	e013      	b.n	80036f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036d8:	2308      	movs	r3, #8
 80036da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	611a      	str	r2, [r3, #16]
          break;
 80036e2:	e009      	b.n	80036f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036e4:	2308      	movs	r3, #8
 80036e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	615a      	str	r2, [r3, #20]
          break;
 80036ee:	e003      	b.n	80036f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036f0:	2300      	movs	r3, #0
 80036f2:	623b      	str	r3, [r7, #32]
          break;
 80036f4:	e000      	b.n	80036f8 <HAL_GPIO_Init+0x130>
          break;
 80036f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2bff      	cmp	r3, #255	; 0xff
 80036fc:	d801      	bhi.n	8003702 <HAL_GPIO_Init+0x13a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	e001      	b.n	8003706 <HAL_GPIO_Init+0x13e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	d802      	bhi.n	8003714 <HAL_GPIO_Init+0x14c>
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	e002      	b.n	800371a <HAL_GPIO_Init+0x152>
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	3b08      	subs	r3, #8
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	210f      	movs	r1, #15
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	401a      	ands	r2, r3
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	431a      	orrs	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80b1 	beq.w	80038aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003748:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_GPIO_Init+0x2b8>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4a4c      	ldr	r2, [pc, #304]	; (8003880 <HAL_GPIO_Init+0x2b8>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6193      	str	r3, [r2, #24]
 8003754:	4b4a      	ldr	r3, [pc, #296]	; (8003880 <HAL_GPIO_Init+0x2b8>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003760:	4a48      	ldr	r2, [pc, #288]	; (8003884 <HAL_GPIO_Init+0x2bc>)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a40      	ldr	r2, [pc, #256]	; (8003888 <HAL_GPIO_Init+0x2c0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <HAL_GPIO_Init+0x1ec>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3f      	ldr	r2, [pc, #252]	; (800388c <HAL_GPIO_Init+0x2c4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00d      	beq.n	80037b0 <HAL_GPIO_Init+0x1e8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3e      	ldr	r2, [pc, #248]	; (8003890 <HAL_GPIO_Init+0x2c8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d007      	beq.n	80037ac <HAL_GPIO_Init+0x1e4>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3d      	ldr	r2, [pc, #244]	; (8003894 <HAL_GPIO_Init+0x2cc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_GPIO_Init+0x1e0>
 80037a4:	2303      	movs	r3, #3
 80037a6:	e006      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037a8:	2304      	movs	r3, #4
 80037aa:	e004      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e002      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037b4:	2300      	movs	r3, #0
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	f002 0203 	and.w	r2, r2, #3
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	4093      	lsls	r3, r2
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037c6:	492f      	ldr	r1, [pc, #188]	; (8003884 <HAL_GPIO_Init+0x2bc>)
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	492c      	ldr	r1, [pc, #176]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037ee:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	4928      	ldr	r1, [pc, #160]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	4922      	ldr	r1, [pc, #136]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	60cb      	str	r3, [r1, #12]
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	43db      	mvns	r3, r3
 800381e:	491e      	ldr	r1, [pc, #120]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 8003820:	4013      	ands	r3, r2
 8003822:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4918      	ldr	r1, [pc, #96]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	e006      	b.n	800384c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	4914      	ldr	r1, [pc, #80]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 8003848:	4013      	ands	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d021      	beq.n	800389c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	490e      	ldr	r1, [pc, #56]	; (8003898 <HAL_GPIO_Init+0x2d0>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]
 8003864:	e021      	b.n	80038aa <HAL_GPIO_Init+0x2e2>
 8003866:	bf00      	nop
 8003868:	10320000 	.word	0x10320000
 800386c:	10310000 	.word	0x10310000
 8003870:	10220000 	.word	0x10220000
 8003874:	10210000 	.word	0x10210000
 8003878:	10120000 	.word	0x10120000
 800387c:	10110000 	.word	0x10110000
 8003880:	40021000 	.word	0x40021000
 8003884:	40010000 	.word	0x40010000
 8003888:	40010800 	.word	0x40010800
 800388c:	40010c00 	.word	0x40010c00
 8003890:	40011000 	.word	0x40011000
 8003894:	40011400 	.word	0x40011400
 8003898:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_GPIO_Init+0x304>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	4909      	ldr	r1, [pc, #36]	; (80038cc <HAL_GPIO_Init+0x304>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	3301      	adds	r3, #1
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f47f ae8e 	bne.w	80035dc <HAL_GPIO_Init+0x14>
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	372c      	adds	r7, #44	; 0x2c
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40010400 	.word	0x40010400

080038d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
 80038dc:	4613      	mov	r3, r2
 80038de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e0:	787b      	ldrb	r3, [r7, #1]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ec:	e003      	b.n	80038f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ee:	887b      	ldrh	r3, [r7, #2]
 80038f0:	041a      	lsls	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003916:	4a05      	ldr	r2, [pc, #20]	; (800392c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f9c4 	bl	8002cac <HAL_GPIO_EXTI_Callback>
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40010400 	.word	0x40010400

08003930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e12b      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fa52 	bl	8002e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003994:	f001 fd1e 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8003998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a81      	ldr	r2, [pc, #516]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d807      	bhi.n	80039b4 <HAL_I2C_Init+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a80      	ldr	r2, [pc, #512]	; (8003ba8 <HAL_I2C_Init+0x278>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e006      	b.n	80039c2 <HAL_I2C_Init+0x92>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a7d      	ldr	r2, [pc, #500]	; (8003bac <HAL_I2C_Init+0x27c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0e7      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a78      	ldr	r2, [pc, #480]	; (8003bb0 <HAL_I2C_Init+0x280>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0c9b      	lsrs	r3, r3, #18
 80039d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d802      	bhi.n	8003a04 <HAL_I2C_Init+0xd4>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3301      	adds	r3, #1
 8003a02:	e009      	b.n	8003a18 <HAL_I2C_Init+0xe8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_I2C_Init+0x284>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	3301      	adds	r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	495c      	ldr	r1, [pc, #368]	; (8003ba4 <HAL_I2C_Init+0x274>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d819      	bhi.n	8003a6c <HAL_I2C_Init+0x13c>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e59      	subs	r1, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a46:	1c59      	adds	r1, r3, #1
 8003a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_I2C_Init+0x138>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e59      	subs	r1, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	e051      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e04f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d111      	bne.n	8003a98 <HAL_I2C_Init+0x168>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Init+0x18e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x196>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e022      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10e      	bne.n	8003aec <HAL_I2C_Init+0x1bc>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e58      	subs	r0, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	440b      	add	r3, r1
 8003adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	e00f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	0099      	lsls	r1, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	6809      	ldr	r1, [r1, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6911      	ldr	r1, [r2, #16]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	4311      	orrs	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	000186a0 	.word	0x000186a0
 8003ba8:	001e847f 	.word	0x001e847f
 8003bac:	003d08ff 	.word	0x003d08ff
 8003bb0:	431bde83 	.word	0x431bde83
 8003bb4:	10624dd3 	.word	0x10624dd3

08003bb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	817b      	strh	r3, [r7, #10]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	813b      	strh	r3, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd2:	f7ff fbe1 	bl	8003398 <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	f040 80d9 	bne.w	8003d98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2319      	movs	r3, #25
 8003bec:	2201      	movs	r2, #1
 8003bee:	496d      	ldr	r1, [pc, #436]	; (8003da4 <HAL_I2C_Mem_Write+0x1ec>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fdef 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0cc      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Mem_Write+0x56>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0c5      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d007      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2221      	movs	r2, #33	; 0x21
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_I2C_Mem_Write+0x1f0>)
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c76:	88f8      	ldrh	r0, [r7, #6]
 8003c78:	893a      	ldrh	r2, [r7, #8]
 8003c7a:	8979      	ldrh	r1, [r7, #10]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	4603      	mov	r3, r0
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fc26 	bl	80044d8 <I2C_RequestMemoryWrite>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d052      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e081      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 feb4 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d107      	bne.n	8003cbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06b      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d11b      	bne.n	8003d38 <HAL_I2C_Mem_Write+0x180>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1aa      	bne.n	8003c96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fea7 	bl	8004a98 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e016      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	00100002 	.word	0x00100002
 8003da8:	ffff0000 	.word	0xffff0000

08003dac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	813b      	strh	r3, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dca:	f7ff fae5 	bl	8003398 <HAL_GetTick>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	f040 8244 	bne.w	8004266 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2319      	movs	r3, #25
 8003de4:	2201      	movs	r2, #1
 8003de6:	4982      	ldr	r1, [pc, #520]	; (8003ff0 <HAL_I2C_Mem_Read+0x244>)
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fcf3 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	e237      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Mem_Read+0x5a>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e230      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d007      	beq.n	8003e2c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2222      	movs	r2, #34	; 0x22
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a62      	ldr	r2, [pc, #392]	; (8003ff4 <HAL_I2C_Mem_Read+0x248>)
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6e:	88f8      	ldrh	r0, [r7, #6]
 8003e70:	893a      	ldrh	r2, [r7, #8]
 8003e72:	8979      	ldrh	r1, [r7, #10]
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fbc0 	bl	8004604 <I2C_RequestMemoryRead>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1ec      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d113      	bne.n	8003ebe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e1c0      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d11e      	bne.n	8003f04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed6:	b672      	cpsid	i
}
 8003ed8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f00:	b662      	cpsie	i
}
 8003f02:	e035      	b.n	8003f70 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d11e      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f1c:	b672      	cpsid	i
}
 8003f1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f46:	b662      	cpsie	i
}
 8003f48:	e012      	b.n	8003f70 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f70:	e166      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	f200 811f 	bhi.w	80041ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d123      	bne.n	8003fcc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fdcd 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e167      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fca:	e139      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d152      	bne.n	800407a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4906      	ldr	r1, [pc, #24]	; (8003ff8 <HAL_I2C_Mem_Read+0x24c>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fbf8 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e13c      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
 8003fee:	bf00      	nop
 8003ff0:	00100002 	.word	0x00100002
 8003ff4:	ffff0000 	.word	0xffff0000
 8003ff8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ffc:	b672      	cpsid	i
}
 8003ffe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004042:	b662      	cpsie	i
}
 8004044:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004078:	e0e2      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2200      	movs	r2, #0
 8004082:	497b      	ldr	r1, [pc, #492]	; (8004270 <HAL_I2C_Mem_Read+0x4c4>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fba5 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0e9      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040a4:	b672      	cpsid	i
}
 80040a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040da:	4b66      	ldr	r3, [pc, #408]	; (8004274 <HAL_I2C_Mem_Read+0x4c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	08db      	lsrs	r3, r3, #3
 80040e0:	4a65      	ldr	r2, [pc, #404]	; (8004278 <HAL_I2C_Mem_Read+0x4cc>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0a1a      	lsrs	r2, r3, #8
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	00da      	lsls	r2, r3, #3
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d118      	bne.n	8004132 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004122:	b662      	cpsie	i
}
 8004124:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e09a      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b04      	cmp	r3, #4
 800413e:	d1d9      	bne.n	80040f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004182:	b662      	cpsie	i
}
 8004184:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041b8:	e042      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fcb2 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e04c      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b04      	cmp	r3, #4
 800420c:	d118      	bne.n	8004240 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f ae94 	bne.w	8003f72 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3728      	adds	r7, #40	; 0x28
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	00010004 	.word	0x00010004
 8004274:	20000018 	.word	0x20000018
 8004278:	14f8b589 	.word	0x14f8b589

0800427c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	460b      	mov	r3, r1
 800428a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800428c:	f7ff f884 	bl	8003398 <HAL_GetTick>
 8004290:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	f040 8111 	bne.w	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2319      	movs	r3, #25
 80042aa:	2201      	movs	r2, #1
 80042ac:	4988      	ldr	r1, [pc, #544]	; (80044d0 <HAL_I2C_IsDeviceReady+0x254>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fa90 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
 80042bc:	e104      	b.n	80044c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_I2C_IsDeviceReady+0x50>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0fd      	b.n	80044c8 <HAL_I2C_IsDeviceReady+0x24c>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d007      	beq.n	80042f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2224      	movs	r2, #36	; 0x24
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_I2C_IsDeviceReady+0x258>)
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004324:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fa4e 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434c:	d103      	bne.n	8004356 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0b6      	b.n	80044c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004368:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800436a:	f7ff f815 	bl	8003398 <HAL_GetTick>
 800436e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800439e:	e025      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043a0:	f7fe fffa 	bl	8003398 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <HAL_I2C_IsDeviceReady+0x13a>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	22a0      	movs	r2, #160	; 0xa0
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2ba0      	cmp	r3, #160	; 0xa0
 80043f6:	d005      	beq.n	8004404 <HAL_I2C_IsDeviceReady+0x188>
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_I2C_IsDeviceReady+0x188>
 80043fe:	7dbb      	ldrb	r3, [r7, #22]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0cd      	beq.n	80043a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d129      	bne.n	800446e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004428:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2319      	movs	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	4921      	ldr	r1, [pc, #132]	; (80044d0 <HAL_I2C_IsDeviceReady+0x254>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f9c2 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e036      	b.n	80044c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e02c      	b.n	80044c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004486:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2319      	movs	r3, #25
 800448e:	2201      	movs	r2, #1
 8004490:	490f      	ldr	r1, [pc, #60]	; (80044d0 <HAL_I2C_IsDeviceReady+0x254>)
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f99e 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e012      	b.n	80044c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3301      	adds	r3, #1
 80044a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	f4ff af32 	bcc.w	8004316 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
  }
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	00100002 	.word	0x00100002
 80044d4:	ffff0000 	.word	0xffff0000

080044d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004500:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2200      	movs	r2, #0
 800450a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f960 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004528:	d103      	bne.n	8004532 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e05f      	b.n	80045f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004536:	897b      	ldrh	r3, [r7, #10]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004544:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	492d      	ldr	r1, [pc, #180]	; (8004600 <I2C_RequestMemoryWrite+0x128>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f9bb 	bl	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e04c      	b.n	80045f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	6a39      	ldr	r1, [r7, #32]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fa46 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b04      	cmp	r3, #4
 8004588:	d107      	bne.n	800459a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004598:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e02b      	b.n	80045f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]
 80045ae:	e021      	b.n	80045f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045b0:	893b      	ldrh	r3, [r7, #8]
 80045b2:	0a1b      	lsrs	r3, r3, #8
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa20 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d107      	bne.n	80045e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e005      	b.n	80045f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ea:	893b      	ldrh	r3, [r7, #8]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	00010002 	.word	0x00010002

08004604 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	4608      	mov	r0, r1
 800460e:	4611      	mov	r1, r2
 8004610:	461a      	mov	r2, r3
 8004612:	4603      	mov	r3, r0
 8004614:	817b      	strh	r3, [r7, #10]
 8004616:	460b      	mov	r3, r1
 8004618:	813b      	strh	r3, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800462c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	2200      	movs	r2, #0
 8004646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f8c2 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004664:	d103      	bne.n	800466e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0aa      	b.n	80047c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004672:	897b      	ldrh	r3, [r7, #10]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	4952      	ldr	r1, [pc, #328]	; (80047d0 <I2C_RequestMemoryRead+0x1cc>)
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f91d 	bl	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e097      	b.n	80047c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	6a39      	ldr	r1, [r7, #32]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f9a8 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d107      	bne.n	80046d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e076      	b.n	80047c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e0:	893b      	ldrh	r3, [r7, #8]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	611a      	str	r2, [r3, #16]
 80046ea:	e021      	b.n	8004730 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046ec:	893b      	ldrh	r3, [r7, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fc:	6a39      	ldr	r1, [r7, #32]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f982 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2b04      	cmp	r3, #4
 8004710:	d107      	bne.n	8004722 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e050      	b.n	80047c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004726:	893b      	ldrh	r3, [r7, #8]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004732:	6a39      	ldr	r1, [r7, #32]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f967 	bl	8004a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	2b04      	cmp	r3, #4
 8004746:	d107      	bne.n	8004758 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004756:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e035      	b.n	80047c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800476a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2200      	movs	r2, #0
 8004774:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f82b 	bl	80047d4 <I2C_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	d103      	bne.n	800479c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e013      	b.n	80047c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047a0:	897b      	ldrh	r3, [r7, #10]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	6a3a      	ldr	r2, [r7, #32]
 80047b4:	4906      	ldr	r1, [pc, #24]	; (80047d0 <I2C_RequestMemoryRead+0x1cc>)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f886 	bl	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	00010002 	.word	0x00010002

080047d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */

	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e4:	e048      	b.n	8004878 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d044      	beq.n	8004878 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ee:	f7fe fdd3 	bl	8003398 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d139      	bne.n	8004878 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d10d      	bne.n	800482a <I2C_WaitOnFlagUntilTimeout+0x56>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	43da      	mvns	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	e00c      	b.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x70>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	43da      	mvns	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	429a      	cmp	r2, r3
 8004848:	d116      	bne.n	8004878 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e023      	b.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0xec>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10d      	bne.n	800489e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	e00c      	b.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	43da      	mvns	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d093      	beq.n	80047e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d6:	e071      	b.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e6:	d123      	bne.n	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f043 0204 	orr.w	r2, r3, #4
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e067      	b.n	8004a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d041      	beq.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fe fd2e 	bl	8003398 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d136      	bne.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d10c      	bne.n	8004972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	43da      	mvns	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	e00b      	b.n	800498a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	43da      	mvns	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e021      	b.n	8004a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10c      	bne.n	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	43da      	mvns	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e00b      	b.n	80049f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	43da      	mvns	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f47f af6d 	bne.w	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a14:	e034      	b.n	8004a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8e3 	bl	8004be2 <I2C_IsAcknowledgeFailed>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e034      	b.n	8004a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d028      	beq.n	8004a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fe fcb3 	bl	8003398 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d11d      	bne.n	8004a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d016      	beq.n	8004a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e007      	b.n	8004a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d1c3      	bne.n	8004a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa4:	e034      	b.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f89b 	bl	8004be2 <I2C_IsAcknowledgeFailed>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e034      	b.n	8004b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d028      	beq.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fe fc6b 	bl	8003398 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d11d      	bne.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d016      	beq.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e007      	b.n	8004b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d1c3      	bne.n	8004aa6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b34:	e049      	b.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d119      	bne.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e030      	b.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fe fc0e 	bl	8003398 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11d      	bne.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d016      	beq.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d1ae      	bne.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf8:	d11b      	bne.n	8004c32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e272      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8087 	beq.w	8004d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c60:	4b92      	ldr	r3, [pc, #584]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d00c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c6c:	4b8f      	ldr	r3, [pc, #572]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d112      	bne.n	8004c9e <HAL_RCC_OscConfig+0x5e>
 8004c78:	4b8c      	ldr	r3, [pc, #560]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d10b      	bne.n	8004c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c86:	4b89      	ldr	r3, [pc, #548]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d06c      	beq.n	8004d6c <HAL_RCC_OscConfig+0x12c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d168      	bne.n	8004d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e24c      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x76>
 8004ca8:	4b80      	ldr	r3, [pc, #512]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a7f      	ldr	r2, [pc, #508]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	e02e      	b.n	8004d14 <HAL_RCC_OscConfig+0xd4>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x98>
 8004cbe:	4b7b      	ldr	r3, [pc, #492]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a7a      	ldr	r2, [pc, #488]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b78      	ldr	r3, [pc, #480]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a77      	ldr	r2, [pc, #476]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e01d      	b.n	8004d14 <HAL_RCC_OscConfig+0xd4>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0xbc>
 8004ce2:	4b72      	ldr	r3, [pc, #456]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a71      	ldr	r2, [pc, #452]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b6f      	ldr	r3, [pc, #444]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6e      	ldr	r2, [pc, #440]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0xd4>
 8004cfc:	4b6b      	ldr	r3, [pc, #428]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a6a      	ldr	r2, [pc, #424]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b68      	ldr	r3, [pc, #416]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a67      	ldr	r2, [pc, #412]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fb3c 	bl	8003398 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fe fb38 	bl	8003398 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e200      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b5d      	ldr	r3, [pc, #372]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0xe4>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe fb28 	bl	8003398 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fb24 	bl	8003398 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e1ec      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	4b53      	ldr	r3, [pc, #332]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x10c>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d063      	beq.n	8004e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d7a:	4b4c      	ldr	r3, [pc, #304]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d86:	4b49      	ldr	r3, [pc, #292]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d11c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x18c>
 8004d92:	4b46      	ldr	r3, [pc, #280]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d116      	bne.n	8004dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	4b43      	ldr	r3, [pc, #268]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_RCC_OscConfig+0x176>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1c0      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db6:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4939      	ldr	r1, [pc, #228]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dca:	e03a      	b.n	8004e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd4:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fe fadd 	bl	8003398 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fe fad9 	bl	8003398 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e1a1      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4927      	ldr	r1, [pc, #156]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fabc 	bl	8003398 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fe fab8 	bl	8003398 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e180      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d03a      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d019      	beq.n	8004e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_RCC_OscConfig+0x274>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5c:	f7fe fa9c 	bl	8003398 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e64:	f7fe fa98 	bl	8003398 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e160      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <HAL_RCC_OscConfig+0x26c>)
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e82:	2001      	movs	r0, #1
 8004e84:	f000 face 	bl	8005424 <RCC_Delay>
 8004e88:	e01c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e90:	f7fe fa82 	bl	8003398 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e96:	e00f      	b.n	8004eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e98:	f7fe fa7e 	bl	8003398 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d908      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e146      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	42420000 	.word	0x42420000
 8004eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	4b92      	ldr	r3, [pc, #584]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e9      	bne.n	8004e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80a6 	beq.w	800501e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed6:	4b8b      	ldr	r3, [pc, #556]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10d      	bne.n	8004efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee2:	4b88      	ldr	r3, [pc, #544]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4a87      	ldr	r2, [pc, #540]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eec:	61d3      	str	r3, [r2, #28]
 8004eee:	4b85      	ldr	r3, [pc, #532]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efe:	4b82      	ldr	r3, [pc, #520]	; (8005108 <HAL_RCC_OscConfig+0x4c8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d118      	bne.n	8004f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f0a:	4b7f      	ldr	r3, [pc, #508]	; (8005108 <HAL_RCC_OscConfig+0x4c8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a7e      	ldr	r2, [pc, #504]	; (8005108 <HAL_RCC_OscConfig+0x4c8>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f16:	f7fe fa3f 	bl	8003398 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1e:	f7fe fa3b 	bl	8003398 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b64      	cmp	r3, #100	; 0x64
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e103      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	4b75      	ldr	r3, [pc, #468]	; (8005108 <HAL_RCC_OscConfig+0x4c8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d106      	bne.n	8004f52 <HAL_RCC_OscConfig+0x312>
 8004f44:	4b6f      	ldr	r3, [pc, #444]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	4a6e      	ldr	r2, [pc, #440]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	6213      	str	r3, [r2, #32]
 8004f50:	e02d      	b.n	8004fae <HAL_RCC_OscConfig+0x36e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x334>
 8004f5a:	4b6a      	ldr	r3, [pc, #424]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	4a69      	ldr	r2, [pc, #420]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	6213      	str	r3, [r2, #32]
 8004f66:	4b67      	ldr	r3, [pc, #412]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	4a66      	ldr	r2, [pc, #408]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f6c:	f023 0304 	bic.w	r3, r3, #4
 8004f70:	6213      	str	r3, [r2, #32]
 8004f72:	e01c      	b.n	8004fae <HAL_RCC_OscConfig+0x36e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	d10c      	bne.n	8004f96 <HAL_RCC_OscConfig+0x356>
 8004f7c:	4b61      	ldr	r3, [pc, #388]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4a60      	ldr	r2, [pc, #384]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	f043 0304 	orr.w	r3, r3, #4
 8004f86:	6213      	str	r3, [r2, #32]
 8004f88:	4b5e      	ldr	r3, [pc, #376]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a5d      	ldr	r2, [pc, #372]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6213      	str	r3, [r2, #32]
 8004f94:	e00b      	b.n	8004fae <HAL_RCC_OscConfig+0x36e>
 8004f96:	4b5b      	ldr	r3, [pc, #364]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4a5a      	ldr	r2, [pc, #360]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	6213      	str	r3, [r2, #32]
 8004fa2:	4b58      	ldr	r3, [pc, #352]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4a57      	ldr	r2, [pc, #348]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004fa8:	f023 0304 	bic.w	r3, r3, #4
 8004fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d015      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb6:	f7fe f9ef 	bl	8003398 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fe f9eb 	bl	8003398 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e0b1      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ee      	beq.n	8004fbe <HAL_RCC_OscConfig+0x37e>
 8004fe0:	e014      	b.n	800500c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe2:	f7fe f9d9 	bl	8003398 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe8:	e00a      	b.n	8005000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fe f9d5 	bl	8003398 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e09b      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005000:	4b40      	ldr	r3, [pc, #256]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ee      	bne.n	8004fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800500c:	7dfb      	ldrb	r3, [r7, #23]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d105      	bne.n	800501e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005012:	4b3c      	ldr	r3, [pc, #240]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	4a3b      	ldr	r2, [pc, #236]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8005018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8087 	beq.w	8005136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005028:	4b36      	ldr	r3, [pc, #216]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b08      	cmp	r3, #8
 8005032:	d061      	beq.n	80050f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d146      	bne.n	80050ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503c:	4b33      	ldr	r3, [pc, #204]	; (800510c <HAL_RCC_OscConfig+0x4cc>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005042:	f7fe f9a9 	bl	8003398 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504a:	f7fe f9a5 	bl	8003398 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e06d      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800505c:	4b29      	ldr	r3, [pc, #164]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f0      	bne.n	800504a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d108      	bne.n	8005084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	4921      	ldr	r1, [pc, #132]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a19      	ldr	r1, [r3, #32]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	430b      	orrs	r3, r1
 8005096:	491b      	ldr	r1, [pc, #108]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <HAL_RCC_OscConfig+0x4cc>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a2:	f7fe f979 	bl	8003398 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050aa:	f7fe f975 	bl	8003398 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e03d      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x46a>
 80050c8:	e035      	b.n	8005136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fe f962 	bl	8003398 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fe f95e 	bl	8003398 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e026      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x498>
 80050f6:	e01e      	b.n	8005136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e019      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
 8005104:	40021000 	.word	0x40021000
 8005108:	40007000 	.word	0x40007000
 800510c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_OscConfig+0x500>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	429a      	cmp	r2, r3
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d001      	beq.n	8005136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000

08005144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0d0      	b.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005158:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d910      	bls.n	8005188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b67      	ldr	r3, [pc, #412]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 0207 	bic.w	r2, r3, #7
 800516e:	4965      	ldr	r1, [pc, #404]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b63      	ldr	r3, [pc, #396]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b8      	b.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a0:	4b59      	ldr	r3, [pc, #356]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a58      	ldr	r2, [pc, #352]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b8:	4b53      	ldr	r3, [pc, #332]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a52      	ldr	r2, [pc, #328]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80051be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c4:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	494d      	ldr	r1, [pc, #308]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d040      	beq.n	8005264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d115      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e07f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b41      	ldr	r3, [pc, #260]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e073      	b.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005212:	4b3d      	ldr	r3, [pc, #244]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e06b      	b.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b39      	ldr	r3, [pc, #228]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4936      	ldr	r1, [pc, #216]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005234:	f7fe f8b0 	bl	8003398 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fe f8ac 	bl	8003398 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e053      	b.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b27      	ldr	r3, [pc, #156]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d210      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 0207 	bic.w	r2, r3, #7
 800527a:	4922      	ldr	r1, [pc, #136]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e032      	b.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4916      	ldr	r1, [pc, #88]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	490e      	ldr	r1, [pc, #56]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052d2:	f000 f821 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	490a      	ldr	r1, [pc, #40]	; (800530c <HAL_RCC_ClockConfig+0x1c8>)
 80052e4:	5ccb      	ldrb	r3, [r1, r3]
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	4a09      	ldr	r2, [pc, #36]	; (8005310 <HAL_RCC_ClockConfig+0x1cc>)
 80052ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <HAL_RCC_ClockConfig+0x1d0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe f80e 	bl	8003314 <HAL_InitTick>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40022000 	.word	0x40022000
 8005308:	40021000 	.word	0x40021000
 800530c:	08009534 	.word	0x08009534
 8005310:	20000018 	.word	0x20000018
 8005314:	2000001c 	.word	0x2000001c

08005318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	2300      	movs	r3, #0
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005332:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 030c 	and.w	r3, r3, #12
 800533e:	2b04      	cmp	r3, #4
 8005340:	d002      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0x30>
 8005342:	2b08      	cmp	r3, #8
 8005344:	d003      	beq.n	800534e <HAL_RCC_GetSysClockFreq+0x36>
 8005346:	e027      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800534a:	613b      	str	r3, [r7, #16]
      break;
 800534c:	e027      	b.n	800539e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	0c9b      	lsrs	r3, r3, #18
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005358:	5cd3      	ldrb	r3, [r2, r3]
 800535a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	0c5b      	lsrs	r3, r3, #17
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005372:	5cd3      	ldrb	r3, [r2, r3]
 8005374:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800537a:	fb03 f202 	mul.w	r2, r3, r2
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e004      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a0c      	ldr	r2, [pc, #48]	; (80053bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800538c:	fb02 f303 	mul.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	613b      	str	r3, [r7, #16]
      break;
 8005396:	e002      	b.n	800539e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800539a:	613b      	str	r3, [r7, #16]
      break;
 800539c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800539e:	693b      	ldr	r3, [r7, #16]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000
 80053b0:	007a1200 	.word	0x007a1200
 80053b4:	0800954c 	.word	0x0800954c
 80053b8:	0800955c 	.word	0x0800955c
 80053bc:	003d0900 	.word	0x003d0900

080053c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c4:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	20000018 	.word	0x20000018

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053d8:	f7ff fff2 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4903      	ldr	r1, [pc, #12]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000
 80053f8:	08009544 	.word	0x08009544

080053fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005400:	f7ff ffde 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	0adb      	lsrs	r3, r3, #11
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40021000 	.word	0x40021000
 8005420:	08009544 	.word	0x08009544

08005424 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <RCC_Delay+0x34>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <RCC_Delay+0x38>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	0a5b      	lsrs	r3, r3, #9
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005440:	bf00      	nop
  }
  while (Delay --);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1e5a      	subs	r2, r3, #1
 8005446:	60fa      	str	r2, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f9      	bne.n	8005440 <RCC_Delay+0x1c>
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	20000018 	.word	0x20000018
 800545c:	10624dd3 	.word	0x10624dd3

08005460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e041      	b.n	80054f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fd fcf8 	bl	8002e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f000 fc30 	bl	8005d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e03a      	b.n	800558e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_TIM_Base_Start_IT+0x98>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x58>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005542:	d009      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x58>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a14      	ldr	r2, [pc, #80]	; (800559c <HAL_TIM_Base_Start_IT+0x9c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x58>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a13      	ldr	r2, [pc, #76]	; (80055a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d111      	bne.n	800557c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b06      	cmp	r3, #6
 8005568:	d010      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557a:	e007      	b.n	800558c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800

080055a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e041      	b.n	800563a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f839 	bl	8005642 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f000 fb8e 	bl	8005d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_TIM_PWM_Start+0x24>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	e022      	b.n	80056be <HAL_TIM_PWM_Start+0x6a>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b04      	cmp	r3, #4
 800567c:	d109      	bne.n	8005692 <HAL_TIM_PWM_Start+0x3e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	e015      	b.n	80056be <HAL_TIM_PWM_Start+0x6a>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d109      	bne.n	80056ac <HAL_TIM_PWM_Start+0x58>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e008      	b.n	80056be <HAL_TIM_PWM_Start+0x6a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	bf14      	ite	ne
 80056b8:	2301      	movne	r3, #1
 80056ba:	2300      	moveq	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e05e      	b.n	8005784 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x82>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d4:	e013      	b.n	80056fe <HAL_TIM_PWM_Start+0xaa>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_PWM_Start+0x92>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e4:	e00b      	b.n	80056fe <HAL_TIM_PWM_Start+0xaa>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Start+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	e003      	b.n	80056fe <HAL_TIM_PWM_Start+0xaa>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2201      	movs	r2, #1
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fd7c 	bl	8006204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1e      	ldr	r2, [pc, #120]	; (800578c <HAL_TIM_PWM_Start+0x138>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d107      	bne.n	8005726 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005724:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIM_PWM_Start+0x138>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_TIM_PWM_Start+0xfa>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d009      	beq.n	800574e <HAL_TIM_PWM_Start+0xfa>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_TIM_PWM_Start+0x13c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIM_PWM_Start+0xfa>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a12      	ldr	r2, [pc, #72]	; (8005794 <HAL_TIM_PWM_Start+0x140>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d111      	bne.n	8005772 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b06      	cmp	r3, #6
 800575e:	d010      	beq.n	8005782 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005770:	e007      	b.n	8005782 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800

08005798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0202 	mvn.w	r2, #2
 80057c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa76 	bl	8005ccc <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fa69 	bl	8005cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa78 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d122      	bne.n	8005848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d11b      	bne.n	8005848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0204 	mvn.w	r2, #4
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa4c 	bl	8005ccc <HAL_TIM_IC_CaptureCallback>
 8005834:	e005      	b.n	8005842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa3f 	bl	8005cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa4e 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b08      	cmp	r3, #8
 8005854:	d122      	bne.n	800589c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b08      	cmp	r3, #8
 8005862:	d11b      	bne.n	800589c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0208 	mvn.w	r2, #8
 800586c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2204      	movs	r2, #4
 8005872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fa22 	bl	8005ccc <HAL_TIM_IC_CaptureCallback>
 8005888:	e005      	b.n	8005896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa15 	bl	8005cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa24 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d122      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d11b      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0210 	mvn.w	r2, #16
 80058c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2208      	movs	r2, #8
 80058c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9f8 	bl	8005ccc <HAL_TIM_IC_CaptureCallback>
 80058dc:	e005      	b.n	80058ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9eb 	bl	8005cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f9fa 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10e      	bne.n	800591c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d107      	bne.n	800591c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0201 	mvn.w	r2, #1
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc ffbe 	bl	8002898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b80      	cmp	r3, #128	; 0x80
 8005928:	d10e      	bne.n	8005948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d107      	bne.n	8005948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fce9 	bl	800631a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	d10e      	bne.n	8005974 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d107      	bne.n	8005974 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800596c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f9be 	bl	8005cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b20      	cmp	r3, #32
 8005980:	d10e      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b20      	cmp	r3, #32
 800598e:	d107      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0220 	mvn.w	r2, #32
 8005998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fcb4 	bl	8006308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ae      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	f200 809f 	bhi.w	8005b14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a11 	.word	0x08005a11
 80059e0:	08005b15 	.word	0x08005b15
 80059e4:	08005b15 	.word	0x08005b15
 80059e8:	08005b15 	.word	0x08005b15
 80059ec:	08005a51 	.word	0x08005a51
 80059f0:	08005b15 	.word	0x08005b15
 80059f4:	08005b15 	.word	0x08005b15
 80059f8:	08005b15 	.word	0x08005b15
 80059fc:	08005a93 	.word	0x08005a93
 8005a00:	08005b15 	.word	0x08005b15
 8005a04:	08005b15 	.word	0x08005b15
 8005a08:	08005b15 	.word	0x08005b15
 8005a0c:	08005ad3 	.word	0x08005ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f9d6 	bl	8005dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0208 	orr.w	r2, r2, #8
 8005a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0204 	bic.w	r2, r2, #4
 8005a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6999      	ldr	r1, [r3, #24]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	619a      	str	r2, [r3, #24]
      break;
 8005a4e:	e064      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fa1c 	bl	8005e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6999      	ldr	r1, [r3, #24]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	021a      	lsls	r2, r3, #8
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	619a      	str	r2, [r3, #24]
      break;
 8005a90:	e043      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fa65 	bl	8005f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0208 	orr.w	r2, r2, #8
 8005aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0204 	bic.w	r2, r2, #4
 8005abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69d9      	ldr	r1, [r3, #28]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	61da      	str	r2, [r3, #28]
      break;
 8005ad0:	e023      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 faaf 	bl	800603c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	021a      	lsls	r2, r3, #8
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	61da      	str	r2, [r3, #28]
      break;
 8005b12:	e002      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
      break;
 8005b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e0b4      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x186>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b80:	d03e      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0xd4>
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	f200 8087 	bhi.w	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	f000 8086 	beq.w	8005c9e <HAL_TIM_ConfigClockSource+0x172>
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d87f      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d01a      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8005b9c:	2b70      	cmp	r3, #112	; 0x70
 8005b9e:	d87b      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d050      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x11a>
 8005ba4:	2b60      	cmp	r3, #96	; 0x60
 8005ba6:	d877      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b50      	cmp	r3, #80	; 0x50
 8005baa:	d03c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0xfa>
 8005bac:	2b50      	cmp	r3, #80	; 0x50
 8005bae:	d873      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d058      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x13a>
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d86f      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	d064      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	d86b      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d060      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d867      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05c      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d05a      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd0:	e062      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	f000 faf0 	bl	80061c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	609a      	str	r2, [r3, #8]
      break;
 8005bfe:	e04f      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c10:	f000 fad9 	bl	80061c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c22:	609a      	str	r2, [r3, #8]
      break;
 8005c24:	e03c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c32:	461a      	mov	r2, r3
 8005c34:	f000 fa50 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2150      	movs	r1, #80	; 0x50
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 faa7 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005c44:	e02c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 fa6e 	bl	8006134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2160      	movs	r1, #96	; 0x60
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fa97 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005c64:	e01c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 fa30 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fa87 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005c84:	e00c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f000 fa7e 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005c96:	e003      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9c:	e000      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr
	...

08005d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a29      	ldr	r2, [pc, #164]	; (8005dbc <TIM_Base_SetConfig+0xb8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00b      	beq.n	8005d34 <TIM_Base_SetConfig+0x30>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d22:	d007      	beq.n	8005d34 <TIM_Base_SetConfig+0x30>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a26      	ldr	r2, [pc, #152]	; (8005dc0 <TIM_Base_SetConfig+0xbc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_Base_SetConfig+0x30>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <TIM_Base_SetConfig+0xc0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d108      	bne.n	8005d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <TIM_Base_SetConfig+0xb8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_Base_SetConfig+0x62>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d54:	d007      	beq.n	8005d66 <TIM_Base_SetConfig+0x62>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <TIM_Base_SetConfig+0xbc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_Base_SetConfig+0x62>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <TIM_Base_SetConfig+0xc0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a07      	ldr	r2, [pc, #28]	; (8005dbc <TIM_Base_SetConfig+0xb8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d103      	bne.n	8005dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	615a      	str	r2, [r3, #20]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800

08005dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f023 0201 	bic.w	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 0302 	bic.w	r3, r3, #2
 8005e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <TIM_OC1_SetConfig+0xc8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d10c      	bne.n	8005e3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0308 	bic.w	r3, r3, #8
 8005e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <TIM_OC1_SetConfig+0xc8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d111      	bne.n	8005e6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	621a      	str	r2, [r3, #32]
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40012c00 	.word	0x40012c00

08005e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f023 0210 	bic.w	r2, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0320 	bic.w	r3, r3, #32
 8005ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <TIM_OC2_SetConfig+0xd0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d10d      	bne.n	8005f10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <TIM_OC2_SetConfig+0xd0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d113      	bne.n	8005f40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr
 8005f64:	40012c00 	.word	0x40012c00

08005f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0303 	bic.w	r3, r3, #3
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <TIM_OC3_SetConfig+0xd0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d10d      	bne.n	8005fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a14      	ldr	r2, [pc, #80]	; (8006038 <TIM_OC3_SetConfig+0xd0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d113      	bne.n	8006012 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	621a      	str	r2, [r3, #32]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40012c00 	.word	0x40012c00

0800603c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	031b      	lsls	r3, r3, #12
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <TIM_OC4_SetConfig+0x98>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d109      	bne.n	80060b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	019b      	lsls	r3, r3, #6
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	621a      	str	r2, [r3, #32]
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr
 80060d4:	40012c00 	.word	0x40012c00

080060d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 030a 	bic.w	r3, r3, #10
 8006114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0210 	bic.w	r2, r3, #16
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	031b      	lsls	r3, r3, #12
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006170:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	621a      	str	r2, [r3, #32]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f043 0307 	orr.w	r3, r3, #7
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	609a      	str	r2, [r3, #8]
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b087      	sub	sp, #28
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	021a      	lsls	r2, r3, #8
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	609a      	str	r2, [r3, #8]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f003 031f 	and.w	r3, r3, #31
 8006216:	2201      	movs	r2, #1
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1a      	ldr	r2, [r3, #32]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	43db      	mvns	r3, r3
 8006226:	401a      	ands	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a1a      	ldr	r2, [r3, #32]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	fa01 f303 	lsl.w	r3, r1, r3
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e046      	b.n	80062f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d009      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a12      	ldr	r2, [pc, #72]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a10      	ldr	r2, [pc, #64]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d10c      	bne.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800

08006308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr

0800631a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e042      	b.n	80063c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fc fe36 	bl	8002fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2224      	movs	r2, #36	; 0x24
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800636e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f9af 	bl	80066d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	4613      	mov	r3, r2
 80063da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d16d      	bne.n	80064c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_UART_Transmit+0x2c>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e066      	b.n	80064ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640a:	f7fc ffc5 	bl	8003398 <HAL_GetTick>
 800640e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006424:	d108      	bne.n	8006438 <HAL_UART_Transmit+0x6c>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e003      	b.n	8006440 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006440:	e02a      	b.n	8006498 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2200      	movs	r2, #0
 800644a:	2180      	movs	r1, #128	; 0x80
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f8d2 	bl	80065f6 <UART_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e036      	b.n	80064ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	3302      	adds	r3, #2
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	e007      	b.n	800648a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1cf      	bne.n	8006442 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2200      	movs	r2, #0
 80064aa:	2140      	movs	r1, #64	; 0x40
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f8a2 	bl	80065f6 <UART_WaitOnFlagUntilTimeout>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e006      	b.n	80064ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b08a      	sub	sp, #40	; 0x28
 80064d6:	af02      	add	r7, sp, #8
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d17c      	bne.n	80065ec <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_UART_Receive+0x2c>
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e075      	b.n	80065ee <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2222      	movs	r2, #34	; 0x22
 800650c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006516:	f7fc ff3f 	bl	8003398 <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	d108      	bne.n	8006544 <HAL_UART_Receive+0x72>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e003      	b.n	800654c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006548:	2300      	movs	r3, #0
 800654a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800654c:	e043      	b.n	80065d6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	2120      	movs	r1, #32
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f84c 	bl	80065f6 <UART_WaitOnFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e042      	b.n	80065ee <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10c      	bne.n	8006588 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	b29a      	uxth	r2, r3
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	3302      	adds	r3, #2
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	e01f      	b.n	80065c8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006590:	d007      	beq.n	80065a2 <HAL_UART_Receive+0xd0>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <HAL_UART_Receive+0xde>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e008      	b.n	80065c2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	3301      	adds	r3, #1
 80065c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1b6      	bne.n	800654e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b090      	sub	sp, #64	; 0x40
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	4613      	mov	r3, r2
 8006604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006606:	e050      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d04c      	beq.n	80066aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <UART_WaitOnFlagUntilTimeout+0x30>
 8006616:	f7fc febf 	bl	8003398 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006622:	429a      	cmp	r2, r3
 8006624:	d241      	bcs.n	80066aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006646:	637a      	str	r2, [r7, #52]	; 0x34
 8006648:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800664c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	613b      	str	r3, [r7, #16]
   return(result);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	63bb      	str	r3, [r7, #56]	; 0x38
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3314      	adds	r3, #20
 8006678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667a:	623a      	str	r2, [r7, #32]
 800667c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	69f9      	ldr	r1, [r7, #28]
 8006680:	6a3a      	ldr	r2, [r7, #32]
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	61bb      	str	r3, [r7, #24]
   return(result);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e5      	bne.n	800665a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e00f      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d09f      	beq.n	8006608 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3740      	adds	r7, #64	; 0x40
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800670e:	f023 030c 	bic.w	r3, r3, #12
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	430b      	orrs	r3, r1
 800671a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <UART_SetConfig+0x114>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d103      	bne.n	8006744 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800673c:	f7fe fe5e 	bl	80053fc <HAL_RCC_GetPCLK2Freq>
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	e002      	b.n	800674a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fe fe46 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8006748:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009a      	lsls	r2, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006760:	4a22      	ldr	r2, [pc, #136]	; (80067ec <UART_SetConfig+0x118>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	0119      	lsls	r1, r3, #4
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009a      	lsls	r2, r3, #2
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <UART_SetConfig+0x118>)
 8006782:	fba3 0302 	umull	r0, r3, r3, r2
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	2064      	movs	r0, #100	; 0x64
 800678a:	fb00 f303 	mul.w	r3, r0, r3
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	3332      	adds	r3, #50	; 0x32
 8006794:	4a15      	ldr	r2, [pc, #84]	; (80067ec <UART_SetConfig+0x118>)
 8006796:	fba2 2303 	umull	r2, r3, r2, r3
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067a0:	4419      	add	r1, r3
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009a      	lsls	r2, r3, #2
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <UART_SetConfig+0x118>)
 80067ba:	fba3 0302 	umull	r0, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2064      	movs	r0, #100	; 0x64
 80067c2:	fb00 f303 	mul.w	r3, r0, r3
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	3332      	adds	r3, #50	; 0x32
 80067cc:	4a07      	ldr	r2, [pc, #28]	; (80067ec <UART_SetConfig+0x118>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	f003 020f 	and.w	r2, r3, #15
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	440a      	add	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40013800 	.word	0x40013800
 80067ec:	51eb851f 	.word	0x51eb851f

080067f0 <__cvt>:
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f6:	461f      	mov	r7, r3
 80067f8:	bfbb      	ittet	lt
 80067fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80067fe:	461f      	movlt	r7, r3
 8006800:	2300      	movge	r3, #0
 8006802:	232d      	movlt	r3, #45	; 0x2d
 8006804:	b088      	sub	sp, #32
 8006806:	4614      	mov	r4, r2
 8006808:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800680a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800680c:	7013      	strb	r3, [r2, #0]
 800680e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006810:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006814:	f023 0820 	bic.w	r8, r3, #32
 8006818:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800681c:	d005      	beq.n	800682a <__cvt+0x3a>
 800681e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006822:	d100      	bne.n	8006826 <__cvt+0x36>
 8006824:	3501      	adds	r5, #1
 8006826:	2302      	movs	r3, #2
 8006828:	e000      	b.n	800682c <__cvt+0x3c>
 800682a:	2303      	movs	r3, #3
 800682c:	aa07      	add	r2, sp, #28
 800682e:	9204      	str	r2, [sp, #16]
 8006830:	aa06      	add	r2, sp, #24
 8006832:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006836:	e9cd 3500 	strd	r3, r5, [sp]
 800683a:	4622      	mov	r2, r4
 800683c:	463b      	mov	r3, r7
 800683e:	f000 fe73 	bl	8007528 <_dtoa_r>
 8006842:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006846:	4606      	mov	r6, r0
 8006848:	d102      	bne.n	8006850 <__cvt+0x60>
 800684a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684c:	07db      	lsls	r3, r3, #31
 800684e:	d522      	bpl.n	8006896 <__cvt+0xa6>
 8006850:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006854:	eb06 0905 	add.w	r9, r6, r5
 8006858:	d110      	bne.n	800687c <__cvt+0x8c>
 800685a:	7833      	ldrb	r3, [r6, #0]
 800685c:	2b30      	cmp	r3, #48	; 0x30
 800685e:	d10a      	bne.n	8006876 <__cvt+0x86>
 8006860:	2200      	movs	r2, #0
 8006862:	2300      	movs	r3, #0
 8006864:	4620      	mov	r0, r4
 8006866:	4639      	mov	r1, r7
 8006868:	f7fa f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800686c:	b918      	cbnz	r0, 8006876 <__cvt+0x86>
 800686e:	f1c5 0501 	rsb	r5, r5, #1
 8006872:	f8ca 5000 	str.w	r5, [sl]
 8006876:	f8da 3000 	ldr.w	r3, [sl]
 800687a:	4499      	add	r9, r3
 800687c:	2200      	movs	r2, #0
 800687e:	2300      	movs	r3, #0
 8006880:	4620      	mov	r0, r4
 8006882:	4639      	mov	r1, r7
 8006884:	f7fa f890 	bl	80009a8 <__aeabi_dcmpeq>
 8006888:	b108      	cbz	r0, 800688e <__cvt+0x9e>
 800688a:	f8cd 901c 	str.w	r9, [sp, #28]
 800688e:	2230      	movs	r2, #48	; 0x30
 8006890:	9b07      	ldr	r3, [sp, #28]
 8006892:	454b      	cmp	r3, r9
 8006894:	d307      	bcc.n	80068a6 <__cvt+0xb6>
 8006896:	4630      	mov	r0, r6
 8006898:	9b07      	ldr	r3, [sp, #28]
 800689a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800689c:	1b9b      	subs	r3, r3, r6
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	b008      	add	sp, #32
 80068a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	9107      	str	r1, [sp, #28]
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e7f0      	b.n	8006890 <__cvt+0xa0>

080068ae <__exponent>:
 80068ae:	4603      	mov	r3, r0
 80068b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b2:	2900      	cmp	r1, #0
 80068b4:	f803 2b02 	strb.w	r2, [r3], #2
 80068b8:	bfb6      	itet	lt
 80068ba:	222d      	movlt	r2, #45	; 0x2d
 80068bc:	222b      	movge	r2, #43	; 0x2b
 80068be:	4249      	neglt	r1, r1
 80068c0:	2909      	cmp	r1, #9
 80068c2:	7042      	strb	r2, [r0, #1]
 80068c4:	dd2a      	ble.n	800691c <__exponent+0x6e>
 80068c6:	f10d 0207 	add.w	r2, sp, #7
 80068ca:	4617      	mov	r7, r2
 80068cc:	260a      	movs	r6, #10
 80068ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80068d2:	4694      	mov	ip, r2
 80068d4:	fb06 1415 	mls	r4, r6, r5, r1
 80068d8:	3430      	adds	r4, #48	; 0x30
 80068da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80068de:	460c      	mov	r4, r1
 80068e0:	2c63      	cmp	r4, #99	; 0x63
 80068e2:	4629      	mov	r1, r5
 80068e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80068e8:	dcf1      	bgt.n	80068ce <__exponent+0x20>
 80068ea:	3130      	adds	r1, #48	; 0x30
 80068ec:	f1ac 0402 	sub.w	r4, ip, #2
 80068f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80068f4:	4622      	mov	r2, r4
 80068f6:	1c41      	adds	r1, r0, #1
 80068f8:	42ba      	cmp	r2, r7
 80068fa:	d30a      	bcc.n	8006912 <__exponent+0x64>
 80068fc:	f10d 0209 	add.w	r2, sp, #9
 8006900:	eba2 020c 	sub.w	r2, r2, ip
 8006904:	42bc      	cmp	r4, r7
 8006906:	bf88      	it	hi
 8006908:	2200      	movhi	r2, #0
 800690a:	4413      	add	r3, r2
 800690c:	1a18      	subs	r0, r3, r0
 800690e:	b003      	add	sp, #12
 8006910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006912:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006916:	f801 5f01 	strb.w	r5, [r1, #1]!
 800691a:	e7ed      	b.n	80068f8 <__exponent+0x4a>
 800691c:	2330      	movs	r3, #48	; 0x30
 800691e:	3130      	adds	r1, #48	; 0x30
 8006920:	7083      	strb	r3, [r0, #2]
 8006922:	70c1      	strb	r1, [r0, #3]
 8006924:	1d03      	adds	r3, r0, #4
 8006926:	e7f1      	b.n	800690c <__exponent+0x5e>

08006928 <_printf_float>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	b091      	sub	sp, #68	; 0x44
 800692e:	460c      	mov	r4, r1
 8006930:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006934:	4616      	mov	r6, r2
 8006936:	461f      	mov	r7, r3
 8006938:	4605      	mov	r5, r0
 800693a:	f000 fce5 	bl	8007308 <_localeconv_r>
 800693e:	6803      	ldr	r3, [r0, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	9309      	str	r3, [sp, #36]	; 0x24
 8006944:	f7f9 fc04 	bl	8000150 <strlen>
 8006948:	2300      	movs	r3, #0
 800694a:	930e      	str	r3, [sp, #56]	; 0x38
 800694c:	f8d8 3000 	ldr.w	r3, [r8]
 8006950:	900a      	str	r0, [sp, #40]	; 0x28
 8006952:	3307      	adds	r3, #7
 8006954:	f023 0307 	bic.w	r3, r3, #7
 8006958:	f103 0208 	add.w	r2, r3, #8
 800695c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006960:	f8d4 b000 	ldr.w	fp, [r4]
 8006964:	f8c8 2000 	str.w	r2, [r8]
 8006968:	e9d3 a800 	ldrd	sl, r8, [r3]
 800696c:	4652      	mov	r2, sl
 800696e:	4643      	mov	r3, r8
 8006970:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006974:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006978:	930b      	str	r3, [sp, #44]	; 0x2c
 800697a:	f04f 32ff 	mov.w	r2, #4294967295
 800697e:	4650      	mov	r0, sl
 8006980:	4b9c      	ldr	r3, [pc, #624]	; (8006bf4 <_printf_float+0x2cc>)
 8006982:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006984:	f7fa f842 	bl	8000a0c <__aeabi_dcmpun>
 8006988:	bb70      	cbnz	r0, 80069e8 <_printf_float+0xc0>
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	4650      	mov	r0, sl
 8006990:	4b98      	ldr	r3, [pc, #608]	; (8006bf4 <_printf_float+0x2cc>)
 8006992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006994:	f7fa f81c 	bl	80009d0 <__aeabi_dcmple>
 8006998:	bb30      	cbnz	r0, 80069e8 <_printf_float+0xc0>
 800699a:	2200      	movs	r2, #0
 800699c:	2300      	movs	r3, #0
 800699e:	4650      	mov	r0, sl
 80069a0:	4641      	mov	r1, r8
 80069a2:	f7fa f80b 	bl	80009bc <__aeabi_dcmplt>
 80069a6:	b110      	cbz	r0, 80069ae <_printf_float+0x86>
 80069a8:	232d      	movs	r3, #45	; 0x2d
 80069aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ae:	4a92      	ldr	r2, [pc, #584]	; (8006bf8 <_printf_float+0x2d0>)
 80069b0:	4b92      	ldr	r3, [pc, #584]	; (8006bfc <_printf_float+0x2d4>)
 80069b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80069b6:	bf94      	ite	ls
 80069b8:	4690      	movls	r8, r2
 80069ba:	4698      	movhi	r8, r3
 80069bc:	2303      	movs	r3, #3
 80069be:	f04f 0a00 	mov.w	sl, #0
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	f02b 0304 	bic.w	r3, fp, #4
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	4633      	mov	r3, r6
 80069cc:	4621      	mov	r1, r4
 80069ce:	4628      	mov	r0, r5
 80069d0:	9700      	str	r7, [sp, #0]
 80069d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80069d4:	f000 f9d6 	bl	8006d84 <_printf_common>
 80069d8:	3001      	adds	r0, #1
 80069da:	f040 8090 	bne.w	8006afe <_printf_float+0x1d6>
 80069de:	f04f 30ff 	mov.w	r0, #4294967295
 80069e2:	b011      	add	sp, #68	; 0x44
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	4652      	mov	r2, sl
 80069ea:	4643      	mov	r3, r8
 80069ec:	4650      	mov	r0, sl
 80069ee:	4641      	mov	r1, r8
 80069f0:	f7fa f80c 	bl	8000a0c <__aeabi_dcmpun>
 80069f4:	b148      	cbz	r0, 8006a0a <_printf_float+0xe2>
 80069f6:	f1b8 0f00 	cmp.w	r8, #0
 80069fa:	bfb8      	it	lt
 80069fc:	232d      	movlt	r3, #45	; 0x2d
 80069fe:	4a80      	ldr	r2, [pc, #512]	; (8006c00 <_printf_float+0x2d8>)
 8006a00:	bfb8      	it	lt
 8006a02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a06:	4b7f      	ldr	r3, [pc, #508]	; (8006c04 <_printf_float+0x2dc>)
 8006a08:	e7d3      	b.n	80069b2 <_printf_float+0x8a>
 8006a0a:	6863      	ldr	r3, [r4, #4]
 8006a0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	d142      	bne.n	8006a9a <_printf_float+0x172>
 8006a14:	2306      	movs	r3, #6
 8006a16:	6063      	str	r3, [r4, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	9206      	str	r2, [sp, #24]
 8006a1c:	aa0e      	add	r2, sp, #56	; 0x38
 8006a1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006a22:	aa0d      	add	r2, sp, #52	; 0x34
 8006a24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006a28:	9203      	str	r2, [sp, #12]
 8006a2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006a2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a32:	6023      	str	r3, [r4, #0]
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	4652      	mov	r2, sl
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	4643      	mov	r3, r8
 8006a3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a40:	f7ff fed6 	bl	80067f0 <__cvt>
 8006a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a46:	4680      	mov	r8, r0
 8006a48:	2947      	cmp	r1, #71	; 0x47
 8006a4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a4c:	d108      	bne.n	8006a60 <_printf_float+0x138>
 8006a4e:	1cc8      	adds	r0, r1, #3
 8006a50:	db02      	blt.n	8006a58 <_printf_float+0x130>
 8006a52:	6863      	ldr	r3, [r4, #4]
 8006a54:	4299      	cmp	r1, r3
 8006a56:	dd40      	ble.n	8006ada <_printf_float+0x1b2>
 8006a58:	f1a9 0902 	sub.w	r9, r9, #2
 8006a5c:	fa5f f989 	uxtb.w	r9, r9
 8006a60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a64:	d81f      	bhi.n	8006aa6 <_printf_float+0x17e>
 8006a66:	464a      	mov	r2, r9
 8006a68:	3901      	subs	r1, #1
 8006a6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a6e:	910d      	str	r1, [sp, #52]	; 0x34
 8006a70:	f7ff ff1d 	bl	80068ae <__exponent>
 8006a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a76:	4682      	mov	sl, r0
 8006a78:	1813      	adds	r3, r2, r0
 8006a7a:	2a01      	cmp	r2, #1
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	dc02      	bgt.n	8006a86 <_printf_float+0x15e>
 8006a80:	6822      	ldr	r2, [r4, #0]
 8006a82:	07d2      	lsls	r2, r2, #31
 8006a84:	d501      	bpl.n	8006a8a <_printf_float+0x162>
 8006a86:	3301      	adds	r3, #1
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d09b      	beq.n	80069ca <_printf_float+0xa2>
 8006a92:	232d      	movs	r3, #45	; 0x2d
 8006a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a98:	e797      	b.n	80069ca <_printf_float+0xa2>
 8006a9a:	2947      	cmp	r1, #71	; 0x47
 8006a9c:	d1bc      	bne.n	8006a18 <_printf_float+0xf0>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1ba      	bne.n	8006a18 <_printf_float+0xf0>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e7b7      	b.n	8006a16 <_printf_float+0xee>
 8006aa6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006aaa:	d118      	bne.n	8006ade <_printf_float+0x1b6>
 8006aac:	2900      	cmp	r1, #0
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	dd0b      	ble.n	8006aca <_printf_float+0x1a2>
 8006ab2:	6121      	str	r1, [r4, #16]
 8006ab4:	b913      	cbnz	r3, 8006abc <_printf_float+0x194>
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	07d0      	lsls	r0, r2, #31
 8006aba:	d502      	bpl.n	8006ac2 <_printf_float+0x19a>
 8006abc:	3301      	adds	r3, #1
 8006abe:	440b      	add	r3, r1
 8006ac0:	6123      	str	r3, [r4, #16]
 8006ac2:	f04f 0a00 	mov.w	sl, #0
 8006ac6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ac8:	e7df      	b.n	8006a8a <_printf_float+0x162>
 8006aca:	b913      	cbnz	r3, 8006ad2 <_printf_float+0x1aa>
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	07d2      	lsls	r2, r2, #31
 8006ad0:	d501      	bpl.n	8006ad6 <_printf_float+0x1ae>
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	e7f4      	b.n	8006ac0 <_printf_float+0x198>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e7f2      	b.n	8006ac0 <_printf_float+0x198>
 8006ada:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	db05      	blt.n	8006af0 <_printf_float+0x1c8>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	6121      	str	r1, [r4, #16]
 8006ae8:	07d8      	lsls	r0, r3, #31
 8006aea:	d5ea      	bpl.n	8006ac2 <_printf_float+0x19a>
 8006aec:	1c4b      	adds	r3, r1, #1
 8006aee:	e7e7      	b.n	8006ac0 <_printf_float+0x198>
 8006af0:	2900      	cmp	r1, #0
 8006af2:	bfcc      	ite	gt
 8006af4:	2201      	movgt	r2, #1
 8006af6:	f1c1 0202 	rsble	r2, r1, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	e7e0      	b.n	8006ac0 <_printf_float+0x198>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	055a      	lsls	r2, r3, #21
 8006b02:	d407      	bmi.n	8006b14 <_printf_float+0x1ec>
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	4642      	mov	r2, r8
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d12b      	bne.n	8006b6a <_printf_float+0x242>
 8006b12:	e764      	b.n	80069de <_printf_float+0xb6>
 8006b14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006b18:	f240 80dd 	bls.w	8006cd6 <_printf_float+0x3ae>
 8006b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b20:	2200      	movs	r2, #0
 8006b22:	2300      	movs	r3, #0
 8006b24:	f7f9 ff40 	bl	80009a8 <__aeabi_dcmpeq>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d033      	beq.n	8006b94 <_printf_float+0x26c>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	4a35      	ldr	r2, [pc, #212]	; (8006c08 <_printf_float+0x2e0>)
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f af51 	beq.w	80069de <_printf_float+0xb6>
 8006b3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b40:	429a      	cmp	r2, r3
 8006b42:	db02      	blt.n	8006b4a <_printf_float+0x222>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	07d8      	lsls	r0, r3, #31
 8006b48:	d50f      	bpl.n	8006b6a <_printf_float+0x242>
 8006b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	f43f af42 	beq.w	80069de <_printf_float+0xb6>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	f104 091a 	add.w	r9, r4, #26
 8006b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b64:	3b01      	subs	r3, #1
 8006b66:	4543      	cmp	r3, r8
 8006b68:	dc09      	bgt.n	8006b7e <_printf_float+0x256>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	079b      	lsls	r3, r3, #30
 8006b6e:	f100 8104 	bmi.w	8006d7a <_printf_float+0x452>
 8006b72:	68e0      	ldr	r0, [r4, #12]
 8006b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b76:	4298      	cmp	r0, r3
 8006b78:	bfb8      	it	lt
 8006b7a:	4618      	movlt	r0, r3
 8006b7c:	e731      	b.n	80069e2 <_printf_float+0xba>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	464a      	mov	r2, r9
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f43f af28 	beq.w	80069de <_printf_float+0xb6>
 8006b8e:	f108 0801 	add.w	r8, r8, #1
 8006b92:	e7e6      	b.n	8006b62 <_printf_float+0x23a>
 8006b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dc38      	bgt.n	8006c0c <_printf_float+0x2e4>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	4a19      	ldr	r2, [pc, #100]	; (8006c08 <_printf_float+0x2e0>)
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f43f af1a 	beq.w	80069de <_printf_float+0xb6>
 8006baa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	d102      	bne.n	8006bb8 <_printf_float+0x290>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	07d9      	lsls	r1, r3, #31
 8006bb6:	d5d8      	bpl.n	8006b6a <_printf_float+0x242>
 8006bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b8      	blx	r7
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f43f af0b 	beq.w	80069de <_printf_float+0xb6>
 8006bc8:	f04f 0900 	mov.w	r9, #0
 8006bcc:	f104 0a1a 	add.w	sl, r4, #26
 8006bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd2:	425b      	negs	r3, r3
 8006bd4:	454b      	cmp	r3, r9
 8006bd6:	dc01      	bgt.n	8006bdc <_printf_float+0x2b4>
 8006bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bda:	e794      	b.n	8006b06 <_printf_float+0x1de>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4652      	mov	r2, sl
 8006be0:	4631      	mov	r1, r6
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	f43f aef9 	beq.w	80069de <_printf_float+0xb6>
 8006bec:	f109 0901 	add.w	r9, r9, #1
 8006bf0:	e7ee      	b.n	8006bd0 <_printf_float+0x2a8>
 8006bf2:	bf00      	nop
 8006bf4:	7fefffff 	.word	0x7fefffff
 8006bf8:	0800955e 	.word	0x0800955e
 8006bfc:	08009562 	.word	0x08009562
 8006c00:	08009566 	.word	0x08009566
 8006c04:	0800956a 	.word	0x0800956a
 8006c08:	0800956e 	.word	0x0800956e
 8006c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c10:	429a      	cmp	r2, r3
 8006c12:	bfa8      	it	ge
 8006c14:	461a      	movge	r2, r3
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	4691      	mov	r9, r2
 8006c1a:	dc37      	bgt.n	8006c8c <_printf_float+0x364>
 8006c1c:	f04f 0b00 	mov.w	fp, #0
 8006c20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c24:	f104 021a 	add.w	r2, r4, #26
 8006c28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006c2c:	ebaa 0309 	sub.w	r3, sl, r9
 8006c30:	455b      	cmp	r3, fp
 8006c32:	dc33      	bgt.n	8006c9c <_printf_float+0x374>
 8006c34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	db3b      	blt.n	8006cb4 <_printf_float+0x38c>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	07da      	lsls	r2, r3, #31
 8006c40:	d438      	bmi.n	8006cb4 <_printf_float+0x38c>
 8006c42:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006c46:	eba2 0903 	sub.w	r9, r2, r3
 8006c4a:	eba2 020a 	sub.w	r2, r2, sl
 8006c4e:	4591      	cmp	r9, r2
 8006c50:	bfa8      	it	ge
 8006c52:	4691      	movge	r9, r2
 8006c54:	f1b9 0f00 	cmp.w	r9, #0
 8006c58:	dc34      	bgt.n	8006cc4 <_printf_float+0x39c>
 8006c5a:	f04f 0800 	mov.w	r8, #0
 8006c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c62:	f104 0a1a 	add.w	sl, r4, #26
 8006c66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	eba3 0309 	sub.w	r3, r3, r9
 8006c70:	4543      	cmp	r3, r8
 8006c72:	f77f af7a 	ble.w	8006b6a <_printf_float+0x242>
 8006c76:	2301      	movs	r3, #1
 8006c78:	4652      	mov	r2, sl
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	47b8      	blx	r7
 8006c80:	3001      	adds	r0, #1
 8006c82:	f43f aeac 	beq.w	80069de <_printf_float+0xb6>
 8006c86:	f108 0801 	add.w	r8, r8, #1
 8006c8a:	e7ec      	b.n	8006c66 <_printf_float+0x33e>
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4642      	mov	r2, r8
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	d1c0      	bne.n	8006c1c <_printf_float+0x2f4>
 8006c9a:	e6a0      	b.n	80069de <_printf_float+0xb6>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ca4:	47b8      	blx	r7
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	f43f ae99 	beq.w	80069de <_printf_float+0xb6>
 8006cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cae:	f10b 0b01 	add.w	fp, fp, #1
 8006cb2:	e7b9      	b.n	8006c28 <_printf_float+0x300>
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cba:	4628      	mov	r0, r5
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d1bf      	bne.n	8006c42 <_printf_float+0x31a>
 8006cc2:	e68c      	b.n	80069de <_printf_float+0xb6>
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	eb08 020a 	add.w	r2, r8, sl
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d1c2      	bne.n	8006c5a <_printf_float+0x332>
 8006cd4:	e683      	b.n	80069de <_printf_float+0xb6>
 8006cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd8:	2a01      	cmp	r2, #1
 8006cda:	dc01      	bgt.n	8006ce0 <_printf_float+0x3b8>
 8006cdc:	07db      	lsls	r3, r3, #31
 8006cde:	d539      	bpl.n	8006d54 <_printf_float+0x42c>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	47b8      	blx	r7
 8006cea:	3001      	adds	r0, #1
 8006cec:	f43f ae77 	beq.w	80069de <_printf_float+0xb6>
 8006cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	f43f ae6f 	beq.w	80069de <_printf_float+0xb6>
 8006d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d04:	2200      	movs	r2, #0
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006d0c:	f7f9 fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006d10:	b9d8      	cbnz	r0, 8006d4a <_printf_float+0x422>
 8006d12:	f109 33ff 	add.w	r3, r9, #4294967295
 8006d16:	f108 0201 	add.w	r2, r8, #1
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	d10e      	bne.n	8006d42 <_printf_float+0x41a>
 8006d24:	e65b      	b.n	80069de <_printf_float+0xb6>
 8006d26:	2301      	movs	r3, #1
 8006d28:	464a      	mov	r2, r9
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b8      	blx	r7
 8006d30:	3001      	adds	r0, #1
 8006d32:	f43f ae54 	beq.w	80069de <_printf_float+0xb6>
 8006d36:	f108 0801 	add.w	r8, r8, #1
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	4543      	cmp	r3, r8
 8006d40:	dcf1      	bgt.n	8006d26 <_printf_float+0x3fe>
 8006d42:	4653      	mov	r3, sl
 8006d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d48:	e6de      	b.n	8006b08 <_printf_float+0x1e0>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	f104 091a 	add.w	r9, r4, #26
 8006d52:	e7f2      	b.n	8006d3a <_printf_float+0x412>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4642      	mov	r2, r8
 8006d58:	e7df      	b.n	8006d1a <_printf_float+0x3f2>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	464a      	mov	r2, r9
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f ae3a 	beq.w	80069de <_printf_float+0xb6>
 8006d6a:	f108 0801 	add.w	r8, r8, #1
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d72:	1a5b      	subs	r3, r3, r1
 8006d74:	4543      	cmp	r3, r8
 8006d76:	dcf0      	bgt.n	8006d5a <_printf_float+0x432>
 8006d78:	e6fb      	b.n	8006b72 <_printf_float+0x24a>
 8006d7a:	f04f 0800 	mov.w	r8, #0
 8006d7e:	f104 0919 	add.w	r9, r4, #25
 8006d82:	e7f4      	b.n	8006d6e <_printf_float+0x446>

08006d84 <_printf_common>:
 8006d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	4616      	mov	r6, r2
 8006d8a:	4699      	mov	r9, r3
 8006d8c:	688a      	ldr	r2, [r1, #8]
 8006d8e:	690b      	ldr	r3, [r1, #16]
 8006d90:	4607      	mov	r7, r0
 8006d92:	4293      	cmp	r3, r2
 8006d94:	bfb8      	it	lt
 8006d96:	4613      	movlt	r3, r2
 8006d98:	6033      	str	r3, [r6, #0]
 8006d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d9e:	460c      	mov	r4, r1
 8006da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006da4:	b10a      	cbz	r2, 8006daa <_printf_common+0x26>
 8006da6:	3301      	adds	r3, #1
 8006da8:	6033      	str	r3, [r6, #0]
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	0699      	lsls	r1, r3, #26
 8006dae:	bf42      	ittt	mi
 8006db0:	6833      	ldrmi	r3, [r6, #0]
 8006db2:	3302      	addmi	r3, #2
 8006db4:	6033      	strmi	r3, [r6, #0]
 8006db6:	6825      	ldr	r5, [r4, #0]
 8006db8:	f015 0506 	ands.w	r5, r5, #6
 8006dbc:	d106      	bne.n	8006dcc <_printf_common+0x48>
 8006dbe:	f104 0a19 	add.w	sl, r4, #25
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	6832      	ldr	r2, [r6, #0]
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	42ab      	cmp	r3, r5
 8006dca:	dc2b      	bgt.n	8006e24 <_printf_common+0xa0>
 8006dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dd0:	1e13      	subs	r3, r2, #0
 8006dd2:	6822      	ldr	r2, [r4, #0]
 8006dd4:	bf18      	it	ne
 8006dd6:	2301      	movne	r3, #1
 8006dd8:	0692      	lsls	r2, r2, #26
 8006dda:	d430      	bmi.n	8006e3e <_printf_common+0xba>
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4638      	mov	r0, r7
 8006de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006de4:	47c0      	blx	r8
 8006de6:	3001      	adds	r0, #1
 8006de8:	d023      	beq.n	8006e32 <_printf_common+0xae>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	6922      	ldr	r2, [r4, #16]
 8006dee:	f003 0306 	and.w	r3, r3, #6
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	bf14      	ite	ne
 8006df6:	2500      	movne	r5, #0
 8006df8:	6833      	ldreq	r3, [r6, #0]
 8006dfa:	f04f 0600 	mov.w	r6, #0
 8006dfe:	bf08      	it	eq
 8006e00:	68e5      	ldreq	r5, [r4, #12]
 8006e02:	f104 041a 	add.w	r4, r4, #26
 8006e06:	bf08      	it	eq
 8006e08:	1aed      	subeq	r5, r5, r3
 8006e0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e0e:	bf08      	it	eq
 8006e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bfc4      	itt	gt
 8006e18:	1a9b      	subgt	r3, r3, r2
 8006e1a:	18ed      	addgt	r5, r5, r3
 8006e1c:	42b5      	cmp	r5, r6
 8006e1e:	d11a      	bne.n	8006e56 <_printf_common+0xd2>
 8006e20:	2000      	movs	r0, #0
 8006e22:	e008      	b.n	8006e36 <_printf_common+0xb2>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4652      	mov	r2, sl
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	47c0      	blx	r8
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d103      	bne.n	8006e3a <_printf_common+0xb6>
 8006e32:	f04f 30ff 	mov.w	r0, #4294967295
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3a:	3501      	adds	r5, #1
 8006e3c:	e7c1      	b.n	8006dc2 <_printf_common+0x3e>
 8006e3e:	2030      	movs	r0, #48	; 0x30
 8006e40:	18e1      	adds	r1, r4, r3
 8006e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e4c:	4422      	add	r2, r4
 8006e4e:	3302      	adds	r3, #2
 8006e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e54:	e7c2      	b.n	8006ddc <_printf_common+0x58>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	47c0      	blx	r8
 8006e60:	3001      	adds	r0, #1
 8006e62:	d0e6      	beq.n	8006e32 <_printf_common+0xae>
 8006e64:	3601      	adds	r6, #1
 8006e66:	e7d9      	b.n	8006e1c <_printf_common+0x98>

08006e68 <_printf_i>:
 8006e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	7e0f      	ldrb	r7, [r1, #24]
 8006e6e:	4691      	mov	r9, r2
 8006e70:	2f78      	cmp	r7, #120	; 0x78
 8006e72:	4680      	mov	r8, r0
 8006e74:	460c      	mov	r4, r1
 8006e76:	469a      	mov	sl, r3
 8006e78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e7e:	d807      	bhi.n	8006e90 <_printf_i+0x28>
 8006e80:	2f62      	cmp	r7, #98	; 0x62
 8006e82:	d80a      	bhi.n	8006e9a <_printf_i+0x32>
 8006e84:	2f00      	cmp	r7, #0
 8006e86:	f000 80d5 	beq.w	8007034 <_printf_i+0x1cc>
 8006e8a:	2f58      	cmp	r7, #88	; 0x58
 8006e8c:	f000 80c1 	beq.w	8007012 <_printf_i+0x1aa>
 8006e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e98:	e03a      	b.n	8006f10 <_printf_i+0xa8>
 8006e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e9e:	2b15      	cmp	r3, #21
 8006ea0:	d8f6      	bhi.n	8006e90 <_printf_i+0x28>
 8006ea2:	a101      	add	r1, pc, #4	; (adr r1, 8006ea8 <_printf_i+0x40>)
 8006ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ea8:	08006f01 	.word	0x08006f01
 8006eac:	08006f15 	.word	0x08006f15
 8006eb0:	08006e91 	.word	0x08006e91
 8006eb4:	08006e91 	.word	0x08006e91
 8006eb8:	08006e91 	.word	0x08006e91
 8006ebc:	08006e91 	.word	0x08006e91
 8006ec0:	08006f15 	.word	0x08006f15
 8006ec4:	08006e91 	.word	0x08006e91
 8006ec8:	08006e91 	.word	0x08006e91
 8006ecc:	08006e91 	.word	0x08006e91
 8006ed0:	08006e91 	.word	0x08006e91
 8006ed4:	0800701b 	.word	0x0800701b
 8006ed8:	08006f41 	.word	0x08006f41
 8006edc:	08006fd5 	.word	0x08006fd5
 8006ee0:	08006e91 	.word	0x08006e91
 8006ee4:	08006e91 	.word	0x08006e91
 8006ee8:	0800703d 	.word	0x0800703d
 8006eec:	08006e91 	.word	0x08006e91
 8006ef0:	08006f41 	.word	0x08006f41
 8006ef4:	08006e91 	.word	0x08006e91
 8006ef8:	08006e91 	.word	0x08006e91
 8006efc:	08006fdd 	.word	0x08006fdd
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	1d1a      	adds	r2, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	602a      	str	r2, [r5, #0]
 8006f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0a0      	b.n	8007056 <_printf_i+0x1ee>
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	682b      	ldr	r3, [r5, #0]
 8006f18:	0607      	lsls	r7, r0, #24
 8006f1a:	f103 0104 	add.w	r1, r3, #4
 8006f1e:	6029      	str	r1, [r5, #0]
 8006f20:	d501      	bpl.n	8006f26 <_printf_i+0xbe>
 8006f22:	681e      	ldr	r6, [r3, #0]
 8006f24:	e003      	b.n	8006f2e <_printf_i+0xc6>
 8006f26:	0646      	lsls	r6, r0, #25
 8006f28:	d5fb      	bpl.n	8006f22 <_printf_i+0xba>
 8006f2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	da03      	bge.n	8006f3a <_printf_i+0xd2>
 8006f32:	232d      	movs	r3, #45	; 0x2d
 8006f34:	4276      	negs	r6, r6
 8006f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3a:	230a      	movs	r3, #10
 8006f3c:	4859      	ldr	r0, [pc, #356]	; (80070a4 <_printf_i+0x23c>)
 8006f3e:	e012      	b.n	8006f66 <_printf_i+0xfe>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	6820      	ldr	r0, [r4, #0]
 8006f44:	1d19      	adds	r1, r3, #4
 8006f46:	6029      	str	r1, [r5, #0]
 8006f48:	0605      	lsls	r5, r0, #24
 8006f4a:	d501      	bpl.n	8006f50 <_printf_i+0xe8>
 8006f4c:	681e      	ldr	r6, [r3, #0]
 8006f4e:	e002      	b.n	8006f56 <_printf_i+0xee>
 8006f50:	0641      	lsls	r1, r0, #25
 8006f52:	d5fb      	bpl.n	8006f4c <_printf_i+0xe4>
 8006f54:	881e      	ldrh	r6, [r3, #0]
 8006f56:	2f6f      	cmp	r7, #111	; 0x6f
 8006f58:	bf0c      	ite	eq
 8006f5a:	2308      	moveq	r3, #8
 8006f5c:	230a      	movne	r3, #10
 8006f5e:	4851      	ldr	r0, [pc, #324]	; (80070a4 <_printf_i+0x23c>)
 8006f60:	2100      	movs	r1, #0
 8006f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f66:	6865      	ldr	r5, [r4, #4]
 8006f68:	2d00      	cmp	r5, #0
 8006f6a:	bfa8      	it	ge
 8006f6c:	6821      	ldrge	r1, [r4, #0]
 8006f6e:	60a5      	str	r5, [r4, #8]
 8006f70:	bfa4      	itt	ge
 8006f72:	f021 0104 	bicge.w	r1, r1, #4
 8006f76:	6021      	strge	r1, [r4, #0]
 8006f78:	b90e      	cbnz	r6, 8006f7e <_printf_i+0x116>
 8006f7a:	2d00      	cmp	r5, #0
 8006f7c:	d04b      	beq.n	8007016 <_printf_i+0x1ae>
 8006f7e:	4615      	mov	r5, r2
 8006f80:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f84:	fb03 6711 	mls	r7, r3, r1, r6
 8006f88:	5dc7      	ldrb	r7, [r0, r7]
 8006f8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f8e:	4637      	mov	r7, r6
 8006f90:	42bb      	cmp	r3, r7
 8006f92:	460e      	mov	r6, r1
 8006f94:	d9f4      	bls.n	8006f80 <_printf_i+0x118>
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d10b      	bne.n	8006fb2 <_printf_i+0x14a>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	07de      	lsls	r6, r3, #31
 8006f9e:	d508      	bpl.n	8006fb2 <_printf_i+0x14a>
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	6861      	ldr	r1, [r4, #4]
 8006fa4:	4299      	cmp	r1, r3
 8006fa6:	bfde      	ittt	le
 8006fa8:	2330      	movle	r3, #48	; 0x30
 8006faa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fb2:	1b52      	subs	r2, r2, r5
 8006fb4:	6122      	str	r2, [r4, #16]
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4640      	mov	r0, r8
 8006fbc:	f8cd a000 	str.w	sl, [sp]
 8006fc0:	aa03      	add	r2, sp, #12
 8006fc2:	f7ff fedf 	bl	8006d84 <_printf_common>
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d14a      	bne.n	8007060 <_printf_i+0x1f8>
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295
 8006fce:	b004      	add	sp, #16
 8006fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f043 0320 	orr.w	r3, r3, #32
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	2778      	movs	r7, #120	; 0x78
 8006fde:	4832      	ldr	r0, [pc, #200]	; (80070a8 <_printf_i+0x240>)
 8006fe0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	6829      	ldr	r1, [r5, #0]
 8006fe8:	061f      	lsls	r7, r3, #24
 8006fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fee:	d402      	bmi.n	8006ff6 <_printf_i+0x18e>
 8006ff0:	065f      	lsls	r7, r3, #25
 8006ff2:	bf48      	it	mi
 8006ff4:	b2b6      	uxthmi	r6, r6
 8006ff6:	07df      	lsls	r7, r3, #31
 8006ff8:	bf48      	it	mi
 8006ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8006ffe:	6029      	str	r1, [r5, #0]
 8007000:	bf48      	it	mi
 8007002:	6023      	strmi	r3, [r4, #0]
 8007004:	b91e      	cbnz	r6, 800700e <_printf_i+0x1a6>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f023 0320 	bic.w	r3, r3, #32
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	2310      	movs	r3, #16
 8007010:	e7a6      	b.n	8006f60 <_printf_i+0xf8>
 8007012:	4824      	ldr	r0, [pc, #144]	; (80070a4 <_printf_i+0x23c>)
 8007014:	e7e4      	b.n	8006fe0 <_printf_i+0x178>
 8007016:	4615      	mov	r5, r2
 8007018:	e7bd      	b.n	8006f96 <_printf_i+0x12e>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	6826      	ldr	r6, [r4, #0]
 800701e:	1d18      	adds	r0, r3, #4
 8007020:	6961      	ldr	r1, [r4, #20]
 8007022:	6028      	str	r0, [r5, #0]
 8007024:	0635      	lsls	r5, r6, #24
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	d501      	bpl.n	800702e <_printf_i+0x1c6>
 800702a:	6019      	str	r1, [r3, #0]
 800702c:	e002      	b.n	8007034 <_printf_i+0x1cc>
 800702e:	0670      	lsls	r0, r6, #25
 8007030:	d5fb      	bpl.n	800702a <_printf_i+0x1c2>
 8007032:	8019      	strh	r1, [r3, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	4615      	mov	r5, r2
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	e7bc      	b.n	8006fb6 <_printf_i+0x14e>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	2100      	movs	r1, #0
 8007040:	1d1a      	adds	r2, r3, #4
 8007042:	602a      	str	r2, [r5, #0]
 8007044:	681d      	ldr	r5, [r3, #0]
 8007046:	6862      	ldr	r2, [r4, #4]
 8007048:	4628      	mov	r0, r5
 800704a:	f000 f9d4 	bl	80073f6 <memchr>
 800704e:	b108      	cbz	r0, 8007054 <_printf_i+0x1ec>
 8007050:	1b40      	subs	r0, r0, r5
 8007052:	6060      	str	r0, [r4, #4]
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	2300      	movs	r3, #0
 800705a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800705e:	e7aa      	b.n	8006fb6 <_printf_i+0x14e>
 8007060:	462a      	mov	r2, r5
 8007062:	4649      	mov	r1, r9
 8007064:	4640      	mov	r0, r8
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	47d0      	blx	sl
 800706a:	3001      	adds	r0, #1
 800706c:	d0ad      	beq.n	8006fca <_printf_i+0x162>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	079b      	lsls	r3, r3, #30
 8007072:	d413      	bmi.n	800709c <_printf_i+0x234>
 8007074:	68e0      	ldr	r0, [r4, #12]
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	4298      	cmp	r0, r3
 800707a:	bfb8      	it	lt
 800707c:	4618      	movlt	r0, r3
 800707e:	e7a6      	b.n	8006fce <_printf_i+0x166>
 8007080:	2301      	movs	r3, #1
 8007082:	4632      	mov	r2, r6
 8007084:	4649      	mov	r1, r9
 8007086:	4640      	mov	r0, r8
 8007088:	47d0      	blx	sl
 800708a:	3001      	adds	r0, #1
 800708c:	d09d      	beq.n	8006fca <_printf_i+0x162>
 800708e:	3501      	adds	r5, #1
 8007090:	68e3      	ldr	r3, [r4, #12]
 8007092:	9903      	ldr	r1, [sp, #12]
 8007094:	1a5b      	subs	r3, r3, r1
 8007096:	42ab      	cmp	r3, r5
 8007098:	dcf2      	bgt.n	8007080 <_printf_i+0x218>
 800709a:	e7eb      	b.n	8007074 <_printf_i+0x20c>
 800709c:	2500      	movs	r5, #0
 800709e:	f104 0619 	add.w	r6, r4, #25
 80070a2:	e7f5      	b.n	8007090 <_printf_i+0x228>
 80070a4:	08009570 	.word	0x08009570
 80070a8:	08009581 	.word	0x08009581

080070ac <std>:
 80070ac:	2300      	movs	r3, #0
 80070ae:	b510      	push	{r4, lr}
 80070b0:	4604      	mov	r4, r0
 80070b2:	e9c0 3300 	strd	r3, r3, [r0]
 80070b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070ba:	6083      	str	r3, [r0, #8]
 80070bc:	8181      	strh	r1, [r0, #12]
 80070be:	6643      	str	r3, [r0, #100]	; 0x64
 80070c0:	81c2      	strh	r2, [r0, #14]
 80070c2:	6183      	str	r3, [r0, #24]
 80070c4:	4619      	mov	r1, r3
 80070c6:	2208      	movs	r2, #8
 80070c8:	305c      	adds	r0, #92	; 0x5c
 80070ca:	f000 f914 	bl	80072f6 <memset>
 80070ce:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <std+0x58>)
 80070d0:	6224      	str	r4, [r4, #32]
 80070d2:	6263      	str	r3, [r4, #36]	; 0x24
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <std+0x5c>)
 80070d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <std+0x60>)
 80070da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <std+0x64>)
 80070de:	6323      	str	r3, [r4, #48]	; 0x30
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <std+0x68>)
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d006      	beq.n	80070f4 <std+0x48>
 80070e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070ea:	4294      	cmp	r4, r2
 80070ec:	d002      	beq.n	80070f4 <std+0x48>
 80070ee:	33d0      	adds	r3, #208	; 0xd0
 80070f0:	429c      	cmp	r4, r3
 80070f2:	d105      	bne.n	8007100 <std+0x54>
 80070f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070fc:	f000 b978 	b.w	80073f0 <__retarget_lock_init_recursive>
 8007100:	bd10      	pop	{r4, pc}
 8007102:	bf00      	nop
 8007104:	08007271 	.word	0x08007271
 8007108:	08007293 	.word	0x08007293
 800710c:	080072cb 	.word	0x080072cb
 8007110:	080072ef 	.word	0x080072ef
 8007114:	2000061c 	.word	0x2000061c

08007118 <stdio_exit_handler>:
 8007118:	4a02      	ldr	r2, [pc, #8]	; (8007124 <stdio_exit_handler+0xc>)
 800711a:	4903      	ldr	r1, [pc, #12]	; (8007128 <stdio_exit_handler+0x10>)
 800711c:	4803      	ldr	r0, [pc, #12]	; (800712c <stdio_exit_handler+0x14>)
 800711e:	f000 b869 	b.w	80071f4 <_fwalk_sglue>
 8007122:	bf00      	nop
 8007124:	20000024 	.word	0x20000024
 8007128:	08008d8d 	.word	0x08008d8d
 800712c:	20000030 	.word	0x20000030

08007130 <cleanup_stdio>:
 8007130:	6841      	ldr	r1, [r0, #4]
 8007132:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <cleanup_stdio+0x34>)
 8007134:	b510      	push	{r4, lr}
 8007136:	4299      	cmp	r1, r3
 8007138:	4604      	mov	r4, r0
 800713a:	d001      	beq.n	8007140 <cleanup_stdio+0x10>
 800713c:	f001 fe26 	bl	8008d8c <_fflush_r>
 8007140:	68a1      	ldr	r1, [r4, #8]
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <cleanup_stdio+0x38>)
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <cleanup_stdio+0x1e>
 8007148:	4620      	mov	r0, r4
 800714a:	f001 fe1f 	bl	8008d8c <_fflush_r>
 800714e:	68e1      	ldr	r1, [r4, #12]
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <cleanup_stdio+0x3c>)
 8007152:	4299      	cmp	r1, r3
 8007154:	d004      	beq.n	8007160 <cleanup_stdio+0x30>
 8007156:	4620      	mov	r0, r4
 8007158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715c:	f001 be16 	b.w	8008d8c <_fflush_r>
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	2000061c 	.word	0x2000061c
 8007168:	20000684 	.word	0x20000684
 800716c:	200006ec 	.word	0x200006ec

08007170 <global_stdio_init.part.0>:
 8007170:	b510      	push	{r4, lr}
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <global_stdio_init.part.0+0x30>)
 8007174:	4c0b      	ldr	r4, [pc, #44]	; (80071a4 <global_stdio_init.part.0+0x34>)
 8007176:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <global_stdio_init.part.0+0x38>)
 8007178:	4620      	mov	r0, r4
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	2104      	movs	r1, #4
 800717e:	2200      	movs	r2, #0
 8007180:	f7ff ff94 	bl	80070ac <std>
 8007184:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007188:	2201      	movs	r2, #1
 800718a:	2109      	movs	r1, #9
 800718c:	f7ff ff8e 	bl	80070ac <std>
 8007190:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007194:	2202      	movs	r2, #2
 8007196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719a:	2112      	movs	r1, #18
 800719c:	f7ff bf86 	b.w	80070ac <std>
 80071a0:	20000754 	.word	0x20000754
 80071a4:	2000061c 	.word	0x2000061c
 80071a8:	08007119 	.word	0x08007119

080071ac <__sfp_lock_acquire>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__sfp_lock_acquire+0x8>)
 80071ae:	f000 b920 	b.w	80073f2 <__retarget_lock_acquire_recursive>
 80071b2:	bf00      	nop
 80071b4:	2000075d 	.word	0x2000075d

080071b8 <__sfp_lock_release>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__sfp_lock_release+0x8>)
 80071ba:	f000 b91b 	b.w	80073f4 <__retarget_lock_release_recursive>
 80071be:	bf00      	nop
 80071c0:	2000075d 	.word	0x2000075d

080071c4 <__sinit>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4604      	mov	r4, r0
 80071c8:	f7ff fff0 	bl	80071ac <__sfp_lock_acquire>
 80071cc:	6a23      	ldr	r3, [r4, #32]
 80071ce:	b11b      	cbz	r3, 80071d8 <__sinit+0x14>
 80071d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d4:	f7ff bff0 	b.w	80071b8 <__sfp_lock_release>
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <__sinit+0x28>)
 80071da:	6223      	str	r3, [r4, #32]
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <__sinit+0x2c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f5      	bne.n	80071d0 <__sinit+0xc>
 80071e4:	f7ff ffc4 	bl	8007170 <global_stdio_init.part.0>
 80071e8:	e7f2      	b.n	80071d0 <__sinit+0xc>
 80071ea:	bf00      	nop
 80071ec:	08007131 	.word	0x08007131
 80071f0:	20000754 	.word	0x20000754

080071f4 <_fwalk_sglue>:
 80071f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f8:	4607      	mov	r7, r0
 80071fa:	4688      	mov	r8, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	2600      	movs	r6, #0
 8007200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007204:	f1b9 0901 	subs.w	r9, r9, #1
 8007208:	d505      	bpl.n	8007216 <_fwalk_sglue+0x22>
 800720a:	6824      	ldr	r4, [r4, #0]
 800720c:	2c00      	cmp	r4, #0
 800720e:	d1f7      	bne.n	8007200 <_fwalk_sglue+0xc>
 8007210:	4630      	mov	r0, r6
 8007212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d907      	bls.n	800722c <_fwalk_sglue+0x38>
 800721c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007220:	3301      	adds	r3, #1
 8007222:	d003      	beq.n	800722c <_fwalk_sglue+0x38>
 8007224:	4629      	mov	r1, r5
 8007226:	4638      	mov	r0, r7
 8007228:	47c0      	blx	r8
 800722a:	4306      	orrs	r6, r0
 800722c:	3568      	adds	r5, #104	; 0x68
 800722e:	e7e9      	b.n	8007204 <_fwalk_sglue+0x10>

08007230 <siprintf>:
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007236:	b500      	push	{lr}
 8007238:	b09c      	sub	sp, #112	; 0x70
 800723a:	ab1d      	add	r3, sp, #116	; 0x74
 800723c:	9002      	str	r0, [sp, #8]
 800723e:	9006      	str	r0, [sp, #24]
 8007240:	9107      	str	r1, [sp, #28]
 8007242:	9104      	str	r1, [sp, #16]
 8007244:	4808      	ldr	r0, [pc, #32]	; (8007268 <siprintf+0x38>)
 8007246:	4909      	ldr	r1, [pc, #36]	; (800726c <siprintf+0x3c>)
 8007248:	f853 2b04 	ldr.w	r2, [r3], #4
 800724c:	9105      	str	r1, [sp, #20]
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	a902      	add	r1, sp, #8
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	f001 fc1a 	bl	8008a8c <_svfiprintf_r>
 8007258:	2200      	movs	r2, #0
 800725a:	9b02      	ldr	r3, [sp, #8]
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	b01c      	add	sp, #112	; 0x70
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b003      	add	sp, #12
 8007266:	4770      	bx	lr
 8007268:	2000007c 	.word	0x2000007c
 800726c:	ffff0208 	.word	0xffff0208

08007270 <__sread>:
 8007270:	b510      	push	{r4, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007278:	f000 f86c 	bl	8007354 <_read_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	bfab      	itete	ge
 8007280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007282:	89a3      	ldrhlt	r3, [r4, #12]
 8007284:	181b      	addge	r3, r3, r0
 8007286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800728a:	bfac      	ite	ge
 800728c:	6563      	strge	r3, [r4, #84]	; 0x54
 800728e:	81a3      	strhlt	r3, [r4, #12]
 8007290:	bd10      	pop	{r4, pc}

08007292 <__swrite>:
 8007292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007296:	461f      	mov	r7, r3
 8007298:	898b      	ldrh	r3, [r1, #12]
 800729a:	4605      	mov	r5, r0
 800729c:	05db      	lsls	r3, r3, #23
 800729e:	460c      	mov	r4, r1
 80072a0:	4616      	mov	r6, r2
 80072a2:	d505      	bpl.n	80072b0 <__swrite+0x1e>
 80072a4:	2302      	movs	r3, #2
 80072a6:	2200      	movs	r2, #0
 80072a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ac:	f000 f840 	bl	8007330 <_lseek_r>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	4632      	mov	r2, r6
 80072b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	4628      	mov	r0, r5
 80072bc:	463b      	mov	r3, r7
 80072be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c6:	f000 b857 	b.w	8007378 <_write_r>

080072ca <__sseek>:
 80072ca:	b510      	push	{r4, lr}
 80072cc:	460c      	mov	r4, r1
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	f000 f82d 	bl	8007330 <_lseek_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	bf15      	itete	ne
 80072dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80072de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072e6:	81a3      	strheq	r3, [r4, #12]
 80072e8:	bf18      	it	ne
 80072ea:	81a3      	strhne	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__sclose>:
 80072ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f2:	f000 b80d 	b.w	8007310 <_close_r>

080072f6 <memset>:
 80072f6:	4603      	mov	r3, r0
 80072f8:	4402      	add	r2, r0
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d100      	bne.n	8007300 <memset+0xa>
 80072fe:	4770      	bx	lr
 8007300:	f803 1b01 	strb.w	r1, [r3], #1
 8007304:	e7f9      	b.n	80072fa <memset+0x4>
	...

08007308 <_localeconv_r>:
 8007308:	4800      	ldr	r0, [pc, #0]	; (800730c <_localeconv_r+0x4>)
 800730a:	4770      	bx	lr
 800730c:	20000170 	.word	0x20000170

08007310 <_close_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	2300      	movs	r3, #0
 8007314:	4d05      	ldr	r5, [pc, #20]	; (800732c <_close_r+0x1c>)
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	f7fb ff52 	bl	80031c4 <_close>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_close_r+0x1a>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_close_r+0x1a>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	20000758 	.word	0x20000758

08007330 <_lseek_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4604      	mov	r4, r0
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	2200      	movs	r2, #0
 800733a:	4d05      	ldr	r5, [pc, #20]	; (8007350 <_lseek_r+0x20>)
 800733c:	602a      	str	r2, [r5, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	f7fb ff64 	bl	800320c <_lseek>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_lseek_r+0x1e>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_lseek_r+0x1e>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	20000758 	.word	0x20000758

08007354 <_read_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4604      	mov	r4, r0
 8007358:	4608      	mov	r0, r1
 800735a:	4611      	mov	r1, r2
 800735c:	2200      	movs	r2, #0
 800735e:	4d05      	ldr	r5, [pc, #20]	; (8007374 <_read_r+0x20>)
 8007360:	602a      	str	r2, [r5, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	f7fb fef5 	bl	8003152 <_read>
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d102      	bne.n	8007372 <_read_r+0x1e>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b103      	cbz	r3, 8007372 <_read_r+0x1e>
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	20000758 	.word	0x20000758

08007378 <_write_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	4611      	mov	r1, r2
 8007380:	2200      	movs	r2, #0
 8007382:	4d05      	ldr	r5, [pc, #20]	; (8007398 <_write_r+0x20>)
 8007384:	602a      	str	r2, [r5, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	f7fb ff00 	bl	800318c <_write>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_write_r+0x1e>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_write_r+0x1e>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	20000758 	.word	0x20000758

0800739c <__errno>:
 800739c:	4b01      	ldr	r3, [pc, #4]	; (80073a4 <__errno+0x8>)
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	2000007c 	.word	0x2000007c

080073a8 <__libc_init_array>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	2600      	movs	r6, #0
 80073ac:	4d0c      	ldr	r5, [pc, #48]	; (80073e0 <__libc_init_array+0x38>)
 80073ae:	4c0d      	ldr	r4, [pc, #52]	; (80073e4 <__libc_init_array+0x3c>)
 80073b0:	1b64      	subs	r4, r4, r5
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	42a6      	cmp	r6, r4
 80073b6:	d109      	bne.n	80073cc <__libc_init_array+0x24>
 80073b8:	f002 f888 	bl	80094cc <_init>
 80073bc:	2600      	movs	r6, #0
 80073be:	4d0a      	ldr	r5, [pc, #40]	; (80073e8 <__libc_init_array+0x40>)
 80073c0:	4c0a      	ldr	r4, [pc, #40]	; (80073ec <__libc_init_array+0x44>)
 80073c2:	1b64      	subs	r4, r4, r5
 80073c4:	10a4      	asrs	r4, r4, #2
 80073c6:	42a6      	cmp	r6, r4
 80073c8:	d105      	bne.n	80073d6 <__libc_init_array+0x2e>
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d0:	4798      	blx	r3
 80073d2:	3601      	adds	r6, #1
 80073d4:	e7ee      	b.n	80073b4 <__libc_init_array+0xc>
 80073d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073da:	4798      	blx	r3
 80073dc:	3601      	adds	r6, #1
 80073de:	e7f2      	b.n	80073c6 <__libc_init_array+0x1e>
 80073e0:	080098cc 	.word	0x080098cc
 80073e4:	080098cc 	.word	0x080098cc
 80073e8:	080098cc 	.word	0x080098cc
 80073ec:	080098d0 	.word	0x080098d0

080073f0 <__retarget_lock_init_recursive>:
 80073f0:	4770      	bx	lr

080073f2 <__retarget_lock_acquire_recursive>:
 80073f2:	4770      	bx	lr

080073f4 <__retarget_lock_release_recursive>:
 80073f4:	4770      	bx	lr

080073f6 <memchr>:
 80073f6:	4603      	mov	r3, r0
 80073f8:	b510      	push	{r4, lr}
 80073fa:	b2c9      	uxtb	r1, r1
 80073fc:	4402      	add	r2, r0
 80073fe:	4293      	cmp	r3, r2
 8007400:	4618      	mov	r0, r3
 8007402:	d101      	bne.n	8007408 <memchr+0x12>
 8007404:	2000      	movs	r0, #0
 8007406:	e003      	b.n	8007410 <memchr+0x1a>
 8007408:	7804      	ldrb	r4, [r0, #0]
 800740a:	3301      	adds	r3, #1
 800740c:	428c      	cmp	r4, r1
 800740e:	d1f6      	bne.n	80073fe <memchr+0x8>
 8007410:	bd10      	pop	{r4, pc}

08007412 <quorem>:
 8007412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007416:	6903      	ldr	r3, [r0, #16]
 8007418:	690c      	ldr	r4, [r1, #16]
 800741a:	4607      	mov	r7, r0
 800741c:	42a3      	cmp	r3, r4
 800741e:	db7f      	blt.n	8007520 <quorem+0x10e>
 8007420:	3c01      	subs	r4, #1
 8007422:	f100 0514 	add.w	r5, r0, #20
 8007426:	f101 0814 	add.w	r8, r1, #20
 800742a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007438:	3301      	adds	r3, #1
 800743a:	429a      	cmp	r2, r3
 800743c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007440:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007448:	d331      	bcc.n	80074ae <quorem+0x9c>
 800744a:	f04f 0e00 	mov.w	lr, #0
 800744e:	4640      	mov	r0, r8
 8007450:	46ac      	mov	ip, r5
 8007452:	46f2      	mov	sl, lr
 8007454:	f850 2b04 	ldr.w	r2, [r0], #4
 8007458:	b293      	uxth	r3, r2
 800745a:	fb06 e303 	mla	r3, r6, r3, lr
 800745e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007462:	0c1a      	lsrs	r2, r3, #16
 8007464:	b29b      	uxth	r3, r3
 8007466:	fb06 220e 	mla	r2, r6, lr, r2
 800746a:	ebaa 0303 	sub.w	r3, sl, r3
 800746e:	f8dc a000 	ldr.w	sl, [ip]
 8007472:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007476:	fa1f fa8a 	uxth.w	sl, sl
 800747a:	4453      	add	r3, sl
 800747c:	f8dc a000 	ldr.w	sl, [ip]
 8007480:	b292      	uxth	r2, r2
 8007482:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007486:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800748a:	b29b      	uxth	r3, r3
 800748c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007490:	4581      	cmp	r9, r0
 8007492:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007496:	f84c 3b04 	str.w	r3, [ip], #4
 800749a:	d2db      	bcs.n	8007454 <quorem+0x42>
 800749c:	f855 300b 	ldr.w	r3, [r5, fp]
 80074a0:	b92b      	cbnz	r3, 80074ae <quorem+0x9c>
 80074a2:	9b01      	ldr	r3, [sp, #4]
 80074a4:	3b04      	subs	r3, #4
 80074a6:	429d      	cmp	r5, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	d32d      	bcc.n	8007508 <quorem+0xf6>
 80074ac:	613c      	str	r4, [r7, #16]
 80074ae:	4638      	mov	r0, r7
 80074b0:	f001 f994 	bl	80087dc <__mcmp>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	db23      	blt.n	8007500 <quorem+0xee>
 80074b8:	4629      	mov	r1, r5
 80074ba:	2000      	movs	r0, #0
 80074bc:	3601      	adds	r6, #1
 80074be:	f858 2b04 	ldr.w	r2, [r8], #4
 80074c2:	f8d1 c000 	ldr.w	ip, [r1]
 80074c6:	b293      	uxth	r3, r2
 80074c8:	1ac3      	subs	r3, r0, r3
 80074ca:	0c12      	lsrs	r2, r2, #16
 80074cc:	fa1f f08c 	uxth.w	r0, ip
 80074d0:	4403      	add	r3, r0
 80074d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80074d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074da:	b29b      	uxth	r3, r3
 80074dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074e0:	45c1      	cmp	r9, r8
 80074e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074e6:	f841 3b04 	str.w	r3, [r1], #4
 80074ea:	d2e8      	bcs.n	80074be <quorem+0xac>
 80074ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074f4:	b922      	cbnz	r2, 8007500 <quorem+0xee>
 80074f6:	3b04      	subs	r3, #4
 80074f8:	429d      	cmp	r5, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	d30a      	bcc.n	8007514 <quorem+0x102>
 80074fe:	613c      	str	r4, [r7, #16]
 8007500:	4630      	mov	r0, r6
 8007502:	b003      	add	sp, #12
 8007504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	3b04      	subs	r3, #4
 800750c:	2a00      	cmp	r2, #0
 800750e:	d1cd      	bne.n	80074ac <quorem+0x9a>
 8007510:	3c01      	subs	r4, #1
 8007512:	e7c8      	b.n	80074a6 <quorem+0x94>
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	3b04      	subs	r3, #4
 8007518:	2a00      	cmp	r2, #0
 800751a:	d1f0      	bne.n	80074fe <quorem+0xec>
 800751c:	3c01      	subs	r4, #1
 800751e:	e7eb      	b.n	80074f8 <quorem+0xe6>
 8007520:	2000      	movs	r0, #0
 8007522:	e7ee      	b.n	8007502 <quorem+0xf0>
 8007524:	0000      	movs	r0, r0
	...

08007528 <_dtoa_r>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	4616      	mov	r6, r2
 800752e:	461f      	mov	r7, r3
 8007530:	69c4      	ldr	r4, [r0, #28]
 8007532:	b099      	sub	sp, #100	; 0x64
 8007534:	4605      	mov	r5, r0
 8007536:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800753a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800753e:	b974      	cbnz	r4, 800755e <_dtoa_r+0x36>
 8007540:	2010      	movs	r0, #16
 8007542:	f000 fe1d 	bl	8008180 <malloc>
 8007546:	4602      	mov	r2, r0
 8007548:	61e8      	str	r0, [r5, #28]
 800754a:	b920      	cbnz	r0, 8007556 <_dtoa_r+0x2e>
 800754c:	21ef      	movs	r1, #239	; 0xef
 800754e:	4bac      	ldr	r3, [pc, #688]	; (8007800 <_dtoa_r+0x2d8>)
 8007550:	48ac      	ldr	r0, [pc, #688]	; (8007804 <_dtoa_r+0x2dc>)
 8007552:	f001 fc7b 	bl	8008e4c <__assert_func>
 8007556:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800755a:	6004      	str	r4, [r0, #0]
 800755c:	60c4      	str	r4, [r0, #12]
 800755e:	69eb      	ldr	r3, [r5, #28]
 8007560:	6819      	ldr	r1, [r3, #0]
 8007562:	b151      	cbz	r1, 800757a <_dtoa_r+0x52>
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	2301      	movs	r3, #1
 8007568:	4093      	lsls	r3, r2
 800756a:	604a      	str	r2, [r1, #4]
 800756c:	608b      	str	r3, [r1, #8]
 800756e:	4628      	mov	r0, r5
 8007570:	f000 fefa 	bl	8008368 <_Bfree>
 8007574:	2200      	movs	r2, #0
 8007576:	69eb      	ldr	r3, [r5, #28]
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	1e3b      	subs	r3, r7, #0
 800757c:	bfaf      	iteee	ge
 800757e:	2300      	movge	r3, #0
 8007580:	2201      	movlt	r2, #1
 8007582:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007586:	9305      	strlt	r3, [sp, #20]
 8007588:	bfa8      	it	ge
 800758a:	f8c8 3000 	strge.w	r3, [r8]
 800758e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007592:	4b9d      	ldr	r3, [pc, #628]	; (8007808 <_dtoa_r+0x2e0>)
 8007594:	bfb8      	it	lt
 8007596:	f8c8 2000 	strlt.w	r2, [r8]
 800759a:	ea33 0309 	bics.w	r3, r3, r9
 800759e:	d119      	bne.n	80075d4 <_dtoa_r+0xac>
 80075a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80075a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075ac:	4333      	orrs	r3, r6
 80075ae:	f000 8589 	beq.w	80080c4 <_dtoa_r+0xb9c>
 80075b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075b4:	b953      	cbnz	r3, 80075cc <_dtoa_r+0xa4>
 80075b6:	4b95      	ldr	r3, [pc, #596]	; (800780c <_dtoa_r+0x2e4>)
 80075b8:	e023      	b.n	8007602 <_dtoa_r+0xda>
 80075ba:	4b95      	ldr	r3, [pc, #596]	; (8007810 <_dtoa_r+0x2e8>)
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	3308      	adds	r3, #8
 80075c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	9803      	ldr	r0, [sp, #12]
 80075c6:	b019      	add	sp, #100	; 0x64
 80075c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075cc:	4b8f      	ldr	r3, [pc, #572]	; (800780c <_dtoa_r+0x2e4>)
 80075ce:	9303      	str	r3, [sp, #12]
 80075d0:	3303      	adds	r3, #3
 80075d2:	e7f5      	b.n	80075c0 <_dtoa_r+0x98>
 80075d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80075d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80075dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075e0:	2200      	movs	r2, #0
 80075e2:	2300      	movs	r3, #0
 80075e4:	f7f9 f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 80075e8:	4680      	mov	r8, r0
 80075ea:	b160      	cbz	r0, 8007606 <_dtoa_r+0xde>
 80075ec:	2301      	movs	r3, #1
 80075ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 8562 	beq.w	80080be <_dtoa_r+0xb96>
 80075fa:	4b86      	ldr	r3, [pc, #536]	; (8007814 <_dtoa_r+0x2ec>)
 80075fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	3b01      	subs	r3, #1
 8007602:	9303      	str	r3, [sp, #12]
 8007604:	e7de      	b.n	80075c4 <_dtoa_r+0x9c>
 8007606:	ab16      	add	r3, sp, #88	; 0x58
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	ab17      	add	r3, sp, #92	; 0x5c
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4628      	mov	r0, r5
 8007610:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007614:	f001 f98a 	bl	800892c <__d2b>
 8007618:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800761c:	4682      	mov	sl, r0
 800761e:	2c00      	cmp	r4, #0
 8007620:	d07e      	beq.n	8007720 <_dtoa_r+0x1f8>
 8007622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007628:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800762c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007630:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007638:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800763c:	4619      	mov	r1, r3
 800763e:	2200      	movs	r2, #0
 8007640:	4b75      	ldr	r3, [pc, #468]	; (8007818 <_dtoa_r+0x2f0>)
 8007642:	f7f8 fd91 	bl	8000168 <__aeabi_dsub>
 8007646:	a368      	add	r3, pc, #416	; (adr r3, 80077e8 <_dtoa_r+0x2c0>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 ff44 	bl	80004d8 <__aeabi_dmul>
 8007650:	a367      	add	r3, pc, #412	; (adr r3, 80077f0 <_dtoa_r+0x2c8>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f7f8 fd89 	bl	800016c <__adddf3>
 800765a:	4606      	mov	r6, r0
 800765c:	4620      	mov	r0, r4
 800765e:	460f      	mov	r7, r1
 8007660:	f7f8 fed0 	bl	8000404 <__aeabi_i2d>
 8007664:	a364      	add	r3, pc, #400	; (adr r3, 80077f8 <_dtoa_r+0x2d0>)
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f7f8 ff35 	bl	80004d8 <__aeabi_dmul>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4630      	mov	r0, r6
 8007674:	4639      	mov	r1, r7
 8007676:	f7f8 fd79 	bl	800016c <__adddf3>
 800767a:	4606      	mov	r6, r0
 800767c:	460f      	mov	r7, r1
 800767e:	f7f9 f9db 	bl	8000a38 <__aeabi_d2iz>
 8007682:	2200      	movs	r2, #0
 8007684:	4683      	mov	fp, r0
 8007686:	2300      	movs	r3, #0
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f9 f996 	bl	80009bc <__aeabi_dcmplt>
 8007690:	b148      	cbz	r0, 80076a6 <_dtoa_r+0x17e>
 8007692:	4658      	mov	r0, fp
 8007694:	f7f8 feb6 	bl	8000404 <__aeabi_i2d>
 8007698:	4632      	mov	r2, r6
 800769a:	463b      	mov	r3, r7
 800769c:	f7f9 f984 	bl	80009a8 <__aeabi_dcmpeq>
 80076a0:	b908      	cbnz	r0, 80076a6 <_dtoa_r+0x17e>
 80076a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076a6:	f1bb 0f16 	cmp.w	fp, #22
 80076aa:	d857      	bhi.n	800775c <_dtoa_r+0x234>
 80076ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076b0:	4b5a      	ldr	r3, [pc, #360]	; (800781c <_dtoa_r+0x2f4>)
 80076b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f9 f97f 	bl	80009bc <__aeabi_dcmplt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d04e      	beq.n	8007760 <_dtoa_r+0x238>
 80076c2:	2300      	movs	r3, #0
 80076c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80076ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80076cc:	1b1b      	subs	r3, r3, r4
 80076ce:	1e5a      	subs	r2, r3, #1
 80076d0:	bf46      	itte	mi
 80076d2:	f1c3 0901 	rsbmi	r9, r3, #1
 80076d6:	2300      	movmi	r3, #0
 80076d8:	f04f 0900 	movpl.w	r9, #0
 80076dc:	9209      	str	r2, [sp, #36]	; 0x24
 80076de:	bf48      	it	mi
 80076e0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80076e2:	f1bb 0f00 	cmp.w	fp, #0
 80076e6:	db3d      	blt.n	8007764 <_dtoa_r+0x23c>
 80076e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80076ee:	445b      	add	r3, fp
 80076f0:	9309      	str	r3, [sp, #36]	; 0x24
 80076f2:	2300      	movs	r3, #0
 80076f4:	930a      	str	r3, [sp, #40]	; 0x28
 80076f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d867      	bhi.n	80077cc <_dtoa_r+0x2a4>
 80076fc:	2b05      	cmp	r3, #5
 80076fe:	bfc4      	itt	gt
 8007700:	3b04      	subgt	r3, #4
 8007702:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007706:	bfc8      	it	gt
 8007708:	2400      	movgt	r4, #0
 800770a:	f1a3 0302 	sub.w	r3, r3, #2
 800770e:	bfd8      	it	le
 8007710:	2401      	movle	r4, #1
 8007712:	2b03      	cmp	r3, #3
 8007714:	f200 8086 	bhi.w	8007824 <_dtoa_r+0x2fc>
 8007718:	e8df f003 	tbb	[pc, r3]
 800771c:	5637392c 	.word	0x5637392c
 8007720:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007724:	441c      	add	r4, r3
 8007726:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800772a:	2b20      	cmp	r3, #32
 800772c:	bfc1      	itttt	gt
 800772e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007732:	fa09 f903 	lslgt.w	r9, r9, r3
 8007736:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800773a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800773e:	bfd6      	itet	le
 8007740:	f1c3 0320 	rsble	r3, r3, #32
 8007744:	ea49 0003 	orrgt.w	r0, r9, r3
 8007748:	fa06 f003 	lslle.w	r0, r6, r3
 800774c:	f7f8 fe4a 	bl	80003e4 <__aeabi_ui2d>
 8007750:	2201      	movs	r2, #1
 8007752:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007756:	3c01      	subs	r4, #1
 8007758:	9213      	str	r2, [sp, #76]	; 0x4c
 800775a:	e76f      	b.n	800763c <_dtoa_r+0x114>
 800775c:	2301      	movs	r3, #1
 800775e:	e7b3      	b.n	80076c8 <_dtoa_r+0x1a0>
 8007760:	900f      	str	r0, [sp, #60]	; 0x3c
 8007762:	e7b2      	b.n	80076ca <_dtoa_r+0x1a2>
 8007764:	f1cb 0300 	rsb	r3, fp, #0
 8007768:	930a      	str	r3, [sp, #40]	; 0x28
 800776a:	2300      	movs	r3, #0
 800776c:	eba9 090b 	sub.w	r9, r9, fp
 8007770:	930e      	str	r3, [sp, #56]	; 0x38
 8007772:	e7c0      	b.n	80076f6 <_dtoa_r+0x1ce>
 8007774:	2300      	movs	r3, #0
 8007776:	930b      	str	r3, [sp, #44]	; 0x2c
 8007778:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800777a:	2b00      	cmp	r3, #0
 800777c:	dc55      	bgt.n	800782a <_dtoa_r+0x302>
 800777e:	2301      	movs	r3, #1
 8007780:	461a      	mov	r2, r3
 8007782:	9306      	str	r3, [sp, #24]
 8007784:	9308      	str	r3, [sp, #32]
 8007786:	9223      	str	r2, [sp, #140]	; 0x8c
 8007788:	e00b      	b.n	80077a2 <_dtoa_r+0x27a>
 800778a:	2301      	movs	r3, #1
 800778c:	e7f3      	b.n	8007776 <_dtoa_r+0x24e>
 800778e:	2300      	movs	r3, #0
 8007790:	930b      	str	r3, [sp, #44]	; 0x2c
 8007792:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007794:	445b      	add	r3, fp
 8007796:	9306      	str	r3, [sp, #24]
 8007798:	3301      	adds	r3, #1
 800779a:	2b01      	cmp	r3, #1
 800779c:	9308      	str	r3, [sp, #32]
 800779e:	bfb8      	it	lt
 80077a0:	2301      	movlt	r3, #1
 80077a2:	2100      	movs	r1, #0
 80077a4:	2204      	movs	r2, #4
 80077a6:	69e8      	ldr	r0, [r5, #28]
 80077a8:	f102 0614 	add.w	r6, r2, #20
 80077ac:	429e      	cmp	r6, r3
 80077ae:	d940      	bls.n	8007832 <_dtoa_r+0x30a>
 80077b0:	6041      	str	r1, [r0, #4]
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 fd98 	bl	80082e8 <_Balloc>
 80077b8:	9003      	str	r0, [sp, #12]
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d13c      	bne.n	8007838 <_dtoa_r+0x310>
 80077be:	4602      	mov	r2, r0
 80077c0:	f240 11af 	movw	r1, #431	; 0x1af
 80077c4:	4b16      	ldr	r3, [pc, #88]	; (8007820 <_dtoa_r+0x2f8>)
 80077c6:	e6c3      	b.n	8007550 <_dtoa_r+0x28>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e7e1      	b.n	8007790 <_dtoa_r+0x268>
 80077cc:	2401      	movs	r4, #1
 80077ce:	2300      	movs	r3, #0
 80077d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80077d2:	9322      	str	r3, [sp, #136]	; 0x88
 80077d4:	f04f 33ff 	mov.w	r3, #4294967295
 80077d8:	2200      	movs	r2, #0
 80077da:	9306      	str	r3, [sp, #24]
 80077dc:	9308      	str	r3, [sp, #32]
 80077de:	2312      	movs	r3, #18
 80077e0:	e7d1      	b.n	8007786 <_dtoa_r+0x25e>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
 80077e8:	636f4361 	.word	0x636f4361
 80077ec:	3fd287a7 	.word	0x3fd287a7
 80077f0:	8b60c8b3 	.word	0x8b60c8b3
 80077f4:	3fc68a28 	.word	0x3fc68a28
 80077f8:	509f79fb 	.word	0x509f79fb
 80077fc:	3fd34413 	.word	0x3fd34413
 8007800:	0800959f 	.word	0x0800959f
 8007804:	080095b6 	.word	0x080095b6
 8007808:	7ff00000 	.word	0x7ff00000
 800780c:	0800959b 	.word	0x0800959b
 8007810:	08009592 	.word	0x08009592
 8007814:	0800956f 	.word	0x0800956f
 8007818:	3ff80000 	.word	0x3ff80000
 800781c:	080096a0 	.word	0x080096a0
 8007820:	0800960e 	.word	0x0800960e
 8007824:	2301      	movs	r3, #1
 8007826:	930b      	str	r3, [sp, #44]	; 0x2c
 8007828:	e7d4      	b.n	80077d4 <_dtoa_r+0x2ac>
 800782a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800782c:	9306      	str	r3, [sp, #24]
 800782e:	9308      	str	r3, [sp, #32]
 8007830:	e7b7      	b.n	80077a2 <_dtoa_r+0x27a>
 8007832:	3101      	adds	r1, #1
 8007834:	0052      	lsls	r2, r2, #1
 8007836:	e7b7      	b.n	80077a8 <_dtoa_r+0x280>
 8007838:	69eb      	ldr	r3, [r5, #28]
 800783a:	9a03      	ldr	r2, [sp, #12]
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	9b08      	ldr	r3, [sp, #32]
 8007840:	2b0e      	cmp	r3, #14
 8007842:	f200 80a8 	bhi.w	8007996 <_dtoa_r+0x46e>
 8007846:	2c00      	cmp	r4, #0
 8007848:	f000 80a5 	beq.w	8007996 <_dtoa_r+0x46e>
 800784c:	f1bb 0f00 	cmp.w	fp, #0
 8007850:	dd34      	ble.n	80078bc <_dtoa_r+0x394>
 8007852:	4b9a      	ldr	r3, [pc, #616]	; (8007abc <_dtoa_r+0x594>)
 8007854:	f00b 020f 	and.w	r2, fp, #15
 8007858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800785c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007860:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007864:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007868:	ea4f 142b 	mov.w	r4, fp, asr #4
 800786c:	d016      	beq.n	800789c <_dtoa_r+0x374>
 800786e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007872:	4b93      	ldr	r3, [pc, #588]	; (8007ac0 <_dtoa_r+0x598>)
 8007874:	2703      	movs	r7, #3
 8007876:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800787a:	f7f8 ff57 	bl	800072c <__aeabi_ddiv>
 800787e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007882:	f004 040f 	and.w	r4, r4, #15
 8007886:	4e8e      	ldr	r6, [pc, #568]	; (8007ac0 <_dtoa_r+0x598>)
 8007888:	b954      	cbnz	r4, 80078a0 <_dtoa_r+0x378>
 800788a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800788e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007892:	f7f8 ff4b 	bl	800072c <__aeabi_ddiv>
 8007896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800789a:	e029      	b.n	80078f0 <_dtoa_r+0x3c8>
 800789c:	2702      	movs	r7, #2
 800789e:	e7f2      	b.n	8007886 <_dtoa_r+0x35e>
 80078a0:	07e1      	lsls	r1, r4, #31
 80078a2:	d508      	bpl.n	80078b6 <_dtoa_r+0x38e>
 80078a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078ac:	f7f8 fe14 	bl	80004d8 <__aeabi_dmul>
 80078b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078b4:	3701      	adds	r7, #1
 80078b6:	1064      	asrs	r4, r4, #1
 80078b8:	3608      	adds	r6, #8
 80078ba:	e7e5      	b.n	8007888 <_dtoa_r+0x360>
 80078bc:	f000 80a5 	beq.w	8007a0a <_dtoa_r+0x4e2>
 80078c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078c4:	f1cb 0400 	rsb	r4, fp, #0
 80078c8:	4b7c      	ldr	r3, [pc, #496]	; (8007abc <_dtoa_r+0x594>)
 80078ca:	f004 020f 	and.w	r2, r4, #15
 80078ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f7f8 fdff 	bl	80004d8 <__aeabi_dmul>
 80078da:	2702      	movs	r7, #2
 80078dc:	2300      	movs	r3, #0
 80078de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078e2:	4e77      	ldr	r6, [pc, #476]	; (8007ac0 <_dtoa_r+0x598>)
 80078e4:	1124      	asrs	r4, r4, #4
 80078e6:	2c00      	cmp	r4, #0
 80078e8:	f040 8084 	bne.w	80079f4 <_dtoa_r+0x4cc>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1d2      	bne.n	8007896 <_dtoa_r+0x36e>
 80078f0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80078f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80078f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8087 	beq.w	8007a0e <_dtoa_r+0x4e6>
 8007900:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007904:	2200      	movs	r2, #0
 8007906:	4b6f      	ldr	r3, [pc, #444]	; (8007ac4 <_dtoa_r+0x59c>)
 8007908:	f7f9 f858 	bl	80009bc <__aeabi_dcmplt>
 800790c:	2800      	cmp	r0, #0
 800790e:	d07e      	beq.n	8007a0e <_dtoa_r+0x4e6>
 8007910:	9b08      	ldr	r3, [sp, #32]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d07b      	beq.n	8007a0e <_dtoa_r+0x4e6>
 8007916:	9b06      	ldr	r3, [sp, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	dd38      	ble.n	800798e <_dtoa_r+0x466>
 800791c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007920:	2200      	movs	r2, #0
 8007922:	4b69      	ldr	r3, [pc, #420]	; (8007ac8 <_dtoa_r+0x5a0>)
 8007924:	f7f8 fdd8 	bl	80004d8 <__aeabi_dmul>
 8007928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800792c:	9c06      	ldr	r4, [sp, #24]
 800792e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007932:	3701      	adds	r7, #1
 8007934:	4638      	mov	r0, r7
 8007936:	f7f8 fd65 	bl	8000404 <__aeabi_i2d>
 800793a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793e:	f7f8 fdcb 	bl	80004d8 <__aeabi_dmul>
 8007942:	2200      	movs	r2, #0
 8007944:	4b61      	ldr	r3, [pc, #388]	; (8007acc <_dtoa_r+0x5a4>)
 8007946:	f7f8 fc11 	bl	800016c <__adddf3>
 800794a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800794e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007952:	9611      	str	r6, [sp, #68]	; 0x44
 8007954:	2c00      	cmp	r4, #0
 8007956:	d15d      	bne.n	8007a14 <_dtoa_r+0x4ec>
 8007958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800795c:	2200      	movs	r2, #0
 800795e:	4b5c      	ldr	r3, [pc, #368]	; (8007ad0 <_dtoa_r+0x5a8>)
 8007960:	f7f8 fc02 	bl	8000168 <__aeabi_dsub>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800796c:	4633      	mov	r3, r6
 800796e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007970:	f7f9 f842 	bl	80009f8 <__aeabi_dcmpgt>
 8007974:	2800      	cmp	r0, #0
 8007976:	f040 8295 	bne.w	8007ea4 <_dtoa_r+0x97c>
 800797a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800797e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007980:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007984:	f7f9 f81a 	bl	80009bc <__aeabi_dcmplt>
 8007988:	2800      	cmp	r0, #0
 800798a:	f040 8289 	bne.w	8007ea0 <_dtoa_r+0x978>
 800798e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007992:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007996:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007998:	2b00      	cmp	r3, #0
 800799a:	f2c0 8151 	blt.w	8007c40 <_dtoa_r+0x718>
 800799e:	f1bb 0f0e 	cmp.w	fp, #14
 80079a2:	f300 814d 	bgt.w	8007c40 <_dtoa_r+0x718>
 80079a6:	4b45      	ldr	r3, [pc, #276]	; (8007abc <_dtoa_r+0x594>)
 80079a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80079b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f280 80da 	bge.w	8007b70 <_dtoa_r+0x648>
 80079bc:	9b08      	ldr	r3, [sp, #32]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f300 80d6 	bgt.w	8007b70 <_dtoa_r+0x648>
 80079c4:	f040 826b 	bne.w	8007e9e <_dtoa_r+0x976>
 80079c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079cc:	2200      	movs	r2, #0
 80079ce:	4b40      	ldr	r3, [pc, #256]	; (8007ad0 <_dtoa_r+0x5a8>)
 80079d0:	f7f8 fd82 	bl	80004d8 <__aeabi_dmul>
 80079d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d8:	f7f9 f804 	bl	80009e4 <__aeabi_dcmpge>
 80079dc:	9c08      	ldr	r4, [sp, #32]
 80079de:	4626      	mov	r6, r4
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f040 8241 	bne.w	8007e68 <_dtoa_r+0x940>
 80079e6:	2331      	movs	r3, #49	; 0x31
 80079e8:	9f03      	ldr	r7, [sp, #12]
 80079ea:	f10b 0b01 	add.w	fp, fp, #1
 80079ee:	f807 3b01 	strb.w	r3, [r7], #1
 80079f2:	e23d      	b.n	8007e70 <_dtoa_r+0x948>
 80079f4:	07e2      	lsls	r2, r4, #31
 80079f6:	d505      	bpl.n	8007a04 <_dtoa_r+0x4dc>
 80079f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079fc:	f7f8 fd6c 	bl	80004d8 <__aeabi_dmul>
 8007a00:	2301      	movs	r3, #1
 8007a02:	3701      	adds	r7, #1
 8007a04:	1064      	asrs	r4, r4, #1
 8007a06:	3608      	adds	r6, #8
 8007a08:	e76d      	b.n	80078e6 <_dtoa_r+0x3be>
 8007a0a:	2702      	movs	r7, #2
 8007a0c:	e770      	b.n	80078f0 <_dtoa_r+0x3c8>
 8007a0e:	46d8      	mov	r8, fp
 8007a10:	9c08      	ldr	r4, [sp, #32]
 8007a12:	e78f      	b.n	8007934 <_dtoa_r+0x40c>
 8007a14:	9903      	ldr	r1, [sp, #12]
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <_dtoa_r+0x594>)
 8007a18:	4421      	add	r1, r4
 8007a1a:	9112      	str	r1, [sp, #72]	; 0x48
 8007a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a22:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a2a:	2900      	cmp	r1, #0
 8007a2c:	d054      	beq.n	8007ad8 <_dtoa_r+0x5b0>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	4928      	ldr	r1, [pc, #160]	; (8007ad4 <_dtoa_r+0x5ac>)
 8007a32:	f7f8 fe7b 	bl	800072c <__aeabi_ddiv>
 8007a36:	463b      	mov	r3, r7
 8007a38:	4632      	mov	r2, r6
 8007a3a:	f7f8 fb95 	bl	8000168 <__aeabi_dsub>
 8007a3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a42:	9f03      	ldr	r7, [sp, #12]
 8007a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a48:	f7f8 fff6 	bl	8000a38 <__aeabi_d2iz>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	f7f8 fcd9 	bl	8000404 <__aeabi_i2d>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a5a:	f7f8 fb85 	bl	8000168 <__aeabi_dsub>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	3430      	adds	r4, #48	; 0x30
 8007a64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a6c:	f807 4b01 	strb.w	r4, [r7], #1
 8007a70:	f7f8 ffa4 	bl	80009bc <__aeabi_dcmplt>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d173      	bne.n	8007b60 <_dtoa_r+0x638>
 8007a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	4911      	ldr	r1, [pc, #68]	; (8007ac4 <_dtoa_r+0x59c>)
 8007a80:	f7f8 fb72 	bl	8000168 <__aeabi_dsub>
 8007a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a88:	f7f8 ff98 	bl	80009bc <__aeabi_dcmplt>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f040 80b6 	bne.w	8007bfe <_dtoa_r+0x6d6>
 8007a92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a94:	429f      	cmp	r7, r3
 8007a96:	f43f af7a 	beq.w	800798e <_dtoa_r+0x466>
 8007a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <_dtoa_r+0x5a0>)
 8007aa2:	f7f8 fd19 	bl	80004d8 <__aeabi_dmul>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <_dtoa_r+0x5a0>)
 8007ab2:	f7f8 fd11 	bl	80004d8 <__aeabi_dmul>
 8007ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aba:	e7c3      	b.n	8007a44 <_dtoa_r+0x51c>
 8007abc:	080096a0 	.word	0x080096a0
 8007ac0:	08009678 	.word	0x08009678
 8007ac4:	3ff00000 	.word	0x3ff00000
 8007ac8:	40240000 	.word	0x40240000
 8007acc:	401c0000 	.word	0x401c0000
 8007ad0:	40140000 	.word	0x40140000
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f8 fcfc 	bl	80004d8 <__aeabi_dmul>
 8007ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ae6:	9c03      	ldr	r4, [sp, #12]
 8007ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8007aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aee:	f7f8 ffa3 	bl	8000a38 <__aeabi_d2iz>
 8007af2:	9015      	str	r0, [sp, #84]	; 0x54
 8007af4:	f7f8 fc86 	bl	8000404 <__aeabi_i2d>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b00:	f7f8 fb32 	bl	8000168 <__aeabi_dsub>
 8007b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b06:	4606      	mov	r6, r0
 8007b08:	3330      	adds	r3, #48	; 0x30
 8007b0a:	f804 3b01 	strb.w	r3, [r4], #1
 8007b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b10:	460f      	mov	r7, r1
 8007b12:	429c      	cmp	r4, r3
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	d124      	bne.n	8007b64 <_dtoa_r+0x63c>
 8007b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b1e:	4baf      	ldr	r3, [pc, #700]	; (8007ddc <_dtoa_r+0x8b4>)
 8007b20:	f7f8 fb24 	bl	800016c <__adddf3>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 ff64 	bl	80009f8 <__aeabi_dcmpgt>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d163      	bne.n	8007bfc <_dtoa_r+0x6d4>
 8007b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b38:	2000      	movs	r0, #0
 8007b3a:	49a8      	ldr	r1, [pc, #672]	; (8007ddc <_dtoa_r+0x8b4>)
 8007b3c:	f7f8 fb14 	bl	8000168 <__aeabi_dsub>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4630      	mov	r0, r6
 8007b46:	4639      	mov	r1, r7
 8007b48:	f7f8 ff38 	bl	80009bc <__aeabi_dcmplt>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	f43f af1e 	beq.w	800798e <_dtoa_r+0x466>
 8007b52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007b54:	1e7b      	subs	r3, r7, #1
 8007b56:	9314      	str	r3, [sp, #80]	; 0x50
 8007b58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007b5c:	2b30      	cmp	r3, #48	; 0x30
 8007b5e:	d0f8      	beq.n	8007b52 <_dtoa_r+0x62a>
 8007b60:	46c3      	mov	fp, r8
 8007b62:	e03b      	b.n	8007bdc <_dtoa_r+0x6b4>
 8007b64:	4b9e      	ldr	r3, [pc, #632]	; (8007de0 <_dtoa_r+0x8b8>)
 8007b66:	f7f8 fcb7 	bl	80004d8 <__aeabi_dmul>
 8007b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b6e:	e7bc      	b.n	8007aea <_dtoa_r+0x5c2>
 8007b70:	9f03      	ldr	r7, [sp, #12]
 8007b72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	f7f8 fdd5 	bl	800072c <__aeabi_ddiv>
 8007b82:	f7f8 ff59 	bl	8000a38 <__aeabi_d2iz>
 8007b86:	4604      	mov	r4, r0
 8007b88:	f7f8 fc3c 	bl	8000404 <__aeabi_i2d>
 8007b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b90:	f7f8 fca2 	bl	80004d8 <__aeabi_dmul>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7f8 fae4 	bl	8000168 <__aeabi_dsub>
 8007ba0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007ba4:	f807 6b01 	strb.w	r6, [r7], #1
 8007ba8:	9e03      	ldr	r6, [sp, #12]
 8007baa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007bae:	1bbe      	subs	r6, r7, r6
 8007bb0:	45b4      	cmp	ip, r6
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	d136      	bne.n	8007c26 <_dtoa_r+0x6fe>
 8007bb8:	f7f8 fad8 	bl	800016c <__adddf3>
 8007bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	4689      	mov	r9, r1
 8007bc4:	f7f8 ff18 	bl	80009f8 <__aeabi_dcmpgt>
 8007bc8:	bb58      	cbnz	r0, 8007c22 <_dtoa_r+0x6fa>
 8007bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	f7f8 fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd6:	b108      	cbz	r0, 8007bdc <_dtoa_r+0x6b4>
 8007bd8:	07e3      	lsls	r3, r4, #31
 8007bda:	d422      	bmi.n	8007c22 <_dtoa_r+0x6fa>
 8007bdc:	4651      	mov	r1, sl
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 fbc2 	bl	8008368 <_Bfree>
 8007be4:	2300      	movs	r3, #0
 8007be6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007be8:	703b      	strb	r3, [r7, #0]
 8007bea:	f10b 0301 	add.w	r3, fp, #1
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f43f ace6 	beq.w	80075c4 <_dtoa_r+0x9c>
 8007bf8:	601f      	str	r7, [r3, #0]
 8007bfa:	e4e3      	b.n	80075c4 <_dtoa_r+0x9c>
 8007bfc:	4627      	mov	r7, r4
 8007bfe:	463b      	mov	r3, r7
 8007c00:	461f      	mov	r7, r3
 8007c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c06:	2a39      	cmp	r2, #57	; 0x39
 8007c08:	d107      	bne.n	8007c1a <_dtoa_r+0x6f2>
 8007c0a:	9a03      	ldr	r2, [sp, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d1f7      	bne.n	8007c00 <_dtoa_r+0x6d8>
 8007c10:	2230      	movs	r2, #48	; 0x30
 8007c12:	9903      	ldr	r1, [sp, #12]
 8007c14:	f108 0801 	add.w	r8, r8, #1
 8007c18:	700a      	strb	r2, [r1, #0]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	3201      	adds	r2, #1
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	e79e      	b.n	8007b60 <_dtoa_r+0x638>
 8007c22:	46d8      	mov	r8, fp
 8007c24:	e7eb      	b.n	8007bfe <_dtoa_r+0x6d6>
 8007c26:	2200      	movs	r2, #0
 8007c28:	4b6d      	ldr	r3, [pc, #436]	; (8007de0 <_dtoa_r+0x8b8>)
 8007c2a:	f7f8 fc55 	bl	80004d8 <__aeabi_dmul>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	4680      	mov	r8, r0
 8007c34:	4689      	mov	r9, r1
 8007c36:	f7f8 feb7 	bl	80009a8 <__aeabi_dcmpeq>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d09b      	beq.n	8007b76 <_dtoa_r+0x64e>
 8007c3e:	e7cd      	b.n	8007bdc <_dtoa_r+0x6b4>
 8007c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	f000 80c4 	beq.w	8007dd0 <_dtoa_r+0x8a8>
 8007c48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c4a:	2a01      	cmp	r2, #1
 8007c4c:	f300 80a8 	bgt.w	8007da0 <_dtoa_r+0x878>
 8007c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	f000 80a0 	beq.w	8007d98 <_dtoa_r+0x870>
 8007c58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c5c:	464f      	mov	r7, r9
 8007c5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c62:	2101      	movs	r1, #1
 8007c64:	441a      	add	r2, r3
 8007c66:	4628      	mov	r0, r5
 8007c68:	4499      	add	r9, r3
 8007c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c6c:	f000 fc32 	bl	80084d4 <__i2b>
 8007c70:	4606      	mov	r6, r0
 8007c72:	b15f      	cbz	r7, 8007c8c <_dtoa_r+0x764>
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd08      	ble.n	8007c8c <_dtoa_r+0x764>
 8007c7a:	42bb      	cmp	r3, r7
 8007c7c:	bfa8      	it	ge
 8007c7e:	463b      	movge	r3, r7
 8007c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c82:	eba9 0903 	sub.w	r9, r9, r3
 8007c86:	1aff      	subs	r7, r7, r3
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c8e:	b1f3      	cbz	r3, 8007cce <_dtoa_r+0x7a6>
 8007c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 80a0 	beq.w	8007dd8 <_dtoa_r+0x8b0>
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	dd10      	ble.n	8007cbe <_dtoa_r+0x796>
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fcd5 	bl	8008650 <__pow5mult>
 8007ca6:	4652      	mov	r2, sl
 8007ca8:	4601      	mov	r1, r0
 8007caa:	4606      	mov	r6, r0
 8007cac:	4628      	mov	r0, r5
 8007cae:	f000 fc27 	bl	8008500 <__multiply>
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	4651      	mov	r1, sl
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 fb56 	bl	8008368 <_Bfree>
 8007cbc:	46c2      	mov	sl, r8
 8007cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc0:	1b1a      	subs	r2, r3, r4
 8007cc2:	d004      	beq.n	8007cce <_dtoa_r+0x7a6>
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fcc2 	bl	8008650 <__pow5mult>
 8007ccc:	4682      	mov	sl, r0
 8007cce:	2101      	movs	r1, #1
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 fbff 	bl	80084d4 <__i2b>
 8007cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cd8:	4604      	mov	r4, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f340 8082 	ble.w	8007de4 <_dtoa_r+0x8bc>
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 fcb3 	bl	8008650 <__pow5mult>
 8007cea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cec:	4604      	mov	r4, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	dd7b      	ble.n	8007dea <_dtoa_r+0x8c2>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cfc:	6918      	ldr	r0, [r3, #16]
 8007cfe:	f000 fb9b 	bl	8008438 <__hi0bits>
 8007d02:	f1c0 0020 	rsb	r0, r0, #32
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	4418      	add	r0, r3
 8007d0a:	f010 001f 	ands.w	r0, r0, #31
 8007d0e:	f000 8092 	beq.w	8007e36 <_dtoa_r+0x90e>
 8007d12:	f1c0 0320 	rsb	r3, r0, #32
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	f340 8085 	ble.w	8007e26 <_dtoa_r+0x8fe>
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	f1c0 001c 	rsb	r0, r0, #28
 8007d22:	4403      	add	r3, r0
 8007d24:	4481      	add	r9, r0
 8007d26:	4407      	add	r7, r0
 8007d28:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	dd05      	ble.n	8007d3c <_dtoa_r+0x814>
 8007d30:	4651      	mov	r1, sl
 8007d32:	464a      	mov	r2, r9
 8007d34:	4628      	mov	r0, r5
 8007d36:	f000 fce5 	bl	8008704 <__lshift>
 8007d3a:	4682      	mov	sl, r0
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dd05      	ble.n	8007d4e <_dtoa_r+0x826>
 8007d42:	4621      	mov	r1, r4
 8007d44:	461a      	mov	r2, r3
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 fcdc 	bl	8008704 <__lshift>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d072      	beq.n	8007e3a <_dtoa_r+0x912>
 8007d54:	4621      	mov	r1, r4
 8007d56:	4650      	mov	r0, sl
 8007d58:	f000 fd40 	bl	80087dc <__mcmp>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	da6c      	bge.n	8007e3a <_dtoa_r+0x912>
 8007d60:	2300      	movs	r3, #0
 8007d62:	4651      	mov	r1, sl
 8007d64:	220a      	movs	r2, #10
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 fb20 	bl	80083ac <__multadd>
 8007d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d6e:	4682      	mov	sl, r0
 8007d70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 81ac 	beq.w	80080d2 <_dtoa_r+0xbaa>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	220a      	movs	r2, #10
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 fb13 	bl	80083ac <__multadd>
 8007d86:	9b06      	ldr	r3, [sp, #24]
 8007d88:	4606      	mov	r6, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f300 8093 	bgt.w	8007eb6 <_dtoa_r+0x98e>
 8007d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	dc59      	bgt.n	8007e4a <_dtoa_r+0x922>
 8007d96:	e08e      	b.n	8007eb6 <_dtoa_r+0x98e>
 8007d98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d9e:	e75d      	b.n	8007c5c <_dtoa_r+0x734>
 8007da0:	9b08      	ldr	r3, [sp, #32]
 8007da2:	1e5c      	subs	r4, r3, #1
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	bfbf      	itttt	lt
 8007daa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007dac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007dae:	1ae3      	sublt	r3, r4, r3
 8007db0:	18d2      	addlt	r2, r2, r3
 8007db2:	bfa8      	it	ge
 8007db4:	1b1c      	subge	r4, r3, r4
 8007db6:	9b08      	ldr	r3, [sp, #32]
 8007db8:	bfbe      	ittt	lt
 8007dba:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007dbc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007dbe:	2400      	movlt	r4, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfb5      	itete	lt
 8007dc4:	eba9 0703 	sublt.w	r7, r9, r3
 8007dc8:	464f      	movge	r7, r9
 8007dca:	2300      	movlt	r3, #0
 8007dcc:	9b08      	ldrge	r3, [sp, #32]
 8007dce:	e747      	b.n	8007c60 <_dtoa_r+0x738>
 8007dd0:	464f      	mov	r7, r9
 8007dd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007dd6:	e74c      	b.n	8007c72 <_dtoa_r+0x74a>
 8007dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dda:	e773      	b.n	8007cc4 <_dtoa_r+0x79c>
 8007ddc:	3fe00000 	.word	0x3fe00000
 8007de0:	40240000 	.word	0x40240000
 8007de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	dc18      	bgt.n	8007e1c <_dtoa_r+0x8f4>
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	b9b3      	cbnz	r3, 8007e1c <_dtoa_r+0x8f4>
 8007dee:	9b05      	ldr	r3, [sp, #20]
 8007df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df4:	b993      	cbnz	r3, 8007e1c <_dtoa_r+0x8f4>
 8007df6:	9b05      	ldr	r3, [sp, #20]
 8007df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dfc:	0d1b      	lsrs	r3, r3, #20
 8007dfe:	051b      	lsls	r3, r3, #20
 8007e00:	b17b      	cbz	r3, 8007e22 <_dtoa_r+0x8fa>
 8007e02:	f04f 0801 	mov.w	r8, #1
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	f109 0901 	add.w	r9, r9, #1
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f47f af6f 	bne.w	8007cf6 <_dtoa_r+0x7ce>
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e774      	b.n	8007d06 <_dtoa_r+0x7de>
 8007e1c:	f04f 0800 	mov.w	r8, #0
 8007e20:	e7f6      	b.n	8007e10 <_dtoa_r+0x8e8>
 8007e22:	4698      	mov	r8, r3
 8007e24:	e7f4      	b.n	8007e10 <_dtoa_r+0x8e8>
 8007e26:	d080      	beq.n	8007d2a <_dtoa_r+0x802>
 8007e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e2a:	331c      	adds	r3, #28
 8007e2c:	441a      	add	r2, r3
 8007e2e:	4499      	add	r9, r3
 8007e30:	441f      	add	r7, r3
 8007e32:	9209      	str	r2, [sp, #36]	; 0x24
 8007e34:	e779      	b.n	8007d2a <_dtoa_r+0x802>
 8007e36:	4603      	mov	r3, r0
 8007e38:	e7f6      	b.n	8007e28 <_dtoa_r+0x900>
 8007e3a:	9b08      	ldr	r3, [sp, #32]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dc34      	bgt.n	8007eaa <_dtoa_r+0x982>
 8007e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	dd31      	ble.n	8007eaa <_dtoa_r+0x982>
 8007e46:	9b08      	ldr	r3, [sp, #32]
 8007e48:	9306      	str	r3, [sp, #24]
 8007e4a:	9b06      	ldr	r3, [sp, #24]
 8007e4c:	b963      	cbnz	r3, 8007e68 <_dtoa_r+0x940>
 8007e4e:	4621      	mov	r1, r4
 8007e50:	2205      	movs	r2, #5
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 faaa 	bl	80083ac <__multadd>
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	f000 fcbd 	bl	80087dc <__mcmp>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f73f adbf 	bgt.w	80079e6 <_dtoa_r+0x4be>
 8007e68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e6a:	9f03      	ldr	r7, [sp, #12]
 8007e6c:	ea6f 0b03 	mvn.w	fp, r3
 8007e70:	f04f 0800 	mov.w	r8, #0
 8007e74:	4621      	mov	r1, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 fa76 	bl	8008368 <_Bfree>
 8007e7c:	2e00      	cmp	r6, #0
 8007e7e:	f43f aead 	beq.w	8007bdc <_dtoa_r+0x6b4>
 8007e82:	f1b8 0f00 	cmp.w	r8, #0
 8007e86:	d005      	beq.n	8007e94 <_dtoa_r+0x96c>
 8007e88:	45b0      	cmp	r8, r6
 8007e8a:	d003      	beq.n	8007e94 <_dtoa_r+0x96c>
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f000 fa6a 	bl	8008368 <_Bfree>
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 fa66 	bl	8008368 <_Bfree>
 8007e9c:	e69e      	b.n	8007bdc <_dtoa_r+0x6b4>
 8007e9e:	2400      	movs	r4, #0
 8007ea0:	4626      	mov	r6, r4
 8007ea2:	e7e1      	b.n	8007e68 <_dtoa_r+0x940>
 8007ea4:	46c3      	mov	fp, r8
 8007ea6:	4626      	mov	r6, r4
 8007ea8:	e59d      	b.n	80079e6 <_dtoa_r+0x4be>
 8007eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80c8 	beq.w	8008042 <_dtoa_r+0xb1a>
 8007eb2:	9b08      	ldr	r3, [sp, #32]
 8007eb4:	9306      	str	r3, [sp, #24]
 8007eb6:	2f00      	cmp	r7, #0
 8007eb8:	dd05      	ble.n	8007ec6 <_dtoa_r+0x99e>
 8007eba:	4631      	mov	r1, r6
 8007ebc:	463a      	mov	r2, r7
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f000 fc20 	bl	8008704 <__lshift>
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	f1b8 0f00 	cmp.w	r8, #0
 8007eca:	d05b      	beq.n	8007f84 <_dtoa_r+0xa5c>
 8007ecc:	4628      	mov	r0, r5
 8007ece:	6871      	ldr	r1, [r6, #4]
 8007ed0:	f000 fa0a 	bl	80082e8 <_Balloc>
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	b928      	cbnz	r0, 8007ee4 <_dtoa_r+0x9bc>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ede:	4b81      	ldr	r3, [pc, #516]	; (80080e4 <_dtoa_r+0xbbc>)
 8007ee0:	f7ff bb36 	b.w	8007550 <_dtoa_r+0x28>
 8007ee4:	6932      	ldr	r2, [r6, #16]
 8007ee6:	f106 010c 	add.w	r1, r6, #12
 8007eea:	3202      	adds	r2, #2
 8007eec:	0092      	lsls	r2, r2, #2
 8007eee:	300c      	adds	r0, #12
 8007ef0:	f000 ff9e 	bl	8008e30 <memcpy>
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 fc03 	bl	8008704 <__lshift>
 8007efe:	46b0      	mov	r8, r6
 8007f00:	4606      	mov	r6, r0
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	9a03      	ldr	r2, [sp, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	9308      	str	r3, [sp, #32]
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f10:	9b04      	ldr	r3, [sp, #16]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	930a      	str	r3, [sp, #40]	; 0x28
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	4650      	mov	r0, sl
 8007f20:	9304      	str	r3, [sp, #16]
 8007f22:	f7ff fa76 	bl	8007412 <quorem>
 8007f26:	4641      	mov	r1, r8
 8007f28:	9006      	str	r0, [sp, #24]
 8007f2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f2e:	4650      	mov	r0, sl
 8007f30:	f000 fc54 	bl	80087dc <__mcmp>
 8007f34:	4632      	mov	r2, r6
 8007f36:	9009      	str	r0, [sp, #36]	; 0x24
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 fc6a 	bl	8008814 <__mdiff>
 8007f40:	68c2      	ldr	r2, [r0, #12]
 8007f42:	4607      	mov	r7, r0
 8007f44:	bb02      	cbnz	r2, 8007f88 <_dtoa_r+0xa60>
 8007f46:	4601      	mov	r1, r0
 8007f48:	4650      	mov	r0, sl
 8007f4a:	f000 fc47 	bl	80087dc <__mcmp>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	4639      	mov	r1, r7
 8007f52:	4628      	mov	r0, r5
 8007f54:	920c      	str	r2, [sp, #48]	; 0x30
 8007f56:	f000 fa07 	bl	8008368 <_Bfree>
 8007f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f5e:	9f08      	ldr	r7, [sp, #32]
 8007f60:	ea43 0102 	orr.w	r1, r3, r2
 8007f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f66:	4319      	orrs	r1, r3
 8007f68:	d110      	bne.n	8007f8c <_dtoa_r+0xa64>
 8007f6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f6e:	d029      	beq.n	8007fc4 <_dtoa_r+0xa9c>
 8007f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dd02      	ble.n	8007f7c <_dtoa_r+0xa54>
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	f883 9000 	strb.w	r9, [r3]
 8007f82:	e777      	b.n	8007e74 <_dtoa_r+0x94c>
 8007f84:	4630      	mov	r0, r6
 8007f86:	e7ba      	b.n	8007efe <_dtoa_r+0x9d6>
 8007f88:	2201      	movs	r2, #1
 8007f8a:	e7e1      	b.n	8007f50 <_dtoa_r+0xa28>
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	db04      	blt.n	8007f9c <_dtoa_r+0xa74>
 8007f92:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007f94:	430b      	orrs	r3, r1
 8007f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	d120      	bne.n	8007fde <_dtoa_r+0xab6>
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	dded      	ble.n	8007f7c <_dtoa_r+0xa54>
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 fbad 	bl	8008704 <__lshift>
 8007faa:	4621      	mov	r1, r4
 8007fac:	4682      	mov	sl, r0
 8007fae:	f000 fc15 	bl	80087dc <__mcmp>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	dc03      	bgt.n	8007fbe <_dtoa_r+0xa96>
 8007fb6:	d1e1      	bne.n	8007f7c <_dtoa_r+0xa54>
 8007fb8:	f019 0f01 	tst.w	r9, #1
 8007fbc:	d0de      	beq.n	8007f7c <_dtoa_r+0xa54>
 8007fbe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fc2:	d1d8      	bne.n	8007f76 <_dtoa_r+0xa4e>
 8007fc4:	2339      	movs	r3, #57	; 0x39
 8007fc6:	9a04      	ldr	r2, [sp, #16]
 8007fc8:	7013      	strb	r3, [r2, #0]
 8007fca:	463b      	mov	r3, r7
 8007fcc:	461f      	mov	r7, r3
 8007fce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	2a39      	cmp	r2, #57	; 0x39
 8007fd6:	d06b      	beq.n	80080b0 <_dtoa_r+0xb88>
 8007fd8:	3201      	adds	r2, #1
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e74a      	b.n	8007e74 <_dtoa_r+0x94c>
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	dd07      	ble.n	8007ff2 <_dtoa_r+0xaca>
 8007fe2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fe6:	d0ed      	beq.n	8007fc4 <_dtoa_r+0xa9c>
 8007fe8:	9a04      	ldr	r2, [sp, #16]
 8007fea:	f109 0301 	add.w	r3, r9, #1
 8007fee:	7013      	strb	r3, [r2, #0]
 8007ff0:	e740      	b.n	8007e74 <_dtoa_r+0x94c>
 8007ff2:	9b08      	ldr	r3, [sp, #32]
 8007ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ff6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d042      	beq.n	8008084 <_dtoa_r+0xb5c>
 8007ffe:	4651      	mov	r1, sl
 8008000:	2300      	movs	r3, #0
 8008002:	220a      	movs	r2, #10
 8008004:	4628      	mov	r0, r5
 8008006:	f000 f9d1 	bl	80083ac <__multadd>
 800800a:	45b0      	cmp	r8, r6
 800800c:	4682      	mov	sl, r0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	f04f 020a 	mov.w	r2, #10
 8008016:	4641      	mov	r1, r8
 8008018:	4628      	mov	r0, r5
 800801a:	d107      	bne.n	800802c <_dtoa_r+0xb04>
 800801c:	f000 f9c6 	bl	80083ac <__multadd>
 8008020:	4680      	mov	r8, r0
 8008022:	4606      	mov	r6, r0
 8008024:	9b08      	ldr	r3, [sp, #32]
 8008026:	3301      	adds	r3, #1
 8008028:	9308      	str	r3, [sp, #32]
 800802a:	e775      	b.n	8007f18 <_dtoa_r+0x9f0>
 800802c:	f000 f9be 	bl	80083ac <__multadd>
 8008030:	4631      	mov	r1, r6
 8008032:	4680      	mov	r8, r0
 8008034:	2300      	movs	r3, #0
 8008036:	220a      	movs	r2, #10
 8008038:	4628      	mov	r0, r5
 800803a:	f000 f9b7 	bl	80083ac <__multadd>
 800803e:	4606      	mov	r6, r0
 8008040:	e7f0      	b.n	8008024 <_dtoa_r+0xafc>
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	9306      	str	r3, [sp, #24]
 8008046:	9f03      	ldr	r7, [sp, #12]
 8008048:	4621      	mov	r1, r4
 800804a:	4650      	mov	r0, sl
 800804c:	f7ff f9e1 	bl	8007412 <quorem>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008056:	f807 9b01 	strb.w	r9, [r7], #1
 800805a:	1afa      	subs	r2, r7, r3
 800805c:	9b06      	ldr	r3, [sp, #24]
 800805e:	4293      	cmp	r3, r2
 8008060:	dd07      	ble.n	8008072 <_dtoa_r+0xb4a>
 8008062:	4651      	mov	r1, sl
 8008064:	2300      	movs	r3, #0
 8008066:	220a      	movs	r2, #10
 8008068:	4628      	mov	r0, r5
 800806a:	f000 f99f 	bl	80083ac <__multadd>
 800806e:	4682      	mov	sl, r0
 8008070:	e7ea      	b.n	8008048 <_dtoa_r+0xb20>
 8008072:	9b06      	ldr	r3, [sp, #24]
 8008074:	f04f 0800 	mov.w	r8, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	bfcc      	ite	gt
 800807c:	461f      	movgt	r7, r3
 800807e:	2701      	movle	r7, #1
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	441f      	add	r7, r3
 8008084:	4651      	mov	r1, sl
 8008086:	2201      	movs	r2, #1
 8008088:	4628      	mov	r0, r5
 800808a:	f000 fb3b 	bl	8008704 <__lshift>
 800808e:	4621      	mov	r1, r4
 8008090:	4682      	mov	sl, r0
 8008092:	f000 fba3 	bl	80087dc <__mcmp>
 8008096:	2800      	cmp	r0, #0
 8008098:	dc97      	bgt.n	8007fca <_dtoa_r+0xaa2>
 800809a:	d102      	bne.n	80080a2 <_dtoa_r+0xb7a>
 800809c:	f019 0f01 	tst.w	r9, #1
 80080a0:	d193      	bne.n	8007fca <_dtoa_r+0xaa2>
 80080a2:	463b      	mov	r3, r7
 80080a4:	461f      	mov	r7, r3
 80080a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080aa:	2a30      	cmp	r2, #48	; 0x30
 80080ac:	d0fa      	beq.n	80080a4 <_dtoa_r+0xb7c>
 80080ae:	e6e1      	b.n	8007e74 <_dtoa_r+0x94c>
 80080b0:	9a03      	ldr	r2, [sp, #12]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d18a      	bne.n	8007fcc <_dtoa_r+0xaa4>
 80080b6:	2331      	movs	r3, #49	; 0x31
 80080b8:	f10b 0b01 	add.w	fp, fp, #1
 80080bc:	e797      	b.n	8007fee <_dtoa_r+0xac6>
 80080be:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <_dtoa_r+0xbc0>)
 80080c0:	f7ff ba9f 	b.w	8007602 <_dtoa_r+0xda>
 80080c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f47f aa77 	bne.w	80075ba <_dtoa_r+0x92>
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <_dtoa_r+0xbc4>)
 80080ce:	f7ff ba98 	b.w	8007602 <_dtoa_r+0xda>
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dcb6      	bgt.n	8008046 <_dtoa_r+0xb1e>
 80080d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080da:	2b02      	cmp	r3, #2
 80080dc:	f73f aeb5 	bgt.w	8007e4a <_dtoa_r+0x922>
 80080e0:	e7b1      	b.n	8008046 <_dtoa_r+0xb1e>
 80080e2:	bf00      	nop
 80080e4:	0800960e 	.word	0x0800960e
 80080e8:	0800956e 	.word	0x0800956e
 80080ec:	08009592 	.word	0x08009592

080080f0 <_free_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4605      	mov	r5, r0
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d040      	beq.n	800817a <_free_r+0x8a>
 80080f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fc:	1f0c      	subs	r4, r1, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfb8      	it	lt
 8008102:	18e4      	addlt	r4, r4, r3
 8008104:	f000 f8e4 	bl	80082d0 <__malloc_lock>
 8008108:	4a1c      	ldr	r2, [pc, #112]	; (800817c <_free_r+0x8c>)
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	b933      	cbnz	r3, 800811c <_free_r+0x2c>
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	6014      	str	r4, [r2, #0]
 8008112:	4628      	mov	r0, r5
 8008114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008118:	f000 b8e0 	b.w	80082dc <__malloc_unlock>
 800811c:	42a3      	cmp	r3, r4
 800811e:	d908      	bls.n	8008132 <_free_r+0x42>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	1821      	adds	r1, r4, r0
 8008124:	428b      	cmp	r3, r1
 8008126:	bf01      	itttt	eq
 8008128:	6819      	ldreq	r1, [r3, #0]
 800812a:	685b      	ldreq	r3, [r3, #4]
 800812c:	1809      	addeq	r1, r1, r0
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	e7ed      	b.n	800810e <_free_r+0x1e>
 8008132:	461a      	mov	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b10b      	cbz	r3, 800813c <_free_r+0x4c>
 8008138:	42a3      	cmp	r3, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x42>
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	1850      	adds	r0, r2, r1
 8008140:	42a0      	cmp	r0, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x6c>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	4401      	add	r1, r0
 8008148:	1850      	adds	r0, r2, r1
 800814a:	4283      	cmp	r3, r0
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	d1e0      	bne.n	8008112 <_free_r+0x22>
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4408      	add	r0, r1
 8008156:	6010      	str	r0, [r2, #0]
 8008158:	6053      	str	r3, [r2, #4]
 800815a:	e7da      	b.n	8008112 <_free_r+0x22>
 800815c:	d902      	bls.n	8008164 <_free_r+0x74>
 800815e:	230c      	movs	r3, #12
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	e7d6      	b.n	8008112 <_free_r+0x22>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428b      	cmp	r3, r1
 800816a:	bf01      	itttt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	1809      	addeq	r1, r1, r0
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	6054      	str	r4, [r2, #4]
 8008178:	e7cb      	b.n	8008112 <_free_r+0x22>
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	20000760 	.word	0x20000760

08008180 <malloc>:
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <malloc+0xc>)
 8008182:	4601      	mov	r1, r0
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f000 b823 	b.w	80081d0 <_malloc_r>
 800818a:	bf00      	nop
 800818c:	2000007c 	.word	0x2000007c

08008190 <sbrk_aligned>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	4e0e      	ldr	r6, [pc, #56]	; (80081cc <sbrk_aligned+0x3c>)
 8008194:	460c      	mov	r4, r1
 8008196:	6831      	ldr	r1, [r6, #0]
 8008198:	4605      	mov	r5, r0
 800819a:	b911      	cbnz	r1, 80081a2 <sbrk_aligned+0x12>
 800819c:	f000 fe38 	bl	8008e10 <_sbrk_r>
 80081a0:	6030      	str	r0, [r6, #0]
 80081a2:	4621      	mov	r1, r4
 80081a4:	4628      	mov	r0, r5
 80081a6:	f000 fe33 	bl	8008e10 <_sbrk_r>
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	d00a      	beq.n	80081c4 <sbrk_aligned+0x34>
 80081ae:	1cc4      	adds	r4, r0, #3
 80081b0:	f024 0403 	bic.w	r4, r4, #3
 80081b4:	42a0      	cmp	r0, r4
 80081b6:	d007      	beq.n	80081c8 <sbrk_aligned+0x38>
 80081b8:	1a21      	subs	r1, r4, r0
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 fe28 	bl	8008e10 <_sbrk_r>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d101      	bne.n	80081c8 <sbrk_aligned+0x38>
 80081c4:	f04f 34ff 	mov.w	r4, #4294967295
 80081c8:	4620      	mov	r0, r4
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	20000764 	.word	0x20000764

080081d0 <_malloc_r>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	1ccd      	adds	r5, r1, #3
 80081d6:	f025 0503 	bic.w	r5, r5, #3
 80081da:	3508      	adds	r5, #8
 80081dc:	2d0c      	cmp	r5, #12
 80081de:	bf38      	it	cc
 80081e0:	250c      	movcc	r5, #12
 80081e2:	2d00      	cmp	r5, #0
 80081e4:	4607      	mov	r7, r0
 80081e6:	db01      	blt.n	80081ec <_malloc_r+0x1c>
 80081e8:	42a9      	cmp	r1, r5
 80081ea:	d905      	bls.n	80081f8 <_malloc_r+0x28>
 80081ec:	230c      	movs	r3, #12
 80081ee:	2600      	movs	r6, #0
 80081f0:	603b      	str	r3, [r7, #0]
 80081f2:	4630      	mov	r0, r6
 80081f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082cc <_malloc_r+0xfc>
 80081fc:	f000 f868 	bl	80082d0 <__malloc_lock>
 8008200:	f8d8 3000 	ldr.w	r3, [r8]
 8008204:	461c      	mov	r4, r3
 8008206:	bb5c      	cbnz	r4, 8008260 <_malloc_r+0x90>
 8008208:	4629      	mov	r1, r5
 800820a:	4638      	mov	r0, r7
 800820c:	f7ff ffc0 	bl	8008190 <sbrk_aligned>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	4604      	mov	r4, r0
 8008214:	d155      	bne.n	80082c2 <_malloc_r+0xf2>
 8008216:	f8d8 4000 	ldr.w	r4, [r8]
 800821a:	4626      	mov	r6, r4
 800821c:	2e00      	cmp	r6, #0
 800821e:	d145      	bne.n	80082ac <_malloc_r+0xdc>
 8008220:	2c00      	cmp	r4, #0
 8008222:	d048      	beq.n	80082b6 <_malloc_r+0xe6>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	4631      	mov	r1, r6
 8008228:	4638      	mov	r0, r7
 800822a:	eb04 0903 	add.w	r9, r4, r3
 800822e:	f000 fdef 	bl	8008e10 <_sbrk_r>
 8008232:	4581      	cmp	r9, r0
 8008234:	d13f      	bne.n	80082b6 <_malloc_r+0xe6>
 8008236:	6821      	ldr	r1, [r4, #0]
 8008238:	4638      	mov	r0, r7
 800823a:	1a6d      	subs	r5, r5, r1
 800823c:	4629      	mov	r1, r5
 800823e:	f7ff ffa7 	bl	8008190 <sbrk_aligned>
 8008242:	3001      	adds	r0, #1
 8008244:	d037      	beq.n	80082b6 <_malloc_r+0xe6>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	442b      	add	r3, r5
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	f8d8 3000 	ldr.w	r3, [r8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d038      	beq.n	80082c6 <_malloc_r+0xf6>
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	42a2      	cmp	r2, r4
 8008258:	d12b      	bne.n	80082b2 <_malloc_r+0xe2>
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	e00f      	b.n	8008280 <_malloc_r+0xb0>
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	1b52      	subs	r2, r2, r5
 8008264:	d41f      	bmi.n	80082a6 <_malloc_r+0xd6>
 8008266:	2a0b      	cmp	r2, #11
 8008268:	d917      	bls.n	800829a <_malloc_r+0xca>
 800826a:	1961      	adds	r1, r4, r5
 800826c:	42a3      	cmp	r3, r4
 800826e:	6025      	str	r5, [r4, #0]
 8008270:	bf18      	it	ne
 8008272:	6059      	strne	r1, [r3, #4]
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	bf08      	it	eq
 8008278:	f8c8 1000 	streq.w	r1, [r8]
 800827c:	5162      	str	r2, [r4, r5]
 800827e:	604b      	str	r3, [r1, #4]
 8008280:	4638      	mov	r0, r7
 8008282:	f104 060b 	add.w	r6, r4, #11
 8008286:	f000 f829 	bl	80082dc <__malloc_unlock>
 800828a:	f026 0607 	bic.w	r6, r6, #7
 800828e:	1d23      	adds	r3, r4, #4
 8008290:	1af2      	subs	r2, r6, r3
 8008292:	d0ae      	beq.n	80081f2 <_malloc_r+0x22>
 8008294:	1b9b      	subs	r3, r3, r6
 8008296:	50a3      	str	r3, [r4, r2]
 8008298:	e7ab      	b.n	80081f2 <_malloc_r+0x22>
 800829a:	42a3      	cmp	r3, r4
 800829c:	6862      	ldr	r2, [r4, #4]
 800829e:	d1dd      	bne.n	800825c <_malloc_r+0x8c>
 80082a0:	f8c8 2000 	str.w	r2, [r8]
 80082a4:	e7ec      	b.n	8008280 <_malloc_r+0xb0>
 80082a6:	4623      	mov	r3, r4
 80082a8:	6864      	ldr	r4, [r4, #4]
 80082aa:	e7ac      	b.n	8008206 <_malloc_r+0x36>
 80082ac:	4634      	mov	r4, r6
 80082ae:	6876      	ldr	r6, [r6, #4]
 80082b0:	e7b4      	b.n	800821c <_malloc_r+0x4c>
 80082b2:	4613      	mov	r3, r2
 80082b4:	e7cc      	b.n	8008250 <_malloc_r+0x80>
 80082b6:	230c      	movs	r3, #12
 80082b8:	4638      	mov	r0, r7
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	f000 f80e 	bl	80082dc <__malloc_unlock>
 80082c0:	e797      	b.n	80081f2 <_malloc_r+0x22>
 80082c2:	6025      	str	r5, [r4, #0]
 80082c4:	e7dc      	b.n	8008280 <_malloc_r+0xb0>
 80082c6:	605b      	str	r3, [r3, #4]
 80082c8:	deff      	udf	#255	; 0xff
 80082ca:	bf00      	nop
 80082cc:	20000760 	.word	0x20000760

080082d0 <__malloc_lock>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__malloc_lock+0x8>)
 80082d2:	f7ff b88e 	b.w	80073f2 <__retarget_lock_acquire_recursive>
 80082d6:	bf00      	nop
 80082d8:	2000075c 	.word	0x2000075c

080082dc <__malloc_unlock>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__malloc_unlock+0x8>)
 80082de:	f7ff b889 	b.w	80073f4 <__retarget_lock_release_recursive>
 80082e2:	bf00      	nop
 80082e4:	2000075c 	.word	0x2000075c

080082e8 <_Balloc>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	69c6      	ldr	r6, [r0, #28]
 80082ec:	4604      	mov	r4, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	b976      	cbnz	r6, 8008310 <_Balloc+0x28>
 80082f2:	2010      	movs	r0, #16
 80082f4:	f7ff ff44 	bl	8008180 <malloc>
 80082f8:	4602      	mov	r2, r0
 80082fa:	61e0      	str	r0, [r4, #28]
 80082fc:	b920      	cbnz	r0, 8008308 <_Balloc+0x20>
 80082fe:	216b      	movs	r1, #107	; 0x6b
 8008300:	4b17      	ldr	r3, [pc, #92]	; (8008360 <_Balloc+0x78>)
 8008302:	4818      	ldr	r0, [pc, #96]	; (8008364 <_Balloc+0x7c>)
 8008304:	f000 fda2 	bl	8008e4c <__assert_func>
 8008308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800830c:	6006      	str	r6, [r0, #0]
 800830e:	60c6      	str	r6, [r0, #12]
 8008310:	69e6      	ldr	r6, [r4, #28]
 8008312:	68f3      	ldr	r3, [r6, #12]
 8008314:	b183      	cbz	r3, 8008338 <_Balloc+0x50>
 8008316:	69e3      	ldr	r3, [r4, #28]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800831e:	b9b8      	cbnz	r0, 8008350 <_Balloc+0x68>
 8008320:	2101      	movs	r1, #1
 8008322:	fa01 f605 	lsl.w	r6, r1, r5
 8008326:	1d72      	adds	r2, r6, #5
 8008328:	4620      	mov	r0, r4
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	f000 fdac 	bl	8008e88 <_calloc_r>
 8008330:	b160      	cbz	r0, 800834c <_Balloc+0x64>
 8008332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008336:	e00e      	b.n	8008356 <_Balloc+0x6e>
 8008338:	2221      	movs	r2, #33	; 0x21
 800833a:	2104      	movs	r1, #4
 800833c:	4620      	mov	r0, r4
 800833e:	f000 fda3 	bl	8008e88 <_calloc_r>
 8008342:	69e3      	ldr	r3, [r4, #28]
 8008344:	60f0      	str	r0, [r6, #12]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e4      	bne.n	8008316 <_Balloc+0x2e>
 800834c:	2000      	movs	r0, #0
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	6802      	ldr	r2, [r0, #0]
 8008352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008356:	2300      	movs	r3, #0
 8008358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800835c:	e7f7      	b.n	800834e <_Balloc+0x66>
 800835e:	bf00      	nop
 8008360:	0800959f 	.word	0x0800959f
 8008364:	0800961f 	.word	0x0800961f

08008368 <_Bfree>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	69c6      	ldr	r6, [r0, #28]
 800836c:	4605      	mov	r5, r0
 800836e:	460c      	mov	r4, r1
 8008370:	b976      	cbnz	r6, 8008390 <_Bfree+0x28>
 8008372:	2010      	movs	r0, #16
 8008374:	f7ff ff04 	bl	8008180 <malloc>
 8008378:	4602      	mov	r2, r0
 800837a:	61e8      	str	r0, [r5, #28]
 800837c:	b920      	cbnz	r0, 8008388 <_Bfree+0x20>
 800837e:	218f      	movs	r1, #143	; 0x8f
 8008380:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <_Bfree+0x3c>)
 8008382:	4809      	ldr	r0, [pc, #36]	; (80083a8 <_Bfree+0x40>)
 8008384:	f000 fd62 	bl	8008e4c <__assert_func>
 8008388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800838c:	6006      	str	r6, [r0, #0]
 800838e:	60c6      	str	r6, [r0, #12]
 8008390:	b13c      	cbz	r4, 80083a2 <_Bfree+0x3a>
 8008392:	69eb      	ldr	r3, [r5, #28]
 8008394:	6862      	ldr	r2, [r4, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800839c:	6021      	str	r1, [r4, #0]
 800839e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	0800959f 	.word	0x0800959f
 80083a8:	0800961f 	.word	0x0800961f

080083ac <__multadd>:
 80083ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b0:	4607      	mov	r7, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	461e      	mov	r6, r3
 80083b6:	2000      	movs	r0, #0
 80083b8:	690d      	ldr	r5, [r1, #16]
 80083ba:	f101 0c14 	add.w	ip, r1, #20
 80083be:	f8dc 3000 	ldr.w	r3, [ip]
 80083c2:	3001      	adds	r0, #1
 80083c4:	b299      	uxth	r1, r3
 80083c6:	fb02 6101 	mla	r1, r2, r1, r6
 80083ca:	0c1e      	lsrs	r6, r3, #16
 80083cc:	0c0b      	lsrs	r3, r1, #16
 80083ce:	fb02 3306 	mla	r3, r2, r6, r3
 80083d2:	b289      	uxth	r1, r1
 80083d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083d8:	4285      	cmp	r5, r0
 80083da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083de:	f84c 1b04 	str.w	r1, [ip], #4
 80083e2:	dcec      	bgt.n	80083be <__multadd+0x12>
 80083e4:	b30e      	cbz	r6, 800842a <__multadd+0x7e>
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	dc19      	bgt.n	8008420 <__multadd+0x74>
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	4638      	mov	r0, r7
 80083f0:	3101      	adds	r1, #1
 80083f2:	f7ff ff79 	bl	80082e8 <_Balloc>
 80083f6:	4680      	mov	r8, r0
 80083f8:	b928      	cbnz	r0, 8008406 <__multadd+0x5a>
 80083fa:	4602      	mov	r2, r0
 80083fc:	21ba      	movs	r1, #186	; 0xba
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <__multadd+0x84>)
 8008400:	480c      	ldr	r0, [pc, #48]	; (8008434 <__multadd+0x88>)
 8008402:	f000 fd23 	bl	8008e4c <__assert_func>
 8008406:	6922      	ldr	r2, [r4, #16]
 8008408:	f104 010c 	add.w	r1, r4, #12
 800840c:	3202      	adds	r2, #2
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	300c      	adds	r0, #12
 8008412:	f000 fd0d 	bl	8008e30 <memcpy>
 8008416:	4621      	mov	r1, r4
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff ffa5 	bl	8008368 <_Bfree>
 800841e:	4644      	mov	r4, r8
 8008420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008424:	3501      	adds	r5, #1
 8008426:	615e      	str	r6, [r3, #20]
 8008428:	6125      	str	r5, [r4, #16]
 800842a:	4620      	mov	r0, r4
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	0800960e 	.word	0x0800960e
 8008434:	0800961f 	.word	0x0800961f

08008438 <__hi0bits>:
 8008438:	0c02      	lsrs	r2, r0, #16
 800843a:	0412      	lsls	r2, r2, #16
 800843c:	4603      	mov	r3, r0
 800843e:	b9ca      	cbnz	r2, 8008474 <__hi0bits+0x3c>
 8008440:	0403      	lsls	r3, r0, #16
 8008442:	2010      	movs	r0, #16
 8008444:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008448:	bf04      	itt	eq
 800844a:	021b      	lsleq	r3, r3, #8
 800844c:	3008      	addeq	r0, #8
 800844e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008452:	bf04      	itt	eq
 8008454:	011b      	lsleq	r3, r3, #4
 8008456:	3004      	addeq	r0, #4
 8008458:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800845c:	bf04      	itt	eq
 800845e:	009b      	lsleq	r3, r3, #2
 8008460:	3002      	addeq	r0, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	db05      	blt.n	8008472 <__hi0bits+0x3a>
 8008466:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800846a:	f100 0001 	add.w	r0, r0, #1
 800846e:	bf08      	it	eq
 8008470:	2020      	moveq	r0, #32
 8008472:	4770      	bx	lr
 8008474:	2000      	movs	r0, #0
 8008476:	e7e5      	b.n	8008444 <__hi0bits+0xc>

08008478 <__lo0bits>:
 8008478:	6803      	ldr	r3, [r0, #0]
 800847a:	4602      	mov	r2, r0
 800847c:	f013 0007 	ands.w	r0, r3, #7
 8008480:	d00b      	beq.n	800849a <__lo0bits+0x22>
 8008482:	07d9      	lsls	r1, r3, #31
 8008484:	d421      	bmi.n	80084ca <__lo0bits+0x52>
 8008486:	0798      	lsls	r0, r3, #30
 8008488:	bf49      	itett	mi
 800848a:	085b      	lsrmi	r3, r3, #1
 800848c:	089b      	lsrpl	r3, r3, #2
 800848e:	2001      	movmi	r0, #1
 8008490:	6013      	strmi	r3, [r2, #0]
 8008492:	bf5c      	itt	pl
 8008494:	2002      	movpl	r0, #2
 8008496:	6013      	strpl	r3, [r2, #0]
 8008498:	4770      	bx	lr
 800849a:	b299      	uxth	r1, r3
 800849c:	b909      	cbnz	r1, 80084a2 <__lo0bits+0x2a>
 800849e:	2010      	movs	r0, #16
 80084a0:	0c1b      	lsrs	r3, r3, #16
 80084a2:	b2d9      	uxtb	r1, r3
 80084a4:	b909      	cbnz	r1, 80084aa <__lo0bits+0x32>
 80084a6:	3008      	adds	r0, #8
 80084a8:	0a1b      	lsrs	r3, r3, #8
 80084aa:	0719      	lsls	r1, r3, #28
 80084ac:	bf04      	itt	eq
 80084ae:	091b      	lsreq	r3, r3, #4
 80084b0:	3004      	addeq	r0, #4
 80084b2:	0799      	lsls	r1, r3, #30
 80084b4:	bf04      	itt	eq
 80084b6:	089b      	lsreq	r3, r3, #2
 80084b8:	3002      	addeq	r0, #2
 80084ba:	07d9      	lsls	r1, r3, #31
 80084bc:	d403      	bmi.n	80084c6 <__lo0bits+0x4e>
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	f100 0001 	add.w	r0, r0, #1
 80084c4:	d003      	beq.n	80084ce <__lo0bits+0x56>
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	4770      	bx	lr
 80084ca:	2000      	movs	r0, #0
 80084cc:	4770      	bx	lr
 80084ce:	2020      	movs	r0, #32
 80084d0:	4770      	bx	lr
	...

080084d4 <__i2b>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	460c      	mov	r4, r1
 80084d8:	2101      	movs	r1, #1
 80084da:	f7ff ff05 	bl	80082e8 <_Balloc>
 80084de:	4602      	mov	r2, r0
 80084e0:	b928      	cbnz	r0, 80084ee <__i2b+0x1a>
 80084e2:	f240 1145 	movw	r1, #325	; 0x145
 80084e6:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <__i2b+0x24>)
 80084e8:	4804      	ldr	r0, [pc, #16]	; (80084fc <__i2b+0x28>)
 80084ea:	f000 fcaf 	bl	8008e4c <__assert_func>
 80084ee:	2301      	movs	r3, #1
 80084f0:	6144      	str	r4, [r0, #20]
 80084f2:	6103      	str	r3, [r0, #16]
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	bf00      	nop
 80084f8:	0800960e 	.word	0x0800960e
 80084fc:	0800961f 	.word	0x0800961f

08008500 <__multiply>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	4691      	mov	r9, r2
 8008506:	690a      	ldr	r2, [r1, #16]
 8008508:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800850c:	460c      	mov	r4, r1
 800850e:	429a      	cmp	r2, r3
 8008510:	bfbe      	ittt	lt
 8008512:	460b      	movlt	r3, r1
 8008514:	464c      	movlt	r4, r9
 8008516:	4699      	movlt	r9, r3
 8008518:	6927      	ldr	r7, [r4, #16]
 800851a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800851e:	68a3      	ldr	r3, [r4, #8]
 8008520:	6861      	ldr	r1, [r4, #4]
 8008522:	eb07 060a 	add.w	r6, r7, sl
 8008526:	42b3      	cmp	r3, r6
 8008528:	b085      	sub	sp, #20
 800852a:	bfb8      	it	lt
 800852c:	3101      	addlt	r1, #1
 800852e:	f7ff fedb 	bl	80082e8 <_Balloc>
 8008532:	b930      	cbnz	r0, 8008542 <__multiply+0x42>
 8008534:	4602      	mov	r2, r0
 8008536:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800853a:	4b43      	ldr	r3, [pc, #268]	; (8008648 <__multiply+0x148>)
 800853c:	4843      	ldr	r0, [pc, #268]	; (800864c <__multiply+0x14c>)
 800853e:	f000 fc85 	bl	8008e4c <__assert_func>
 8008542:	f100 0514 	add.w	r5, r0, #20
 8008546:	462b      	mov	r3, r5
 8008548:	2200      	movs	r2, #0
 800854a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800854e:	4543      	cmp	r3, r8
 8008550:	d321      	bcc.n	8008596 <__multiply+0x96>
 8008552:	f104 0314 	add.w	r3, r4, #20
 8008556:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800855a:	f109 0314 	add.w	r3, r9, #20
 800855e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008562:	9202      	str	r2, [sp, #8]
 8008564:	1b3a      	subs	r2, r7, r4
 8008566:	3a15      	subs	r2, #21
 8008568:	f022 0203 	bic.w	r2, r2, #3
 800856c:	3204      	adds	r2, #4
 800856e:	f104 0115 	add.w	r1, r4, #21
 8008572:	428f      	cmp	r7, r1
 8008574:	bf38      	it	cc
 8008576:	2204      	movcc	r2, #4
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	9a02      	ldr	r2, [sp, #8]
 800857c:	9303      	str	r3, [sp, #12]
 800857e:	429a      	cmp	r2, r3
 8008580:	d80c      	bhi.n	800859c <__multiply+0x9c>
 8008582:	2e00      	cmp	r6, #0
 8008584:	dd03      	ble.n	800858e <__multiply+0x8e>
 8008586:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800858a:	2b00      	cmp	r3, #0
 800858c:	d05a      	beq.n	8008644 <__multiply+0x144>
 800858e:	6106      	str	r6, [r0, #16]
 8008590:	b005      	add	sp, #20
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	f843 2b04 	str.w	r2, [r3], #4
 800859a:	e7d8      	b.n	800854e <__multiply+0x4e>
 800859c:	f8b3 a000 	ldrh.w	sl, [r3]
 80085a0:	f1ba 0f00 	cmp.w	sl, #0
 80085a4:	d023      	beq.n	80085ee <__multiply+0xee>
 80085a6:	46a9      	mov	r9, r5
 80085a8:	f04f 0c00 	mov.w	ip, #0
 80085ac:	f104 0e14 	add.w	lr, r4, #20
 80085b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085b4:	f8d9 1000 	ldr.w	r1, [r9]
 80085b8:	fa1f fb82 	uxth.w	fp, r2
 80085bc:	b289      	uxth	r1, r1
 80085be:	fb0a 110b 	mla	r1, sl, fp, r1
 80085c2:	4461      	add	r1, ip
 80085c4:	f8d9 c000 	ldr.w	ip, [r9]
 80085c8:	0c12      	lsrs	r2, r2, #16
 80085ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80085ce:	fb0a c202 	mla	r2, sl, r2, ip
 80085d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085d6:	b289      	uxth	r1, r1
 80085d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085dc:	4577      	cmp	r7, lr
 80085de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085e2:	f849 1b04 	str.w	r1, [r9], #4
 80085e6:	d8e3      	bhi.n	80085b0 <__multiply+0xb0>
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	f845 c002 	str.w	ip, [r5, r2]
 80085ee:	9a03      	ldr	r2, [sp, #12]
 80085f0:	3304      	adds	r3, #4
 80085f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085f6:	f1b9 0f00 	cmp.w	r9, #0
 80085fa:	d021      	beq.n	8008640 <__multiply+0x140>
 80085fc:	46ae      	mov	lr, r5
 80085fe:	f04f 0a00 	mov.w	sl, #0
 8008602:	6829      	ldr	r1, [r5, #0]
 8008604:	f104 0c14 	add.w	ip, r4, #20
 8008608:	f8bc b000 	ldrh.w	fp, [ip]
 800860c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008610:	b289      	uxth	r1, r1
 8008612:	fb09 220b 	mla	r2, r9, fp, r2
 8008616:	4452      	add	r2, sl
 8008618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800861c:	f84e 1b04 	str.w	r1, [lr], #4
 8008620:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008628:	f8be 1000 	ldrh.w	r1, [lr]
 800862c:	4567      	cmp	r7, ip
 800862e:	fb09 110a 	mla	r1, r9, sl, r1
 8008632:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800863a:	d8e5      	bhi.n	8008608 <__multiply+0x108>
 800863c:	9a01      	ldr	r2, [sp, #4]
 800863e:	50a9      	str	r1, [r5, r2]
 8008640:	3504      	adds	r5, #4
 8008642:	e79a      	b.n	800857a <__multiply+0x7a>
 8008644:	3e01      	subs	r6, #1
 8008646:	e79c      	b.n	8008582 <__multiply+0x82>
 8008648:	0800960e 	.word	0x0800960e
 800864c:	0800961f 	.word	0x0800961f

08008650 <__pow5mult>:
 8008650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008654:	4615      	mov	r5, r2
 8008656:	f012 0203 	ands.w	r2, r2, #3
 800865a:	4606      	mov	r6, r0
 800865c:	460f      	mov	r7, r1
 800865e:	d007      	beq.n	8008670 <__pow5mult+0x20>
 8008660:	4c25      	ldr	r4, [pc, #148]	; (80086f8 <__pow5mult+0xa8>)
 8008662:	3a01      	subs	r2, #1
 8008664:	2300      	movs	r3, #0
 8008666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800866a:	f7ff fe9f 	bl	80083ac <__multadd>
 800866e:	4607      	mov	r7, r0
 8008670:	10ad      	asrs	r5, r5, #2
 8008672:	d03d      	beq.n	80086f0 <__pow5mult+0xa0>
 8008674:	69f4      	ldr	r4, [r6, #28]
 8008676:	b97c      	cbnz	r4, 8008698 <__pow5mult+0x48>
 8008678:	2010      	movs	r0, #16
 800867a:	f7ff fd81 	bl	8008180 <malloc>
 800867e:	4602      	mov	r2, r0
 8008680:	61f0      	str	r0, [r6, #28]
 8008682:	b928      	cbnz	r0, 8008690 <__pow5mult+0x40>
 8008684:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008688:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <__pow5mult+0xac>)
 800868a:	481d      	ldr	r0, [pc, #116]	; (8008700 <__pow5mult+0xb0>)
 800868c:	f000 fbde 	bl	8008e4c <__assert_func>
 8008690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008694:	6004      	str	r4, [r0, #0]
 8008696:	60c4      	str	r4, [r0, #12]
 8008698:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800869c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086a0:	b94c      	cbnz	r4, 80086b6 <__pow5mult+0x66>
 80086a2:	f240 2171 	movw	r1, #625	; 0x271
 80086a6:	4630      	mov	r0, r6
 80086a8:	f7ff ff14 	bl	80084d4 <__i2b>
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80086b4:	6003      	str	r3, [r0, #0]
 80086b6:	f04f 0900 	mov.w	r9, #0
 80086ba:	07eb      	lsls	r3, r5, #31
 80086bc:	d50a      	bpl.n	80086d4 <__pow5mult+0x84>
 80086be:	4639      	mov	r1, r7
 80086c0:	4622      	mov	r2, r4
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ff1c 	bl	8008500 <__multiply>
 80086c8:	4680      	mov	r8, r0
 80086ca:	4639      	mov	r1, r7
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7ff fe4b 	bl	8008368 <_Bfree>
 80086d2:	4647      	mov	r7, r8
 80086d4:	106d      	asrs	r5, r5, #1
 80086d6:	d00b      	beq.n	80086f0 <__pow5mult+0xa0>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	b938      	cbnz	r0, 80086ec <__pow5mult+0x9c>
 80086dc:	4622      	mov	r2, r4
 80086de:	4621      	mov	r1, r4
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff ff0d 	bl	8008500 <__multiply>
 80086e6:	6020      	str	r0, [r4, #0]
 80086e8:	f8c0 9000 	str.w	r9, [r0]
 80086ec:	4604      	mov	r4, r0
 80086ee:	e7e4      	b.n	80086ba <__pow5mult+0x6a>
 80086f0:	4638      	mov	r0, r7
 80086f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f6:	bf00      	nop
 80086f8:	08009768 	.word	0x08009768
 80086fc:	0800959f 	.word	0x0800959f
 8008700:	0800961f 	.word	0x0800961f

08008704 <__lshift>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	4607      	mov	r7, r0
 800870c:	4691      	mov	r9, r2
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	6849      	ldr	r1, [r1, #4]
 8008712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800871c:	f108 0601 	add.w	r6, r8, #1
 8008720:	42b3      	cmp	r3, r6
 8008722:	db0b      	blt.n	800873c <__lshift+0x38>
 8008724:	4638      	mov	r0, r7
 8008726:	f7ff fddf 	bl	80082e8 <_Balloc>
 800872a:	4605      	mov	r5, r0
 800872c:	b948      	cbnz	r0, 8008742 <__lshift+0x3e>
 800872e:	4602      	mov	r2, r0
 8008730:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008734:	4b27      	ldr	r3, [pc, #156]	; (80087d4 <__lshift+0xd0>)
 8008736:	4828      	ldr	r0, [pc, #160]	; (80087d8 <__lshift+0xd4>)
 8008738:	f000 fb88 	bl	8008e4c <__assert_func>
 800873c:	3101      	adds	r1, #1
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	e7ee      	b.n	8008720 <__lshift+0x1c>
 8008742:	2300      	movs	r3, #0
 8008744:	f100 0114 	add.w	r1, r0, #20
 8008748:	f100 0210 	add.w	r2, r0, #16
 800874c:	4618      	mov	r0, r3
 800874e:	4553      	cmp	r3, sl
 8008750:	db33      	blt.n	80087ba <__lshift+0xb6>
 8008752:	6920      	ldr	r0, [r4, #16]
 8008754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008758:	f104 0314 	add.w	r3, r4, #20
 800875c:	f019 091f 	ands.w	r9, r9, #31
 8008760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008768:	d02b      	beq.n	80087c2 <__lshift+0xbe>
 800876a:	468a      	mov	sl, r1
 800876c:	2200      	movs	r2, #0
 800876e:	f1c9 0e20 	rsb	lr, r9, #32
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	fa00 f009 	lsl.w	r0, r0, r9
 8008778:	4310      	orrs	r0, r2
 800877a:	f84a 0b04 	str.w	r0, [sl], #4
 800877e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008782:	459c      	cmp	ip, r3
 8008784:	fa22 f20e 	lsr.w	r2, r2, lr
 8008788:	d8f3      	bhi.n	8008772 <__lshift+0x6e>
 800878a:	ebac 0304 	sub.w	r3, ip, r4
 800878e:	3b15      	subs	r3, #21
 8008790:	f023 0303 	bic.w	r3, r3, #3
 8008794:	3304      	adds	r3, #4
 8008796:	f104 0015 	add.w	r0, r4, #21
 800879a:	4584      	cmp	ip, r0
 800879c:	bf38      	it	cc
 800879e:	2304      	movcc	r3, #4
 80087a0:	50ca      	str	r2, [r1, r3]
 80087a2:	b10a      	cbz	r2, 80087a8 <__lshift+0xa4>
 80087a4:	f108 0602 	add.w	r6, r8, #2
 80087a8:	3e01      	subs	r6, #1
 80087aa:	4638      	mov	r0, r7
 80087ac:	4621      	mov	r1, r4
 80087ae:	612e      	str	r6, [r5, #16]
 80087b0:	f7ff fdda 	bl	8008368 <_Bfree>
 80087b4:	4628      	mov	r0, r5
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80087be:	3301      	adds	r3, #1
 80087c0:	e7c5      	b.n	800874e <__lshift+0x4a>
 80087c2:	3904      	subs	r1, #4
 80087c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c8:	459c      	cmp	ip, r3
 80087ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80087ce:	d8f9      	bhi.n	80087c4 <__lshift+0xc0>
 80087d0:	e7ea      	b.n	80087a8 <__lshift+0xa4>
 80087d2:	bf00      	nop
 80087d4:	0800960e 	.word	0x0800960e
 80087d8:	0800961f 	.word	0x0800961f

080087dc <__mcmp>:
 80087dc:	4603      	mov	r3, r0
 80087de:	690a      	ldr	r2, [r1, #16]
 80087e0:	6900      	ldr	r0, [r0, #16]
 80087e2:	b530      	push	{r4, r5, lr}
 80087e4:	1a80      	subs	r0, r0, r2
 80087e6:	d10d      	bne.n	8008804 <__mcmp+0x28>
 80087e8:	3314      	adds	r3, #20
 80087ea:	3114      	adds	r1, #20
 80087ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087fc:	4295      	cmp	r5, r2
 80087fe:	d002      	beq.n	8008806 <__mcmp+0x2a>
 8008800:	d304      	bcc.n	800880c <__mcmp+0x30>
 8008802:	2001      	movs	r0, #1
 8008804:	bd30      	pop	{r4, r5, pc}
 8008806:	42a3      	cmp	r3, r4
 8008808:	d3f4      	bcc.n	80087f4 <__mcmp+0x18>
 800880a:	e7fb      	b.n	8008804 <__mcmp+0x28>
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e7f8      	b.n	8008804 <__mcmp+0x28>
	...

08008814 <__mdiff>:
 8008814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	460d      	mov	r5, r1
 800881a:	4607      	mov	r7, r0
 800881c:	4611      	mov	r1, r2
 800881e:	4628      	mov	r0, r5
 8008820:	4614      	mov	r4, r2
 8008822:	f7ff ffdb 	bl	80087dc <__mcmp>
 8008826:	1e06      	subs	r6, r0, #0
 8008828:	d111      	bne.n	800884e <__mdiff+0x3a>
 800882a:	4631      	mov	r1, r6
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff fd5b 	bl	80082e8 <_Balloc>
 8008832:	4602      	mov	r2, r0
 8008834:	b928      	cbnz	r0, 8008842 <__mdiff+0x2e>
 8008836:	f240 2137 	movw	r1, #567	; 0x237
 800883a:	4b3a      	ldr	r3, [pc, #232]	; (8008924 <__mdiff+0x110>)
 800883c:	483a      	ldr	r0, [pc, #232]	; (8008928 <__mdiff+0x114>)
 800883e:	f000 fb05 	bl	8008e4c <__assert_func>
 8008842:	2301      	movs	r3, #1
 8008844:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008848:	4610      	mov	r0, r2
 800884a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884e:	bfa4      	itt	ge
 8008850:	4623      	movge	r3, r4
 8008852:	462c      	movge	r4, r5
 8008854:	4638      	mov	r0, r7
 8008856:	6861      	ldr	r1, [r4, #4]
 8008858:	bfa6      	itte	ge
 800885a:	461d      	movge	r5, r3
 800885c:	2600      	movge	r6, #0
 800885e:	2601      	movlt	r6, #1
 8008860:	f7ff fd42 	bl	80082e8 <_Balloc>
 8008864:	4602      	mov	r2, r0
 8008866:	b918      	cbnz	r0, 8008870 <__mdiff+0x5c>
 8008868:	f240 2145 	movw	r1, #581	; 0x245
 800886c:	4b2d      	ldr	r3, [pc, #180]	; (8008924 <__mdiff+0x110>)
 800886e:	e7e5      	b.n	800883c <__mdiff+0x28>
 8008870:	f102 0814 	add.w	r8, r2, #20
 8008874:	46c2      	mov	sl, r8
 8008876:	f04f 0c00 	mov.w	ip, #0
 800887a:	6927      	ldr	r7, [r4, #16]
 800887c:	60c6      	str	r6, [r0, #12]
 800887e:	692e      	ldr	r6, [r5, #16]
 8008880:	f104 0014 	add.w	r0, r4, #20
 8008884:	f105 0914 	add.w	r9, r5, #20
 8008888:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800888c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008890:	3410      	adds	r4, #16
 8008892:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008896:	f859 3b04 	ldr.w	r3, [r9], #4
 800889a:	fa1f f18b 	uxth.w	r1, fp
 800889e:	4461      	add	r1, ip
 80088a0:	fa1f fc83 	uxth.w	ip, r3
 80088a4:	0c1b      	lsrs	r3, r3, #16
 80088a6:	eba1 010c 	sub.w	r1, r1, ip
 80088aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80088b2:	b289      	uxth	r1, r1
 80088b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80088b8:	454e      	cmp	r6, r9
 80088ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80088be:	f84a 1b04 	str.w	r1, [sl], #4
 80088c2:	d8e6      	bhi.n	8008892 <__mdiff+0x7e>
 80088c4:	1b73      	subs	r3, r6, r5
 80088c6:	3b15      	subs	r3, #21
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	3515      	adds	r5, #21
 80088ce:	3304      	adds	r3, #4
 80088d0:	42ae      	cmp	r6, r5
 80088d2:	bf38      	it	cc
 80088d4:	2304      	movcc	r3, #4
 80088d6:	4418      	add	r0, r3
 80088d8:	4443      	add	r3, r8
 80088da:	461e      	mov	r6, r3
 80088dc:	4605      	mov	r5, r0
 80088de:	4575      	cmp	r5, lr
 80088e0:	d30e      	bcc.n	8008900 <__mdiff+0xec>
 80088e2:	f10e 0103 	add.w	r1, lr, #3
 80088e6:	1a09      	subs	r1, r1, r0
 80088e8:	f021 0103 	bic.w	r1, r1, #3
 80088ec:	3803      	subs	r0, #3
 80088ee:	4586      	cmp	lr, r0
 80088f0:	bf38      	it	cc
 80088f2:	2100      	movcc	r1, #0
 80088f4:	440b      	add	r3, r1
 80088f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088fa:	b189      	cbz	r1, 8008920 <__mdiff+0x10c>
 80088fc:	6117      	str	r7, [r2, #16]
 80088fe:	e7a3      	b.n	8008848 <__mdiff+0x34>
 8008900:	f855 8b04 	ldr.w	r8, [r5], #4
 8008904:	fa1f f188 	uxth.w	r1, r8
 8008908:	4461      	add	r1, ip
 800890a:	140c      	asrs	r4, r1, #16
 800890c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008910:	b289      	uxth	r1, r1
 8008912:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008916:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800891a:	f846 1b04 	str.w	r1, [r6], #4
 800891e:	e7de      	b.n	80088de <__mdiff+0xca>
 8008920:	3f01      	subs	r7, #1
 8008922:	e7e8      	b.n	80088f6 <__mdiff+0xe2>
 8008924:	0800960e 	.word	0x0800960e
 8008928:	0800961f 	.word	0x0800961f

0800892c <__d2b>:
 800892c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800892e:	2101      	movs	r1, #1
 8008930:	4617      	mov	r7, r2
 8008932:	461c      	mov	r4, r3
 8008934:	9e08      	ldr	r6, [sp, #32]
 8008936:	f7ff fcd7 	bl	80082e8 <_Balloc>
 800893a:	4605      	mov	r5, r0
 800893c:	b930      	cbnz	r0, 800894c <__d2b+0x20>
 800893e:	4602      	mov	r2, r0
 8008940:	f240 310f 	movw	r1, #783	; 0x30f
 8008944:	4b22      	ldr	r3, [pc, #136]	; (80089d0 <__d2b+0xa4>)
 8008946:	4823      	ldr	r0, [pc, #140]	; (80089d4 <__d2b+0xa8>)
 8008948:	f000 fa80 	bl	8008e4c <__assert_func>
 800894c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008950:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008954:	bb24      	cbnz	r4, 80089a0 <__d2b+0x74>
 8008956:	2f00      	cmp	r7, #0
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	d026      	beq.n	80089aa <__d2b+0x7e>
 800895c:	4668      	mov	r0, sp
 800895e:	9700      	str	r7, [sp, #0]
 8008960:	f7ff fd8a 	bl	8008478 <__lo0bits>
 8008964:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008968:	b1e8      	cbz	r0, 80089a6 <__d2b+0x7a>
 800896a:	f1c0 0320 	rsb	r3, r0, #32
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	430b      	orrs	r3, r1
 8008974:	40c2      	lsrs	r2, r0
 8008976:	616b      	str	r3, [r5, #20]
 8008978:	9201      	str	r2, [sp, #4]
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	bf14      	ite	ne
 8008980:	2102      	movne	r1, #2
 8008982:	2101      	moveq	r1, #1
 8008984:	61ab      	str	r3, [r5, #24]
 8008986:	6129      	str	r1, [r5, #16]
 8008988:	b1bc      	cbz	r4, 80089ba <__d2b+0x8e>
 800898a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800898e:	4404      	add	r4, r0
 8008990:	6034      	str	r4, [r6, #0]
 8008992:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008998:	6018      	str	r0, [r3, #0]
 800899a:	4628      	mov	r0, r5
 800899c:	b003      	add	sp, #12
 800899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089a4:	e7d7      	b.n	8008956 <__d2b+0x2a>
 80089a6:	6169      	str	r1, [r5, #20]
 80089a8:	e7e7      	b.n	800897a <__d2b+0x4e>
 80089aa:	a801      	add	r0, sp, #4
 80089ac:	f7ff fd64 	bl	8008478 <__lo0bits>
 80089b0:	9b01      	ldr	r3, [sp, #4]
 80089b2:	2101      	movs	r1, #1
 80089b4:	616b      	str	r3, [r5, #20]
 80089b6:	3020      	adds	r0, #32
 80089b8:	e7e5      	b.n	8008986 <__d2b+0x5a>
 80089ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089be:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80089c2:	6030      	str	r0, [r6, #0]
 80089c4:	6918      	ldr	r0, [r3, #16]
 80089c6:	f7ff fd37 	bl	8008438 <__hi0bits>
 80089ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80089ce:	e7e2      	b.n	8008996 <__d2b+0x6a>
 80089d0:	0800960e 	.word	0x0800960e
 80089d4:	0800961f 	.word	0x0800961f

080089d8 <__ssputs_r>:
 80089d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089dc:	461f      	mov	r7, r3
 80089de:	688e      	ldr	r6, [r1, #8]
 80089e0:	4682      	mov	sl, r0
 80089e2:	42be      	cmp	r6, r7
 80089e4:	460c      	mov	r4, r1
 80089e6:	4690      	mov	r8, r2
 80089e8:	680b      	ldr	r3, [r1, #0]
 80089ea:	d82c      	bhi.n	8008a46 <__ssputs_r+0x6e>
 80089ec:	898a      	ldrh	r2, [r1, #12]
 80089ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089f2:	d026      	beq.n	8008a42 <__ssputs_r+0x6a>
 80089f4:	6965      	ldr	r5, [r4, #20]
 80089f6:	6909      	ldr	r1, [r1, #16]
 80089f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089fc:	eba3 0901 	sub.w	r9, r3, r1
 8008a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a04:	1c7b      	adds	r3, r7, #1
 8008a06:	444b      	add	r3, r9
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	429d      	cmp	r5, r3
 8008a0c:	bf38      	it	cc
 8008a0e:	461d      	movcc	r5, r3
 8008a10:	0553      	lsls	r3, r2, #21
 8008a12:	d527      	bpl.n	8008a64 <__ssputs_r+0x8c>
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7ff fbdb 	bl	80081d0 <_malloc_r>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	b360      	cbz	r0, 8008a78 <__ssputs_r+0xa0>
 8008a1e:	464a      	mov	r2, r9
 8008a20:	6921      	ldr	r1, [r4, #16]
 8008a22:	f000 fa05 	bl	8008e30 <memcpy>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	6126      	str	r6, [r4, #16]
 8008a34:	444e      	add	r6, r9
 8008a36:	6026      	str	r6, [r4, #0]
 8008a38:	463e      	mov	r6, r7
 8008a3a:	6165      	str	r5, [r4, #20]
 8008a3c:	eba5 0509 	sub.w	r5, r5, r9
 8008a40:	60a5      	str	r5, [r4, #8]
 8008a42:	42be      	cmp	r6, r7
 8008a44:	d900      	bls.n	8008a48 <__ssputs_r+0x70>
 8008a46:	463e      	mov	r6, r7
 8008a48:	4632      	mov	r2, r6
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	f000 f9c5 	bl	8008ddc <memmove>
 8008a52:	2000      	movs	r0, #0
 8008a54:	68a3      	ldr	r3, [r4, #8]
 8008a56:	1b9b      	subs	r3, r3, r6
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	4433      	add	r3, r6
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a64:	462a      	mov	r2, r5
 8008a66:	f000 fa35 	bl	8008ed4 <_realloc_r>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1e0      	bne.n	8008a32 <__ssputs_r+0x5a>
 8008a70:	4650      	mov	r0, sl
 8008a72:	6921      	ldr	r1, [r4, #16]
 8008a74:	f7ff fb3c 	bl	80080f0 <_free_r>
 8008a78:	230c      	movs	r3, #12
 8008a7a:	f8ca 3000 	str.w	r3, [sl]
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	e7e9      	b.n	8008a60 <__ssputs_r+0x88>

08008a8c <_svfiprintf_r>:
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	4698      	mov	r8, r3
 8008a92:	898b      	ldrh	r3, [r1, #12]
 8008a94:	4607      	mov	r7, r0
 8008a96:	061b      	lsls	r3, r3, #24
 8008a98:	460d      	mov	r5, r1
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	b09d      	sub	sp, #116	; 0x74
 8008a9e:	d50e      	bpl.n	8008abe <_svfiprintf_r+0x32>
 8008aa0:	690b      	ldr	r3, [r1, #16]
 8008aa2:	b963      	cbnz	r3, 8008abe <_svfiprintf_r+0x32>
 8008aa4:	2140      	movs	r1, #64	; 0x40
 8008aa6:	f7ff fb93 	bl	80081d0 <_malloc_r>
 8008aaa:	6028      	str	r0, [r5, #0]
 8008aac:	6128      	str	r0, [r5, #16]
 8008aae:	b920      	cbnz	r0, 8008aba <_svfiprintf_r+0x2e>
 8008ab0:	230c      	movs	r3, #12
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab8:	e0d0      	b.n	8008c5c <_svfiprintf_r+0x1d0>
 8008aba:	2340      	movs	r3, #64	; 0x40
 8008abc:	616b      	str	r3, [r5, #20]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac2:	2320      	movs	r3, #32
 8008ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ac8:	2330      	movs	r3, #48	; 0x30
 8008aca:	f04f 0901 	mov.w	r9, #1
 8008ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008c74 <_svfiprintf_r+0x1e8>
 8008ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ada:	4623      	mov	r3, r4
 8008adc:	469a      	mov	sl, r3
 8008ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ae2:	b10a      	cbz	r2, 8008ae8 <_svfiprintf_r+0x5c>
 8008ae4:	2a25      	cmp	r2, #37	; 0x25
 8008ae6:	d1f9      	bne.n	8008adc <_svfiprintf_r+0x50>
 8008ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8008aec:	d00b      	beq.n	8008b06 <_svfiprintf_r+0x7a>
 8008aee:	465b      	mov	r3, fp
 8008af0:	4622      	mov	r2, r4
 8008af2:	4629      	mov	r1, r5
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff ff6f 	bl	80089d8 <__ssputs_r>
 8008afa:	3001      	adds	r0, #1
 8008afc:	f000 80a9 	beq.w	8008c52 <_svfiprintf_r+0x1c6>
 8008b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b02:	445a      	add	r2, fp
 8008b04:	9209      	str	r2, [sp, #36]	; 0x24
 8008b06:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80a1 	beq.w	8008c52 <_svfiprintf_r+0x1c6>
 8008b10:	2300      	movs	r3, #0
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295
 8008b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b1a:	f10a 0a01 	add.w	sl, sl, #1
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	9307      	str	r3, [sp, #28]
 8008b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b26:	931a      	str	r3, [sp, #104]	; 0x68
 8008b28:	4654      	mov	r4, sl
 8008b2a:	2205      	movs	r2, #5
 8008b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b30:	4850      	ldr	r0, [pc, #320]	; (8008c74 <_svfiprintf_r+0x1e8>)
 8008b32:	f7fe fc60 	bl	80073f6 <memchr>
 8008b36:	9a04      	ldr	r2, [sp, #16]
 8008b38:	b9d8      	cbnz	r0, 8008b72 <_svfiprintf_r+0xe6>
 8008b3a:	06d0      	lsls	r0, r2, #27
 8008b3c:	bf44      	itt	mi
 8008b3e:	2320      	movmi	r3, #32
 8008b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b44:	0711      	lsls	r1, r2, #28
 8008b46:	bf44      	itt	mi
 8008b48:	232b      	movmi	r3, #43	; 0x2b
 8008b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b52:	2b2a      	cmp	r3, #42	; 0x2a
 8008b54:	d015      	beq.n	8008b82 <_svfiprintf_r+0xf6>
 8008b56:	4654      	mov	r4, sl
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f04f 0c0a 	mov.w	ip, #10
 8008b5e:	9a07      	ldr	r2, [sp, #28]
 8008b60:	4621      	mov	r1, r4
 8008b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b66:	3b30      	subs	r3, #48	; 0x30
 8008b68:	2b09      	cmp	r3, #9
 8008b6a:	d94d      	bls.n	8008c08 <_svfiprintf_r+0x17c>
 8008b6c:	b1b0      	cbz	r0, 8008b9c <_svfiprintf_r+0x110>
 8008b6e:	9207      	str	r2, [sp, #28]
 8008b70:	e014      	b.n	8008b9c <_svfiprintf_r+0x110>
 8008b72:	eba0 0308 	sub.w	r3, r0, r8
 8008b76:	fa09 f303 	lsl.w	r3, r9, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	46a2      	mov	sl, r4
 8008b7e:	9304      	str	r3, [sp, #16]
 8008b80:	e7d2      	b.n	8008b28 <_svfiprintf_r+0x9c>
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	1d19      	adds	r1, r3, #4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	9103      	str	r1, [sp, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bfbb      	ittet	lt
 8008b8e:	425b      	neglt	r3, r3
 8008b90:	f042 0202 	orrlt.w	r2, r2, #2
 8008b94:	9307      	strge	r3, [sp, #28]
 8008b96:	9307      	strlt	r3, [sp, #28]
 8008b98:	bfb8      	it	lt
 8008b9a:	9204      	strlt	r2, [sp, #16]
 8008b9c:	7823      	ldrb	r3, [r4, #0]
 8008b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8008ba0:	d10c      	bne.n	8008bbc <_svfiprintf_r+0x130>
 8008ba2:	7863      	ldrb	r3, [r4, #1]
 8008ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ba6:	d134      	bne.n	8008c12 <_svfiprintf_r+0x186>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	3402      	adds	r4, #2
 8008bac:	1d1a      	adds	r2, r3, #4
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	9203      	str	r2, [sp, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bfb8      	it	lt
 8008bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008c78 <_svfiprintf_r+0x1ec>
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	7821      	ldrb	r1, [r4, #0]
 8008bc6:	f7fe fc16 	bl	80073f6 <memchr>
 8008bca:	b138      	cbz	r0, 8008bdc <_svfiprintf_r+0x150>
 8008bcc:	2240      	movs	r2, #64	; 0x40
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	eba0 000a 	sub.w	r0, r0, sl
 8008bd4:	4082      	lsls	r2, r0
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	3401      	adds	r4, #1
 8008bda:	9304      	str	r3, [sp, #16]
 8008bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be0:	2206      	movs	r2, #6
 8008be2:	4826      	ldr	r0, [pc, #152]	; (8008c7c <_svfiprintf_r+0x1f0>)
 8008be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008be8:	f7fe fc05 	bl	80073f6 <memchr>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d038      	beq.n	8008c62 <_svfiprintf_r+0x1d6>
 8008bf0:	4b23      	ldr	r3, [pc, #140]	; (8008c80 <_svfiprintf_r+0x1f4>)
 8008bf2:	bb1b      	cbnz	r3, 8008c3c <_svfiprintf_r+0x1b0>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	3307      	adds	r3, #7
 8008bf8:	f023 0307 	bic.w	r3, r3, #7
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	9303      	str	r3, [sp, #12]
 8008c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c02:	4433      	add	r3, r6
 8008c04:	9309      	str	r3, [sp, #36]	; 0x24
 8008c06:	e768      	b.n	8008ada <_svfiprintf_r+0x4e>
 8008c08:	460c      	mov	r4, r1
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c10:	e7a6      	b.n	8008b60 <_svfiprintf_r+0xd4>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f04f 0c0a 	mov.w	ip, #10
 8008c18:	4619      	mov	r1, r3
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c24:	3a30      	subs	r2, #48	; 0x30
 8008c26:	2a09      	cmp	r2, #9
 8008c28:	d903      	bls.n	8008c32 <_svfiprintf_r+0x1a6>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0c6      	beq.n	8008bbc <_svfiprintf_r+0x130>
 8008c2e:	9105      	str	r1, [sp, #20]
 8008c30:	e7c4      	b.n	8008bbc <_svfiprintf_r+0x130>
 8008c32:	4604      	mov	r4, r0
 8008c34:	2301      	movs	r3, #1
 8008c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c3a:	e7f0      	b.n	8008c1e <_svfiprintf_r+0x192>
 8008c3c:	ab03      	add	r3, sp, #12
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	462a      	mov	r2, r5
 8008c42:	4638      	mov	r0, r7
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <_svfiprintf_r+0x1f8>)
 8008c46:	a904      	add	r1, sp, #16
 8008c48:	f7fd fe6e 	bl	8006928 <_printf_float>
 8008c4c:	1c42      	adds	r2, r0, #1
 8008c4e:	4606      	mov	r6, r0
 8008c50:	d1d6      	bne.n	8008c00 <_svfiprintf_r+0x174>
 8008c52:	89ab      	ldrh	r3, [r5, #12]
 8008c54:	065b      	lsls	r3, r3, #25
 8008c56:	f53f af2d 	bmi.w	8008ab4 <_svfiprintf_r+0x28>
 8008c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c5c:	b01d      	add	sp, #116	; 0x74
 8008c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c62:	ab03      	add	r3, sp, #12
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	462a      	mov	r2, r5
 8008c68:	4638      	mov	r0, r7
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <_svfiprintf_r+0x1f8>)
 8008c6c:	a904      	add	r1, sp, #16
 8008c6e:	f7fe f8fb 	bl	8006e68 <_printf_i>
 8008c72:	e7eb      	b.n	8008c4c <_svfiprintf_r+0x1c0>
 8008c74:	08009774 	.word	0x08009774
 8008c78:	0800977a 	.word	0x0800977a
 8008c7c:	0800977e 	.word	0x0800977e
 8008c80:	08006929 	.word	0x08006929
 8008c84:	080089d9 	.word	0x080089d9

08008c88 <__sflush_r>:
 8008c88:	898a      	ldrh	r2, [r1, #12]
 8008c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	0710      	lsls	r0, r2, #28
 8008c90:	460c      	mov	r4, r1
 8008c92:	d457      	bmi.n	8008d44 <__sflush_r+0xbc>
 8008c94:	684b      	ldr	r3, [r1, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dc04      	bgt.n	8008ca4 <__sflush_r+0x1c>
 8008c9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc01      	bgt.n	8008ca4 <__sflush_r+0x1c>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ca6:	2e00      	cmp	r6, #0
 8008ca8:	d0fa      	beq.n	8008ca0 <__sflush_r+0x18>
 8008caa:	2300      	movs	r3, #0
 8008cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cb0:	682f      	ldr	r7, [r5, #0]
 8008cb2:	6a21      	ldr	r1, [r4, #32]
 8008cb4:	602b      	str	r3, [r5, #0]
 8008cb6:	d032      	beq.n	8008d1e <__sflush_r+0x96>
 8008cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	075a      	lsls	r2, r3, #29
 8008cbe:	d505      	bpl.n	8008ccc <__sflush_r+0x44>
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	1ac0      	subs	r0, r0, r3
 8008cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cc6:	b10b      	cbz	r3, 8008ccc <__sflush_r+0x44>
 8008cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cca:	1ac0      	subs	r0, r0, r3
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4602      	mov	r2, r0
 8008cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	6a21      	ldr	r1, [r4, #32]
 8008cd6:	47b0      	blx	r6
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	d106      	bne.n	8008cec <__sflush_r+0x64>
 8008cde:	6829      	ldr	r1, [r5, #0]
 8008ce0:	291d      	cmp	r1, #29
 8008ce2:	d82b      	bhi.n	8008d3c <__sflush_r+0xb4>
 8008ce4:	4a28      	ldr	r2, [pc, #160]	; (8008d88 <__sflush_r+0x100>)
 8008ce6:	410a      	asrs	r2, r1
 8008ce8:	07d6      	lsls	r6, r2, #31
 8008cea:	d427      	bmi.n	8008d3c <__sflush_r+0xb4>
 8008cec:	2200      	movs	r2, #0
 8008cee:	6062      	str	r2, [r4, #4]
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	04d9      	lsls	r1, r3, #19
 8008cf4:	6022      	str	r2, [r4, #0]
 8008cf6:	d504      	bpl.n	8008d02 <__sflush_r+0x7a>
 8008cf8:	1c42      	adds	r2, r0, #1
 8008cfa:	d101      	bne.n	8008d00 <__sflush_r+0x78>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b903      	cbnz	r3, 8008d02 <__sflush_r+0x7a>
 8008d00:	6560      	str	r0, [r4, #84]	; 0x54
 8008d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d04:	602f      	str	r7, [r5, #0]
 8008d06:	2900      	cmp	r1, #0
 8008d08:	d0ca      	beq.n	8008ca0 <__sflush_r+0x18>
 8008d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d002      	beq.n	8008d18 <__sflush_r+0x90>
 8008d12:	4628      	mov	r0, r5
 8008d14:	f7ff f9ec 	bl	80080f0 <_free_r>
 8008d18:	2000      	movs	r0, #0
 8008d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8008d1c:	e7c1      	b.n	8008ca2 <__sflush_r+0x1a>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b0      	blx	r6
 8008d24:	1c41      	adds	r1, r0, #1
 8008d26:	d1c8      	bne.n	8008cba <__sflush_r+0x32>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c5      	beq.n	8008cba <__sflush_r+0x32>
 8008d2e:	2b1d      	cmp	r3, #29
 8008d30:	d001      	beq.n	8008d36 <__sflush_r+0xae>
 8008d32:	2b16      	cmp	r3, #22
 8008d34:	d101      	bne.n	8008d3a <__sflush_r+0xb2>
 8008d36:	602f      	str	r7, [r5, #0]
 8008d38:	e7b2      	b.n	8008ca0 <__sflush_r+0x18>
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	e7ae      	b.n	8008ca2 <__sflush_r+0x1a>
 8008d44:	690f      	ldr	r7, [r1, #16]
 8008d46:	2f00      	cmp	r7, #0
 8008d48:	d0aa      	beq.n	8008ca0 <__sflush_r+0x18>
 8008d4a:	0793      	lsls	r3, r2, #30
 8008d4c:	bf18      	it	ne
 8008d4e:	2300      	movne	r3, #0
 8008d50:	680e      	ldr	r6, [r1, #0]
 8008d52:	bf08      	it	eq
 8008d54:	694b      	ldreq	r3, [r1, #20]
 8008d56:	1bf6      	subs	r6, r6, r7
 8008d58:	600f      	str	r7, [r1, #0]
 8008d5a:	608b      	str	r3, [r1, #8]
 8008d5c:	2e00      	cmp	r6, #0
 8008d5e:	dd9f      	ble.n	8008ca0 <__sflush_r+0x18>
 8008d60:	4633      	mov	r3, r6
 8008d62:	463a      	mov	r2, r7
 8008d64:	4628      	mov	r0, r5
 8008d66:	6a21      	ldr	r1, [r4, #32]
 8008d68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008d6c:	47e0      	blx	ip
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	dc06      	bgt.n	8008d80 <__sflush_r+0xf8>
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	e790      	b.n	8008ca2 <__sflush_r+0x1a>
 8008d80:	4407      	add	r7, r0
 8008d82:	1a36      	subs	r6, r6, r0
 8008d84:	e7ea      	b.n	8008d5c <__sflush_r+0xd4>
 8008d86:	bf00      	nop
 8008d88:	dfbffffe 	.word	0xdfbffffe

08008d8c <_fflush_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	690b      	ldr	r3, [r1, #16]
 8008d90:	4605      	mov	r5, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	b913      	cbnz	r3, 8008d9c <_fflush_r+0x10>
 8008d96:	2500      	movs	r5, #0
 8008d98:	4628      	mov	r0, r5
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	b118      	cbz	r0, 8008da6 <_fflush_r+0x1a>
 8008d9e:	6a03      	ldr	r3, [r0, #32]
 8008da0:	b90b      	cbnz	r3, 8008da6 <_fflush_r+0x1a>
 8008da2:	f7fe fa0f 	bl	80071c4 <__sinit>
 8008da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0f3      	beq.n	8008d96 <_fflush_r+0xa>
 8008dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008db0:	07d0      	lsls	r0, r2, #31
 8008db2:	d404      	bmi.n	8008dbe <_fflush_r+0x32>
 8008db4:	0599      	lsls	r1, r3, #22
 8008db6:	d402      	bmi.n	8008dbe <_fflush_r+0x32>
 8008db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dba:	f7fe fb1a 	bl	80073f2 <__retarget_lock_acquire_recursive>
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	f7ff ff61 	bl	8008c88 <__sflush_r>
 8008dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc8:	4605      	mov	r5, r0
 8008dca:	07da      	lsls	r2, r3, #31
 8008dcc:	d4e4      	bmi.n	8008d98 <_fflush_r+0xc>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	059b      	lsls	r3, r3, #22
 8008dd2:	d4e1      	bmi.n	8008d98 <_fflush_r+0xc>
 8008dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dd6:	f7fe fb0d 	bl	80073f4 <__retarget_lock_release_recursive>
 8008dda:	e7dd      	b.n	8008d98 <_fflush_r+0xc>

08008ddc <memmove>:
 8008ddc:	4288      	cmp	r0, r1
 8008dde:	b510      	push	{r4, lr}
 8008de0:	eb01 0402 	add.w	r4, r1, r2
 8008de4:	d902      	bls.n	8008dec <memmove+0x10>
 8008de6:	4284      	cmp	r4, r0
 8008de8:	4623      	mov	r3, r4
 8008dea:	d807      	bhi.n	8008dfc <memmove+0x20>
 8008dec:	1e43      	subs	r3, r0, #1
 8008dee:	42a1      	cmp	r1, r4
 8008df0:	d008      	beq.n	8008e04 <memmove+0x28>
 8008df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dfa:	e7f8      	b.n	8008dee <memmove+0x12>
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	4402      	add	r2, r0
 8008e00:	428a      	cmp	r2, r1
 8008e02:	d100      	bne.n	8008e06 <memmove+0x2a>
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e0e:	e7f7      	b.n	8008e00 <memmove+0x24>

08008e10 <_sbrk_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	2300      	movs	r3, #0
 8008e14:	4d05      	ldr	r5, [pc, #20]	; (8008e2c <_sbrk_r+0x1c>)
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	f7fa fa02 	bl	8003224 <_sbrk>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_sbrk_r+0x1a>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_sbrk_r+0x1a>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20000758 	.word	0x20000758

08008e30 <memcpy>:
 8008e30:	440a      	add	r2, r1
 8008e32:	4291      	cmp	r1, r2
 8008e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e38:	d100      	bne.n	8008e3c <memcpy+0xc>
 8008e3a:	4770      	bx	lr
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e42:	4291      	cmp	r1, r2
 8008e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e48:	d1f9      	bne.n	8008e3e <memcpy+0xe>
 8008e4a:	bd10      	pop	{r4, pc}

08008e4c <__assert_func>:
 8008e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e4e:	4614      	mov	r4, r2
 8008e50:	461a      	mov	r2, r3
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <__assert_func+0x2c>)
 8008e54:	4605      	mov	r5, r0
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68d8      	ldr	r0, [r3, #12]
 8008e5a:	b14c      	cbz	r4, 8008e70 <__assert_func+0x24>
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <__assert_func+0x30>)
 8008e5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e62:	9100      	str	r1, [sp, #0]
 8008e64:	462b      	mov	r3, r5
 8008e66:	4906      	ldr	r1, [pc, #24]	; (8008e80 <__assert_func+0x34>)
 8008e68:	f000 f870 	bl	8008f4c <fiprintf>
 8008e6c:	f000 f880 	bl	8008f70 <abort>
 8008e70:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <__assert_func+0x38>)
 8008e72:	461c      	mov	r4, r3
 8008e74:	e7f3      	b.n	8008e5e <__assert_func+0x12>
 8008e76:	bf00      	nop
 8008e78:	2000007c 	.word	0x2000007c
 8008e7c:	0800978f 	.word	0x0800978f
 8008e80:	0800979c 	.word	0x0800979c
 8008e84:	080097ca 	.word	0x080097ca

08008e88 <_calloc_r>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	fba1 5402 	umull	r5, r4, r1, r2
 8008e8e:	b934      	cbnz	r4, 8008e9e <_calloc_r+0x16>
 8008e90:	4629      	mov	r1, r5
 8008e92:	f7ff f99d 	bl	80081d0 <_malloc_r>
 8008e96:	4606      	mov	r6, r0
 8008e98:	b928      	cbnz	r0, 8008ea6 <_calloc_r+0x1e>
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	bd70      	pop	{r4, r5, r6, pc}
 8008e9e:	220c      	movs	r2, #12
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	6002      	str	r2, [r0, #0]
 8008ea4:	e7f9      	b.n	8008e9a <_calloc_r+0x12>
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	f7fe fa24 	bl	80072f6 <memset>
 8008eae:	e7f4      	b.n	8008e9a <_calloc_r+0x12>

08008eb0 <__ascii_mbtowc>:
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	b901      	cbnz	r1, 8008eb6 <__ascii_mbtowc+0x6>
 8008eb4:	a901      	add	r1, sp, #4
 8008eb6:	b142      	cbz	r2, 8008eca <__ascii_mbtowc+0x1a>
 8008eb8:	b14b      	cbz	r3, 8008ece <__ascii_mbtowc+0x1e>
 8008eba:	7813      	ldrb	r3, [r2, #0]
 8008ebc:	600b      	str	r3, [r1, #0]
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	1e10      	subs	r0, r2, #0
 8008ec2:	bf18      	it	ne
 8008ec4:	2001      	movne	r0, #1
 8008ec6:	b002      	add	sp, #8
 8008ec8:	4770      	bx	lr
 8008eca:	4610      	mov	r0, r2
 8008ecc:	e7fb      	b.n	8008ec6 <__ascii_mbtowc+0x16>
 8008ece:	f06f 0001 	mvn.w	r0, #1
 8008ed2:	e7f8      	b.n	8008ec6 <__ascii_mbtowc+0x16>

08008ed4 <_realloc_r>:
 8008ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed8:	4680      	mov	r8, r0
 8008eda:	4614      	mov	r4, r2
 8008edc:	460e      	mov	r6, r1
 8008ede:	b921      	cbnz	r1, 8008eea <_realloc_r+0x16>
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee6:	f7ff b973 	b.w	80081d0 <_malloc_r>
 8008eea:	b92a      	cbnz	r2, 8008ef8 <_realloc_r+0x24>
 8008eec:	f7ff f900 	bl	80080f0 <_free_r>
 8008ef0:	4625      	mov	r5, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef8:	f000 f841 	bl	8008f7e <_malloc_usable_size_r>
 8008efc:	4284      	cmp	r4, r0
 8008efe:	4607      	mov	r7, r0
 8008f00:	d802      	bhi.n	8008f08 <_realloc_r+0x34>
 8008f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f06:	d812      	bhi.n	8008f2e <_realloc_r+0x5a>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	f7ff f960 	bl	80081d0 <_malloc_r>
 8008f10:	4605      	mov	r5, r0
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d0ed      	beq.n	8008ef2 <_realloc_r+0x1e>
 8008f16:	42bc      	cmp	r4, r7
 8008f18:	4622      	mov	r2, r4
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	bf28      	it	cs
 8008f1e:	463a      	movcs	r2, r7
 8008f20:	f7ff ff86 	bl	8008e30 <memcpy>
 8008f24:	4631      	mov	r1, r6
 8008f26:	4640      	mov	r0, r8
 8008f28:	f7ff f8e2 	bl	80080f0 <_free_r>
 8008f2c:	e7e1      	b.n	8008ef2 <_realloc_r+0x1e>
 8008f2e:	4635      	mov	r5, r6
 8008f30:	e7df      	b.n	8008ef2 <_realloc_r+0x1e>

08008f32 <__ascii_wctomb>:
 8008f32:	4603      	mov	r3, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	b141      	cbz	r1, 8008f4a <__ascii_wctomb+0x18>
 8008f38:	2aff      	cmp	r2, #255	; 0xff
 8008f3a:	d904      	bls.n	8008f46 <__ascii_wctomb+0x14>
 8008f3c:	228a      	movs	r2, #138	; 0x8a
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	4770      	bx	lr
 8008f46:	2001      	movs	r0, #1
 8008f48:	700a      	strb	r2, [r1, #0]
 8008f4a:	4770      	bx	lr

08008f4c <fiprintf>:
 8008f4c:	b40e      	push	{r1, r2, r3}
 8008f4e:	b503      	push	{r0, r1, lr}
 8008f50:	4601      	mov	r1, r0
 8008f52:	ab03      	add	r3, sp, #12
 8008f54:	4805      	ldr	r0, [pc, #20]	; (8008f6c <fiprintf+0x20>)
 8008f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f5a:	6800      	ldr	r0, [r0, #0]
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	f000 f83d 	bl	8008fdc <_vfiprintf_r>
 8008f62:	b002      	add	sp, #8
 8008f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f68:	b003      	add	sp, #12
 8008f6a:	4770      	bx	lr
 8008f6c:	2000007c 	.word	0x2000007c

08008f70 <abort>:
 8008f70:	2006      	movs	r0, #6
 8008f72:	b508      	push	{r3, lr}
 8008f74:	f000 fa0a 	bl	800938c <raise>
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7fa f8e0 	bl	800313e <_exit>

08008f7e <_malloc_usable_size_r>:
 8008f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f82:	1f18      	subs	r0, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfbc      	itt	lt
 8008f88:	580b      	ldrlt	r3, [r1, r0]
 8008f8a:	18c0      	addlt	r0, r0, r3
 8008f8c:	4770      	bx	lr

08008f8e <__sfputc_r>:
 8008f8e:	6893      	ldr	r3, [r2, #8]
 8008f90:	b410      	push	{r4}
 8008f92:	3b01      	subs	r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	6093      	str	r3, [r2, #8]
 8008f98:	da07      	bge.n	8008faa <__sfputc_r+0x1c>
 8008f9a:	6994      	ldr	r4, [r2, #24]
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	db01      	blt.n	8008fa4 <__sfputc_r+0x16>
 8008fa0:	290a      	cmp	r1, #10
 8008fa2:	d102      	bne.n	8008faa <__sfputc_r+0x1c>
 8008fa4:	bc10      	pop	{r4}
 8008fa6:	f000 b933 	b.w	8009210 <__swbuf_r>
 8008faa:	6813      	ldr	r3, [r2, #0]
 8008fac:	1c58      	adds	r0, r3, #1
 8008fae:	6010      	str	r0, [r2, #0]
 8008fb0:	7019      	strb	r1, [r3, #0]
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	bc10      	pop	{r4}
 8008fb6:	4770      	bx	lr

08008fb8 <__sfputs_r>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	4606      	mov	r6, r0
 8008fbc:	460f      	mov	r7, r1
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	18d5      	adds	r5, r2, r3
 8008fc2:	42ac      	cmp	r4, r5
 8008fc4:	d101      	bne.n	8008fca <__sfputs_r+0x12>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e007      	b.n	8008fda <__sfputs_r+0x22>
 8008fca:	463a      	mov	r2, r7
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd2:	f7ff ffdc 	bl	8008f8e <__sfputc_r>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d1f3      	bne.n	8008fc2 <__sfputs_r+0xa>
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fdc <_vfiprintf_r>:
 8008fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	460d      	mov	r5, r1
 8008fe2:	4614      	mov	r4, r2
 8008fe4:	4698      	mov	r8, r3
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	b09d      	sub	sp, #116	; 0x74
 8008fea:	b118      	cbz	r0, 8008ff4 <_vfiprintf_r+0x18>
 8008fec:	6a03      	ldr	r3, [r0, #32]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <_vfiprintf_r+0x18>
 8008ff0:	f7fe f8e8 	bl	80071c4 <__sinit>
 8008ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d405      	bmi.n	8009006 <_vfiprintf_r+0x2a>
 8008ffa:	89ab      	ldrh	r3, [r5, #12]
 8008ffc:	059a      	lsls	r2, r3, #22
 8008ffe:	d402      	bmi.n	8009006 <_vfiprintf_r+0x2a>
 8009000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009002:	f7fe f9f6 	bl	80073f2 <__retarget_lock_acquire_recursive>
 8009006:	89ab      	ldrh	r3, [r5, #12]
 8009008:	071b      	lsls	r3, r3, #28
 800900a:	d501      	bpl.n	8009010 <_vfiprintf_r+0x34>
 800900c:	692b      	ldr	r3, [r5, #16]
 800900e:	b99b      	cbnz	r3, 8009038 <_vfiprintf_r+0x5c>
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f000 f93a 	bl	800928c <__swsetup_r>
 8009018:	b170      	cbz	r0, 8009038 <_vfiprintf_r+0x5c>
 800901a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800901c:	07dc      	lsls	r4, r3, #31
 800901e:	d504      	bpl.n	800902a <_vfiprintf_r+0x4e>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	b01d      	add	sp, #116	; 0x74
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	0598      	lsls	r0, r3, #22
 800902e:	d4f7      	bmi.n	8009020 <_vfiprintf_r+0x44>
 8009030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009032:	f7fe f9df 	bl	80073f4 <__retarget_lock_release_recursive>
 8009036:	e7f3      	b.n	8009020 <_vfiprintf_r+0x44>
 8009038:	2300      	movs	r3, #0
 800903a:	9309      	str	r3, [sp, #36]	; 0x24
 800903c:	2320      	movs	r3, #32
 800903e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009042:	2330      	movs	r3, #48	; 0x30
 8009044:	f04f 0901 	mov.w	r9, #1
 8009048:	f8cd 800c 	str.w	r8, [sp, #12]
 800904c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80091fc <_vfiprintf_r+0x220>
 8009050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009054:	4623      	mov	r3, r4
 8009056:	469a      	mov	sl, r3
 8009058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800905c:	b10a      	cbz	r2, 8009062 <_vfiprintf_r+0x86>
 800905e:	2a25      	cmp	r2, #37	; 0x25
 8009060:	d1f9      	bne.n	8009056 <_vfiprintf_r+0x7a>
 8009062:	ebba 0b04 	subs.w	fp, sl, r4
 8009066:	d00b      	beq.n	8009080 <_vfiprintf_r+0xa4>
 8009068:	465b      	mov	r3, fp
 800906a:	4622      	mov	r2, r4
 800906c:	4629      	mov	r1, r5
 800906e:	4630      	mov	r0, r6
 8009070:	f7ff ffa2 	bl	8008fb8 <__sfputs_r>
 8009074:	3001      	adds	r0, #1
 8009076:	f000 80a9 	beq.w	80091cc <_vfiprintf_r+0x1f0>
 800907a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800907c:	445a      	add	r2, fp
 800907e:	9209      	str	r2, [sp, #36]	; 0x24
 8009080:	f89a 3000 	ldrb.w	r3, [sl]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 80a1 	beq.w	80091cc <_vfiprintf_r+0x1f0>
 800908a:	2300      	movs	r3, #0
 800908c:	f04f 32ff 	mov.w	r2, #4294967295
 8009090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009094:	f10a 0a01 	add.w	sl, sl, #1
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090a0:	931a      	str	r3, [sp, #104]	; 0x68
 80090a2:	4654      	mov	r4, sl
 80090a4:	2205      	movs	r2, #5
 80090a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090aa:	4854      	ldr	r0, [pc, #336]	; (80091fc <_vfiprintf_r+0x220>)
 80090ac:	f7fe f9a3 	bl	80073f6 <memchr>
 80090b0:	9a04      	ldr	r2, [sp, #16]
 80090b2:	b9d8      	cbnz	r0, 80090ec <_vfiprintf_r+0x110>
 80090b4:	06d1      	lsls	r1, r2, #27
 80090b6:	bf44      	itt	mi
 80090b8:	2320      	movmi	r3, #32
 80090ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090be:	0713      	lsls	r3, r2, #28
 80090c0:	bf44      	itt	mi
 80090c2:	232b      	movmi	r3, #43	; 0x2b
 80090c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c8:	f89a 3000 	ldrb.w	r3, [sl]
 80090cc:	2b2a      	cmp	r3, #42	; 0x2a
 80090ce:	d015      	beq.n	80090fc <_vfiprintf_r+0x120>
 80090d0:	4654      	mov	r4, sl
 80090d2:	2000      	movs	r0, #0
 80090d4:	f04f 0c0a 	mov.w	ip, #10
 80090d8:	9a07      	ldr	r2, [sp, #28]
 80090da:	4621      	mov	r1, r4
 80090dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090e0:	3b30      	subs	r3, #48	; 0x30
 80090e2:	2b09      	cmp	r3, #9
 80090e4:	d94d      	bls.n	8009182 <_vfiprintf_r+0x1a6>
 80090e6:	b1b0      	cbz	r0, 8009116 <_vfiprintf_r+0x13a>
 80090e8:	9207      	str	r2, [sp, #28]
 80090ea:	e014      	b.n	8009116 <_vfiprintf_r+0x13a>
 80090ec:	eba0 0308 	sub.w	r3, r0, r8
 80090f0:	fa09 f303 	lsl.w	r3, r9, r3
 80090f4:	4313      	orrs	r3, r2
 80090f6:	46a2      	mov	sl, r4
 80090f8:	9304      	str	r3, [sp, #16]
 80090fa:	e7d2      	b.n	80090a2 <_vfiprintf_r+0xc6>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	1d19      	adds	r1, r3, #4
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	9103      	str	r1, [sp, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	bfbb      	ittet	lt
 8009108:	425b      	neglt	r3, r3
 800910a:	f042 0202 	orrlt.w	r2, r2, #2
 800910e:	9307      	strge	r3, [sp, #28]
 8009110:	9307      	strlt	r3, [sp, #28]
 8009112:	bfb8      	it	lt
 8009114:	9204      	strlt	r2, [sp, #16]
 8009116:	7823      	ldrb	r3, [r4, #0]
 8009118:	2b2e      	cmp	r3, #46	; 0x2e
 800911a:	d10c      	bne.n	8009136 <_vfiprintf_r+0x15a>
 800911c:	7863      	ldrb	r3, [r4, #1]
 800911e:	2b2a      	cmp	r3, #42	; 0x2a
 8009120:	d134      	bne.n	800918c <_vfiprintf_r+0x1b0>
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	3402      	adds	r4, #2
 8009126:	1d1a      	adds	r2, r3, #4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	9203      	str	r2, [sp, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	bfb8      	it	lt
 8009130:	f04f 33ff 	movlt.w	r3, #4294967295
 8009134:	9305      	str	r3, [sp, #20]
 8009136:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009200 <_vfiprintf_r+0x224>
 800913a:	2203      	movs	r2, #3
 800913c:	4650      	mov	r0, sl
 800913e:	7821      	ldrb	r1, [r4, #0]
 8009140:	f7fe f959 	bl	80073f6 <memchr>
 8009144:	b138      	cbz	r0, 8009156 <_vfiprintf_r+0x17a>
 8009146:	2240      	movs	r2, #64	; 0x40
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	eba0 000a 	sub.w	r0, r0, sl
 800914e:	4082      	lsls	r2, r0
 8009150:	4313      	orrs	r3, r2
 8009152:	3401      	adds	r4, #1
 8009154:	9304      	str	r3, [sp, #16]
 8009156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800915a:	2206      	movs	r2, #6
 800915c:	4829      	ldr	r0, [pc, #164]	; (8009204 <_vfiprintf_r+0x228>)
 800915e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009162:	f7fe f948 	bl	80073f6 <memchr>
 8009166:	2800      	cmp	r0, #0
 8009168:	d03f      	beq.n	80091ea <_vfiprintf_r+0x20e>
 800916a:	4b27      	ldr	r3, [pc, #156]	; (8009208 <_vfiprintf_r+0x22c>)
 800916c:	bb1b      	cbnz	r3, 80091b6 <_vfiprintf_r+0x1da>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	3307      	adds	r3, #7
 8009172:	f023 0307 	bic.w	r3, r3, #7
 8009176:	3308      	adds	r3, #8
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917c:	443b      	add	r3, r7
 800917e:	9309      	str	r3, [sp, #36]	; 0x24
 8009180:	e768      	b.n	8009054 <_vfiprintf_r+0x78>
 8009182:	460c      	mov	r4, r1
 8009184:	2001      	movs	r0, #1
 8009186:	fb0c 3202 	mla	r2, ip, r2, r3
 800918a:	e7a6      	b.n	80090da <_vfiprintf_r+0xfe>
 800918c:	2300      	movs	r3, #0
 800918e:	f04f 0c0a 	mov.w	ip, #10
 8009192:	4619      	mov	r1, r3
 8009194:	3401      	adds	r4, #1
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	4620      	mov	r0, r4
 800919a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800919e:	3a30      	subs	r2, #48	; 0x30
 80091a0:	2a09      	cmp	r2, #9
 80091a2:	d903      	bls.n	80091ac <_vfiprintf_r+0x1d0>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0c6      	beq.n	8009136 <_vfiprintf_r+0x15a>
 80091a8:	9105      	str	r1, [sp, #20]
 80091aa:	e7c4      	b.n	8009136 <_vfiprintf_r+0x15a>
 80091ac:	4604      	mov	r4, r0
 80091ae:	2301      	movs	r3, #1
 80091b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80091b4:	e7f0      	b.n	8009198 <_vfiprintf_r+0x1bc>
 80091b6:	ab03      	add	r3, sp, #12
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	462a      	mov	r2, r5
 80091bc:	4630      	mov	r0, r6
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <_vfiprintf_r+0x230>)
 80091c0:	a904      	add	r1, sp, #16
 80091c2:	f7fd fbb1 	bl	8006928 <_printf_float>
 80091c6:	4607      	mov	r7, r0
 80091c8:	1c78      	adds	r0, r7, #1
 80091ca:	d1d6      	bne.n	800917a <_vfiprintf_r+0x19e>
 80091cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091ce:	07d9      	lsls	r1, r3, #31
 80091d0:	d405      	bmi.n	80091de <_vfiprintf_r+0x202>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	059a      	lsls	r2, r3, #22
 80091d6:	d402      	bmi.n	80091de <_vfiprintf_r+0x202>
 80091d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091da:	f7fe f90b 	bl	80073f4 <__retarget_lock_release_recursive>
 80091de:	89ab      	ldrh	r3, [r5, #12]
 80091e0:	065b      	lsls	r3, r3, #25
 80091e2:	f53f af1d 	bmi.w	8009020 <_vfiprintf_r+0x44>
 80091e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091e8:	e71c      	b.n	8009024 <_vfiprintf_r+0x48>
 80091ea:	ab03      	add	r3, sp, #12
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	462a      	mov	r2, r5
 80091f0:	4630      	mov	r0, r6
 80091f2:	4b06      	ldr	r3, [pc, #24]	; (800920c <_vfiprintf_r+0x230>)
 80091f4:	a904      	add	r1, sp, #16
 80091f6:	f7fd fe37 	bl	8006e68 <_printf_i>
 80091fa:	e7e4      	b.n	80091c6 <_vfiprintf_r+0x1ea>
 80091fc:	08009774 	.word	0x08009774
 8009200:	0800977a 	.word	0x0800977a
 8009204:	0800977e 	.word	0x0800977e
 8009208:	08006929 	.word	0x08006929
 800920c:	08008fb9 	.word	0x08008fb9

08009210 <__swbuf_r>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	460e      	mov	r6, r1
 8009214:	4614      	mov	r4, r2
 8009216:	4605      	mov	r5, r0
 8009218:	b118      	cbz	r0, 8009222 <__swbuf_r+0x12>
 800921a:	6a03      	ldr	r3, [r0, #32]
 800921c:	b90b      	cbnz	r3, 8009222 <__swbuf_r+0x12>
 800921e:	f7fd ffd1 	bl	80071c4 <__sinit>
 8009222:	69a3      	ldr	r3, [r4, #24]
 8009224:	60a3      	str	r3, [r4, #8]
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	071a      	lsls	r2, r3, #28
 800922a:	d525      	bpl.n	8009278 <__swbuf_r+0x68>
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	b31b      	cbz	r3, 8009278 <__swbuf_r+0x68>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	6922      	ldr	r2, [r4, #16]
 8009234:	b2f6      	uxtb	r6, r6
 8009236:	1a98      	subs	r0, r3, r2
 8009238:	6963      	ldr	r3, [r4, #20]
 800923a:	4637      	mov	r7, r6
 800923c:	4283      	cmp	r3, r0
 800923e:	dc04      	bgt.n	800924a <__swbuf_r+0x3a>
 8009240:	4621      	mov	r1, r4
 8009242:	4628      	mov	r0, r5
 8009244:	f7ff fda2 	bl	8008d8c <_fflush_r>
 8009248:	b9e0      	cbnz	r0, 8009284 <__swbuf_r+0x74>
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	3b01      	subs	r3, #1
 800924e:	60a3      	str	r3, [r4, #8]
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	6022      	str	r2, [r4, #0]
 8009256:	701e      	strb	r6, [r3, #0]
 8009258:	6962      	ldr	r2, [r4, #20]
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	429a      	cmp	r2, r3
 800925e:	d004      	beq.n	800926a <__swbuf_r+0x5a>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	07db      	lsls	r3, r3, #31
 8009264:	d506      	bpl.n	8009274 <__swbuf_r+0x64>
 8009266:	2e0a      	cmp	r6, #10
 8009268:	d104      	bne.n	8009274 <__swbuf_r+0x64>
 800926a:	4621      	mov	r1, r4
 800926c:	4628      	mov	r0, r5
 800926e:	f7ff fd8d 	bl	8008d8c <_fflush_r>
 8009272:	b938      	cbnz	r0, 8009284 <__swbuf_r+0x74>
 8009274:	4638      	mov	r0, r7
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	4621      	mov	r1, r4
 800927a:	4628      	mov	r0, r5
 800927c:	f000 f806 	bl	800928c <__swsetup_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	d0d5      	beq.n	8009230 <__swbuf_r+0x20>
 8009284:	f04f 37ff 	mov.w	r7, #4294967295
 8009288:	e7f4      	b.n	8009274 <__swbuf_r+0x64>
	...

0800928c <__swsetup_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4b2a      	ldr	r3, [pc, #168]	; (8009338 <__swsetup_r+0xac>)
 8009290:	4605      	mov	r5, r0
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	460c      	mov	r4, r1
 8009296:	b118      	cbz	r0, 80092a0 <__swsetup_r+0x14>
 8009298:	6a03      	ldr	r3, [r0, #32]
 800929a:	b90b      	cbnz	r3, 80092a0 <__swsetup_r+0x14>
 800929c:	f7fd ff92 	bl	80071c4 <__sinit>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092a6:	0718      	lsls	r0, r3, #28
 80092a8:	d422      	bmi.n	80092f0 <__swsetup_r+0x64>
 80092aa:	06d9      	lsls	r1, r3, #27
 80092ac:	d407      	bmi.n	80092be <__swsetup_r+0x32>
 80092ae:	2309      	movs	r3, #9
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092b6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	e034      	b.n	8009328 <__swsetup_r+0x9c>
 80092be:	0758      	lsls	r0, r3, #29
 80092c0:	d512      	bpl.n	80092e8 <__swsetup_r+0x5c>
 80092c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092c4:	b141      	cbz	r1, 80092d8 <__swsetup_r+0x4c>
 80092c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ca:	4299      	cmp	r1, r3
 80092cc:	d002      	beq.n	80092d4 <__swsetup_r+0x48>
 80092ce:	4628      	mov	r0, r5
 80092d0:	f7fe ff0e 	bl	80080f0 <_free_r>
 80092d4:	2300      	movs	r3, #0
 80092d6:	6363      	str	r3, [r4, #52]	; 0x34
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	2300      	movs	r3, #0
 80092e2:	6063      	str	r3, [r4, #4]
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	f043 0308 	orr.w	r3, r3, #8
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	b94b      	cbnz	r3, 8009308 <__swsetup_r+0x7c>
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092fe:	d003      	beq.n	8009308 <__swsetup_r+0x7c>
 8009300:	4621      	mov	r1, r4
 8009302:	4628      	mov	r0, r5
 8009304:	f000 f883 	bl	800940e <__smakebuf_r>
 8009308:	89a0      	ldrh	r0, [r4, #12]
 800930a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800930e:	f010 0301 	ands.w	r3, r0, #1
 8009312:	d00a      	beq.n	800932a <__swsetup_r+0x9e>
 8009314:	2300      	movs	r3, #0
 8009316:	60a3      	str	r3, [r4, #8]
 8009318:	6963      	ldr	r3, [r4, #20]
 800931a:	425b      	negs	r3, r3
 800931c:	61a3      	str	r3, [r4, #24]
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	b943      	cbnz	r3, 8009334 <__swsetup_r+0xa8>
 8009322:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009326:	d1c4      	bne.n	80092b2 <__swsetup_r+0x26>
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	0781      	lsls	r1, r0, #30
 800932c:	bf58      	it	pl
 800932e:	6963      	ldrpl	r3, [r4, #20]
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	e7f4      	b.n	800931e <__swsetup_r+0x92>
 8009334:	2000      	movs	r0, #0
 8009336:	e7f7      	b.n	8009328 <__swsetup_r+0x9c>
 8009338:	2000007c 	.word	0x2000007c

0800933c <_raise_r>:
 800933c:	291f      	cmp	r1, #31
 800933e:	b538      	push	{r3, r4, r5, lr}
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	d904      	bls.n	8009350 <_raise_r+0x14>
 8009346:	2316      	movs	r3, #22
 8009348:	6003      	str	r3, [r0, #0]
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009352:	b112      	cbz	r2, 800935a <_raise_r+0x1e>
 8009354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009358:	b94b      	cbnz	r3, 800936e <_raise_r+0x32>
 800935a:	4620      	mov	r0, r4
 800935c:	f000 f830 	bl	80093c0 <_getpid_r>
 8009360:	462a      	mov	r2, r5
 8009362:	4601      	mov	r1, r0
 8009364:	4620      	mov	r0, r4
 8009366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800936a:	f000 b817 	b.w	800939c <_kill_r>
 800936e:	2b01      	cmp	r3, #1
 8009370:	d00a      	beq.n	8009388 <_raise_r+0x4c>
 8009372:	1c59      	adds	r1, r3, #1
 8009374:	d103      	bne.n	800937e <_raise_r+0x42>
 8009376:	2316      	movs	r3, #22
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	2001      	movs	r0, #1
 800937c:	e7e7      	b.n	800934e <_raise_r+0x12>
 800937e:	2400      	movs	r4, #0
 8009380:	4628      	mov	r0, r5
 8009382:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009386:	4798      	blx	r3
 8009388:	2000      	movs	r0, #0
 800938a:	e7e0      	b.n	800934e <_raise_r+0x12>

0800938c <raise>:
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <raise+0xc>)
 800938e:	4601      	mov	r1, r0
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f7ff bfd3 	b.w	800933c <_raise_r>
 8009396:	bf00      	nop
 8009398:	2000007c 	.word	0x2000007c

0800939c <_kill_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	2300      	movs	r3, #0
 80093a0:	4d06      	ldr	r5, [pc, #24]	; (80093bc <_kill_r+0x20>)
 80093a2:	4604      	mov	r4, r0
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	f7f9 feb8 	bl	800311e <_kill>
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d102      	bne.n	80093b8 <_kill_r+0x1c>
 80093b2:	682b      	ldr	r3, [r5, #0]
 80093b4:	b103      	cbz	r3, 80093b8 <_kill_r+0x1c>
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	bd38      	pop	{r3, r4, r5, pc}
 80093ba:	bf00      	nop
 80093bc:	20000758 	.word	0x20000758

080093c0 <_getpid_r>:
 80093c0:	f7f9 bea6 	b.w	8003110 <_getpid>

080093c4 <__swhatbuf_r>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	460c      	mov	r4, r1
 80093c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093cc:	4615      	mov	r5, r2
 80093ce:	2900      	cmp	r1, #0
 80093d0:	461e      	mov	r6, r3
 80093d2:	b096      	sub	sp, #88	; 0x58
 80093d4:	da0c      	bge.n	80093f0 <__swhatbuf_r+0x2c>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	2100      	movs	r1, #0
 80093da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80093de:	bf0c      	ite	eq
 80093e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80093e4:	2340      	movne	r3, #64	; 0x40
 80093e6:	2000      	movs	r0, #0
 80093e8:	6031      	str	r1, [r6, #0]
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	b016      	add	sp, #88	; 0x58
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	466a      	mov	r2, sp
 80093f2:	f000 f849 	bl	8009488 <_fstat_r>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	dbed      	blt.n	80093d6 <__swhatbuf_r+0x12>
 80093fa:	9901      	ldr	r1, [sp, #4]
 80093fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009400:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009404:	4259      	negs	r1, r3
 8009406:	4159      	adcs	r1, r3
 8009408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800940c:	e7eb      	b.n	80093e6 <__swhatbuf_r+0x22>

0800940e <__smakebuf_r>:
 800940e:	898b      	ldrh	r3, [r1, #12]
 8009410:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009412:	079d      	lsls	r5, r3, #30
 8009414:	4606      	mov	r6, r0
 8009416:	460c      	mov	r4, r1
 8009418:	d507      	bpl.n	800942a <__smakebuf_r+0x1c>
 800941a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	2301      	movs	r3, #1
 8009424:	6163      	str	r3, [r4, #20]
 8009426:	b002      	add	sp, #8
 8009428:	bd70      	pop	{r4, r5, r6, pc}
 800942a:	466a      	mov	r2, sp
 800942c:	ab01      	add	r3, sp, #4
 800942e:	f7ff ffc9 	bl	80093c4 <__swhatbuf_r>
 8009432:	9900      	ldr	r1, [sp, #0]
 8009434:	4605      	mov	r5, r0
 8009436:	4630      	mov	r0, r6
 8009438:	f7fe feca 	bl	80081d0 <_malloc_r>
 800943c:	b948      	cbnz	r0, 8009452 <__smakebuf_r+0x44>
 800943e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009442:	059a      	lsls	r2, r3, #22
 8009444:	d4ef      	bmi.n	8009426 <__smakebuf_r+0x18>
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	f043 0302 	orr.w	r3, r3, #2
 800944e:	81a3      	strh	r3, [r4, #12]
 8009450:	e7e3      	b.n	800941a <__smakebuf_r+0xc>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	6020      	str	r0, [r4, #0]
 8009456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	9b00      	ldr	r3, [sp, #0]
 800945e:	6120      	str	r0, [r4, #16]
 8009460:	6163      	str	r3, [r4, #20]
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	b15b      	cbz	r3, 800947e <__smakebuf_r+0x70>
 8009466:	4630      	mov	r0, r6
 8009468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800946c:	f000 f81e 	bl	80094ac <_isatty_r>
 8009470:	b128      	cbz	r0, 800947e <__smakebuf_r+0x70>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	f023 0303 	bic.w	r3, r3, #3
 8009478:	f043 0301 	orr.w	r3, r3, #1
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	431d      	orrs	r5, r3
 8009482:	81a5      	strh	r5, [r4, #12]
 8009484:	e7cf      	b.n	8009426 <__smakebuf_r+0x18>
	...

08009488 <_fstat_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	2300      	movs	r3, #0
 800948c:	4d06      	ldr	r5, [pc, #24]	; (80094a8 <_fstat_r+0x20>)
 800948e:	4604      	mov	r4, r0
 8009490:	4608      	mov	r0, r1
 8009492:	4611      	mov	r1, r2
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	f7f9 fea0 	bl	80031da <_fstat>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d102      	bne.n	80094a4 <_fstat_r+0x1c>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	b103      	cbz	r3, 80094a4 <_fstat_r+0x1c>
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
 80094a6:	bf00      	nop
 80094a8:	20000758 	.word	0x20000758

080094ac <_isatty_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	2300      	movs	r3, #0
 80094b0:	4d05      	ldr	r5, [pc, #20]	; (80094c8 <_isatty_r+0x1c>)
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f9 fe9e 	bl	80031f8 <_isatty>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_isatty_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_isatty_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	20000758 	.word	0x20000758

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
