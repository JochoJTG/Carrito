
Carritov3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08009058  08009058  00019058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009434  08009434  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009434  08009434  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009434  08009434  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009434  08009434  00019434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800943c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001e4  08009620  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08009620  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f545  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002087  00000000  00000000  0002f795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6e  00000000  00000000  000327d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cfd  00000000  00000000  00033446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011eca  00000000  00000000  0004c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f230  00000000  00000000  0005e00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055a4  00000000  00000000  000ed240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f27e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800903c 	.word	0x0800903c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800903c 	.word	0x0800903c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <Forward>:
 *      Author: Jorge
 */

#include "main.h"

void Forward(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); //izq atras
 8001154:	2200      	movs	r2, #0
 8001156:	2101      	movs	r1, #1
 8001158:	4814      	ldr	r0, [pc, #80]	; (80011ac <Forward+0x5c>)
 800115a:	f002 f971 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); //izq atras
 800115e:	2201      	movs	r2, #1
 8001160:	2102      	movs	r1, #2
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <Forward+0x5c>)
 8001164:	f002 f96c 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //derehca atras
 8001168:	2201      	movs	r2, #1
 800116a:	2104      	movs	r1, #4
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <Forward+0x5c>)
 800116e:	f002 f967 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //derecha atrasa
 8001172:	2200      	movs	r2, #0
 8001174:	2108      	movs	r1, #8
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <Forward+0x5c>)
 8001178:	f002 f962 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0); //derecha enfrente
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001182:	480a      	ldr	r0, [pc, #40]	; (80011ac <Forward+0x5c>)
 8001184:	f002 f95c 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); //derecha enfrente
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <Forward+0x60>)
 800118e:	f002 f957 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //izq enfrente
 8001192:	2201      	movs	r2, #1
 8001194:	2110      	movs	r1, #16
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <Forward+0x60>)
 8001198:	f002 f952 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // ezq enfrente
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <Forward+0x60>)
 80011a2:	f002 f94d 	bl	8003440 <HAL_GPIO_WritePin>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <RightTurn>:

void RightTurn(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	4814      	ldr	r0, [pc, #80]	; (8001210 <RightTurn+0x5c>)
 80011be:	f002 f93f 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2102      	movs	r1, #2
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <RightTurn+0x5c>)
 80011c8:	f002 f93a 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2104      	movs	r1, #4
 80011d0:	480f      	ldr	r0, [pc, #60]	; (8001210 <RightTurn+0x5c>)
 80011d2:	f002 f935 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2108      	movs	r1, #8
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <RightTurn+0x5c>)
 80011dc:	f002 f930 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e6:	480a      	ldr	r0, [pc, #40]	; (8001210 <RightTurn+0x5c>)
 80011e8:	f002 f92a 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2108      	movs	r1, #8
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <RightTurn+0x60>)
 80011f2:	f002 f925 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2110      	movs	r1, #16
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <RightTurn+0x60>)
 80011fc:	f002 f920 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2120      	movs	r1, #32
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <RightTurn+0x60>)
 8001206:	f002 f91b 	bl	8003440 <HAL_GPIO_WritePin>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40010800 	.word	0x40010800
 8001214:	40010c00 	.word	0x40010c00

08001218 <Stop>:

void Stop(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2101      	movs	r1, #1
 8001220:	4814      	ldr	r0, [pc, #80]	; (8001274 <Stop+0x5c>)
 8001222:	f002 f90d 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2102      	movs	r1, #2
 800122a:	4812      	ldr	r0, [pc, #72]	; (8001274 <Stop+0x5c>)
 800122c:	f002 f908 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2104      	movs	r1, #4
 8001234:	480f      	ldr	r0, [pc, #60]	; (8001274 <Stop+0x5c>)
 8001236:	f002 f903 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2108      	movs	r1, #8
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <Stop+0x5c>)
 8001240:	f002 f8fe 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <Stop+0x5c>)
 800124c:	f002 f8f8 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2108      	movs	r1, #8
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <Stop+0x60>)
 8001256:	f002 f8f3 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2110      	movs	r1, #16
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <Stop+0x60>)
 8001260:	f002 f8ee 	bl	8003440 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2120      	movs	r1, #32
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <Stop+0x60>)
 800126a:	f002 f8e9 	bl	8003440 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40010800 	.word	0x40010800
 8001278:	40010c00 	.word	0x40010c00

0800127c <PIDpwm_Init>:
 *      Author: eduar
 */
#include "PIDpwm.h"

//definicion de funciones
void PIDpwm_Init(PIDpwm_Controller *pid, float Kp, float Ki, float Kd, float min_output, float max_output){
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	609a      	str	r2, [r3, #8]
	//inicializar variables tipo float
    pid->setpoint = 0.0f;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
	pid->errorAnterior = 0.0f;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
    pid->medicionSensor_Anterior = 0.0f;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
    //limites del PID
    pid->min_output = min_output;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	61da      	str	r2, [r3, #28]
    pid->max_output = max_output;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	621a      	str	r2, [r3, #32]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	0000      	movs	r0, r0
 80012d4:	0000      	movs	r0, r0
	...

080012d8 <PIDpwm_Compute>:

float PIDpwm_Compute(PIDpwm_Controller *pid, float medicionSensor) {
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    float error = pid->setpoint - medicionSensor;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fc41 	bl	8000b70 <__aeabi_fsub>
 80012ee:	4603      	mov	r3, r0
 80012f0:	613b      	str	r3, [r7, #16]
    pid->integral += error * .100;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f896 	bl	8000428 <__aeabi_f2d>
 80012fc:	4604      	mov	r4, r0
 80012fe:	460d      	mov	r5, r1
 8001300:	6938      	ldr	r0, [r7, #16]
 8001302:	f7ff f891 	bl	8000428 <__aeabi_f2d>
 8001306:	a348      	add	r3, pc, #288	; (adr r3, 8001428 <PIDpwm_Compute+0x150>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f8e4 	bl	80004d8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7fe ff28 	bl	800016c <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fbd0 	bl	8000ac8 <__aeabi_d2f>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]
    float derivativo = (error - pid->errorAnterior)/.100;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4619      	mov	r1, r3
 8001334:	6938      	ldr	r0, [r7, #16]
 8001336:	f7ff fc1b 	bl	8000b70 <__aeabi_fsub>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f873 	bl	8000428 <__aeabi_f2d>
 8001342:	a339      	add	r3, pc, #228	; (adr r3, 8001428 <PIDpwm_Compute+0x150>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f9f0 	bl	800072c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbb8 	bl	8000ac8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]
    float output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivativo;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fd0e 	bl	8000d84 <__aeabi_fmul>
 8001368:	4603      	mov	r3, r0
 800136a:	461c      	mov	r4, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f7ff fd04 	bl	8000d84 <__aeabi_fmul>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fbf7 	bl	8000b74 <__addsf3>
 8001386:	4603      	mov	r3, r0
 8001388:	461c      	mov	r4, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fcf7 	bl	8000d84 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	4619      	mov	r1, r3
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fbea 	bl	8000b74 <__addsf3>
 80013a0:	4603      	mov	r3, r0
 80013a2:	617b      	str	r3, [r7, #20]

    //saturación de la salida
    if (output > pid->max_output) output = pid->max_output;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4619      	mov	r1, r3
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff fea6 	bl	80010fc <__aeabi_fcmpgt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <PIDpwm_Compute+0xe4>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	617b      	str	r3, [r7, #20]
    if (output < pid->min_output) output = pid->min_output;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4619      	mov	r1, r3
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff fe7c 	bl	80010c0 <__aeabi_fcmplt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <PIDpwm_Compute+0xfc>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	617b      	str	r3, [r7, #20]

    //actualizar para la próxima iteración
    pid->errorAnterior = error;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	615a      	str	r2, [r3, #20]
    pid->medicionSensor_Anterior = medicionSensor;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	619a      	str	r2, [r3, #24]
    float volatageOutput = output*(4095.0/pid->max_output); //255 es el max PWM, maxOutput es valor en PWM
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f821 	bl	8000428 <__aeabi_f2d>
 80013e6:	4604      	mov	r4, r0
 80013e8:	460d      	mov	r5, r1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f81a 	bl	8000428 <__aeabi_f2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	a10d      	add	r1, pc, #52	; (adr r1, 8001430 <PIDpwm_Compute+0x158>)
 80013fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013fe:	f7ff f995 	bl	800072c <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	f7ff f865 	bl	80004d8 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb57 	bl	8000ac8 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	60bb      	str	r3, [r7, #8]
    return output;
 800141e:	697b      	ldr	r3, [r7, #20]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bdb0      	pop	{r4, r5, r7, pc}
 8001428:	9999999a 	.word	0x9999999a
 800142c:	3fb99999 	.word	0x3fb99999
 8001430:	00000000 	.word	0x00000000
 8001434:	40affe00 	.word	0x40affe00

08001438 <MPU_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_init(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af04      	add	r7, sp, #16
	/*IMU 60050 configuration*/
	uint8_t check, data;

	/*WHO_AM_I register, returns 0x58 if connected*/
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x75, 1, &check, 1, 100);
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <MPU_init+0x120>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b299      	uxth	r1, r3
 8001444:	2364      	movs	r3, #100	; 0x64
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2301      	movs	r3, #1
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	1d7b      	adds	r3, r7, #5
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	2275      	movs	r2, #117	; 0x75
 8001454:	4841      	ldr	r0, [pc, #260]	; (800155c <MPU_init+0x124>)
 8001456:	f002 fa61 	bl	800391c <HAL_I2C_Mem_Read>

	if(check == 104){
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	2b68      	cmp	r3, #104	; 0x68
 800145e:	d177      	bne.n	8001550 <MPU_init+0x118>
		/*PWR_MGMT_1 register. Write 0 for normal use*/
		data = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x6B, 1, &data, 1, 100);
 8001464:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <MPU_init+0x120>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b299      	uxth	r1, r3
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2301      	movs	r3, #1
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	226b      	movs	r2, #107	; 0x6b
 800147a:	4838      	ldr	r0, [pc, #224]	; (800155c <MPU_init+0x124>)
 800147c:	f002 f954 	bl	8003728 <HAL_I2C_Mem_Write>

		/*SMPRT_DIV register*/
		data = 0x07;
 8001480:	2307      	movs	r3, #7
 8001482:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x19, 1, &data, 1, 100);
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <MPU_init+0x120>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b299      	uxth	r1, r3
 800148a:	2364      	movs	r3, #100	; 0x64
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2301      	movs	r3, #1
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	2219      	movs	r2, #25
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <MPU_init+0x124>)
 800149c:	f002 f944 	bl	8003728 <HAL_I2C_Mem_Write>

		/*Acceleration Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <MPU_init+0x120>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	2364      	movs	r3, #100	; 0x64
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	221c      	movs	r2, #28
 80014b6:	4829      	ldr	r0, [pc, #164]	; (800155c <MPU_init+0x124>)
 80014b8:	f002 fa30 	bl	800391c <HAL_I2C_Mem_Read>

		uint8_t precission_selector = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	71fb      	strb	r3, [r7, #7]
		 * 0 for +- 2g
		 * 1 for +- 4g
		 * 2 for +- 8g
		 * 3 for +- 16g
		 */
		data = (data & ~(0b11<<3));
 80014c0:	793b      	ldrb	r3, [r7, #4]
 80014c2:	f023 0318 	bic.w	r3, r3, #24
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector << 3));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	793b      	ldrb	r3, [r7, #4]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MPU_init+0x120>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b299      	uxth	r1, r3
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	221c      	movs	r2, #28
 80014f2:	481a      	ldr	r0, [pc, #104]	; (800155c <MPU_init+0x124>)
 80014f4:	f002 f918 	bl	8003728 <HAL_I2C_Mem_Write>


		/*Gyro Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1B, 1, &data, 1, 100);
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MPU_init+0x120>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b299      	uxth	r1, r3
 80014fe:	2364      	movs	r3, #100	; 0x64
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	2301      	movs	r3, #1
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	221b      	movs	r2, #27
 800150e:	4813      	ldr	r0, [pc, #76]	; (800155c <MPU_init+0x124>)
 8001510:	f002 fa04 	bl	800391c <HAL_I2C_Mem_Read>

		uint8_t precission_selector_gyro = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	71bb      	strb	r3, [r7, #6]
		 * 0 for +- 250 deg/s
		 * 1 for +- 500 deg/s
		 * 2 for +- 1000 deg/s
		 * 3 for +- 2000 deg/s
		 */
		data = (data & ~(0b11<<3));
 8001518:	793b      	ldrb	r3, [r7, #4]
 800151a:	f023 0318 	bic.w	r3, r3, #24
 800151e:	b2db      	uxtb	r3, r3
 8001520:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector_gyro << 3));
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	b25a      	sxtb	r2, r3
 8001528:	793b      	ldrb	r3, [r7, #4]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1B, 1,&data, 1, 100);
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MPU_init+0x120>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b299      	uxth	r1, r3
 800153a:	2364      	movs	r3, #100	; 0x64
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2301      	movs	r3, #1
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	221b      	movs	r2, #27
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <MPU_init+0x124>)
 800154c:	f002 f8ec 	bl	8003728 <HAL_I2C_Mem_Write>

	}

}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000200 	.word	0x20000200

08001560 <MPU_Read_gyro>:
	 accel_x = accel_x * 9.81;
	 accel_y = accel_y * 9.81;
	 accel_z = accel_z * 9.81;
	}

void MPU_Read_gyro(void){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af04      	add	r7, sp, #16
	 * 0x46 ACCEL_YOUT_L
	 * 0x47 ACCEL_ZOUT_H
	 * 0x48 ACCEL_ZOUT_L
	 * */

	if(count < 5){
 8001566:	4b66      	ldr	r3, [pc, #408]	; (8001700 <MPU_Read_gyro+0x1a0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b04      	cmp	r3, #4
 800156c:	f200 8094 	bhi.w	8001698 <MPU_Read_gyro+0x138>

		/*Read registers in order*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x43, 1, gyro_raw_data, 6, 1000);
 8001570:	4b64      	ldr	r3, [pc, #400]	; (8001704 <MPU_Read_gyro+0x1a4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b299      	uxth	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2306      	movs	r3, #6
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <MPU_Read_gyro+0x1a8>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	2243      	movs	r2, #67	; 0x43
 8001588:	4860      	ldr	r0, [pc, #384]	; (800170c <MPU_Read_gyro+0x1ac>)
 800158a:	f002 f9c7 	bl	800391c <HAL_I2C_Mem_Read>
		 * 250
		 * 500
		 * 1000
		 * 2000
		 * */
		float gyro_Precission = 250;
 800158e:	4b60      	ldr	r3, [pc, #384]	; (8001710 <MPU_Read_gyro+0x1b0>)
 8001590:	607b      	str	r3, [r7, #4]

		 gyro_x = (float)(((int16_t)(gyro_raw_data[0] << 8 | gyro_raw_data[1])) * gyro_Precission/32768);
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <MPU_Read_gyro+0x1a8>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <MPU_Read_gyro+0x1a8>)
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fb99 	bl	8000cdc <__aeabi_i2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbe8 	bl	8000d84 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fc96 	bl	8000eec <__aeabi_fdiv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <MPU_Read_gyro+0x1b4>)
 80015c6:	601a      	str	r2, [r3, #0]
		 gyro_y = (float)(((int16_t)(gyro_raw_data[2] << 8 | gyro_raw_data[3])) * gyro_Precission/32768);
 80015c8:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <MPU_Read_gyro+0x1a8>)
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <MPU_Read_gyro+0x1a8>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb7e 	bl	8000cdc <__aeabi_i2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fbcd 	bl	8000d84 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fc7b 	bl	8000eec <__aeabi_fdiv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <MPU_Read_gyro+0x1b8>)
 80015fc:	601a      	str	r2, [r3, #0]
		 gyro_z = (float)(((int16_t)(gyro_raw_data[4] << 8 | gyro_raw_data[5])) * gyro_Precission/32768);
 80015fe:	4b42      	ldr	r3, [pc, #264]	; (8001708 <MPU_Read_gyro+0x1a8>)
 8001600:	791b      	ldrb	r3, [r3, #4]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	4b40      	ldr	r3, [pc, #256]	; (8001708 <MPU_Read_gyro+0x1a8>)
 8001608:	795b      	ldrb	r3, [r3, #5]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb63 	bl	8000cdc <__aeabi_i2f>
 8001616:	4603      	mov	r3, r0
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fbb2 	bl	8000d84 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fc60 	bl	8000eec <__aeabi_fdiv>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	4b3a      	ldr	r3, [pc, #232]	; (800171c <MPU_Read_gyro+0x1bc>)
 8001632:	601a      	str	r2, [r3, #0]

		 /*Gyro values adjusted with calibration values*/
		 gyro_x += Gyro_X_calibration;
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <MPU_Read_gyro+0x1b4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a39      	ldr	r2, [pc, #228]	; (8001720 <MPU_Read_gyro+0x1c0>)
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fa98 	bl	8000b74 <__addsf3>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <MPU_Read_gyro+0x1b4>)
 800164a:	601a      	str	r2, [r3, #0]
		 gyro_y += Gyro_Y_calibration;
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <MPU_Read_gyro+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a34      	ldr	r2, [pc, #208]	; (8001724 <MPU_Read_gyro+0x1c4>)
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fa8c 	bl	8000b74 <__addsf3>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MPU_Read_gyro+0x1b8>)
 8001662:	601a      	str	r2, [r3, #0]
		 gyro_z += Gyro_Z_calibration;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MPU_Read_gyro+0x1bc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <MPU_Read_gyro+0x1c8>)
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fa80 	bl	8000b74 <__addsf3>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <MPU_Read_gyro+0x1bc>)
 800167a:	601a      	str	r2, [r3, #0]

		 GyroMean[count] = gyro_z;
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <MPU_Read_gyro+0x1a0>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <MPU_Read_gyro+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a29      	ldr	r2, [pc, #164]	; (800172c <MPU_Read_gyro+0x1cc>)
 8001688:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		 count++;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MPU_Read_gyro+0x1a0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MPU_Read_gyro+0x1a0>)
 8001696:	701a      	strb	r2, [r3, #0]
	}

	if(count == 5){
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MPU_Read_gyro+0x1a0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d12b      	bne.n	80016f8 <MPU_Read_gyro+0x198>
		/*Moving average of 5*/
		gyro_mean = (GyroMean[0]+GyroMean[1]+GyroMean[2]+GyroMean[3]+GyroMean[4])/5;
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <MPU_Read_gyro+0x1cc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <MPU_Read_gyro+0x1cc>)
 80016a6:	6852      	ldr	r2, [r2, #4]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fa62 	bl	8000b74 <__addsf3>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MPU_Read_gyro+0x1cc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f7ff fa5a 	bl	8000b74 <__addsf3>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <MPU_Read_gyro+0x1cc>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4610      	mov	r0, r2
 80016cc:	f7ff fa52 	bl	8000b74 <__addsf3>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <MPU_Read_gyro+0x1cc>)
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f7ff fa4a 	bl	8000b74 <__addsf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4913      	ldr	r1, [pc, #76]	; (8001730 <MPU_Read_gyro+0x1d0>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fc01 	bl	8000eec <__aeabi_fdiv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MPU_Read_gyro+0x1d4>)
 80016f0:	601a      	str	r2, [r3, #0]
		count = 0;
 80016f2:	4b03      	ldr	r3, [pc, #12]	; (8001700 <MPU_Read_gyro+0x1a0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
	}
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200005b8 	.word	0x200005b8
 8001704:	20000000 	.word	0x20000000
 8001708:	200003bc 	.word	0x200003bc
 800170c:	20000200 	.word	0x20000200
 8001710:	437a0000 	.word	0x437a0000
 8001714:	200003c4 	.word	0x200003c4
 8001718:	200003c8 	.word	0x200003c8
 800171c:	200003cc 	.word	0x200003cc
 8001720:	200003f4 	.word	0x200003f4
 8001724:	200003f8 	.word	0x200003f8
 8001728:	200003fc 	.word	0x200003fc
 800172c:	200003d0 	.word	0x200003d0
 8001730:	40a00000 	.word	0x40a00000
 8001734:	200003e4 	.word	0x200003e4

08001738 <Gyro_calibration>:


void Gyro_calibration(void){
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0

	uint16_t counter = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	81fb      	strh	r3, [r7, #14]
	uint32_t StartTime_cal = HAL_GetTick();
 8001742:	f001 fbe1 	bl	8002f08 <HAL_GetTick>
 8001746:	6078      	str	r0, [r7, #4]
	uint32_t ElapsedTime_cal = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]

	/*Calibrate value for 9 seconds*/
	while(ElapsedTime_cal < 9000){
 800174c:	e02f      	b.n	80017ae <Gyro_calibration+0x76>

		MPU_Read_gyro();
 800174e:	f7ff ff07 	bl	8001560 <MPU_Read_gyro>
		GyroValuesx += gyro_x;
 8001752:	4b35      	ldr	r3, [pc, #212]	; (8001828 <Gyro_calibration+0xf0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a35      	ldr	r2, [pc, #212]	; (800182c <Gyro_calibration+0xf4>)
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fa09 	bl	8000b74 <__addsf3>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <Gyro_calibration+0xf0>)
 8001768:	601a      	str	r2, [r3, #0]
		GyroValuesy += gyro_y;
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <Gyro_calibration+0xf8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a31      	ldr	r2, [pc, #196]	; (8001834 <Gyro_calibration+0xfc>)
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f9fd 	bl	8000b74 <__addsf3>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <Gyro_calibration+0xf8>)
 8001780:	601a      	str	r2, [r3, #0]
		GyroValuesz += gyro_z;
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <Gyro_calibration+0x100>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2d      	ldr	r2, [pc, #180]	; (800183c <Gyro_calibration+0x104>)
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f9f1 	bl	8000b74 <__addsf3>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <Gyro_calibration+0x100>)
 8001798:	601a      	str	r2, [r3, #0]

		counter++;
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	3301      	adds	r3, #1
 800179e:	81fb      	strh	r3, [r7, #14]

		uint32_t CurrentTime_cal = HAL_GetTick();
 80017a0:	f001 fbb2 	bl	8002f08 <HAL_GetTick>
 80017a4:	6038      	str	r0, [r7, #0]
		ElapsedTime_cal = CurrentTime_cal - StartTime_cal;
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	60bb      	str	r3, [r7, #8]
	while(ElapsedTime_cal < 9000){
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f242 3227 	movw	r2, #8999	; 0x2327
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d9ca      	bls.n	800174e <Gyro_calibration+0x16>
	}

	/*Calibration values, average of gyros values*/
	Gyro_X_calibration = -1 * GyroValuesx/counter;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <Gyro_calibration+0xf0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fa8a 	bl	8000cdc <__aeabi_i2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff fb8d 	bl	8000eec <__aeabi_fdiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <Gyro_calibration+0x108>)
 80017d8:	601a      	str	r2, [r3, #0]
	Gyro_Y_calibration = -1 * GyroValuesy/counter;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <Gyro_calibration+0xf8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa79 	bl	8000cdc <__aeabi_i2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fb7c 	bl	8000eec <__aeabi_fdiv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <Gyro_calibration+0x10c>)
 80017fa:	601a      	str	r2, [r3, #0]
	Gyro_Z_calibration = -1 * GyroValuesz/counter;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <Gyro_calibration+0x100>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001804:	89fb      	ldrh	r3, [r7, #14]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fa68 	bl	8000cdc <__aeabi_i2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4619      	mov	r1, r3
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fb6b 	bl	8000eec <__aeabi_fdiv>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <Gyro_calibration+0x110>)
 800181c:	601a      	str	r2, [r3, #0]

}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	200003e8 	.word	0x200003e8
 800182c:	200003c4 	.word	0x200003c4
 8001830:	200003ec 	.word	0x200003ec
 8001834:	200003c8 	.word	0x200003c8
 8001838:	200003f0 	.word	0x200003f0
 800183c:	200003cc 	.word	0x200003cc
 8001840:	200003f4 	.word	0x200003f4
 8001844:	200003f8 	.word	0x200003f8
 8001848:	200003fc 	.word	0x200003fc

0800184c <MPU_GetYaw>:

void MPU_GetYaw(uint8_t elapsed){
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	uint8_t alfa = 0.98;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]

	yawangle_new = prev_yaw + gyro_z * elapsed/1000;
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fa3d 	bl	8000cdc <__aeabi_i2f>
 8001862:	4602      	mov	r2, r0
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <MPU_GetYaw+0x9c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f7ff fa8a 	bl	8000d84 <__aeabi_fmul>
 8001870:	4603      	mov	r3, r0
 8001872:	491e      	ldr	r1, [pc, #120]	; (80018ec <MPU_GetYaw+0xa0>)
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb39 	bl	8000eec <__aeabi_fdiv>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MPU_GetYaw+0xa4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4610      	mov	r0, r2
 8001886:	f7ff f975 	bl	8000b74 <__addsf3>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MPU_GetYaw+0xa8>)
 8001890:	601a      	str	r2, [r3, #0]

	yawangle = (1-alfa) * prev_yaw + (alfa) * yawangle_new;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f1c3 0301 	rsb	r3, r3, #1
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fa1f 	bl	8000cdc <__aeabi_i2f>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MPU_GetYaw+0xa4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f7ff fa6c 	bl	8000d84 <__aeabi_fmul>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461c      	mov	r4, r3
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa12 	bl	8000cdc <__aeabi_i2f>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MPU_GetYaw+0xa8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f7ff fa5f 	bl	8000d84 <__aeabi_fmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff f952 	bl	8000b74 <__addsf3>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MPU_GetYaw+0xac>)
 80018d6:	601a      	str	r2, [r3, #0]

	prev_yaw = yawangle_new;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MPU_GetYaw+0xa8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <MPU_GetYaw+0xa4>)
 80018de:	6013      	str	r3, [r2, #0]


	//filteredYaw = alfa*(filteredYaw + gyro_z * elapsed/1000) + (1-alfa)*YawMag;
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	200003cc 	.word	0x200003cc
 80018ec:	447a0000 	.word	0x447a0000
 80018f0:	20000408 	.word	0x20000408
 80018f4:	20000404 	.word	0x20000404
 80018f8:	20000400 	.word	0x20000400

080018fc <Mag_init>:

void Mag_init(void){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af04      	add	r7, sp, #16

	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x08,1, &array[0], 1, 100);
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <Mag_init+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b299      	uxth	r1, r3
 8001908:	2364      	movs	r3, #100	; 0x64
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2301      	movs	r3, #1
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <Mag_init+0x48>)
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2301      	movs	r3, #1
 8001916:	2208      	movs	r2, #8
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <Mag_init+0x4c>)
 800191a:	f001 ff05 	bl	8003728 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x09,1, &array[1], 1, 100);
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <Mag_init+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b299      	uxth	r1, r3
 8001924:	2364      	movs	r3, #100	; 0x64
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	2301      	movs	r3, #1
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <Mag_init+0x50>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	2209      	movs	r2, #9
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <Mag_init+0x4c>)
 8001936:	f001 fef7 	bl	8003728 <HAL_I2C_Mem_Write>
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000001 	.word	0x20000001
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000200 	.word	0x20000200
 800194c:	2000000d 	.word	0x2000000d

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08d      	sub	sp, #52	; 0x34
 8001954:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f001 fa7f 	bl	8002e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 fa69 	bl	8001e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195e:	f000 fcad 	bl	80022bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001962:	f000 facf 	bl	8001f04 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001966:	f000 fb99 	bl	800209c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800196a:	f000 fc7d 	bl	8002268 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800196e:	f000 fc2d 	bl	80021cc <MX_TIM4_Init>
  MX_TIM2_Init();
 8001972:	f000 fb45 	bl	8002000 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001976:	f000 faf3 	bl	8001f60 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800197a:	f000 fa9e 	bl	8001eba <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*Check if MPU6050 is connected*/
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDRESS, 10, 100);
 800197e:	4b98      	ldr	r3, [pc, #608]	; (8001be0 <main+0x290>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b299      	uxth	r1, r3
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	220a      	movs	r2, #10
 8001988:	4896      	ldr	r0, [pc, #600]	; (8001be4 <main+0x294>)
 800198a:	f002 fa2f 	bl	8003dec <HAL_I2C_IsDeviceReady>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /*Check if QMC5883 is connected*/
  HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c1, MAG_ADDRESS, 10, 1000);
 8001994:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <main+0x298>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b299      	uxth	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	220a      	movs	r2, #10
 80019a0:	4890      	ldr	r0, [pc, #576]	; (8001be4 <main+0x294>)
 80019a2:	f002 fa23 	bl	8003dec <HAL_I2C_IsDeviceReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  if(ret == HAL_OK /*&& ready == HAL_OK*/){
 80019ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d117      	bne.n	80019e4 <main+0x94>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ba:	488c      	ldr	r0, [pc, #560]	; (8001bec <main+0x29c>)
 80019bc:	f001 fd40 	bl	8003440 <HAL_GPIO_WritePin>
	  char transmission_buffer[17];
	  uint8_t transmission_size = sprintf(transmission_buffer,"Device connected \n");
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	498b      	ldr	r1, [pc, #556]	; (8001bf0 <main+0x2a0>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 f9eb 	bl	8006da0 <siprintf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  HAL_UART_Transmit(&huart1,&transmission_buffer,transmission_size, 500);
 80019d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	1d39      	adds	r1, r7, #4
 80019d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019dc:	4885      	ldr	r0, [pc, #532]	; (8001bf4 <main+0x2a4>)
 80019de:	f004 faad 	bl	8005f3c <HAL_UART_Transmit>
 80019e2:	e005      	b.n	80019f0 <main+0xa0>
  }
  else{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ea:	4880      	ldr	r0, [pc, #512]	; (8001bec <main+0x29c>)
 80019ec:	f001 fd28 	bl	8003440 <HAL_GPIO_WritePin>
  }

  Mag_init();
 80019f0:	f7ff ff84 	bl	80018fc <Mag_init>
  MPU_init();
 80019f4:	f7ff fd20 	bl	8001438 <MPU_init>

  Gyro_calibration();
 80019f8:	f7ff fe9e 	bl	8001738 <Gyro_calibration>

  HAL_TIM_Base_Start_IT(&htim4);
 80019fc:	487e      	ldr	r0, [pc, #504]	; (8001bf8 <main+0x2a8>)
 80019fe:	f003 fb37 	bl	8005070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a02:	487e      	ldr	r0, [pc, #504]	; (8001bfc <main+0x2ac>)
 8001a04:	f003 fb34 	bl	8005070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	487d      	ldr	r0, [pc, #500]	; (8001c00 <main+0x2b0>)
 8001a0c:	f003 fbda 	bl	80051c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a10:	2104      	movs	r1, #4
 8001a12:	487b      	ldr	r0, [pc, #492]	; (8001c00 <main+0x2b0>)
 8001a14:	f003 fbd6 	bl	80051c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4879      	ldr	r0, [pc, #484]	; (8001c00 <main+0x2b0>)
 8001a1c:	f003 fbd2 	bl	80051c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001a20:	210c      	movs	r1, #12
 8001a22:	4877      	ldr	r0, [pc, #476]	; (8001c00 <main+0x2b0>)
 8001a24:	f003 fbce 	bl	80051c4 <HAL_TIM_PWM_Start>

  uint32_t start_time, elapsed_time, current_time;


/*Initialize PID functions with its obtained Kp, Ti, Td and reference values*/
  PIDpwm_Init(&pidMotor_rf, 3.778f, 10.0f, 0.025f, 0.0f, 300.0f);
 8001a28:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <main+0x2b4>)
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <main+0x2b8>)
 8001a34:	4a75      	ldr	r2, [pc, #468]	; (8001c0c <main+0x2bc>)
 8001a36:	4976      	ldr	r1, [pc, #472]	; (8001c10 <main+0x2c0>)
 8001a38:	4876      	ldr	r0, [pc, #472]	; (8001c14 <main+0x2c4>)
 8001a3a:	f7ff fc1f 	bl	800127c <PIDpwm_Init>
  PIDpwm_Init(&pidMotor_lf, 3.216f, 10.0f, 0.025f, 0.0f, 300.0f);
 8001a3e:	4b71      	ldr	r3, [pc, #452]	; (8001c04 <main+0x2b4>)
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <main+0x2b8>)
 8001a4a:	4a70      	ldr	r2, [pc, #448]	; (8001c0c <main+0x2bc>)
 8001a4c:	4972      	ldr	r1, [pc, #456]	; (8001c18 <main+0x2c8>)
 8001a4e:	4873      	ldr	r0, [pc, #460]	; (8001c1c <main+0x2cc>)
 8001a50:	f7ff fc14 	bl	800127c <PIDpwm_Init>
  PIDpwm_Init(&pidMotor_rb, 3.309f, 10.0f, 0.025f, 0.0f, 300.0f);
 8001a54:	4b6b      	ldr	r3, [pc, #428]	; (8001c04 <main+0x2b4>)
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <main+0x2b8>)
 8001a60:	4a6a      	ldr	r2, [pc, #424]	; (8001c0c <main+0x2bc>)
 8001a62:	496f      	ldr	r1, [pc, #444]	; (8001c20 <main+0x2d0>)
 8001a64:	486f      	ldr	r0, [pc, #444]	; (8001c24 <main+0x2d4>)
 8001a66:	f7ff fc09 	bl	800127c <PIDpwm_Init>
  PIDpwm_Init(&pidMotor_lb, 1.369f, .2538f, 1.846f, 0.0f, 300.0f);
 8001a6a:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <main+0x2b4>)
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	4b6c      	ldr	r3, [pc, #432]	; (8001c28 <main+0x2d8>)
 8001a76:	4a6d      	ldr	r2, [pc, #436]	; (8001c2c <main+0x2dc>)
 8001a78:	496d      	ldr	r1, [pc, #436]	; (8001c30 <main+0x2e0>)
 8001a7a:	486e      	ldr	r0, [pc, #440]	; (8001c34 <main+0x2e4>)
 8001a7c:	f7ff fbfe 	bl	800127c <PIDpwm_Init>

  /*Set point definition*/
  pidMotor_rf.setpoint = 300.0;
 8001a80:	4b64      	ldr	r3, [pc, #400]	; (8001c14 <main+0x2c4>)
 8001a82:	4a60      	ldr	r2, [pc, #384]	; (8001c04 <main+0x2b4>)
 8001a84:	60da      	str	r2, [r3, #12]
  pidMotor_lf.setpoint = 300.0;
 8001a86:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <main+0x2cc>)
 8001a88:	4a5e      	ldr	r2, [pc, #376]	; (8001c04 <main+0x2b4>)
 8001a8a:	60da      	str	r2, [r3, #12]
  pidMotor_rb.setpoint = 300.0;
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <main+0x2d4>)
 8001a8e:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <main+0x2b4>)
 8001a90:	60da      	str	r2, [r3, #12]
  pidMotor_lb.setpoint = 300.0;
 8001a92:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <main+0x2e4>)
 8001a94:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <main+0x2b4>)
 8001a96:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 8001a98:	2364      	movs	r3, #100	; 0x64
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4966      	ldr	r1, [pc, #408]	; (8001c38 <main+0x2e8>)
 8001a9e:	4855      	ldr	r0, [pc, #340]	; (8001bf4 <main+0x2a4>)
 8001aa0:	f004 facf 	bl	8006042 <HAL_UART_Receive>

	  /*State Machine for going forward and turning right.*/
	  switch(state){
 8001aa4:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <main+0x2ec>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <main+0x162>
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d05f      	beq.n	8001b70 <main+0x220>
 8001ab0:	e0da      	b.n	8001c68 <main+0x318>

		  case 1:
			  //Forward path
			  Forward();
 8001ab2:	f7ff fb4d 	bl	8001150 <Forward>

			  pwm_lf = 4095;
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <main+0x2f0>)
 8001ab8:	4a62      	ldr	r2, [pc, #392]	; (8001c44 <main+0x2f4>)
 8001aba:	601a      	str	r2, [r3, #0]
			  pwm_lb = 4095;
 8001abc:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <main+0x2f8>)
 8001abe:	4a61      	ldr	r2, [pc, #388]	; (8001c44 <main+0x2f4>)
 8001ac0:	601a      	str	r2, [r3, #0]
			  pwm_rb = 4095;
 8001ac2:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <main+0x2fc>)
 8001ac4:	4a5f      	ldr	r2, [pc, #380]	; (8001c44 <main+0x2f4>)
 8001ac6:	601a      	str	r2, [r3, #0]
			  pwm_rf = 4095;
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <main+0x300>)
 8001aca:	4a5e      	ldr	r2, [pc, #376]	; (8001c44 <main+0x2f4>)
 8001acc:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_rf);//pid_output_lf);
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);//pid_output_lb);
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);//pid_output_rb);
*/

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pid_output_lf*(4095.0/300));
 8001ace:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <main+0x304>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fca8 	bl	8000428 <__aeabi_f2d>
 8001ad8:	a33f      	add	r3, pc, #252	; (adr r3, 8001bd8 <main+0x288>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fcfb 	bl	80004d8 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4946      	ldr	r1, [pc, #280]	; (8001c00 <main+0x2b0>)
 8001ae8:	680c      	ldr	r4, [r1, #0]
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7fe ffcb 	bl	8000a88 <__aeabi_d2uiz>
 8001af2:	4603      	mov	r3, r0
 8001af4:	6363      	str	r3, [r4, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pid_output_rf*(4095.0/300));
 8001af6:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <main+0x308>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc94 	bl	8000428 <__aeabi_f2d>
 8001b00:	a335      	add	r3, pc, #212	; (adr r3, 8001bd8 <main+0x288>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fce7 	bl	80004d8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	493c      	ldr	r1, [pc, #240]	; (8001c00 <main+0x2b0>)
 8001b10:	680c      	ldr	r4, [r1, #0]
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7fe ffb7 	bl	8000a88 <__aeabi_d2uiz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	63a3      	str	r3, [r4, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pid_output_lb*(4095.0/300));
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <main+0x30c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fc80 	bl	8000428 <__aeabi_f2d>
 8001b28:	a32b      	add	r3, pc, #172	; (adr r3, 8001bd8 <main+0x288>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fcd3 	bl	80004d8 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4932      	ldr	r1, [pc, #200]	; (8001c00 <main+0x2b0>)
 8001b38:	680c      	ldr	r4, [r1, #0]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7fe ffa3 	bl	8000a88 <__aeabi_d2uiz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	63e3      	str	r3, [r4, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pid_output_rb*(4095.0/300));
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <main+0x310>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fc6c 	bl	8000428 <__aeabi_f2d>
 8001b50:	a321      	add	r3, pc, #132	; (adr r3, 8001bd8 <main+0x288>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fcbf 	bl	80004d8 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4928      	ldr	r1, [pc, #160]	; (8001c00 <main+0x2b0>)
 8001b60:	680c      	ldr	r4, [r1, #0]
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7fe ff8f 	bl	8000a88 <__aeabi_d2uiz>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6423      	str	r3, [r4, #64]	; 0x40
			  }
			  if(yawangle > yaw_reference_straightLine){
				  LeftTurn();
			  }
			  */
			  break;
 8001b6e:	e07e      	b.n	8001c6e <main+0x31e>


		  case 2:
			  //Right turn
			  RightTurn();
 8001b70:	f7ff fb20 	bl	80011b4 <RightTurn>
			  pwm_lb = 100;
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <main+0x2f8>)
 8001b76:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <main+0x314>)
 8001b78:	601a      	str	r2, [r3, #0]
			  pwm_rb = 100;
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <main+0x2fc>)
 8001b7c:	4a39      	ldr	r2, [pc, #228]	; (8001c64 <main+0x314>)
 8001b7e:	601a      	str	r2, [r3, #0]
			  pwm_rf = 100;
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <main+0x300>)
 8001b82:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <main+0x314>)
 8001b84:	601a      	str	r2, [r3, #0]
			  pwm_lf = 100;
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <main+0x2f0>)
 8001b88:	4a36      	ldr	r2, [pc, #216]	; (8001c64 <main+0x314>)
 8001b8a:	601a      	str	r2, [r3, #0]

			  /*Set PWM value to the PIDs PWM output value*/
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <main+0x300>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <main+0x2b0>)
 8001b92:	6814      	ldr	r4, [r2, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fabb 	bl	8001110 <__aeabi_f2uiz>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6363      	str	r3, [r4, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <main+0x2f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <main+0x2b0>)
 8001ba4:	6814      	ldr	r4, [r2, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fab2 	bl	8001110 <__aeabi_f2uiz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	63a3      	str	r3, [r4, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <main+0x2f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <main+0x2b0>)
 8001bb6:	6814      	ldr	r4, [r2, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff faa9 	bl	8001110 <__aeabi_f2uiz>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	63e3      	str	r3, [r4, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <main+0x2fc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <main+0x2b0>)
 8001bc8:	6814      	ldr	r4, [r2, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff faa0 	bl	8001110 <__aeabi_f2uiz>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	6423      	str	r3, [r4, #64]	; 0x40

			  break;
 8001bd4:	e04b      	b.n	8001c6e <main+0x31e>
 8001bd6:	bf00      	nop
 8001bd8:	cccccccd 	.word	0xcccccccd
 8001bdc:	402b4ccc 	.word	0x402b4ccc
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000200 	.word	0x20000200
 8001be8:	20000001 	.word	0x20000001
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	08009058 	.word	0x08009058
 8001bf4:	20000374 	.word	0x20000374
 8001bf8:	2000032c 	.word	0x2000032c
 8001bfc:	2000029c 	.word	0x2000029c
 8001c00:	200002e4 	.word	0x200002e4
 8001c04:	43960000 	.word	0x43960000
 8001c08:	3ccccccd 	.word	0x3ccccccd
 8001c0c:	41200000 	.word	0x41200000
 8001c10:	4071cac1 	.word	0x4071cac1
 8001c14:	2000045c 	.word	0x2000045c
 8001c18:	404dd2f2 	.word	0x404dd2f2
 8001c1c:	20000480 	.word	0x20000480
 8001c20:	4053c6a8 	.word	0x4053c6a8
 8001c24:	200004a4 	.word	0x200004a4
 8001c28:	3fec49ba 	.word	0x3fec49ba
 8001c2c:	3e81f213 	.word	0x3e81f213
 8001c30:	3faf3b64 	.word	0x3faf3b64
 8001c34:	200004c8 	.word	0x200004c8
 8001c38:	200004ec 	.word	0x200004ec
 8001c3c:	2000040c 	.word	0x2000040c
 8001c40:	2000043c 	.word	0x2000043c
 8001c44:	457ff000 	.word	0x457ff000
 8001c48:	20000444 	.word	0x20000444
 8001c4c:	20000440 	.word	0x20000440
 8001c50:	20000438 	.word	0x20000438
 8001c54:	20000428 	.word	0x20000428
 8001c58:	2000042c 	.word	0x2000042c
 8001c5c:	20000430 	.word	0x20000430
 8001c60:	20000434 	.word	0x20000434
 8001c64:	42c80000 	.word	0x42c80000

		  default:
			  Stop();
 8001c68:	f7ff fad6 	bl	8001218 <Stop>

			  break;
 8001c6c:	bf00      	nop
	  }



	  current_time = HAL_GetTick();
 8001c6e:	f001 f94b 	bl	8002f08 <HAL_GetTick>
 8001c72:	61f8      	str	r0, [r7, #28]
	  elapsed_time = current_time - start_time;
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	61bb      	str	r3, [r7, #24]


	  /*State machines logic */
	  if(state == 0){
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <main+0x49c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11b      	bne.n	8001cbc <main+0x36c>
		  /*Start Command*/
		  if(Commands[0] == 'S'){
 8001c84:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <main+0x4a0>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b53      	cmp	r3, #83	; 0x53
 8001c8a:	d174      	bne.n	8001d76 <main+0x426>
			  start_time = HAL_GetTick();
 8001c8c:	f001 f93c 	bl	8002f08 <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	; 0x24
			  elapsed_time = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
			  pidMotor_rf.setpoint = 180.0;
 8001c96:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <main+0x4a4>)
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <main+0x4a8>)
 8001c9a:	60da      	str	r2, [r3, #12]
			  pidMotor_lf.setpoint = 180.0;
 8001c9c:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <main+0x4ac>)
 8001c9e:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <main+0x4a8>)
 8001ca0:	60da      	str	r2, [r3, #12]
			  pidMotor_rb.setpoint = 180.0;
 8001ca2:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <main+0x4b0>)
 8001ca4:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <main+0x4a8>)
 8001ca6:	60da      	str	r2, [r3, #12]
			  pidMotor_lb.setpoint = 180.0;
 8001ca8:	4b56      	ldr	r3, [pc, #344]	; (8001e04 <main+0x4b4>)
 8001caa:	4a53      	ldr	r2, [pc, #332]	; (8001df8 <main+0x4a8>)
 8001cac:	60da      	str	r2, [r3, #12]
			  state++;
 8001cae:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <main+0x49c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <main+0x49c>)
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e05c      	b.n	8001d76 <main+0x426>
		  }
	  }
	  else if(state == 1){
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <main+0x49c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d124      	bne.n	8001d0e <main+0x3be>
		  /*Drive Forward for 5 seconds*/ // Change THIS!!
		  if(distance_average > 1000){
 8001cc4:	4b50      	ldr	r3, [pc, #320]	; (8001e08 <main+0x4b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4950      	ldr	r1, [pc, #320]	; (8001e0c <main+0x4bc>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fa16 	bl	80010fc <__aeabi_fcmpgt>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04f      	beq.n	8001d76 <main+0x426>
			  pidMotor_rf.setpoint = 0.0;
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <main+0x4a4>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
			  pidMotor_lf.setpoint = 0.0;
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <main+0x4ac>)
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
			  pidMotor_rb.setpoint = 0.0;
 8001ce6:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <main+0x4b0>)
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
			  pidMotor_lb.setpoint = 0.0;
 8001cee:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <main+0x4b4>)
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]

			  start_time = HAL_GetTick();
 8001cf6:	f001 f907 	bl	8002f08 <HAL_GetTick>
 8001cfa:	6278      	str	r0, [r7, #36]	; 0x24
			  elapsed_time = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
			  state++;
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <main+0x49c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <main+0x49c>)
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e033      	b.n	8001d76 <main+0x426>
		  }
	  }
	  else if(state == 2){
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <main+0x49c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d12f      	bne.n	8001d76 <main+0x426>
		  /*Turn right until yaw reference value*/
		  if(yawangle <= yaw_reference){
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <main+0x4c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <main+0x4c4>)
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f9d7 	bl	80010d4 <__aeabi_fcmple>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d024      	beq.n	8001d76 <main+0x426>
			  yaw_reference += -90 + (-yawangle + yaw_reference);
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <main+0x4c4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a37      	ldr	r2, [pc, #220]	; (8001e10 <main+0x4c0>)
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ff1a 	bl	8000b70 <__aeabi_fsub>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4936      	ldr	r1, [pc, #216]	; (8001e18 <main+0x4c8>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ff15 	bl	8000b70 <__aeabi_fsub>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <main+0x4c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f7fe ff0f 	bl	8000b74 <__addsf3>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <main+0x4c4>)
 8001d5c:	601a      	str	r2, [r3, #0]
			  	//yaw_reference += -90;
				Stop();
 8001d5e:	f7ff fa5b 	bl	8001218 <Stop>
				/*Recalibrate at every stop*/
				Gyro_calibration();
 8001d62:	f7ff fce9 	bl	8001738 <Gyro_calibration>
				start_time = HAL_GetTick();
 8001d66:	f001 f8cf 	bl	8002f08 <HAL_GetTick>
 8001d6a:	6278      	str	r0, [r7, #36]	; 0x24
				elapsed_time = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
			  	state = 1;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <main+0x49c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /*Stop Command*/
	  if(Commands[0] == 'E'){
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <main+0x4a0>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b45      	cmp	r3, #69	; 0x45
 8001d7c:	f47f ae8c 	bne.w	8001a98 <main+0x148>
		  Stop();
 8001d80:	f7ff fa4a 	bl	8001218 <Stop>

		  state = 0;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <main+0x49c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

		  pwm_lb = 0;
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <main+0x4cc>)
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
		  pwm_rb = 0;
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <main+0x4d0>)
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
		  pwm_rf = 0;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <main+0x4d4>)
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
		  pwm_lf = 0;
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <main+0x4d8>)
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <main+0x4dc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <main+0x4dc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <main+0x4dc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <main+0x4dc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

		  pidMotor_rf.setpoint = 0.0;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <main+0x4a4>)
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
		  pidMotor_lf.setpoint = 0.0;
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <main+0x4ac>)
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
		  pidMotor_rb.setpoint = 0.0;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <main+0x4b0>)
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
		  pidMotor_lb.setpoint = 0.0;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <main+0x4b4>)
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 8001dea:	e655      	b.n	8001a98 <main+0x148>
 8001dec:	2000040c 	.word	0x2000040c
 8001df0:	200004ec 	.word	0x200004ec
 8001df4:	2000045c 	.word	0x2000045c
 8001df8:	43340000 	.word	0x43340000
 8001dfc:	20000480 	.word	0x20000480
 8001e00:	200004a4 	.word	0x200004a4
 8001e04:	200004c8 	.word	0x200004c8
 8001e08:	20000458 	.word	0x20000458
 8001e0c:	447a0000 	.word	0x447a0000
 8001e10:	20000400 	.word	0x20000400
 8001e14:	20000004 	.word	0x20000004
 8001e18:	42b40000 	.word	0x42b40000
 8001e1c:	20000444 	.word	0x20000444
 8001e20:	20000440 	.word	0x20000440
 8001e24:	20000438 	.word	0x20000438
 8001e28:	2000043c 	.word	0x2000043c
 8001e2c:	200002e4 	.word	0x200002e4

08001e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b090      	sub	sp, #64	; 0x40
 8001e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	2228      	movs	r2, #40	; 0x28
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f005 f811 	bl	8006e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e64:	2302      	movs	r3, #2
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fc99 	bl	80047b0 <HAL_RCC_OscConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e84:	f000 fd3c 	bl	8002900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e88:	230f      	movs	r3, #15
 8001e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 ff06 	bl	8004cb4 <HAL_RCC_ClockConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001eae:	f000 fd27 	bl	8002900 <Error_Handler>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3740      	adds	r7, #64	; 0x40
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2028      	movs	r0, #40	; 0x28
 8001ec4:	f001 f901 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ec8:	2028      	movs	r0, #40	; 0x28
 8001eca:	f001 f91a 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	201e      	movs	r0, #30
 8001ed4:	f001 f8f9 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ed8:	201e      	movs	r0, #30
 8001eda:	f001 f912 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	201c      	movs	r0, #28
 8001ee4:	f001 f8f1 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ee8:	201c      	movs	r0, #28
 8001eea:	f001 f90a 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	201d      	movs	r0, #29
 8001ef4:	f001 f8e9 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ef8:	201d      	movs	r0, #29
 8001efa:	f001 f902 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <MX_I2C1_Init+0x54>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <MX_I2C1_Init+0x58>)
 8001f12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f42:	f001 faad 	bl	80034a0 <HAL_I2C_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f4c:	f000 fcd8 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000200 	.word	0x20000200
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	000186a0 	.word	0x000186a0

08001f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f74:	463b      	mov	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <MX_TIM1_Init+0x9c>)
 8001f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fa8:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001faa:	f003 f811 	bl	8004fd0 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001fb4:	f000 fca4 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001fc6:	f003 fb69 	bl	800569c <HAL_TIM_ConfigClockSource>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001fd0:	f000 fc96 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM1_Init+0x98>)
 8001fe2:	f003 feeb 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001fec:	f000 fc88 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000254 	.word	0x20000254
 8001ffc:	40012c00 	.word	0x40012c00

08002000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	463b      	mov	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <MX_TIM2_Init+0x98>)
 800201e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002022:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <MX_TIM2_Init+0x98>)
 8002026:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800202a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <MX_TIM2_Init+0x98>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <MX_TIM2_Init+0x98>)
 8002034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002038:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <MX_TIM2_Init+0x98>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <MX_TIM2_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002046:	4814      	ldr	r0, [pc, #80]	; (8002098 <MX_TIM2_Init+0x98>)
 8002048:	f002 ffc2 	bl	8004fd0 <HAL_TIM_Base_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002052:	f000 fc55 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	4619      	mov	r1, r3
 8002062:	480d      	ldr	r0, [pc, #52]	; (8002098 <MX_TIM2_Init+0x98>)
 8002064:	f003 fb1a 	bl	800569c <HAL_TIM_ConfigClockSource>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800206e:	f000 fc47 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800207a:	463b      	mov	r3, r7
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <MX_TIM2_Init+0x98>)
 8002080:	f003 fe9c 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800208a:	f000 fc39 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000029c 	.word	0x2000029c

0800209c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b0:	f107 0320 	add.w	r3, r7, #32
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
 80020c8:	615a      	str	r2, [r3, #20]
 80020ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020cc:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <MX_TIM3_Init+0x128>)
 80020ce:	4a3e      	ldr	r2, [pc, #248]	; (80021c8 <MX_TIM3_Init+0x12c>)
 80020d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <MX_TIM3_Init+0x128>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <MX_TIM3_Init+0x128>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 80020de:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <MX_TIM3_Init+0x128>)
 80020e0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <MX_TIM3_Init+0x128>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <MX_TIM3_Init+0x128>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020f2:	4834      	ldr	r0, [pc, #208]	; (80021c4 <MX_TIM3_Init+0x128>)
 80020f4:	f002 ff6c 	bl	8004fd0 <HAL_TIM_Base_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020fe:	f000 fbff 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800210c:	4619      	mov	r1, r3
 800210e:	482d      	ldr	r0, [pc, #180]	; (80021c4 <MX_TIM3_Init+0x128>)
 8002110:	f003 fac4 	bl	800569c <HAL_TIM_ConfigClockSource>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800211a:	f000 fbf1 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800211e:	4829      	ldr	r0, [pc, #164]	; (80021c4 <MX_TIM3_Init+0x128>)
 8002120:	f002 fff8 	bl	8005114 <HAL_TIM_PWM_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800212a:	f000 fbe9 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	4619      	mov	r1, r3
 800213c:	4821      	ldr	r0, [pc, #132]	; (80021c4 <MX_TIM3_Init+0x128>)
 800213e:	f003 fe3d 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002148:	f000 fbda 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214c:	2360      	movs	r3, #96	; 0x60
 800214e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	4619      	mov	r1, r3
 8002162:	4818      	ldr	r0, [pc, #96]	; (80021c4 <MX_TIM3_Init+0x128>)
 8002164:	f003 f9d8 	bl	8005518 <HAL_TIM_PWM_ConfigChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800216e:	f000 fbc7 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2204      	movs	r2, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4812      	ldr	r0, [pc, #72]	; (80021c4 <MX_TIM3_Init+0x128>)
 800217a:	f003 f9cd 	bl	8005518 <HAL_TIM_PWM_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002184:	f000 fbbc 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2208      	movs	r2, #8
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <MX_TIM3_Init+0x128>)
 8002190:	f003 f9c2 	bl	8005518 <HAL_TIM_PWM_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800219a:	f000 fbb1 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	220c      	movs	r2, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	4807      	ldr	r0, [pc, #28]	; (80021c4 <MX_TIM3_Init+0x128>)
 80021a6:	f003 f9b7 	bl	8005518 <HAL_TIM_PWM_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80021b0:	f000 fba6 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <MX_TIM3_Init+0x128>)
 80021b6:	f000 fc71 	bl	8002a9c <HAL_TIM_MspPostInit>

}
 80021ba:	bf00      	nop
 80021bc:	3738      	adds	r7, #56	; 0x38
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200002e4 	.word	0x200002e4
 80021c8:	40000400 	.word	0x40000400

080021cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	463b      	mov	r3, r7
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <MX_TIM4_Init+0x94>)
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <MX_TIM4_Init+0x98>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <MX_TIM4_Init+0x94>)
 80021f0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80021f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <MX_TIM4_Init+0x94>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <MX_TIM4_Init+0x94>)
 80021fe:	2263      	movs	r2, #99	; 0x63
 8002200:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <MX_TIM4_Init+0x94>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <MX_TIM4_Init+0x94>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <MX_TIM4_Init+0x94>)
 8002210:	f002 fede 	bl	8004fd0 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800221a:	f000 fb71 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <MX_TIM4_Init+0x94>)
 800222c:	f003 fa36 	bl	800569c <HAL_TIM_ConfigClockSource>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002236:	f000 fb63 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002242:	463b      	mov	r3, r7
 8002244:	4619      	mov	r1, r3
 8002246:	4806      	ldr	r0, [pc, #24]	; (8002260 <MX_TIM4_Init+0x94>)
 8002248:	f003 fdb8 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002252:	f000 fb55 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000032c 	.word	0x2000032c
 8002264:	40000800 	.word	0x40000800

08002268 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <MX_USART1_UART_Init+0x50>)
 8002270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 8002274:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 800228e:	220c      	movs	r2, #12
 8002290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_USART1_UART_Init+0x4c>)
 80022a0:	f003 fdfc 	bl	8005e9c <HAL_UART_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022aa:	f000 fb29 	bl	8002900 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000374 	.word	0x20000374
 80022b8:	40013800 	.word	0x40013800

080022bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d0:	4b45      	ldr	r3, [pc, #276]	; (80023e8 <MX_GPIO_Init+0x12c>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a44      	ldr	r2, [pc, #272]	; (80023e8 <MX_GPIO_Init+0x12c>)
 80022d6:	f043 0310 	orr.w	r3, r3, #16
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <MX_GPIO_Init+0x12c>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <MX_GPIO_Init+0x12c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a3e      	ldr	r2, [pc, #248]	; (80023e8 <MX_GPIO_Init+0x12c>)
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <MX_GPIO_Init+0x12c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <MX_GPIO_Init+0x12c>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a38      	ldr	r2, [pc, #224]	; (80023e8 <MX_GPIO_Init+0x12c>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <MX_GPIO_Init+0x12c>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <MX_GPIO_Init+0x12c>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <MX_GPIO_Init+0x12c>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <MX_GPIO_Init+0x12c>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002336:	482d      	ldr	r0, [pc, #180]	; (80023ec <MX_GPIO_Init+0x130>)
 8002338:	f001 f882 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800233c:	2200      	movs	r2, #0
 800233e:	f248 010f 	movw	r1, #32783	; 0x800f
 8002342:	482b      	ldr	r0, [pc, #172]	; (80023f0 <MX_GPIO_Init+0x134>)
 8002344:	f001 f87c 	bl	8003440 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2138      	movs	r1, #56	; 0x38
 800234c:	4829      	ldr	r0, [pc, #164]	; (80023f4 <MX_GPIO_Init+0x138>)
 800234e:	f001 f877 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2302      	movs	r3, #2
 8002362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4619      	mov	r1, r3
 800236a:	4820      	ldr	r0, [pc, #128]	; (80023ec <MX_GPIO_Init+0x130>)
 800236c:	f000 fee4 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002370:	f248 030f 	movw	r3, #32783	; 0x800f
 8002374:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2302      	movs	r3, #2
 8002380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	4619      	mov	r1, r3
 8002388:	4819      	ldr	r0, [pc, #100]	; (80023f0 <MX_GPIO_Init+0x134>)
 800238a:	f000 fed5 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800238e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_GPIO_Init+0x13c>)
 8002396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	4619      	mov	r1, r3
 80023a2:	4814      	ldr	r0, [pc, #80]	; (80023f4 <MX_GPIO_Init+0x138>)
 80023a4:	f000 fec8 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4619      	mov	r1, r3
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <MX_GPIO_Init+0x134>)
 80023be:	f000 febb 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80023c2:	2338      	movs	r3, #56	; 0x38
 80023c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c6:	2301      	movs	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 0310 	add.w	r3, r7, #16
 80023d6:	4619      	mov	r1, r3
 80023d8:	4806      	ldr	r0, [pc, #24]	; (80023f4 <MX_GPIO_Init+0x138>)
 80023da:	f000 fead 	bl	8003138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023de:	bf00      	nop
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40011000 	.word	0x40011000
 80023f0:	40010800 	.word	0x40010800
 80023f4:	40010c00 	.word	0x40010c00
 80023f8:	10310000 	.word	0x10310000
 80023fc:	00000000 	.word	0x00000000

08002400 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002404:	b09e      	sub	sp, #120	; 0x78
 8002406:	af10      	add	r7, sp, #64	; 0x40
 8002408:	62f8      	str	r0, [r7, #44]	; 0x2c


	if(htim -> Instance  == TIM2){
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	f040 81ee 	bne.w	80027f2 <HAL_TIM_PeriodElapsedCallback+0x3f2>

		rpm_rf =  (current_tick_rf * 1000 * 60) / (pulsesperturn * 100);
 8002416:	4bb6      	ldr	r3, [pc, #728]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002420:	fb03 f202 	mul.w	r2, r3, r2
 8002424:	4bb3      	ldr	r3, [pc, #716]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	2364      	movs	r3, #100	; 0x64
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	fb92 f3f3 	sdiv	r3, r2, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fc51 	bl	8000cdc <__aeabi_i2f>
 800243a:	4603      	mov	r3, r0
 800243c:	4aae      	ldr	r2, [pc, #696]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800243e:	6013      	str	r3, [r2, #0]
	    rpm_lf =  (current_tick_lf * 1000 * 60) / (pulsesperturn * 100);
 8002440:	4bae      	ldr	r3, [pc, #696]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	f64e 2360 	movw	r3, #60000	; 0xea60
 800244a:	fb03 f202 	mul.w	r2, r3, r2
 800244e:	4ba9      	ldr	r3, [pc, #676]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	fb92 f3f3 	sdiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fc3c 	bl	8000cdc <__aeabi_i2f>
 8002464:	4603      	mov	r3, r0
 8002466:	4aa6      	ldr	r2, [pc, #664]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002468:	6013      	str	r3, [r2, #0]
	    rpm_rb =  (current_tick_rb * 1000 * 60) / (pulsesperturn * 100);
 800246a:	4ba6      	ldr	r3, [pc, #664]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002474:	fb03 f202 	mul.w	r2, r3, r2
 8002478:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	2364      	movs	r3, #100	; 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	fb92 f3f3 	sdiv	r3, r2, r3
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc27 	bl	8000cdc <__aeabi_i2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4a9d      	ldr	r2, [pc, #628]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002492:	6013      	str	r3, [r2, #0]
	    rpm_lb =  (current_tick_lb * 1000 * 60) / (pulsesperturn * 100);
 8002494:	4b9d      	ldr	r3, [pc, #628]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800249e:	fb03 f202 	mul.w	r2, r3, r2
 80024a2:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	2364      	movs	r3, #100	; 0x64
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fc12 	bl	8000cdc <__aeabi_i2f>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a95      	ldr	r2, [pc, #596]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80024bc:	6013      	str	r3, [r2, #0]

	    distance_rf += current_tick_rf * 41.469/20;
 80024be:	4b95      	ldr	r3, [pc, #596]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fd ffb0 	bl	8000428 <__aeabi_f2d>
 80024c8:	4604      	mov	r4, r0
 80024ca:	460d      	mov	r5, r1
 80024cc:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd ff97 	bl	8000404 <__aeabi_i2d>
 80024d6:	a384      	add	r3, pc, #528	; (adr r3, 80026e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fd fffc 	bl	80004d8 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	4b8a      	ldr	r3, [pc, #552]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80024ee:	f7fe f91d 	bl	800072c <__aeabi_ddiv>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f7fd fe37 	bl	800016c <__adddf3>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fadf 	bl	8000ac8 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	4a81      	ldr	r2, [pc, #516]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800250e:	6013      	str	r3, [r2, #0]
		distance_lf += current_tick_lf * 41.469/20;
 8002510:	4b82      	ldr	r3, [pc, #520]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fd ff87 	bl	8000428 <__aeabi_f2d>
 800251a:	4604      	mov	r4, r0
 800251c:	460d      	mov	r5, r1
 800251e:	4b77      	ldr	r3, [pc, #476]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd ff6e 	bl	8000404 <__aeabi_i2d>
 8002528:	a36f      	add	r3, pc, #444	; (adr r3, 80026e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fd ffd3 	bl	80004d8 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002540:	f7fe f8f4 	bl	800072c <__aeabi_ddiv>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fd fe0e 	bl	800016c <__adddf3>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fab6 	bl	8000ac8 <__aeabi_d2f>
 800255c:	4603      	mov	r3, r0
 800255e:	4a6f      	ldr	r2, [pc, #444]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002560:	6013      	str	r3, [r2, #0]
		distance_rb += current_tick_rb * 41.469/20;
 8002562:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd ff5e 	bl	8000428 <__aeabi_f2d>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
 8002570:	4b64      	ldr	r3, [pc, #400]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ff45 	bl	8000404 <__aeabi_i2d>
 800257a:	a35b      	add	r3, pc, #364	; (adr r3, 80026e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fd ffaa 	bl	80004d8 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b61      	ldr	r3, [pc, #388]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002592:	f7fe f8cb 	bl	800072c <__aeabi_ddiv>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4620      	mov	r0, r4
 800259c:	4629      	mov	r1, r5
 800259e:	f7fd fde5 	bl	800016c <__adddf3>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7fe fa8d 	bl	8000ac8 <__aeabi_d2f>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80025b2:	6013      	str	r3, [r2, #0]
		distance_lb += current_tick_lb * 41.469/20;
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ff35 	bl	8000428 <__aeabi_f2d>
 80025be:	4604      	mov	r4, r0
 80025c0:	460d      	mov	r5, r1
 80025c2:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ff1c 	bl	8000404 <__aeabi_i2d>
 80025cc:	a346      	add	r3, pc, #280	; (adr r3, 80026e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd ff81 	bl	80004d8 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80025e4:	f7fe f8a2 	bl	800072c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fd fdbc 	bl	800016c <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe fa64 	bl	8000ac8 <__aeabi_d2f>
 8002600:	4603      	mov	r3, r0
 8002602:	4a48      	ldr	r2, [pc, #288]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002604:	6013      	str	r3, [r2, #0]

		distance_average += (distance_rf + distance_lf)/2;
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a44      	ldr	r2, [pc, #272]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe faaf 	bl	8000b74 <__addsf3>
 8002616:	4603      	mov	r3, r0
 8002618:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fc65 	bl	8000eec <__aeabi_fdiv>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b40      	ldr	r3, [pc, #256]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7fe faa1 	bl	8000b74 <__addsf3>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002638:	601a      	str	r2, [r3, #0]

	    distance_rf = 0;
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
		distance_lf = 0;
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
		distance_rb = 0;
 800264a:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
		distance_lb = 0;
 8002652:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

		current_tick_rf = 0;
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
		current_tick_lf = 0;
 8002660:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
		current_tick_rb = 0;
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
		current_tick_lb = 0;
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]

		pid_output_lf = PIDpwm_Compute(&pidMotor_lf, rpm_lf);
 8002672:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	482c      	ldr	r0, [pc, #176]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800267a:	f7fe fe2d 	bl	80012d8 <PIDpwm_Compute>
 800267e:	4603      	mov	r3, r0
 8002680:	4a2b      	ldr	r2, [pc, #172]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002682:	6013      	str	r3, [r2, #0]
		pid_output_rf = PIDpwm_Compute(&pidMotor_rf, rpm_rf);
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	482a      	ldr	r0, [pc, #168]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800268c:	f7fe fe24 	bl	80012d8 <PIDpwm_Compute>
 8002690:	4603      	mov	r3, r0
 8002692:	4a29      	ldr	r2, [pc, #164]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002694:	6013      	str	r3, [r2, #0]
		pid_output_lb = PIDpwm_Compute(&pidMotor_lb, rpm_lb);
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4827      	ldr	r0, [pc, #156]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800269e:	f7fe fe1b 	bl	80012d8 <PIDpwm_Compute>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a26      	ldr	r2, [pc, #152]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80026a6:	6013      	str	r3, [r2, #0]
		pid_output_rb = PIDpwm_Compute(&pidMotor_rb, rpm_rb);
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4825      	ldr	r0, [pc, #148]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80026b0:	f7fe fe12 	bl	80012d8 <PIDpwm_Compute>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4a24      	ldr	r2, [pc, #144]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80026b8:	6013      	str	r3, [r2, #0]


		  uint8_t num_chars =  sprintf(rpmdata,"%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", pid_output_lf, pid_output_rf, pid_output_lb, pid_output_rb, rpm_lf, rpm_rf, rpm_lb, rpm_rb,distance_average);
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd feb2 	bl	8000428 <__aeabi_f2d>
 80026c4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd feab 	bl	8000428 <__aeabi_f2d>
 80026d2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fea4 	bl	8000428 <__aeabi_f2d>
 80026e0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80026e4:	e032      	b.n	800274c <HAL_TIM_PeriodElapsedCallback+0x34c>
 80026e6:	bf00      	nop
 80026e8:	3126e979 	.word	0x3126e979
 80026ec:	4044bc08 	.word	0x4044bc08
 80026f0:	20000424 	.word	0x20000424
 80026f4:	20000008 	.word	0x20000008
 80026f8:	20000414 	.word	0x20000414
 80026fc:	20000425 	.word	0x20000425
 8002700:	20000418 	.word	0x20000418
 8002704:	20000426 	.word	0x20000426
 8002708:	2000041c 	.word	0x2000041c
 800270c:	20000427 	.word	0x20000427
 8002710:	20000420 	.word	0x20000420
 8002714:	20000448 	.word	0x20000448
 8002718:	40340000 	.word	0x40340000
 800271c:	2000044c 	.word	0x2000044c
 8002720:	20000450 	.word	0x20000450
 8002724:	20000454 	.word	0x20000454
 8002728:	20000458 	.word	0x20000458
 800272c:	20000480 	.word	0x20000480
 8002730:	20000428 	.word	0x20000428
 8002734:	2000045c 	.word	0x2000045c
 8002738:	2000042c 	.word	0x2000042c
 800273c:	200004c8 	.word	0x200004c8
 8002740:	20000430 	.word	0x20000430
 8002744:	200004a4 	.word	0x200004a4
 8002748:	20000434 	.word	0x20000434
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fe69 	bl	8000428 <__aeabi_f2d>
 8002756:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fe62 	bl	8000428 <__aeabi_f2d>
 8002764:	e9c7 0100 	strd	r0, r1, [r7]
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fe5b 	bl	8000428 <__aeabi_f2d>
 8002772:	4682      	mov	sl, r0
 8002774:	468b      	mov	fp, r1
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fe54 	bl	8000428 <__aeabi_f2d>
 8002780:	4680      	mov	r8, r0
 8002782:	4689      	mov	r9, r1
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe4d 	bl	8000428 <__aeabi_f2d>
 800278e:	4604      	mov	r4, r0
 8002790:	460d      	mov	r5, r1
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fe46 	bl	8000428 <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80027a4:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80027a8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80027ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80027b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80027b4:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80027b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80027bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80027c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027c4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80027c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80027cc:	e9cd 3400 	strd	r3, r4, [sp]
 80027d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80027d6:	4817      	ldr	r0, [pc, #92]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80027d8:	f004 fae2 	bl	8006da0 <siprintf>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  //uint8_t num_chars =  sprintf(rpmdata,"%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", pwm_lf, pwm_rf, pwm_lb, pwm_rb, rpm_lf, rpm_rf, rpm_lb, rpm_rb, yawangle);

		  HAL_UART_Transmit(&huart1, &rpmdata, num_chars, 200);
 80027e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	23c8      	movs	r3, #200	; 0xc8
 80027ea:	4912      	ldr	r1, [pc, #72]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80027ec:	4812      	ldr	r0, [pc, #72]	; (8002838 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80027ee:	f003 fba5 	bl	8005f3c <HAL_UART_Transmit>

	}

	if(htim -> Instance == TIM4){
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d108      	bne.n	800280e <HAL_TIM_PeriodElapsedCallback+0x40e>


		if(count == 4){
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d102      	bne.n	800280a <HAL_TIM_PeriodElapsedCallback+0x40a>
			/*Integrate  every 50ms*/
			MPU_GetYaw(100);
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	f7ff f821 	bl	800184c <MPU_GetYaw>
			//count = 0;
		}

		/*Readd gyro value every 10ms*/
		MPU_Read_gyro();
 800280a:	f7fe fea9 	bl	8001560 <MPU_Read_gyro>
	}

}
 800280e:	bf00      	nop
 8002810:	3738      	adds	r7, #56	; 0x38
 8002812:	46bd      	mov	sp, r7
 8002814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002818:	20000434 	.word	0x20000434
 800281c:	20000418 	.word	0x20000418
 8002820:	20000414 	.word	0x20000414
 8002824:	20000420 	.word	0x20000420
 8002828:	2000041c 	.word	0x2000041c
 800282c:	20000458 	.word	0x20000458
 8002830:	0800906c 	.word	0x0800906c
 8002834:	200004f0 	.word	0x200004f0
 8002838:	20000374 	.word	0x20000374
 800283c:	40000800 	.word	0x40000800
 8002840:	200005b8 	.word	0x200005b8

08002844 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
 * @pin 14 Left front wheel
 * @pin 13 Right back wheel
 * @pin 12 Left back wheel
 */

  if(GPIO_Pin == GPIO_PIN_15){
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002854:	d10c      	bne.n	8002870 <HAL_GPIO_EXTI_Callback+0x2c>
	  //Right front wheel
	  pulses_rf++;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002862:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800286e:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_14){
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002876:	d10c      	bne.n	8002892 <HAL_GPIO_EXTI_Callback+0x4e>
	  //Left front wheel
	  pulses_lf++;
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	3301      	adds	r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002884:	701a      	strb	r2, [r3, #0]
	  current_tick_lf++;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_GPIO_EXTI_Callback+0xa8>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_GPIO_EXTI_Callback+0xa8>)
 8002890:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_13){
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002898:	d10c      	bne.n	80028b4 <HAL_GPIO_EXTI_Callback+0x70>
	  //Right back wheel
	  pulses_rb++;
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_GPIO_EXTI_Callback+0xac>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_GPIO_EXTI_Callback+0xac>)
 80028a6:	701a      	strb	r2, [r3, #0]
	  current_tick_rb++;
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_GPIO_EXTI_Callback+0xb0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_GPIO_EXTI_Callback+0xb0>)
 80028b2:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_12){
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ba:	d10c      	bne.n	80028d6 <HAL_GPIO_EXTI_Callback+0x92>
	  //Left back wheel
	  pulses_lb++;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80028c8:	701a      	strb	r2, [r3, #0]
	  current_tick_lb++;
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80028d4:	701a      	strb	r2, [r3, #0]

  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	2000040d 	.word	0x2000040d
 80028e4:	20000424 	.word	0x20000424
 80028e8:	2000040e 	.word	0x2000040e
 80028ec:	20000425 	.word	0x20000425
 80028f0:	2000040f 	.word	0x2000040f
 80028f4:	20000426 	.word	0x20000426
 80028f8:	20000410 	.word	0x20000410
 80028fc:	20000427 	.word	0x20000427

08002900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002908:	e7fe      	b.n	8002908 <Error_Handler+0x8>
	...

0800290c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_MspInit+0x5c>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_MspInit+0x5c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_MspInit+0x5c>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_MspInit+0x5c>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_MspInit+0x5c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_MspInit+0x5c>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_MspInit+0x60>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_MspInit+0x60>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000

08002970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_I2C_MspInit+0x70>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d123      	bne.n	80029d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_I2C_MspInit+0x74>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <HAL_I2C_MspInit+0x74>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_I2C_MspInit+0x74>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029a8:	23c0      	movs	r3, #192	; 0xc0
 80029aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ac:	2312      	movs	r3, #18
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	4619      	mov	r1, r3
 80029ba:	480b      	ldr	r0, [pc, #44]	; (80029e8 <HAL_I2C_MspInit+0x78>)
 80029bc:	f000 fbbc 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_I2C_MspInit+0x74>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_I2C_MspInit+0x74>)
 80029c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ca:	61d3      	str	r3, [r2, #28]
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_I2C_MspInit+0x74>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40005400 	.word	0x40005400
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010c00 	.word	0x40010c00

080029ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <HAL_TIM_Base_MspInit+0xa0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10c      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a08:	6193      	str	r3, [r2, #24]
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a16:	e034      	b.n	8002a82 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d10c      	bne.n	8002a3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	61d3      	str	r3, [r2, #28]
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
}
 8002a3a:	e022      	b.n	8002a82 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_TIM_Base_MspInit+0xa8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10c      	bne.n	8002a60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	61d3      	str	r3, [r2, #28]
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
}
 8002a5e:	e010      	b.n	8002a82 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_TIM_Base_MspInit+0xac>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d10b      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800

08002a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_TIM_MspPostInit+0x88>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d12f      	bne.n	8002b1c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_TIM_MspPostInit+0x8c>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_TIM_MspPostInit+0x8c>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_TIM_MspPostInit+0x8c>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_TIM_MspPostInit+0x8c>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <HAL_TIM_MspPostInit+0x8c>)
 8002ada:	f043 0308 	orr.w	r3, r3, #8
 8002ade:	6193      	str	r3, [r2, #24]
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_TIM_MspPostInit+0x8c>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aec:	23c0      	movs	r3, #192	; 0xc0
 8002aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	4619      	mov	r1, r3
 8002afe:	480b      	ldr	r0, [pc, #44]	; (8002b2c <HAL_TIM_MspPostInit+0x90>)
 8002b00:	f000 fb1a 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b04:	2303      	movs	r3, #3
 8002b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	4619      	mov	r1, r3
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <HAL_TIM_MspPostInit+0x94>)
 8002b18:	f000 fb0e 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010800 	.word	0x40010800
 8002b30:	40010c00 	.word	0x40010c00

08002b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_UART_MspInit+0x8c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d131      	bne.n	8002bb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_UART_MspInit+0x90>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_UART_MspInit+0x90>)
 8002b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_UART_MspInit+0x90>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_UART_MspInit+0x90>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_UART_MspInit+0x90>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_UART_MspInit+0x90>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4619      	mov	r1, r3
 8002b98:	480b      	ldr	r0, [pc, #44]	; (8002bc8 <HAL_UART_MspInit+0x94>)
 8002b9a:	f000 facd 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 0310 	add.w	r3, r7, #16
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <HAL_UART_MspInit+0x94>)
 8002bb4:	f000 fac0 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bb8:	bf00      	nop
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40010800 	.word	0x40010800

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <NMI_Handler+0x4>

08002bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <HardFault_Handler+0x4>

08002bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <MemManage_Handler+0x4>

08002bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c12:	f000 f967 	bl	8002ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <TIM2_IRQHandler+0x10>)
 8002c22:	f002 fb71 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000029c 	.word	0x2000029c

08002c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <TIM3_IRQHandler+0x10>)
 8002c36:	f002 fb67 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200002e4 	.word	0x200002e4

08002c44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <TIM4_IRQHandler+0x10>)
 8002c4a:	f002 fb5d 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000032c 	.word	0x2000032c

08002c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002c5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c60:	f000 fc06 	bl	8003470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c68:	f000 fc02 	bl	8003470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002c6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c70:	f000 fbfe 	bl	8003470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002c74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c78:	f000 fbfa 	bl	8003470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return 1;
 8002c84:	2301      	movs	r3, #1
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <_kill>:

int _kill(int pid, int sig)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c98:	f004 f938 	bl	8006f0c <__errno>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2216      	movs	r2, #22
 8002ca0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_exit>:

void _exit (int status)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffe7 	bl	8002c8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cc0:	e7fe      	b.n	8002cc0 <_exit+0x12>

08002cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e00a      	b.n	8002cea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cd4:	f3af 8000 	nop.w
 8002cd8:	4601      	mov	r1, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	60ba      	str	r2, [r7, #8]
 8002ce0:	b2ca      	uxtb	r2, r1
 8002ce2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	dbf0      	blt.n	8002cd4 <_read+0x12>
  }

  return len;
 8002cf2:	687b      	ldr	r3, [r7, #4]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e009      	b.n	8002d22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	60ba      	str	r2, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	dbf1      	blt.n	8002d0e <_write+0x12>
  }
  return len;
 8002d2a:	687b      	ldr	r3, [r7, #4]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_close>:

int _close(int file)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <_isatty>:

int _isatty(int file)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d70:	2301      	movs	r3, #1
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f004 f8a2 	bl	8006f0c <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20005000 	.word	0x20005000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	200005bc 	.word	0x200005bc
 8002dfc:	20000710 	.word	0x20000710

08002e00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e0c:	f7ff fff8 	bl	8002e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e10:	480b      	ldr	r0, [pc, #44]	; (8002e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e12:	490c      	ldr	r1, [pc, #48]	; (8002e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e14:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e28:	4c09      	ldr	r4, [pc, #36]	; (8002e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e36:	f004 f86f 	bl	8006f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e3a:	f7fe fd89 	bl	8001950 <main>
  bx lr
 8002e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e44:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e48:	0800943c 	.word	0x0800943c
  ldr r2, =_sbss
 8002e4c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002e50:	20000710 	.word	0x20000710

08002e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC1_2_IRQHandler>
	...

08002e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_Init+0x28>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_Init+0x28>)
 8002e62:	f043 0310 	orr.w	r3, r3, #16
 8002e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e68:	2003      	movs	r0, #3
 8002e6a:	f000 f923 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6e:	200f      	movs	r0, #15
 8002e70:	f000 f808 	bl	8002e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e74:	f7ff fd4a 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40022000 	.word	0x40022000

08002e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_InitTick+0x54>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_InitTick+0x58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f93b 	bl	800311e <HAL_SYSTICK_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00e      	b.n	8002ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d80a      	bhi.n	8002ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f000 f903 	bl	80030ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ec4:	4a06      	ldr	r2, [pc, #24]	; (8002ee0 <HAL_InitTick+0x5c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000010 	.word	0x20000010
 8002edc:	20000018 	.word	0x20000018
 8002ee0:	20000014 	.word	0x20000014

08002ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_IncTick+0x1c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_IncTick+0x20>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <HAL_IncTick+0x20>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	20000018 	.word	0x20000018
 8002f04:	200005c0 	.word	0x200005c0

08002f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f0c:	4b02      	ldr	r3, [pc, #8]	; (8002f18 <HAL_GetTick+0x10>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	200005c0 	.word	0x200005c0

08002f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <__NVIC_GetPriorityGrouping+0x18>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0307 	and.w	r3, r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0b      	blt.n	8002faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <__NVIC_EnableIRQ+0x34>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	bf28      	it	cs
 800302a:	2304      	movcs	r3, #4
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3304      	adds	r3, #4
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b03      	subs	r3, #3
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003080:	d301      	bcc.n	8003086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003082:	2301      	movs	r3, #1
 8003084:	e00f      	b.n	80030a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <SysTick_Config+0x40>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308e:	210f      	movs	r1, #15
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f7ff ff90 	bl	8002fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SysTick_Config+0x40>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SysTick_Config+0x40>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff2d 	bl	8002f1c <__NVIC_SetPriorityGrouping>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030dc:	f7ff ff42 	bl	8002f64 <__NVIC_GetPriorityGrouping>
 80030e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff90 	bl	800300c <NVIC_EncodePriority>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff5f 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff35 	bl	8002f80 <__NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ffa2 	bl	8003070 <SysTick_Config>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b08b      	sub	sp, #44	; 0x2c
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003146:	2300      	movs	r3, #0
 8003148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	e169      	b.n	8003420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800314c:	2201      	movs	r2, #1
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	429a      	cmp	r2, r3
 8003166:	f040 8158 	bne.w	800341a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4a9a      	ldr	r2, [pc, #616]	; (80033d8 <HAL_GPIO_Init+0x2a0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d05e      	beq.n	8003232 <HAL_GPIO_Init+0xfa>
 8003174:	4a98      	ldr	r2, [pc, #608]	; (80033d8 <HAL_GPIO_Init+0x2a0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d875      	bhi.n	8003266 <HAL_GPIO_Init+0x12e>
 800317a:	4a98      	ldr	r2, [pc, #608]	; (80033dc <HAL_GPIO_Init+0x2a4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d058      	beq.n	8003232 <HAL_GPIO_Init+0xfa>
 8003180:	4a96      	ldr	r2, [pc, #600]	; (80033dc <HAL_GPIO_Init+0x2a4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d86f      	bhi.n	8003266 <HAL_GPIO_Init+0x12e>
 8003186:	4a96      	ldr	r2, [pc, #600]	; (80033e0 <HAL_GPIO_Init+0x2a8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d052      	beq.n	8003232 <HAL_GPIO_Init+0xfa>
 800318c:	4a94      	ldr	r2, [pc, #592]	; (80033e0 <HAL_GPIO_Init+0x2a8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d869      	bhi.n	8003266 <HAL_GPIO_Init+0x12e>
 8003192:	4a94      	ldr	r2, [pc, #592]	; (80033e4 <HAL_GPIO_Init+0x2ac>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d04c      	beq.n	8003232 <HAL_GPIO_Init+0xfa>
 8003198:	4a92      	ldr	r2, [pc, #584]	; (80033e4 <HAL_GPIO_Init+0x2ac>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d863      	bhi.n	8003266 <HAL_GPIO_Init+0x12e>
 800319e:	4a92      	ldr	r2, [pc, #584]	; (80033e8 <HAL_GPIO_Init+0x2b0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d046      	beq.n	8003232 <HAL_GPIO_Init+0xfa>
 80031a4:	4a90      	ldr	r2, [pc, #576]	; (80033e8 <HAL_GPIO_Init+0x2b0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d85d      	bhi.n	8003266 <HAL_GPIO_Init+0x12e>
 80031aa:	2b12      	cmp	r3, #18
 80031ac:	d82a      	bhi.n	8003204 <HAL_GPIO_Init+0xcc>
 80031ae:	2b12      	cmp	r3, #18
 80031b0:	d859      	bhi.n	8003266 <HAL_GPIO_Init+0x12e>
 80031b2:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_GPIO_Init+0x80>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	08003233 	.word	0x08003233
 80031bc:	0800320d 	.word	0x0800320d
 80031c0:	0800321f 	.word	0x0800321f
 80031c4:	08003261 	.word	0x08003261
 80031c8:	08003267 	.word	0x08003267
 80031cc:	08003267 	.word	0x08003267
 80031d0:	08003267 	.word	0x08003267
 80031d4:	08003267 	.word	0x08003267
 80031d8:	08003267 	.word	0x08003267
 80031dc:	08003267 	.word	0x08003267
 80031e0:	08003267 	.word	0x08003267
 80031e4:	08003267 	.word	0x08003267
 80031e8:	08003267 	.word	0x08003267
 80031ec:	08003267 	.word	0x08003267
 80031f0:	08003267 	.word	0x08003267
 80031f4:	08003267 	.word	0x08003267
 80031f8:	08003267 	.word	0x08003267
 80031fc:	08003215 	.word	0x08003215
 8003200:	08003229 	.word	0x08003229
 8003204:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_GPIO_Init+0x2b4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800320a:	e02c      	b.n	8003266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	623b      	str	r3, [r7, #32]
          break;
 8003212:	e029      	b.n	8003268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	3304      	adds	r3, #4
 800321a:	623b      	str	r3, [r7, #32]
          break;
 800321c:	e024      	b.n	8003268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	3308      	adds	r3, #8
 8003224:	623b      	str	r3, [r7, #32]
          break;
 8003226:	e01f      	b.n	8003268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	330c      	adds	r3, #12
 800322e:	623b      	str	r3, [r7, #32]
          break;
 8003230:	e01a      	b.n	8003268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800323a:	2304      	movs	r3, #4
 800323c:	623b      	str	r3, [r7, #32]
          break;
 800323e:	e013      	b.n	8003268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003248:	2308      	movs	r3, #8
 800324a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	611a      	str	r2, [r3, #16]
          break;
 8003252:	e009      	b.n	8003268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003254:	2308      	movs	r3, #8
 8003256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	615a      	str	r2, [r3, #20]
          break;
 800325e:	e003      	b.n	8003268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003260:	2300      	movs	r3, #0
 8003262:	623b      	str	r3, [r7, #32]
          break;
 8003264:	e000      	b.n	8003268 <HAL_GPIO_Init+0x130>
          break;
 8003266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2bff      	cmp	r3, #255	; 0xff
 800326c:	d801      	bhi.n	8003272 <HAL_GPIO_Init+0x13a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	e001      	b.n	8003276 <HAL_GPIO_Init+0x13e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2bff      	cmp	r3, #255	; 0xff
 800327c:	d802      	bhi.n	8003284 <HAL_GPIO_Init+0x14c>
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	e002      	b.n	800328a <HAL_GPIO_Init+0x152>
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	3b08      	subs	r3, #8
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	210f      	movs	r1, #15
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	6a39      	ldr	r1, [r7, #32]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	431a      	orrs	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80b1 	beq.w	800341a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032b8:	4b4d      	ldr	r3, [pc, #308]	; (80033f0 <HAL_GPIO_Init+0x2b8>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	4a4c      	ldr	r2, [pc, #304]	; (80033f0 <HAL_GPIO_Init+0x2b8>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6193      	str	r3, [r2, #24]
 80032c4:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_GPIO_Init+0x2b8>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032d0:	4a48      	ldr	r2, [pc, #288]	; (80033f4 <HAL_GPIO_Init+0x2bc>)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a40      	ldr	r2, [pc, #256]	; (80033f8 <HAL_GPIO_Init+0x2c0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_GPIO_Init+0x1ec>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3f      	ldr	r2, [pc, #252]	; (80033fc <HAL_GPIO_Init+0x2c4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00d      	beq.n	8003320 <HAL_GPIO_Init+0x1e8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3e      	ldr	r2, [pc, #248]	; (8003400 <HAL_GPIO_Init+0x2c8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0x1e4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3d      	ldr	r2, [pc, #244]	; (8003404 <HAL_GPIO_Init+0x2cc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_GPIO_Init+0x1e0>
 8003314:	2303      	movs	r3, #3
 8003316:	e006      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 8003318:	2304      	movs	r3, #4
 800331a:	e004      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 800331c:	2302      	movs	r3, #2
 800331e:	e002      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 8003324:	2300      	movs	r3, #0
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	f002 0203 	and.w	r2, r2, #3
 800332c:	0092      	lsls	r2, r2, #2
 800332e:	4093      	lsls	r3, r2
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003336:	492f      	ldr	r1, [pc, #188]	; (80033f4 <HAL_GPIO_Init+0x2bc>)
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	492c      	ldr	r1, [pc, #176]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	43db      	mvns	r3, r3
 8003366:	4928      	ldr	r1, [pc, #160]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003368:	4013      	ands	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d006      	beq.n	8003386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003378:	4b23      	ldr	r3, [pc, #140]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	4922      	ldr	r1, [pc, #136]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
 8003384:	e006      	b.n	8003394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	43db      	mvns	r3, r3
 800338e:	491e      	ldr	r1, [pc, #120]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003390:	4013      	ands	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4918      	ldr	r1, [pc, #96]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
 80033ac:	e006      	b.n	80033bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	4914      	ldr	r1, [pc, #80]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d021      	beq.n	800340c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
 80033d4:	e021      	b.n	800341a <HAL_GPIO_Init+0x2e2>
 80033d6:	bf00      	nop
 80033d8:	10320000 	.word	0x10320000
 80033dc:	10310000 	.word	0x10310000
 80033e0:	10220000 	.word	0x10220000
 80033e4:	10210000 	.word	0x10210000
 80033e8:	10120000 	.word	0x10120000
 80033ec:	10110000 	.word	0x10110000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40010800 	.word	0x40010800
 80033fc:	40010c00 	.word	0x40010c00
 8003400:	40011000 	.word	0x40011000
 8003404:	40011400 	.word	0x40011400
 8003408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_GPIO_Init+0x304>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	43db      	mvns	r3, r3
 8003414:	4909      	ldr	r1, [pc, #36]	; (800343c <HAL_GPIO_Init+0x304>)
 8003416:	4013      	ands	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	3301      	adds	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f47f ae8e 	bne.w	800314c <HAL_GPIO_Init+0x14>
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	372c      	adds	r7, #44	; 0x2c
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40010400 	.word	0x40010400

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f9d8 	bl	8002844 <HAL_GPIO_EXTI_Callback>
  }
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40010400 	.word	0x40010400

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e12b      	b.n	800370a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fa52 	bl	8002970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003504:	f001 fd1e 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8003508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a81      	ldr	r2, [pc, #516]	; (8003714 <HAL_I2C_Init+0x274>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d807      	bhi.n	8003524 <HAL_I2C_Init+0x84>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a80      	ldr	r2, [pc, #512]	; (8003718 <HAL_I2C_Init+0x278>)
 8003518:	4293      	cmp	r3, r2
 800351a:	bf94      	ite	ls
 800351c:	2301      	movls	r3, #1
 800351e:	2300      	movhi	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e006      	b.n	8003532 <HAL_I2C_Init+0x92>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a7d      	ldr	r2, [pc, #500]	; (800371c <HAL_I2C_Init+0x27c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0e7      	b.n	800370a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a78      	ldr	r2, [pc, #480]	; (8003720 <HAL_I2C_Init+0x280>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0c9b      	lsrs	r3, r3, #18
 8003544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a6a      	ldr	r2, [pc, #424]	; (8003714 <HAL_I2C_Init+0x274>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d802      	bhi.n	8003574 <HAL_I2C_Init+0xd4>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3301      	adds	r3, #1
 8003572:	e009      	b.n	8003588 <HAL_I2C_Init+0xe8>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a69      	ldr	r2, [pc, #420]	; (8003724 <HAL_I2C_Init+0x284>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	3301      	adds	r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800359a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	495c      	ldr	r1, [pc, #368]	; (8003714 <HAL_I2C_Init+0x274>)
 80035a4:	428b      	cmp	r3, r1
 80035a6:	d819      	bhi.n	80035dc <HAL_I2C_Init+0x13c>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e59      	subs	r1, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b6:	1c59      	adds	r1, r3, #1
 80035b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035bc:	400b      	ands	r3, r1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_I2C_Init+0x138>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e59      	subs	r1, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	e051      	b.n	800367c <HAL_I2C_Init+0x1dc>
 80035d8:	2304      	movs	r3, #4
 80035da:	e04f      	b.n	800367c <HAL_I2C_Init+0x1dc>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <HAL_I2C_Init+0x168>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	440b      	add	r3, r1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e012      	b.n	800362e <HAL_I2C_Init+0x18e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1e58      	subs	r0, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	0099      	lsls	r1, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	fbb0 f3f3 	udiv	r3, r0, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Init+0x196>
 8003632:	2301      	movs	r3, #1
 8003634:	e022      	b.n	800367c <HAL_I2C_Init+0x1dc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10e      	bne.n	800365c <HAL_I2C_Init+0x1bc>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1e58      	subs	r0, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	440b      	add	r3, r1
 800364c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	e00f      	b.n	800367c <HAL_I2C_Init+0x1dc>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	0099      	lsls	r1, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	6809      	ldr	r1, [r1, #0]
 8003680:	4313      	orrs	r3, r2
 8003682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6911      	ldr	r1, [r2, #16]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68d2      	ldr	r2, [r2, #12]
 80036b6:	4311      	orrs	r1, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	430b      	orrs	r3, r1
 80036be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	000186a0 	.word	0x000186a0
 8003718:	001e847f 	.word	0x001e847f
 800371c:	003d08ff 	.word	0x003d08ff
 8003720:	431bde83 	.word	0x431bde83
 8003724:	10624dd3 	.word	0x10624dd3

08003728 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003742:	f7ff fbe1 	bl	8002f08 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b20      	cmp	r3, #32
 8003752:	f040 80d9 	bne.w	8003908 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2319      	movs	r3, #25
 800375c:	2201      	movs	r2, #1
 800375e:	496d      	ldr	r1, [pc, #436]	; (8003914 <HAL_I2C_Mem_Write+0x1ec>)
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fdef 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
 800376e:	e0cc      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_I2C_Mem_Write+0x56>
 800377a:	2302      	movs	r3, #2
 800377c:	e0c5      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d007      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2221      	movs	r2, #33	; 0x21
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a4d      	ldr	r2, [pc, #308]	; (8003918 <HAL_I2C_Mem_Write+0x1f0>)
 80037e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e6:	88f8      	ldrh	r0, [r7, #6]
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	8979      	ldrh	r1, [r7, #10]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	4603      	mov	r3, r0
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fc26 	bl	8004048 <I2C_RequestMemoryWrite>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d052      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e081      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 feb4 	bl	8004578 <I2C_WaitOnTXEFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b04      	cmp	r3, #4
 800381c:	d107      	bne.n	800382e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e06b      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d11b      	bne.n	80038a8 <HAL_I2C_Mem_Write+0x180>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1aa      	bne.n	8003806 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fea7 	bl	8004608 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d107      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e016      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00100002 	.word	0x00100002
 8003918:	ffff0000 	.word	0xffff0000

0800391c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800393a:	f7ff fae5 	bl	8002f08 <HAL_GetTick>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b20      	cmp	r3, #32
 800394a:	f040 8244 	bne.w	8003dd6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2319      	movs	r3, #25
 8003954:	2201      	movs	r2, #1
 8003956:	4982      	ldr	r1, [pc, #520]	; (8003b60 <HAL_I2C_Mem_Read+0x244>)
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fcf3 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
 8003966:	e237      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_I2C_Mem_Read+0x5a>
 8003972:	2302      	movs	r3, #2
 8003974:	e230      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d007      	beq.n	800399c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2222      	movs	r2, #34	; 0x22
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a62      	ldr	r2, [pc, #392]	; (8003b64 <HAL_I2C_Mem_Read+0x248>)
 80039dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039de:	88f8      	ldrh	r0, [r7, #6]
 80039e0:	893a      	ldrh	r2, [r7, #8]
 80039e2:	8979      	ldrh	r1, [r7, #10]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4603      	mov	r3, r0
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fbc0 	bl	8004174 <I2C_RequestMemoryRead>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e1ec      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d113      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e1c0      	b.n	8003db0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d11e      	bne.n	8003a74 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a46:	b672      	cpsid	i
}
 8003a48:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a70:	b662      	cpsie	i
}
 8003a72:	e035      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d11e      	bne.n	8003aba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a8c:	b672      	cpsid	i
}
 8003a8e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ab6:	b662      	cpsie	i
}
 8003ab8:	e012      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ae0:	e166      	b.n	8003db0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	f200 811f 	bhi.w	8003d2a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d123      	bne.n	8003b3c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fdcd 	bl	8004698 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e167      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b3a:	e139      	b.n	8003db0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d152      	bne.n	8003bea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4906      	ldr	r1, [pc, #24]	; (8003b68 <HAL_I2C_Mem_Read+0x24c>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fbf8 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e13c      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
 8003b5e:	bf00      	nop
 8003b60:	00100002 	.word	0x00100002
 8003b64:	ffff0000 	.word	0xffff0000
 8003b68:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b6c:	b672      	cpsid	i
}
 8003b6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bb2:	b662      	cpsie	i
}
 8003bb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be8:	e0e2      	b.n	8003db0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	497b      	ldr	r1, [pc, #492]	; (8003de0 <HAL_I2C_Mem_Read+0x4c4>)
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fba5 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0e9      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c14:	b672      	cpsid	i
}
 8003c16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c4a:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_I2C_Mem_Read+0x4c8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	08db      	lsrs	r3, r3, #3
 8003c50:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_I2C_Mem_Read+0x4cc>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0a1a      	lsrs	r2, r3, #8
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00da      	lsls	r2, r3, #3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d118      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c92:	b662      	cpsie	i
}
 8003c94:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e09a      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d1d9      	bne.n	8003c64 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cf2:	b662      	cpsie	i
}
 8003cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d28:	e042      	b.n	8003db0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fcb2 	bl	8004698 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e04c      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d118      	bne.n	8003db0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f47f ae94 	bne.w	8003ae2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	00010004 	.word	0x00010004
 8003de4:	20000010 	.word	0x20000010
 8003de8:	14f8b589 	.word	0x14f8b589

08003dec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003dfc:	f7ff f884 	bl	8002f08 <HAL_GetTick>
 8003e00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	f040 8111 	bne.w	8004036 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2319      	movs	r3, #25
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4988      	ldr	r1, [pc, #544]	; (8004040 <HAL_I2C_IsDeviceReady+0x254>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa90 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e104      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2C_IsDeviceReady+0x50>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0fd      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x24c>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d007      	beq.n	8003e62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2224      	movs	r2, #36	; 0x24
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a70      	ldr	r2, [pc, #448]	; (8004044 <HAL_I2C_IsDeviceReady+0x258>)
 8003e84:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fa4e 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebc:	d103      	bne.n	8003ec6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0b6      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eca:	897b      	ldrh	r3, [r7, #10]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003eda:	f7ff f815 	bl	8002f08 <HAL_GetTick>
 8003ede:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f0e:	e025      	b.n	8003f5c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fe fffa 	bl	8002f08 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <HAL_I2C_IsDeviceReady+0x13a>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	22a0      	movs	r2, #160	; 0xa0
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2ba0      	cmp	r3, #160	; 0xa0
 8003f66:	d005      	beq.n	8003f74 <HAL_I2C_IsDeviceReady+0x188>
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_I2C_IsDeviceReady+0x188>
 8003f6e:	7dbb      	ldrb	r3, [r7, #22]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0cd      	beq.n	8003f10 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d129      	bne.n	8003fde <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	2319      	movs	r3, #25
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4921      	ldr	r1, [pc, #132]	; (8004040 <HAL_I2C_IsDeviceReady+0x254>)
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f9c2 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e036      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e02c      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ff6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2319      	movs	r3, #25
 8003ffe:	2201      	movs	r2, #1
 8004000:	490f      	ldr	r1, [pc, #60]	; (8004040 <HAL_I2C_IsDeviceReady+0x254>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f99e 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e012      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3301      	adds	r3, #1
 8004016:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	f4ff af32 	bcc.w	8003e86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	00100002 	.word	0x00100002
 8004044:	ffff0000 	.word	0xffff0000

08004048 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	817b      	strh	r3, [r7, #10]
 800405a:	460b      	mov	r3, r1
 800405c:	813b      	strh	r3, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2200      	movs	r2, #0
 800407a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f960 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004098:	d103      	bne.n	80040a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e05f      	b.n	8004166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	6a3a      	ldr	r2, [r7, #32]
 80040ba:	492d      	ldr	r1, [pc, #180]	; (8004170 <I2C_RequestMemoryWrite+0x128>)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f9bb 	bl	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e04c      	b.n	8004166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	6a39      	ldr	r1, [r7, #32]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa46 	bl	8004578 <I2C_WaitOnTXEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d107      	bne.n	800410a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e02b      	b.n	8004166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e021      	b.n	8004164 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	b29b      	uxth	r3, r3
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	6a39      	ldr	r1, [r7, #32]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fa20 	bl	8004578 <I2C_WaitOnTXEFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b04      	cmp	r3, #4
 8004144:	d107      	bne.n	8004156 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e005      	b.n	8004166 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415a:	893b      	ldrh	r3, [r7, #8]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	00010002 	.word	0x00010002

08004174 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	4608      	mov	r0, r1
 800417e:	4611      	mov	r1, r2
 8004180:	461a      	mov	r2, r3
 8004182:	4603      	mov	r3, r0
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	460b      	mov	r3, r1
 8004188:	813b      	strh	r3, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f8c2 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d103      	bne.n	80041de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0aa      	b.n	8004338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	4952      	ldr	r1, [pc, #328]	; (8004340 <I2C_RequestMemoryRead+0x1cc>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f91d 	bl	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e097      	b.n	8004338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004220:	6a39      	ldr	r1, [r7, #32]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f9a8 	bl	8004578 <I2C_WaitOnTXEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b04      	cmp	r3, #4
 8004234:	d107      	bne.n	8004246 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e076      	b.n	8004338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004250:	893b      	ldrh	r3, [r7, #8]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	611a      	str	r2, [r3, #16]
 800425a:	e021      	b.n	80042a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800425c:	893b      	ldrh	r3, [r7, #8]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	b29b      	uxth	r3, r3
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426c:	6a39      	ldr	r1, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f982 	bl	8004578 <I2C_WaitOnTXEFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b04      	cmp	r3, #4
 8004280:	d107      	bne.n	8004292 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e050      	b.n	8004338 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004296:	893b      	ldrh	r3, [r7, #8]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a2:	6a39      	ldr	r1, [r7, #32]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f967 	bl	8004578 <I2C_WaitOnTXEFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00d      	beq.n	80042cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d107      	bne.n	80042c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e035      	b.n	8004338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f82b 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004302:	d103      	bne.n	800430c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e013      	b.n	8004338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004310:	897b      	ldrh	r3, [r7, #10]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	6a3a      	ldr	r2, [r7, #32]
 8004324:	4906      	ldr	r1, [pc, #24]	; (8004340 <I2C_RequestMemoryRead+0x1cc>)
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f886 	bl	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	00010002 	.word	0x00010002

08004344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004354:	e048      	b.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d044      	beq.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fe fdd3 	bl	8002f08 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d139      	bne.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10d      	bne.n	800439a <I2C_WaitOnFlagUntilTimeout+0x56>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	43da      	mvns	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	e00c      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	43da      	mvns	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d116      	bne.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e023      	b.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	0c1b      	lsrs	r3, r3, #16
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10d      	bne.n	800440e <I2C_WaitOnFlagUntilTimeout+0xca>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	e00c      	b.n	8004428 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	43da      	mvns	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	429a      	cmp	r2, r3
 800442c:	d093      	beq.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004446:	e071      	b.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d123      	bne.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004466:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004470:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f043 0204 	orr.w	r2, r3, #4
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e067      	b.n	8004570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d041      	beq.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fe fd2e 	bl	8002f08 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d136      	bne.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10c      	bne.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e00b      	b.n	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	43da      	mvns	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e021      	b.n	8004570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10c      	bne.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	43da      	mvns	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf14      	ite	ne
 8004548:	2301      	movne	r3, #1
 800454a:	2300      	moveq	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e00b      	b.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	43da      	mvns	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4013      	ands	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	f47f af6d 	bne.w	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004584:	e034      	b.n	80045f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f8e3 	bl	8004752 <I2C_IsAcknowledgeFailed>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e034      	b.n	8004600 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d028      	beq.n	80045f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fe fcb3 	bl	8002f08 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11d      	bne.n	80045f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d016      	beq.n	80045f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d1c3      	bne.n	8004586 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004614:	e034      	b.n	8004680 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f89b 	bl	8004752 <I2C_IsAcknowledgeFailed>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e034      	b.n	8004690 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d028      	beq.n	8004680 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7fe fc6b 	bl	8002f08 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11d      	bne.n	8004680 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b04      	cmp	r3, #4
 8004650:	d016      	beq.n	8004680 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e007      	b.n	8004690 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b04      	cmp	r3, #4
 800468c:	d1c3      	bne.n	8004616 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a4:	e049      	b.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d119      	bne.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0210 	mvn.w	r2, #16
 80046bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e030      	b.n	800474a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e8:	f7fe fc0e 	bl	8002f08 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d302      	bcc.n	80046fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11d      	bne.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d016      	beq.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e007      	b.n	800474a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d1ae      	bne.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004768:	d11b      	bne.n	80047a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004772:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0204 	orr.w	r2, r3, #4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e272      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8087 	beq.w	80048de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d0:	4b92      	ldr	r3, [pc, #584]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d00c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047dc:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d112      	bne.n	800480e <HAL_RCC_OscConfig+0x5e>
 80047e8:	4b8c      	ldr	r3, [pc, #560]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d10b      	bne.n	800480e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f6:	4b89      	ldr	r3, [pc, #548]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d06c      	beq.n	80048dc <HAL_RCC_OscConfig+0x12c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d168      	bne.n	80048dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e24c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d106      	bne.n	8004826 <HAL_RCC_OscConfig+0x76>
 8004818:	4b80      	ldr	r3, [pc, #512]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7f      	ldr	r2, [pc, #508]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e02e      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x98>
 800482e:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7a      	ldr	r2, [pc, #488]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a77      	ldr	r2, [pc, #476]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e01d      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0xbc>
 8004852:	4b72      	ldr	r3, [pc, #456]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a71      	ldr	r2, [pc, #452]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6e      	ldr	r2, [pc, #440]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 800486c:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a6a      	ldr	r2, [pc, #424]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fe fb3c 	bl	8002f08 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7fe fb38 	bl	8002f08 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e200      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xe4>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fe fb28 	bl	8002f08 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fe fb24 	bl	8002f08 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1ec      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x10c>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d063      	beq.n	80049b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d11c      	bne.n	800493c <HAL_RCC_OscConfig+0x18c>
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_RCC_OscConfig+0x176>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e1c0      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4939      	ldr	r1, [pc, #228]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	e03a      	b.n	80049b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004944:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fe fadd 	bl	8002f08 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004952:	f7fe fad9 	bl	8002f08 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e1a1      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004964:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4927      	ldr	r1, [pc, #156]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	e015      	b.n	80049b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fe fabc 	bl	8002f08 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fe fab8 	bl	8002f08 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e180      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d03a      	beq.n	8004a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d019      	beq.n	80049fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_RCC_OscConfig+0x274>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049cc:	f7fe fa9c 	bl	8002f08 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d4:	f7fe fa98 	bl	8002f08 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e160      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049f2:	2001      	movs	r0, #1
 80049f4:	f000 face 	bl	8004f94 <RCC_Delay>
 80049f8:	e01c      	b.n	8004a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_RCC_OscConfig+0x274>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a00:	f7fe fa82 	bl	8002f08 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a08:	f7fe fa7e 	bl	8002f08 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d908      	bls.n	8004a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e146      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	42420000 	.word	0x42420000
 8004a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a28:	4b92      	ldr	r3, [pc, #584]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e9      	bne.n	8004a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a6 	beq.w	8004b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a46:	4b8b      	ldr	r3, [pc, #556]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	4b88      	ldr	r3, [pc, #544]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4a87      	ldr	r2, [pc, #540]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	61d3      	str	r3, [r2, #28]
 8004a5e:	4b85      	ldr	r3, [pc, #532]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6e:	4b82      	ldr	r3, [pc, #520]	; (8004c78 <HAL_RCC_OscConfig+0x4c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d118      	bne.n	8004aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a7a:	4b7f      	ldr	r3, [pc, #508]	; (8004c78 <HAL_RCC_OscConfig+0x4c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7e      	ldr	r2, [pc, #504]	; (8004c78 <HAL_RCC_OscConfig+0x4c8>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a86:	f7fe fa3f 	bl	8002f08 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8e:	f7fe fa3b 	bl	8002f08 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b64      	cmp	r3, #100	; 0x64
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e103      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa0:	4b75      	ldr	r3, [pc, #468]	; (8004c78 <HAL_RCC_OscConfig+0x4c8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x312>
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4a6e      	ldr	r2, [pc, #440]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6213      	str	r3, [r2, #32]
 8004ac0:	e02d      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x334>
 8004aca:	4b6a      	ldr	r3, [pc, #424]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4a69      	ldr	r2, [pc, #420]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6213      	str	r3, [r2, #32]
 8004ad6:	4b67      	ldr	r3, [pc, #412]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4a66      	ldr	r2, [pc, #408]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004adc:	f023 0304 	bic.w	r3, r3, #4
 8004ae0:	6213      	str	r3, [r2, #32]
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x356>
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	4a60      	ldr	r2, [pc, #384]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	6213      	str	r3, [r2, #32]
 8004af8:	4b5e      	ldr	r3, [pc, #376]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4a5d      	ldr	r2, [pc, #372]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6213      	str	r3, [r2, #32]
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004b06:	4b5b      	ldr	r3, [pc, #364]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a5a      	ldr	r2, [pc, #360]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6213      	str	r3, [r2, #32]
 8004b12:	4b58      	ldr	r3, [pc, #352]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a57      	ldr	r2, [pc, #348]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b26:	f7fe f9ef 	bl	8002f08 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fe f9eb 	bl	8002f08 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0b1      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCC_OscConfig+0x37e>
 8004b50:	e014      	b.n	8004b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fe f9d9 	bl	8002f08 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fe f9d5 	bl	8002f08 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e09b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b3c      	ldr	r3, [pc, #240]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8087 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b98:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d061      	beq.n	8004c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d146      	bne.n	8004c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b33      	ldr	r3, [pc, #204]	; (8004c7c <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fe f9a9 	bl	8002f08 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bba:	f7fe f9a5 	bl	8002f08 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e06d      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bcc:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d108      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4921      	ldr	r1, [pc, #132]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf4:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a19      	ldr	r1, [r3, #32]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	430b      	orrs	r3, r1
 8004c06:	491b      	ldr	r1, [pc, #108]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x4cc>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fe f979 	bl	8002f08 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fe f975 	bl	8002f08 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e03d      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x46a>
 8004c38:	e035      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_RCC_OscConfig+0x4cc>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe f962 	bl	8002f08 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c48:	f7fe f95e 	bl	8002f08 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e026      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x498>
 8004c66:	e01e      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d107      	bne.n	8004c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e019      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40007000 	.word	0x40007000
 8004c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_OscConfig+0x500>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0d0      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d910      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b67      	ldr	r3, [pc, #412]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 0207 	bic.w	r2, r3, #7
 8004cde:	4965      	ldr	r1, [pc, #404]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b63      	ldr	r3, [pc, #396]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0b8      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d10:	4b59      	ldr	r3, [pc, #356]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4a58      	ldr	r2, [pc, #352]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d28:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b50      	ldr	r3, [pc, #320]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	494d      	ldr	r1, [pc, #308]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d040      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d115      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e07f      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e073      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d82:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e06b      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4936      	ldr	r1, [pc, #216]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da4:	f7fe f8b0 	bl	8002f08 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fe f8ac 	bl	8002f08 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e053      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 020c 	and.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1eb      	bne.n	8004dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d210      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 0207 	bic.w	r2, r3, #7
 8004dea:	4922      	ldr	r1, [pc, #136]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e032      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4916      	ldr	r1, [pc, #88]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	490e      	ldr	r1, [pc, #56]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e42:	f000 f821 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8004e46:	4602      	mov	r2, r0
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	490a      	ldr	r1, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e54:	5ccb      	ldrb	r3, [r1, r3]
 8004e56:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1cc>)
 8004e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1d0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe f80e 	bl	8002e84 <HAL_InitTick>

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40022000 	.word	0x40022000
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	0800909c 	.word	0x0800909c
 8004e80:	20000010 	.word	0x20000010
 8004e84:	20000014 	.word	0x20000014

08004e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d002      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x36>
 8004eb6:	e027      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004eba:	613b      	str	r3, [r7, #16]
      break;
 8004ebc:	e027      	b.n	8004f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	0c9b      	lsrs	r3, r3, #18
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ec8:	5cd3      	ldrb	r3, [r2, r3]
 8004eca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	0c5b      	lsrs	r3, r3, #17
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ee2:	5cd3      	ldrb	r3, [r2, r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004eea:	fb03 f202 	mul.w	r2, r3, r2
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e004      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	613b      	str	r3, [r7, #16]
      break;
 8004f06:	e002      	b.n	8004f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f0a:	613b      	str	r3, [r7, #16]
      break;
 8004f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0e:	693b      	ldr	r3, [r7, #16]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	007a1200 	.word	0x007a1200
 8004f24:	080090b4 	.word	0x080090b4
 8004f28:	080090c4 	.word	0x080090c4
 8004f2c:	003d0900 	.word	0x003d0900

08004f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f34:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f36:	681b      	ldr	r3, [r3, #0]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	20000010 	.word	0x20000010

08004f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f48:	f7ff fff2 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4903      	ldr	r1, [pc, #12]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	080090ac 	.word	0x080090ac

08004f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f70:	f7ff ffde 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	0adb      	lsrs	r3, r3, #11
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4903      	ldr	r1, [pc, #12]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	080090ac 	.word	0x080090ac

08004f94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <RCC_Delay+0x34>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <RCC_Delay+0x38>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	0a5b      	lsrs	r3, r3, #9
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fb0:	bf00      	nop
  }
  while (Delay --);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	60fa      	str	r2, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f9      	bne.n	8004fb0 <RCC_Delay+0x1c>
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr
 8004fc8:	20000010 	.word	0x20000010
 8004fcc:	10624dd3 	.word	0x10624dd3

08004fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e041      	b.n	8005066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fd fcf8 	bl	80029ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fc30 	bl	8005874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	d001      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e03a      	b.n	80050fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_TIM_Base_Start_IT+0x98>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x58>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d009      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x58>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a14      	ldr	r2, [pc, #80]	; (800510c <HAL_TIM_Base_Start_IT+0x9c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x58>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <HAL_TIM_Base_Start_IT+0xa0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d111      	bne.n	80050ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b06      	cmp	r3, #6
 80050d8:	d010      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	e007      	b.n	80050fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800

08005114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e041      	b.n	80051aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f839 	bl	80051b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f000 fb8e 	bl	8005874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <HAL_TIM_PWM_Start+0x24>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e022      	b.n	800522e <HAL_TIM_PWM_Start+0x6a>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d109      	bne.n	8005202 <HAL_TIM_PWM_Start+0x3e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	bf14      	ite	ne
 80051fa:	2301      	movne	r3, #1
 80051fc:	2300      	moveq	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e015      	b.n	800522e <HAL_TIM_PWM_Start+0x6a>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d109      	bne.n	800521c <HAL_TIM_PWM_Start+0x58>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	e008      	b.n	800522e <HAL_TIM_PWM_Start+0x6a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e05e      	b.n	80052f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0x82>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005244:	e013      	b.n	800526e <HAL_TIM_PWM_Start+0xaa>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b04      	cmp	r3, #4
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0x92>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	e00b      	b.n	800526e <HAL_TIM_PWM_Start+0xaa>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0xa2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005264:	e003      	b.n	800526e <HAL_TIM_PWM_Start+0xaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2201      	movs	r2, #1
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fd7c 	bl	8005d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <HAL_TIM_PWM_Start+0x138>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d107      	bne.n	8005296 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_TIM_PWM_Start+0x138>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_TIM_PWM_Start+0xfa>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d009      	beq.n	80052be <HAL_TIM_PWM_Start+0xfa>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a14      	ldr	r2, [pc, #80]	; (8005300 <HAL_TIM_PWM_Start+0x13c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIM_PWM_Start+0xfa>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a12      	ldr	r2, [pc, #72]	; (8005304 <HAL_TIM_PWM_Start+0x140>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d111      	bne.n	80052e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d010      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e0:	e007      	b.n	80052f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800

08005308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0202 	mvn.w	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa76 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa69 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fa78 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0204 	mvn.w	r2, #4
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa4c 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fa3f 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fa4e 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0208 	mvn.w	r2, #8
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2204      	movs	r2, #4
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fa22 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fa15 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa24 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0210 	mvn.w	r2, #16
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2208      	movs	r2, #8
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9f8 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f9eb 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f9fa 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0201 	mvn.w	r2, #1
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc ffba 	bl	8002400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fce9 	bl	8005e8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9be 	bl	8005860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0220 	mvn.w	r2, #32
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fcb4 	bl	8005e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005532:	2302      	movs	r3, #2
 8005534:	e0ae      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b0c      	cmp	r3, #12
 8005542:	f200 809f 	bhi.w	8005684 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005581 	.word	0x08005581
 8005550:	08005685 	.word	0x08005685
 8005554:	08005685 	.word	0x08005685
 8005558:	08005685 	.word	0x08005685
 800555c:	080055c1 	.word	0x080055c1
 8005560:	08005685 	.word	0x08005685
 8005564:	08005685 	.word	0x08005685
 8005568:	08005685 	.word	0x08005685
 800556c:	08005603 	.word	0x08005603
 8005570:	08005685 	.word	0x08005685
 8005574:	08005685 	.word	0x08005685
 8005578:	08005685 	.word	0x08005685
 800557c:	08005643 	.word	0x08005643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f9d6 	bl	8005938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6999      	ldr	r1, [r3, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
      break;
 80055be:	e064      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fa1c 	bl	8005a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6999      	ldr	r1, [r3, #24]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	619a      	str	r2, [r3, #24]
      break;
 8005600:	e043      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fa65 	bl	8005ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0208 	orr.w	r2, r2, #8
 800561c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0204 	bic.w	r2, r2, #4
 800562c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	61da      	str	r2, [r3, #28]
      break;
 8005640:	e023      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 faaf 	bl	8005bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69d9      	ldr	r1, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	021a      	lsls	r2, r3, #8
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	61da      	str	r2, [r3, #28]
      break;
 8005682:	e002      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	75fb      	strb	r3, [r7, #23]
      break;
 8005688:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e0b4      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x186>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f0:	d03e      	beq.n	8005770 <HAL_TIM_ConfigClockSource+0xd4>
 80056f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f6:	f200 8087 	bhi.w	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 80056fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fe:	f000 8086 	beq.w	800580e <HAL_TIM_ConfigClockSource+0x172>
 8005702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005706:	d87f      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 8005708:	2b70      	cmp	r3, #112	; 0x70
 800570a:	d01a      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0xa6>
 800570c:	2b70      	cmp	r3, #112	; 0x70
 800570e:	d87b      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 8005710:	2b60      	cmp	r3, #96	; 0x60
 8005712:	d050      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005714:	2b60      	cmp	r3, #96	; 0x60
 8005716:	d877      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 8005718:	2b50      	cmp	r3, #80	; 0x50
 800571a:	d03c      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0xfa>
 800571c:	2b50      	cmp	r3, #80	; 0x50
 800571e:	d873      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d058      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d86f      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b30      	cmp	r3, #48	; 0x30
 800572a:	d064      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	2b30      	cmp	r3, #48	; 0x30
 800572e:	d86b      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b20      	cmp	r3, #32
 8005732:	d060      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d867      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d05c      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0x15a>
 800573c:	2b10      	cmp	r3, #16
 800573e:	d05a      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005740:	e062      	b.n	8005808 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005752:	f000 faf0 	bl	8005d36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	609a      	str	r2, [r3, #8]
      break;
 800576e:	e04f      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005780:	f000 fad9 	bl	8005d36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005792:	609a      	str	r2, [r3, #8]
      break;
 8005794:	e03c      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 fa50 	bl	8005c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2150      	movs	r1, #80	; 0x50
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 faa7 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e02c      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c2:	461a      	mov	r2, r3
 80057c4:	f000 fa6e 	bl	8005ca4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2160      	movs	r1, #96	; 0x60
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fa97 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 80057d4:	e01c      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	461a      	mov	r2, r3
 80057e4:	f000 fa30 	bl	8005c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2140      	movs	r1, #64	; 0x40
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fa87 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 80057f4:	e00c      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4619      	mov	r1, r3
 8005800:	4610      	mov	r0, r2
 8005802:	f000 fa7e 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005806:	e003      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
      break;
 800580c:	e000      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800580e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005820:	7bfb      	ldrb	r3, [r7, #15]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
	...

08005874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a29      	ldr	r2, [pc, #164]	; (800592c <TIM_Base_SetConfig+0xb8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00b      	beq.n	80058a4 <TIM_Base_SetConfig+0x30>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d007      	beq.n	80058a4 <TIM_Base_SetConfig+0x30>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a26      	ldr	r2, [pc, #152]	; (8005930 <TIM_Base_SetConfig+0xbc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_Base_SetConfig+0x30>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a25      	ldr	r2, [pc, #148]	; (8005934 <TIM_Base_SetConfig+0xc0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d108      	bne.n	80058b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1c      	ldr	r2, [pc, #112]	; (800592c <TIM_Base_SetConfig+0xb8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <TIM_Base_SetConfig+0x62>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d007      	beq.n	80058d6 <TIM_Base_SetConfig+0x62>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a19      	ldr	r2, [pc, #100]	; (8005930 <TIM_Base_SetConfig+0xbc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_Base_SetConfig+0x62>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a18      	ldr	r2, [pc, #96]	; (8005934 <TIM_Base_SetConfig+0xc0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d108      	bne.n	80058e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a07      	ldr	r2, [pc, #28]	; (800592c <TIM_Base_SetConfig+0xb8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d103      	bne.n	800591c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	615a      	str	r2, [r3, #20]
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800

08005938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f023 0201 	bic.w	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0302 	bic.w	r3, r3, #2
 8005980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <TIM_OC1_SetConfig+0xc8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10c      	bne.n	80059ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0308 	bic.w	r3, r3, #8
 800599a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <TIM_OC1_SetConfig+0xc8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d111      	bne.n	80059da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40012c00 	.word	0x40012c00

08005a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f023 0210 	bic.w	r2, r3, #16
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0320 	bic.w	r3, r3, #32
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <TIM_OC2_SetConfig+0xd0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10d      	bne.n	8005a80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <TIM_OC2_SetConfig+0xd0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d113      	bne.n	8005ab0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr
 8005ad4:	40012c00 	.word	0x40012c00

08005ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <TIM_OC3_SetConfig+0xd0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10d      	bne.n	8005b52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <TIM_OC3_SetConfig+0xd0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d113      	bne.n	8005b82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	621a      	str	r2, [r3, #32]
}
 8005b9c:	bf00      	nop
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00

08005bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a0f      	ldr	r2, [pc, #60]	; (8005c44 <TIM_OC4_SetConfig+0x98>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d109      	bne.n	8005c20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	019b      	lsls	r3, r3, #6
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	40012c00 	.word	0x40012c00

08005c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 030a 	bic.w	r3, r3, #10
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0210 	bic.w	r2, r3, #16
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	031b      	lsls	r3, r3, #12
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	621a      	str	r2, [r3, #32]
}
 8005cf8:	bf00      	nop
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f043 0307 	orr.w	r3, r3, #7
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	021a      	lsls	r2, r3, #8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	609a      	str	r2, [r3, #8]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2201      	movs	r2, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	43db      	mvns	r3, r3
 8005d96:	401a      	ands	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dac:	431a      	orrs	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e046      	b.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e20:	d009      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a10      	ldr	r2, [pc, #64]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d10c      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800

08005e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fc fe36 	bl	8002b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2224      	movs	r2, #36	; 0x24
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f9af 	bl	8006244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08a      	sub	sp, #40	; 0x28
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d16d      	bne.n	8006038 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_UART_Transmit+0x2c>
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e066      	b.n	800603a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2221      	movs	r2, #33	; 0x21
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f7a:	f7fc ffc5 	bl	8002f08 <HAL_GetTick>
 8005f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d108      	bne.n	8005fa8 <HAL_UART_Transmit+0x6c>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	e003      	b.n	8005fb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fb0:	e02a      	b.n	8006008 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2180      	movs	r1, #128	; 0x80
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f8d2 	bl	8006166 <UART_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e036      	b.n	800603a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e007      	b.n	8005ffa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1cf      	bne.n	8005fb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	2140      	movs	r1, #64	; 0x40
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f8a2 	bl	8006166 <UART_WaitOnFlagUntilTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e006      	b.n	800603a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b08a      	sub	sp, #40	; 0x28
 8006046:	af02      	add	r7, sp, #8
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b20      	cmp	r3, #32
 8006060:	d17c      	bne.n	800615c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_Receive+0x2c>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e075      	b.n	800615e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2222      	movs	r2, #34	; 0x22
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006086:	f7fc ff3f 	bl	8002f08 <HAL_GetTick>
 800608a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	88fa      	ldrh	r2, [r7, #6]
 8006090:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	88fa      	ldrh	r2, [r7, #6]
 8006096:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	d108      	bne.n	80060b4 <HAL_UART_Receive+0x72>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	e003      	b.n	80060bc <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80060bc:	e043      	b.n	8006146 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2120      	movs	r1, #32
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f84c 	bl	8006166 <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e042      	b.n	800615e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10c      	bne.n	80060f8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	3302      	adds	r3, #2
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e01f      	b.n	8006138 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006100:	d007      	beq.n	8006112 <HAL_UART_Receive+0xd0>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <HAL_UART_Receive+0xde>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	b2da      	uxtb	r2, r3
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	e008      	b.n	8006132 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612c:	b2da      	uxtb	r2, r3
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1b6      	bne.n	80060be <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b090      	sub	sp, #64	; 0x40
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006176:	e050      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d04c      	beq.n	800621a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <UART_WaitOnFlagUntilTimeout+0x30>
 8006186:	f7fc febf 	bl	8002f08 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006192:	429a      	cmp	r2, r3
 8006194:	d241      	bcs.n	800621a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061b6:	637a      	str	r2, [r7, #52]	; 0x34
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	613b      	str	r3, [r7, #16]
   return(result);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3314      	adds	r3, #20
 80061e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ea:	623a      	str	r2, [r7, #32]
 80061ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	69f9      	ldr	r1, [r7, #28]
 80061f0:	6a3a      	ldr	r2, [r7, #32]
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e00f      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4013      	ands	r3, r2
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	429a      	cmp	r2, r3
 8006236:	d09f      	beq.n	8006178 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3740      	adds	r7, #64	; 0x40
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800627e:	f023 030c 	bic.w	r3, r3, #12
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	430b      	orrs	r3, r1
 800628a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <UART_SetConfig+0x114>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d103      	bne.n	80062b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062ac:	f7fe fe5e 	bl	8004f6c <HAL_RCC_GetPCLK2Freq>
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	e002      	b.n	80062ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062b4:	f7fe fe46 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 80062b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009a      	lsls	r2, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	4a22      	ldr	r2, [pc, #136]	; (800635c <UART_SetConfig+0x118>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	0119      	lsls	r1, r3, #4
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	009a      	lsls	r2, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80062f0:	4b1a      	ldr	r3, [pc, #104]	; (800635c <UART_SetConfig+0x118>)
 80062f2:	fba3 0302 	umull	r0, r3, r3, r2
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	2064      	movs	r0, #100	; 0x64
 80062fa:	fb00 f303 	mul.w	r3, r0, r3
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	3332      	adds	r3, #50	; 0x32
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <UART_SetConfig+0x118>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006310:	4419      	add	r1, r3
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009a      	lsls	r2, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	fbb2 f2f3 	udiv	r2, r2, r3
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <UART_SetConfig+0x118>)
 800632a:	fba3 0302 	umull	r0, r3, r3, r2
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	2064      	movs	r0, #100	; 0x64
 8006332:	fb00 f303 	mul.w	r3, r0, r3
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	3332      	adds	r3, #50	; 0x32
 800633c:	4a07      	ldr	r2, [pc, #28]	; (800635c <UART_SetConfig+0x118>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	440a      	add	r2, r1
 800634e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40013800 	.word	0x40013800
 800635c:	51eb851f 	.word	0x51eb851f

08006360 <__cvt>:
 8006360:	2b00      	cmp	r3, #0
 8006362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006366:	461f      	mov	r7, r3
 8006368:	bfbb      	ittet	lt
 800636a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800636e:	461f      	movlt	r7, r3
 8006370:	2300      	movge	r3, #0
 8006372:	232d      	movlt	r3, #45	; 0x2d
 8006374:	b088      	sub	sp, #32
 8006376:	4614      	mov	r4, r2
 8006378:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800637a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800637c:	7013      	strb	r3, [r2, #0]
 800637e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006380:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006384:	f023 0820 	bic.w	r8, r3, #32
 8006388:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800638c:	d005      	beq.n	800639a <__cvt+0x3a>
 800638e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006392:	d100      	bne.n	8006396 <__cvt+0x36>
 8006394:	3501      	adds	r5, #1
 8006396:	2302      	movs	r3, #2
 8006398:	e000      	b.n	800639c <__cvt+0x3c>
 800639a:	2303      	movs	r3, #3
 800639c:	aa07      	add	r2, sp, #28
 800639e:	9204      	str	r2, [sp, #16]
 80063a0:	aa06      	add	r2, sp, #24
 80063a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80063a6:	e9cd 3500 	strd	r3, r5, [sp]
 80063aa:	4622      	mov	r2, r4
 80063ac:	463b      	mov	r3, r7
 80063ae:	f000 fe73 	bl	8007098 <_dtoa_r>
 80063b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063b6:	4606      	mov	r6, r0
 80063b8:	d102      	bne.n	80063c0 <__cvt+0x60>
 80063ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063bc:	07db      	lsls	r3, r3, #31
 80063be:	d522      	bpl.n	8006406 <__cvt+0xa6>
 80063c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063c4:	eb06 0905 	add.w	r9, r6, r5
 80063c8:	d110      	bne.n	80063ec <__cvt+0x8c>
 80063ca:	7833      	ldrb	r3, [r6, #0]
 80063cc:	2b30      	cmp	r3, #48	; 0x30
 80063ce:	d10a      	bne.n	80063e6 <__cvt+0x86>
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	4620      	mov	r0, r4
 80063d6:	4639      	mov	r1, r7
 80063d8:	f7fa fae6 	bl	80009a8 <__aeabi_dcmpeq>
 80063dc:	b918      	cbnz	r0, 80063e6 <__cvt+0x86>
 80063de:	f1c5 0501 	rsb	r5, r5, #1
 80063e2:	f8ca 5000 	str.w	r5, [sl]
 80063e6:	f8da 3000 	ldr.w	r3, [sl]
 80063ea:	4499      	add	r9, r3
 80063ec:	2200      	movs	r2, #0
 80063ee:	2300      	movs	r3, #0
 80063f0:	4620      	mov	r0, r4
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7fa fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80063f8:	b108      	cbz	r0, 80063fe <__cvt+0x9e>
 80063fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80063fe:	2230      	movs	r2, #48	; 0x30
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	454b      	cmp	r3, r9
 8006404:	d307      	bcc.n	8006416 <__cvt+0xb6>
 8006406:	4630      	mov	r0, r6
 8006408:	9b07      	ldr	r3, [sp, #28]
 800640a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800640c:	1b9b      	subs	r3, r3, r6
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	b008      	add	sp, #32
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	9107      	str	r1, [sp, #28]
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	e7f0      	b.n	8006400 <__cvt+0xa0>

0800641e <__exponent>:
 800641e:	4603      	mov	r3, r0
 8006420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006422:	2900      	cmp	r1, #0
 8006424:	f803 2b02 	strb.w	r2, [r3], #2
 8006428:	bfb6      	itet	lt
 800642a:	222d      	movlt	r2, #45	; 0x2d
 800642c:	222b      	movge	r2, #43	; 0x2b
 800642e:	4249      	neglt	r1, r1
 8006430:	2909      	cmp	r1, #9
 8006432:	7042      	strb	r2, [r0, #1]
 8006434:	dd2a      	ble.n	800648c <__exponent+0x6e>
 8006436:	f10d 0207 	add.w	r2, sp, #7
 800643a:	4617      	mov	r7, r2
 800643c:	260a      	movs	r6, #10
 800643e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006442:	4694      	mov	ip, r2
 8006444:	fb06 1415 	mls	r4, r6, r5, r1
 8006448:	3430      	adds	r4, #48	; 0x30
 800644a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800644e:	460c      	mov	r4, r1
 8006450:	2c63      	cmp	r4, #99	; 0x63
 8006452:	4629      	mov	r1, r5
 8006454:	f102 32ff 	add.w	r2, r2, #4294967295
 8006458:	dcf1      	bgt.n	800643e <__exponent+0x20>
 800645a:	3130      	adds	r1, #48	; 0x30
 800645c:	f1ac 0402 	sub.w	r4, ip, #2
 8006460:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006464:	4622      	mov	r2, r4
 8006466:	1c41      	adds	r1, r0, #1
 8006468:	42ba      	cmp	r2, r7
 800646a:	d30a      	bcc.n	8006482 <__exponent+0x64>
 800646c:	f10d 0209 	add.w	r2, sp, #9
 8006470:	eba2 020c 	sub.w	r2, r2, ip
 8006474:	42bc      	cmp	r4, r7
 8006476:	bf88      	it	hi
 8006478:	2200      	movhi	r2, #0
 800647a:	4413      	add	r3, r2
 800647c:	1a18      	subs	r0, r3, r0
 800647e:	b003      	add	sp, #12
 8006480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006482:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006486:	f801 5f01 	strb.w	r5, [r1, #1]!
 800648a:	e7ed      	b.n	8006468 <__exponent+0x4a>
 800648c:	2330      	movs	r3, #48	; 0x30
 800648e:	3130      	adds	r1, #48	; 0x30
 8006490:	7083      	strb	r3, [r0, #2]
 8006492:	70c1      	strb	r1, [r0, #3]
 8006494:	1d03      	adds	r3, r0, #4
 8006496:	e7f1      	b.n	800647c <__exponent+0x5e>

08006498 <_printf_float>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	b091      	sub	sp, #68	; 0x44
 800649e:	460c      	mov	r4, r1
 80064a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80064a4:	4616      	mov	r6, r2
 80064a6:	461f      	mov	r7, r3
 80064a8:	4605      	mov	r5, r0
 80064aa:	f000 fce5 	bl	8006e78 <_localeconv_r>
 80064ae:	6803      	ldr	r3, [r0, #0]
 80064b0:	4618      	mov	r0, r3
 80064b2:	9309      	str	r3, [sp, #36]	; 0x24
 80064b4:	f7f9 fe4c 	bl	8000150 <strlen>
 80064b8:	2300      	movs	r3, #0
 80064ba:	930e      	str	r3, [sp, #56]	; 0x38
 80064bc:	f8d8 3000 	ldr.w	r3, [r8]
 80064c0:	900a      	str	r0, [sp, #40]	; 0x28
 80064c2:	3307      	adds	r3, #7
 80064c4:	f023 0307 	bic.w	r3, r3, #7
 80064c8:	f103 0208 	add.w	r2, r3, #8
 80064cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064d0:	f8d4 b000 	ldr.w	fp, [r4]
 80064d4:	f8c8 2000 	str.w	r2, [r8]
 80064d8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80064dc:	4652      	mov	r2, sl
 80064de:	4643      	mov	r3, r8
 80064e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064e4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80064e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295
 80064ee:	4650      	mov	r0, sl
 80064f0:	4b9c      	ldr	r3, [pc, #624]	; (8006764 <_printf_float+0x2cc>)
 80064f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064f4:	f7fa fa8a 	bl	8000a0c <__aeabi_dcmpun>
 80064f8:	bb70      	cbnz	r0, 8006558 <_printf_float+0xc0>
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295
 80064fe:	4650      	mov	r0, sl
 8006500:	4b98      	ldr	r3, [pc, #608]	; (8006764 <_printf_float+0x2cc>)
 8006502:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006504:	f7fa fa64 	bl	80009d0 <__aeabi_dcmple>
 8006508:	bb30      	cbnz	r0, 8006558 <_printf_float+0xc0>
 800650a:	2200      	movs	r2, #0
 800650c:	2300      	movs	r3, #0
 800650e:	4650      	mov	r0, sl
 8006510:	4641      	mov	r1, r8
 8006512:	f7fa fa53 	bl	80009bc <__aeabi_dcmplt>
 8006516:	b110      	cbz	r0, 800651e <_printf_float+0x86>
 8006518:	232d      	movs	r3, #45	; 0x2d
 800651a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800651e:	4a92      	ldr	r2, [pc, #584]	; (8006768 <_printf_float+0x2d0>)
 8006520:	4b92      	ldr	r3, [pc, #584]	; (800676c <_printf_float+0x2d4>)
 8006522:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006526:	bf94      	ite	ls
 8006528:	4690      	movls	r8, r2
 800652a:	4698      	movhi	r8, r3
 800652c:	2303      	movs	r3, #3
 800652e:	f04f 0a00 	mov.w	sl, #0
 8006532:	6123      	str	r3, [r4, #16]
 8006534:	f02b 0304 	bic.w	r3, fp, #4
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	4633      	mov	r3, r6
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	9700      	str	r7, [sp, #0]
 8006542:	aa0f      	add	r2, sp, #60	; 0x3c
 8006544:	f000 f9d6 	bl	80068f4 <_printf_common>
 8006548:	3001      	adds	r0, #1
 800654a:	f040 8090 	bne.w	800666e <_printf_float+0x1d6>
 800654e:	f04f 30ff 	mov.w	r0, #4294967295
 8006552:	b011      	add	sp, #68	; 0x44
 8006554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006558:	4652      	mov	r2, sl
 800655a:	4643      	mov	r3, r8
 800655c:	4650      	mov	r0, sl
 800655e:	4641      	mov	r1, r8
 8006560:	f7fa fa54 	bl	8000a0c <__aeabi_dcmpun>
 8006564:	b148      	cbz	r0, 800657a <_printf_float+0xe2>
 8006566:	f1b8 0f00 	cmp.w	r8, #0
 800656a:	bfb8      	it	lt
 800656c:	232d      	movlt	r3, #45	; 0x2d
 800656e:	4a80      	ldr	r2, [pc, #512]	; (8006770 <_printf_float+0x2d8>)
 8006570:	bfb8      	it	lt
 8006572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006576:	4b7f      	ldr	r3, [pc, #508]	; (8006774 <_printf_float+0x2dc>)
 8006578:	e7d3      	b.n	8006522 <_printf_float+0x8a>
 800657a:	6863      	ldr	r3, [r4, #4]
 800657c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	d142      	bne.n	800660a <_printf_float+0x172>
 8006584:	2306      	movs	r3, #6
 8006586:	6063      	str	r3, [r4, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	9206      	str	r2, [sp, #24]
 800658c:	aa0e      	add	r2, sp, #56	; 0x38
 800658e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006592:	aa0d      	add	r2, sp, #52	; 0x34
 8006594:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006598:	9203      	str	r2, [sp, #12]
 800659a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800659e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	4652      	mov	r2, sl
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4628      	mov	r0, r5
 80065ac:	4643      	mov	r3, r8
 80065ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80065b0:	f7ff fed6 	bl	8006360 <__cvt>
 80065b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065b6:	4680      	mov	r8, r0
 80065b8:	2947      	cmp	r1, #71	; 0x47
 80065ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065bc:	d108      	bne.n	80065d0 <_printf_float+0x138>
 80065be:	1cc8      	adds	r0, r1, #3
 80065c0:	db02      	blt.n	80065c8 <_printf_float+0x130>
 80065c2:	6863      	ldr	r3, [r4, #4]
 80065c4:	4299      	cmp	r1, r3
 80065c6:	dd40      	ble.n	800664a <_printf_float+0x1b2>
 80065c8:	f1a9 0902 	sub.w	r9, r9, #2
 80065cc:	fa5f f989 	uxtb.w	r9, r9
 80065d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065d4:	d81f      	bhi.n	8006616 <_printf_float+0x17e>
 80065d6:	464a      	mov	r2, r9
 80065d8:	3901      	subs	r1, #1
 80065da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065de:	910d      	str	r1, [sp, #52]	; 0x34
 80065e0:	f7ff ff1d 	bl	800641e <__exponent>
 80065e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e6:	4682      	mov	sl, r0
 80065e8:	1813      	adds	r3, r2, r0
 80065ea:	2a01      	cmp	r2, #1
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	dc02      	bgt.n	80065f6 <_printf_float+0x15e>
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	07d2      	lsls	r2, r2, #31
 80065f4:	d501      	bpl.n	80065fa <_printf_float+0x162>
 80065f6:	3301      	adds	r3, #1
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d09b      	beq.n	800653a <_printf_float+0xa2>
 8006602:	232d      	movs	r3, #45	; 0x2d
 8006604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006608:	e797      	b.n	800653a <_printf_float+0xa2>
 800660a:	2947      	cmp	r1, #71	; 0x47
 800660c:	d1bc      	bne.n	8006588 <_printf_float+0xf0>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1ba      	bne.n	8006588 <_printf_float+0xf0>
 8006612:	2301      	movs	r3, #1
 8006614:	e7b7      	b.n	8006586 <_printf_float+0xee>
 8006616:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800661a:	d118      	bne.n	800664e <_printf_float+0x1b6>
 800661c:	2900      	cmp	r1, #0
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	dd0b      	ble.n	800663a <_printf_float+0x1a2>
 8006622:	6121      	str	r1, [r4, #16]
 8006624:	b913      	cbnz	r3, 800662c <_printf_float+0x194>
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	07d0      	lsls	r0, r2, #31
 800662a:	d502      	bpl.n	8006632 <_printf_float+0x19a>
 800662c:	3301      	adds	r3, #1
 800662e:	440b      	add	r3, r1
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	f04f 0a00 	mov.w	sl, #0
 8006636:	65a1      	str	r1, [r4, #88]	; 0x58
 8006638:	e7df      	b.n	80065fa <_printf_float+0x162>
 800663a:	b913      	cbnz	r3, 8006642 <_printf_float+0x1aa>
 800663c:	6822      	ldr	r2, [r4, #0]
 800663e:	07d2      	lsls	r2, r2, #31
 8006640:	d501      	bpl.n	8006646 <_printf_float+0x1ae>
 8006642:	3302      	adds	r3, #2
 8006644:	e7f4      	b.n	8006630 <_printf_float+0x198>
 8006646:	2301      	movs	r3, #1
 8006648:	e7f2      	b.n	8006630 <_printf_float+0x198>
 800664a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800664e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006650:	4299      	cmp	r1, r3
 8006652:	db05      	blt.n	8006660 <_printf_float+0x1c8>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	6121      	str	r1, [r4, #16]
 8006658:	07d8      	lsls	r0, r3, #31
 800665a:	d5ea      	bpl.n	8006632 <_printf_float+0x19a>
 800665c:	1c4b      	adds	r3, r1, #1
 800665e:	e7e7      	b.n	8006630 <_printf_float+0x198>
 8006660:	2900      	cmp	r1, #0
 8006662:	bfcc      	ite	gt
 8006664:	2201      	movgt	r2, #1
 8006666:	f1c1 0202 	rsble	r2, r1, #2
 800666a:	4413      	add	r3, r2
 800666c:	e7e0      	b.n	8006630 <_printf_float+0x198>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	055a      	lsls	r2, r3, #21
 8006672:	d407      	bmi.n	8006684 <_printf_float+0x1ec>
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	4642      	mov	r2, r8
 8006678:	4631      	mov	r1, r6
 800667a:	4628      	mov	r0, r5
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	d12b      	bne.n	80066da <_printf_float+0x242>
 8006682:	e764      	b.n	800654e <_printf_float+0xb6>
 8006684:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006688:	f240 80dd 	bls.w	8006846 <_printf_float+0x3ae>
 800668c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006690:	2200      	movs	r2, #0
 8006692:	2300      	movs	r3, #0
 8006694:	f7fa f988 	bl	80009a8 <__aeabi_dcmpeq>
 8006698:	2800      	cmp	r0, #0
 800669a:	d033      	beq.n	8006704 <_printf_float+0x26c>
 800669c:	2301      	movs	r3, #1
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	4a35      	ldr	r2, [pc, #212]	; (8006778 <_printf_float+0x2e0>)
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af51 	beq.w	800654e <_printf_float+0xb6>
 80066ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066b0:	429a      	cmp	r2, r3
 80066b2:	db02      	blt.n	80066ba <_printf_float+0x222>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	07d8      	lsls	r0, r3, #31
 80066b8:	d50f      	bpl.n	80066da <_printf_float+0x242>
 80066ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066be:	4631      	mov	r1, r6
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b8      	blx	r7
 80066c4:	3001      	adds	r0, #1
 80066c6:	f43f af42 	beq.w	800654e <_printf_float+0xb6>
 80066ca:	f04f 0800 	mov.w	r8, #0
 80066ce:	f104 091a 	add.w	r9, r4, #26
 80066d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d4:	3b01      	subs	r3, #1
 80066d6:	4543      	cmp	r3, r8
 80066d8:	dc09      	bgt.n	80066ee <_printf_float+0x256>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	079b      	lsls	r3, r3, #30
 80066de:	f100 8104 	bmi.w	80068ea <_printf_float+0x452>
 80066e2:	68e0      	ldr	r0, [r4, #12]
 80066e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066e6:	4298      	cmp	r0, r3
 80066e8:	bfb8      	it	lt
 80066ea:	4618      	movlt	r0, r3
 80066ec:	e731      	b.n	8006552 <_printf_float+0xba>
 80066ee:	2301      	movs	r3, #1
 80066f0:	464a      	mov	r2, r9
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	f43f af28 	beq.w	800654e <_printf_float+0xb6>
 80066fe:	f108 0801 	add.w	r8, r8, #1
 8006702:	e7e6      	b.n	80066d2 <_printf_float+0x23a>
 8006704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006706:	2b00      	cmp	r3, #0
 8006708:	dc38      	bgt.n	800677c <_printf_float+0x2e4>
 800670a:	2301      	movs	r3, #1
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <_printf_float+0x2e0>)
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f af1a 	beq.w	800654e <_printf_float+0xb6>
 800671a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800671e:	4313      	orrs	r3, r2
 8006720:	d102      	bne.n	8006728 <_printf_float+0x290>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	07d9      	lsls	r1, r3, #31
 8006726:	d5d8      	bpl.n	80066da <_printf_float+0x242>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af0b 	beq.w	800654e <_printf_float+0xb6>
 8006738:	f04f 0900 	mov.w	r9, #0
 800673c:	f104 0a1a 	add.w	sl, r4, #26
 8006740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006742:	425b      	negs	r3, r3
 8006744:	454b      	cmp	r3, r9
 8006746:	dc01      	bgt.n	800674c <_printf_float+0x2b4>
 8006748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800674a:	e794      	b.n	8006676 <_printf_float+0x1de>
 800674c:	2301      	movs	r3, #1
 800674e:	4652      	mov	r2, sl
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f43f aef9 	beq.w	800654e <_printf_float+0xb6>
 800675c:	f109 0901 	add.w	r9, r9, #1
 8006760:	e7ee      	b.n	8006740 <_printf_float+0x2a8>
 8006762:	bf00      	nop
 8006764:	7fefffff 	.word	0x7fefffff
 8006768:	080090c6 	.word	0x080090c6
 800676c:	080090ca 	.word	0x080090ca
 8006770:	080090ce 	.word	0x080090ce
 8006774:	080090d2 	.word	0x080090d2
 8006778:	080090d6 	.word	0x080090d6
 800677c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800677e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006780:	429a      	cmp	r2, r3
 8006782:	bfa8      	it	ge
 8006784:	461a      	movge	r2, r3
 8006786:	2a00      	cmp	r2, #0
 8006788:	4691      	mov	r9, r2
 800678a:	dc37      	bgt.n	80067fc <_printf_float+0x364>
 800678c:	f04f 0b00 	mov.w	fp, #0
 8006790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006794:	f104 021a 	add.w	r2, r4, #26
 8006798:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800679c:	ebaa 0309 	sub.w	r3, sl, r9
 80067a0:	455b      	cmp	r3, fp
 80067a2:	dc33      	bgt.n	800680c <_printf_float+0x374>
 80067a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067a8:	429a      	cmp	r2, r3
 80067aa:	db3b      	blt.n	8006824 <_printf_float+0x38c>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	07da      	lsls	r2, r3, #31
 80067b0:	d438      	bmi.n	8006824 <_printf_float+0x38c>
 80067b2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80067b6:	eba2 0903 	sub.w	r9, r2, r3
 80067ba:	eba2 020a 	sub.w	r2, r2, sl
 80067be:	4591      	cmp	r9, r2
 80067c0:	bfa8      	it	ge
 80067c2:	4691      	movge	r9, r2
 80067c4:	f1b9 0f00 	cmp.w	r9, #0
 80067c8:	dc34      	bgt.n	8006834 <_printf_float+0x39c>
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067d2:	f104 0a1a 	add.w	sl, r4, #26
 80067d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	eba3 0309 	sub.w	r3, r3, r9
 80067e0:	4543      	cmp	r3, r8
 80067e2:	f77f af7a 	ble.w	80066da <_printf_float+0x242>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4652      	mov	r2, sl
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f aeac 	beq.w	800654e <_printf_float+0xb6>
 80067f6:	f108 0801 	add.w	r8, r8, #1
 80067fa:	e7ec      	b.n	80067d6 <_printf_float+0x33e>
 80067fc:	4613      	mov	r3, r2
 80067fe:	4631      	mov	r1, r6
 8006800:	4642      	mov	r2, r8
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	d1c0      	bne.n	800678c <_printf_float+0x2f4>
 800680a:	e6a0      	b.n	800654e <_printf_float+0xb6>
 800680c:	2301      	movs	r3, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	920b      	str	r2, [sp, #44]	; 0x2c
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f ae99 	beq.w	800654e <_printf_float+0xb6>
 800681c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800681e:	f10b 0b01 	add.w	fp, fp, #1
 8006822:	e7b9      	b.n	8006798 <_printf_float+0x300>
 8006824:	4631      	mov	r1, r6
 8006826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	d1bf      	bne.n	80067b2 <_printf_float+0x31a>
 8006832:	e68c      	b.n	800654e <_printf_float+0xb6>
 8006834:	464b      	mov	r3, r9
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	eb08 020a 	add.w	r2, r8, sl
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	d1c2      	bne.n	80067ca <_printf_float+0x332>
 8006844:	e683      	b.n	800654e <_printf_float+0xb6>
 8006846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006848:	2a01      	cmp	r2, #1
 800684a:	dc01      	bgt.n	8006850 <_printf_float+0x3b8>
 800684c:	07db      	lsls	r3, r3, #31
 800684e:	d539      	bpl.n	80068c4 <_printf_float+0x42c>
 8006850:	2301      	movs	r3, #1
 8006852:	4642      	mov	r2, r8
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	f43f ae77 	beq.w	800654e <_printf_float+0xb6>
 8006860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f ae6f 	beq.w	800654e <_printf_float+0xb6>
 8006870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006874:	2200      	movs	r2, #0
 8006876:	2300      	movs	r3, #0
 8006878:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800687c:	f7fa f894 	bl	80009a8 <__aeabi_dcmpeq>
 8006880:	b9d8      	cbnz	r0, 80068ba <_printf_float+0x422>
 8006882:	f109 33ff 	add.w	r3, r9, #4294967295
 8006886:	f108 0201 	add.w	r2, r8, #1
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	d10e      	bne.n	80068b2 <_printf_float+0x41a>
 8006894:	e65b      	b.n	800654e <_printf_float+0xb6>
 8006896:	2301      	movs	r3, #1
 8006898:	464a      	mov	r2, r9
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f ae54 	beq.w	800654e <_printf_float+0xb6>
 80068a6:	f108 0801 	add.w	r8, r8, #1
 80068aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ac:	3b01      	subs	r3, #1
 80068ae:	4543      	cmp	r3, r8
 80068b0:	dcf1      	bgt.n	8006896 <_printf_float+0x3fe>
 80068b2:	4653      	mov	r3, sl
 80068b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068b8:	e6de      	b.n	8006678 <_printf_float+0x1e0>
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	f104 091a 	add.w	r9, r4, #26
 80068c2:	e7f2      	b.n	80068aa <_printf_float+0x412>
 80068c4:	2301      	movs	r3, #1
 80068c6:	4642      	mov	r2, r8
 80068c8:	e7df      	b.n	800688a <_printf_float+0x3f2>
 80068ca:	2301      	movs	r3, #1
 80068cc:	464a      	mov	r2, r9
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae3a 	beq.w	800654e <_printf_float+0xb6>
 80068da:	f108 0801 	add.w	r8, r8, #1
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068e2:	1a5b      	subs	r3, r3, r1
 80068e4:	4543      	cmp	r3, r8
 80068e6:	dcf0      	bgt.n	80068ca <_printf_float+0x432>
 80068e8:	e6fb      	b.n	80066e2 <_printf_float+0x24a>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	f104 0919 	add.w	r9, r4, #25
 80068f2:	e7f4      	b.n	80068de <_printf_float+0x446>

080068f4 <_printf_common>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	4616      	mov	r6, r2
 80068fa:	4699      	mov	r9, r3
 80068fc:	688a      	ldr	r2, [r1, #8]
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	4607      	mov	r7, r0
 8006902:	4293      	cmp	r3, r2
 8006904:	bfb8      	it	lt
 8006906:	4613      	movlt	r3, r2
 8006908:	6033      	str	r3, [r6, #0]
 800690a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800690e:	460c      	mov	r4, r1
 8006910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006914:	b10a      	cbz	r2, 800691a <_printf_common+0x26>
 8006916:	3301      	adds	r3, #1
 8006918:	6033      	str	r3, [r6, #0]
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	0699      	lsls	r1, r3, #26
 800691e:	bf42      	ittt	mi
 8006920:	6833      	ldrmi	r3, [r6, #0]
 8006922:	3302      	addmi	r3, #2
 8006924:	6033      	strmi	r3, [r6, #0]
 8006926:	6825      	ldr	r5, [r4, #0]
 8006928:	f015 0506 	ands.w	r5, r5, #6
 800692c:	d106      	bne.n	800693c <_printf_common+0x48>
 800692e:	f104 0a19 	add.w	sl, r4, #25
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	6832      	ldr	r2, [r6, #0]
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	42ab      	cmp	r3, r5
 800693a:	dc2b      	bgt.n	8006994 <_printf_common+0xa0>
 800693c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006940:	1e13      	subs	r3, r2, #0
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	bf18      	it	ne
 8006946:	2301      	movne	r3, #1
 8006948:	0692      	lsls	r2, r2, #26
 800694a:	d430      	bmi.n	80069ae <_printf_common+0xba>
 800694c:	4649      	mov	r1, r9
 800694e:	4638      	mov	r0, r7
 8006950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006954:	47c0      	blx	r8
 8006956:	3001      	adds	r0, #1
 8006958:	d023      	beq.n	80069a2 <_printf_common+0xae>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	f003 0306 	and.w	r3, r3, #6
 8006962:	2b04      	cmp	r3, #4
 8006964:	bf14      	ite	ne
 8006966:	2500      	movne	r5, #0
 8006968:	6833      	ldreq	r3, [r6, #0]
 800696a:	f04f 0600 	mov.w	r6, #0
 800696e:	bf08      	it	eq
 8006970:	68e5      	ldreq	r5, [r4, #12]
 8006972:	f104 041a 	add.w	r4, r4, #26
 8006976:	bf08      	it	eq
 8006978:	1aed      	subeq	r5, r5, r3
 800697a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800697e:	bf08      	it	eq
 8006980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006984:	4293      	cmp	r3, r2
 8006986:	bfc4      	itt	gt
 8006988:	1a9b      	subgt	r3, r3, r2
 800698a:	18ed      	addgt	r5, r5, r3
 800698c:	42b5      	cmp	r5, r6
 800698e:	d11a      	bne.n	80069c6 <_printf_common+0xd2>
 8006990:	2000      	movs	r0, #0
 8006992:	e008      	b.n	80069a6 <_printf_common+0xb2>
 8006994:	2301      	movs	r3, #1
 8006996:	4652      	mov	r2, sl
 8006998:	4649      	mov	r1, r9
 800699a:	4638      	mov	r0, r7
 800699c:	47c0      	blx	r8
 800699e:	3001      	adds	r0, #1
 80069a0:	d103      	bne.n	80069aa <_printf_common+0xb6>
 80069a2:	f04f 30ff 	mov.w	r0, #4294967295
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	3501      	adds	r5, #1
 80069ac:	e7c1      	b.n	8006932 <_printf_common+0x3e>
 80069ae:	2030      	movs	r0, #48	; 0x30
 80069b0:	18e1      	adds	r1, r4, r3
 80069b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069bc:	4422      	add	r2, r4
 80069be:	3302      	adds	r3, #2
 80069c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069c4:	e7c2      	b.n	800694c <_printf_common+0x58>
 80069c6:	2301      	movs	r3, #1
 80069c8:	4622      	mov	r2, r4
 80069ca:	4649      	mov	r1, r9
 80069cc:	4638      	mov	r0, r7
 80069ce:	47c0      	blx	r8
 80069d0:	3001      	adds	r0, #1
 80069d2:	d0e6      	beq.n	80069a2 <_printf_common+0xae>
 80069d4:	3601      	adds	r6, #1
 80069d6:	e7d9      	b.n	800698c <_printf_common+0x98>

080069d8 <_printf_i>:
 80069d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	7e0f      	ldrb	r7, [r1, #24]
 80069de:	4691      	mov	r9, r2
 80069e0:	2f78      	cmp	r7, #120	; 0x78
 80069e2:	4680      	mov	r8, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	469a      	mov	sl, r3
 80069e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069ee:	d807      	bhi.n	8006a00 <_printf_i+0x28>
 80069f0:	2f62      	cmp	r7, #98	; 0x62
 80069f2:	d80a      	bhi.n	8006a0a <_printf_i+0x32>
 80069f4:	2f00      	cmp	r7, #0
 80069f6:	f000 80d5 	beq.w	8006ba4 <_printf_i+0x1cc>
 80069fa:	2f58      	cmp	r7, #88	; 0x58
 80069fc:	f000 80c1 	beq.w	8006b82 <_printf_i+0x1aa>
 8006a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a08:	e03a      	b.n	8006a80 <_printf_i+0xa8>
 8006a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a0e:	2b15      	cmp	r3, #21
 8006a10:	d8f6      	bhi.n	8006a00 <_printf_i+0x28>
 8006a12:	a101      	add	r1, pc, #4	; (adr r1, 8006a18 <_printf_i+0x40>)
 8006a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a18:	08006a71 	.word	0x08006a71
 8006a1c:	08006a85 	.word	0x08006a85
 8006a20:	08006a01 	.word	0x08006a01
 8006a24:	08006a01 	.word	0x08006a01
 8006a28:	08006a01 	.word	0x08006a01
 8006a2c:	08006a01 	.word	0x08006a01
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a01 	.word	0x08006a01
 8006a38:	08006a01 	.word	0x08006a01
 8006a3c:	08006a01 	.word	0x08006a01
 8006a40:	08006a01 	.word	0x08006a01
 8006a44:	08006b8b 	.word	0x08006b8b
 8006a48:	08006ab1 	.word	0x08006ab1
 8006a4c:	08006b45 	.word	0x08006b45
 8006a50:	08006a01 	.word	0x08006a01
 8006a54:	08006a01 	.word	0x08006a01
 8006a58:	08006bad 	.word	0x08006bad
 8006a5c:	08006a01 	.word	0x08006a01
 8006a60:	08006ab1 	.word	0x08006ab1
 8006a64:	08006a01 	.word	0x08006a01
 8006a68:	08006a01 	.word	0x08006a01
 8006a6c:	08006b4d 	.word	0x08006b4d
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	1d1a      	adds	r2, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	602a      	str	r2, [r5, #0]
 8006a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0a0      	b.n	8006bc6 <_printf_i+0x1ee>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	682b      	ldr	r3, [r5, #0]
 8006a88:	0607      	lsls	r7, r0, #24
 8006a8a:	f103 0104 	add.w	r1, r3, #4
 8006a8e:	6029      	str	r1, [r5, #0]
 8006a90:	d501      	bpl.n	8006a96 <_printf_i+0xbe>
 8006a92:	681e      	ldr	r6, [r3, #0]
 8006a94:	e003      	b.n	8006a9e <_printf_i+0xc6>
 8006a96:	0646      	lsls	r6, r0, #25
 8006a98:	d5fb      	bpl.n	8006a92 <_printf_i+0xba>
 8006a9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	da03      	bge.n	8006aaa <_printf_i+0xd2>
 8006aa2:	232d      	movs	r3, #45	; 0x2d
 8006aa4:	4276      	negs	r6, r6
 8006aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aaa:	230a      	movs	r3, #10
 8006aac:	4859      	ldr	r0, [pc, #356]	; (8006c14 <_printf_i+0x23c>)
 8006aae:	e012      	b.n	8006ad6 <_printf_i+0xfe>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	6820      	ldr	r0, [r4, #0]
 8006ab4:	1d19      	adds	r1, r3, #4
 8006ab6:	6029      	str	r1, [r5, #0]
 8006ab8:	0605      	lsls	r5, r0, #24
 8006aba:	d501      	bpl.n	8006ac0 <_printf_i+0xe8>
 8006abc:	681e      	ldr	r6, [r3, #0]
 8006abe:	e002      	b.n	8006ac6 <_printf_i+0xee>
 8006ac0:	0641      	lsls	r1, r0, #25
 8006ac2:	d5fb      	bpl.n	8006abc <_printf_i+0xe4>
 8006ac4:	881e      	ldrh	r6, [r3, #0]
 8006ac6:	2f6f      	cmp	r7, #111	; 0x6f
 8006ac8:	bf0c      	ite	eq
 8006aca:	2308      	moveq	r3, #8
 8006acc:	230a      	movne	r3, #10
 8006ace:	4851      	ldr	r0, [pc, #324]	; (8006c14 <_printf_i+0x23c>)
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ad6:	6865      	ldr	r5, [r4, #4]
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	bfa8      	it	ge
 8006adc:	6821      	ldrge	r1, [r4, #0]
 8006ade:	60a5      	str	r5, [r4, #8]
 8006ae0:	bfa4      	itt	ge
 8006ae2:	f021 0104 	bicge.w	r1, r1, #4
 8006ae6:	6021      	strge	r1, [r4, #0]
 8006ae8:	b90e      	cbnz	r6, 8006aee <_printf_i+0x116>
 8006aea:	2d00      	cmp	r5, #0
 8006aec:	d04b      	beq.n	8006b86 <_printf_i+0x1ae>
 8006aee:	4615      	mov	r5, r2
 8006af0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006af4:	fb03 6711 	mls	r7, r3, r1, r6
 8006af8:	5dc7      	ldrb	r7, [r0, r7]
 8006afa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006afe:	4637      	mov	r7, r6
 8006b00:	42bb      	cmp	r3, r7
 8006b02:	460e      	mov	r6, r1
 8006b04:	d9f4      	bls.n	8006af0 <_printf_i+0x118>
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d10b      	bne.n	8006b22 <_printf_i+0x14a>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	07de      	lsls	r6, r3, #31
 8006b0e:	d508      	bpl.n	8006b22 <_printf_i+0x14a>
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	6861      	ldr	r1, [r4, #4]
 8006b14:	4299      	cmp	r1, r3
 8006b16:	bfde      	ittt	le
 8006b18:	2330      	movle	r3, #48	; 0x30
 8006b1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b22:	1b52      	subs	r2, r2, r5
 8006b24:	6122      	str	r2, [r4, #16]
 8006b26:	464b      	mov	r3, r9
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	f8cd a000 	str.w	sl, [sp]
 8006b30:	aa03      	add	r2, sp, #12
 8006b32:	f7ff fedf 	bl	80068f4 <_printf_common>
 8006b36:	3001      	adds	r0, #1
 8006b38:	d14a      	bne.n	8006bd0 <_printf_i+0x1f8>
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	b004      	add	sp, #16
 8006b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	2778      	movs	r7, #120	; 0x78
 8006b4e:	4832      	ldr	r0, [pc, #200]	; (8006c18 <_printf_i+0x240>)
 8006b50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	6829      	ldr	r1, [r5, #0]
 8006b58:	061f      	lsls	r7, r3, #24
 8006b5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b5e:	d402      	bmi.n	8006b66 <_printf_i+0x18e>
 8006b60:	065f      	lsls	r7, r3, #25
 8006b62:	bf48      	it	mi
 8006b64:	b2b6      	uxthmi	r6, r6
 8006b66:	07df      	lsls	r7, r3, #31
 8006b68:	bf48      	it	mi
 8006b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b6e:	6029      	str	r1, [r5, #0]
 8006b70:	bf48      	it	mi
 8006b72:	6023      	strmi	r3, [r4, #0]
 8006b74:	b91e      	cbnz	r6, 8006b7e <_printf_i+0x1a6>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	f023 0320 	bic.w	r3, r3, #32
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	2310      	movs	r3, #16
 8006b80:	e7a6      	b.n	8006ad0 <_printf_i+0xf8>
 8006b82:	4824      	ldr	r0, [pc, #144]	; (8006c14 <_printf_i+0x23c>)
 8006b84:	e7e4      	b.n	8006b50 <_printf_i+0x178>
 8006b86:	4615      	mov	r5, r2
 8006b88:	e7bd      	b.n	8006b06 <_printf_i+0x12e>
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	6826      	ldr	r6, [r4, #0]
 8006b8e:	1d18      	adds	r0, r3, #4
 8006b90:	6961      	ldr	r1, [r4, #20]
 8006b92:	6028      	str	r0, [r5, #0]
 8006b94:	0635      	lsls	r5, r6, #24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	d501      	bpl.n	8006b9e <_printf_i+0x1c6>
 8006b9a:	6019      	str	r1, [r3, #0]
 8006b9c:	e002      	b.n	8006ba4 <_printf_i+0x1cc>
 8006b9e:	0670      	lsls	r0, r6, #25
 8006ba0:	d5fb      	bpl.n	8006b9a <_printf_i+0x1c2>
 8006ba2:	8019      	strh	r1, [r3, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4615      	mov	r5, r2
 8006ba8:	6123      	str	r3, [r4, #16]
 8006baa:	e7bc      	b.n	8006b26 <_printf_i+0x14e>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	2100      	movs	r1, #0
 8006bb0:	1d1a      	adds	r2, r3, #4
 8006bb2:	602a      	str	r2, [r5, #0]
 8006bb4:	681d      	ldr	r5, [r3, #0]
 8006bb6:	6862      	ldr	r2, [r4, #4]
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 f9d4 	bl	8006f66 <memchr>
 8006bbe:	b108      	cbz	r0, 8006bc4 <_printf_i+0x1ec>
 8006bc0:	1b40      	subs	r0, r0, r5
 8006bc2:	6060      	str	r0, [r4, #4]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bce:	e7aa      	b.n	8006b26 <_printf_i+0x14e>
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	47d0      	blx	sl
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d0ad      	beq.n	8006b3a <_printf_i+0x162>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	079b      	lsls	r3, r3, #30
 8006be2:	d413      	bmi.n	8006c0c <_printf_i+0x234>
 8006be4:	68e0      	ldr	r0, [r4, #12]
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	4298      	cmp	r0, r3
 8006bea:	bfb8      	it	lt
 8006bec:	4618      	movlt	r0, r3
 8006bee:	e7a6      	b.n	8006b3e <_printf_i+0x166>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	47d0      	blx	sl
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d09d      	beq.n	8006b3a <_printf_i+0x162>
 8006bfe:	3501      	adds	r5, #1
 8006c00:	68e3      	ldr	r3, [r4, #12]
 8006c02:	9903      	ldr	r1, [sp, #12]
 8006c04:	1a5b      	subs	r3, r3, r1
 8006c06:	42ab      	cmp	r3, r5
 8006c08:	dcf2      	bgt.n	8006bf0 <_printf_i+0x218>
 8006c0a:	e7eb      	b.n	8006be4 <_printf_i+0x20c>
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	f104 0619 	add.w	r6, r4, #25
 8006c12:	e7f5      	b.n	8006c00 <_printf_i+0x228>
 8006c14:	080090d8 	.word	0x080090d8
 8006c18:	080090e9 	.word	0x080090e9

08006c1c <std>:
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	4604      	mov	r4, r0
 8006c22:	e9c0 3300 	strd	r3, r3, [r0]
 8006c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c2a:	6083      	str	r3, [r0, #8]
 8006c2c:	8181      	strh	r1, [r0, #12]
 8006c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c30:	81c2      	strh	r2, [r0, #14]
 8006c32:	6183      	str	r3, [r0, #24]
 8006c34:	4619      	mov	r1, r3
 8006c36:	2208      	movs	r2, #8
 8006c38:	305c      	adds	r0, #92	; 0x5c
 8006c3a:	f000 f914 	bl	8006e66 <memset>
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <std+0x58>)
 8006c40:	6224      	str	r4, [r4, #32]
 8006c42:	6263      	str	r3, [r4, #36]	; 0x24
 8006c44:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <std+0x5c>)
 8006c46:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <std+0x60>)
 8006c4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <std+0x64>)
 8006c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <std+0x68>)
 8006c52:	429c      	cmp	r4, r3
 8006c54:	d006      	beq.n	8006c64 <std+0x48>
 8006c56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c5a:	4294      	cmp	r4, r2
 8006c5c:	d002      	beq.n	8006c64 <std+0x48>
 8006c5e:	33d0      	adds	r3, #208	; 0xd0
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d105      	bne.n	8006c70 <std+0x54>
 8006c64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c6c:	f000 b978 	b.w	8006f60 <__retarget_lock_init_recursive>
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	08006de1 	.word	0x08006de1
 8006c78:	08006e03 	.word	0x08006e03
 8006c7c:	08006e3b 	.word	0x08006e3b
 8006c80:	08006e5f 	.word	0x08006e5f
 8006c84:	200005c4 	.word	0x200005c4

08006c88 <stdio_exit_handler>:
 8006c88:	4a02      	ldr	r2, [pc, #8]	; (8006c94 <stdio_exit_handler+0xc>)
 8006c8a:	4903      	ldr	r1, [pc, #12]	; (8006c98 <stdio_exit_handler+0x10>)
 8006c8c:	4803      	ldr	r0, [pc, #12]	; (8006c9c <stdio_exit_handler+0x14>)
 8006c8e:	f000 b869 	b.w	8006d64 <_fwalk_sglue>
 8006c92:	bf00      	nop
 8006c94:	2000001c 	.word	0x2000001c
 8006c98:	080088fd 	.word	0x080088fd
 8006c9c:	20000028 	.word	0x20000028

08006ca0 <cleanup_stdio>:
 8006ca0:	6841      	ldr	r1, [r0, #4]
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <cleanup_stdio+0x34>)
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	4604      	mov	r4, r0
 8006caa:	d001      	beq.n	8006cb0 <cleanup_stdio+0x10>
 8006cac:	f001 fe26 	bl	80088fc <_fflush_r>
 8006cb0:	68a1      	ldr	r1, [r4, #8]
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <cleanup_stdio+0x38>)
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	d002      	beq.n	8006cbe <cleanup_stdio+0x1e>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f001 fe1f 	bl	80088fc <_fflush_r>
 8006cbe:	68e1      	ldr	r1, [r4, #12]
 8006cc0:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <cleanup_stdio+0x3c>)
 8006cc2:	4299      	cmp	r1, r3
 8006cc4:	d004      	beq.n	8006cd0 <cleanup_stdio+0x30>
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ccc:	f001 be16 	b.w	80088fc <_fflush_r>
 8006cd0:	bd10      	pop	{r4, pc}
 8006cd2:	bf00      	nop
 8006cd4:	200005c4 	.word	0x200005c4
 8006cd8:	2000062c 	.word	0x2000062c
 8006cdc:	20000694 	.word	0x20000694

08006ce0 <global_stdio_init.part.0>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <global_stdio_init.part.0+0x30>)
 8006ce4:	4c0b      	ldr	r4, [pc, #44]	; (8006d14 <global_stdio_init.part.0+0x34>)
 8006ce6:	4a0c      	ldr	r2, [pc, #48]	; (8006d18 <global_stdio_init.part.0+0x38>)
 8006ce8:	4620      	mov	r0, r4
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	2104      	movs	r1, #4
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f7ff ff94 	bl	8006c1c <std>
 8006cf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	2109      	movs	r1, #9
 8006cfc:	f7ff ff8e 	bl	8006c1c <std>
 8006d00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d04:	2202      	movs	r2, #2
 8006d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0a:	2112      	movs	r1, #18
 8006d0c:	f7ff bf86 	b.w	8006c1c <std>
 8006d10:	200006fc 	.word	0x200006fc
 8006d14:	200005c4 	.word	0x200005c4
 8006d18:	08006c89 	.word	0x08006c89

08006d1c <__sfp_lock_acquire>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__sfp_lock_acquire+0x8>)
 8006d1e:	f000 b920 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 8006d22:	bf00      	nop
 8006d24:	20000705 	.word	0x20000705

08006d28 <__sfp_lock_release>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__sfp_lock_release+0x8>)
 8006d2a:	f000 b91b 	b.w	8006f64 <__retarget_lock_release_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20000705 	.word	0x20000705

08006d34 <__sinit>:
 8006d34:	b510      	push	{r4, lr}
 8006d36:	4604      	mov	r4, r0
 8006d38:	f7ff fff0 	bl	8006d1c <__sfp_lock_acquire>
 8006d3c:	6a23      	ldr	r3, [r4, #32]
 8006d3e:	b11b      	cbz	r3, 8006d48 <__sinit+0x14>
 8006d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d44:	f7ff bff0 	b.w	8006d28 <__sfp_lock_release>
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <__sinit+0x28>)
 8006d4a:	6223      	str	r3, [r4, #32]
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <__sinit+0x2c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f5      	bne.n	8006d40 <__sinit+0xc>
 8006d54:	f7ff ffc4 	bl	8006ce0 <global_stdio_init.part.0>
 8006d58:	e7f2      	b.n	8006d40 <__sinit+0xc>
 8006d5a:	bf00      	nop
 8006d5c:	08006ca1 	.word	0x08006ca1
 8006d60:	200006fc 	.word	0x200006fc

08006d64 <_fwalk_sglue>:
 8006d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d68:	4607      	mov	r7, r0
 8006d6a:	4688      	mov	r8, r1
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	2600      	movs	r6, #0
 8006d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d74:	f1b9 0901 	subs.w	r9, r9, #1
 8006d78:	d505      	bpl.n	8006d86 <_fwalk_sglue+0x22>
 8006d7a:	6824      	ldr	r4, [r4, #0]
 8006d7c:	2c00      	cmp	r4, #0
 8006d7e:	d1f7      	bne.n	8006d70 <_fwalk_sglue+0xc>
 8006d80:	4630      	mov	r0, r6
 8006d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d86:	89ab      	ldrh	r3, [r5, #12]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d907      	bls.n	8006d9c <_fwalk_sglue+0x38>
 8006d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d90:	3301      	adds	r3, #1
 8006d92:	d003      	beq.n	8006d9c <_fwalk_sglue+0x38>
 8006d94:	4629      	mov	r1, r5
 8006d96:	4638      	mov	r0, r7
 8006d98:	47c0      	blx	r8
 8006d9a:	4306      	orrs	r6, r0
 8006d9c:	3568      	adds	r5, #104	; 0x68
 8006d9e:	e7e9      	b.n	8006d74 <_fwalk_sglue+0x10>

08006da0 <siprintf>:
 8006da0:	b40e      	push	{r1, r2, r3}
 8006da2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006da6:	b500      	push	{lr}
 8006da8:	b09c      	sub	sp, #112	; 0x70
 8006daa:	ab1d      	add	r3, sp, #116	; 0x74
 8006dac:	9002      	str	r0, [sp, #8]
 8006dae:	9006      	str	r0, [sp, #24]
 8006db0:	9107      	str	r1, [sp, #28]
 8006db2:	9104      	str	r1, [sp, #16]
 8006db4:	4808      	ldr	r0, [pc, #32]	; (8006dd8 <siprintf+0x38>)
 8006db6:	4909      	ldr	r1, [pc, #36]	; (8006ddc <siprintf+0x3c>)
 8006db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dbc:	9105      	str	r1, [sp, #20]
 8006dbe:	6800      	ldr	r0, [r0, #0]
 8006dc0:	a902      	add	r1, sp, #8
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	f001 fc1a 	bl	80085fc <_svfiprintf_r>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	9b02      	ldr	r3, [sp, #8]
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	b01c      	add	sp, #112	; 0x70
 8006dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd4:	b003      	add	sp, #12
 8006dd6:	4770      	bx	lr
 8006dd8:	20000074 	.word	0x20000074
 8006ddc:	ffff0208 	.word	0xffff0208

08006de0 <__sread>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	460c      	mov	r4, r1
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	f000 f86c 	bl	8006ec4 <_read_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	bfab      	itete	ge
 8006df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006df2:	89a3      	ldrhlt	r3, [r4, #12]
 8006df4:	181b      	addge	r3, r3, r0
 8006df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dfa:	bfac      	ite	ge
 8006dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dfe:	81a3      	strhlt	r3, [r4, #12]
 8006e00:	bd10      	pop	{r4, pc}

08006e02 <__swrite>:
 8006e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	461f      	mov	r7, r3
 8006e08:	898b      	ldrh	r3, [r1, #12]
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	05db      	lsls	r3, r3, #23
 8006e0e:	460c      	mov	r4, r1
 8006e10:	4616      	mov	r6, r2
 8006e12:	d505      	bpl.n	8006e20 <__swrite+0x1e>
 8006e14:	2302      	movs	r3, #2
 8006e16:	2200      	movs	r2, #0
 8006e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1c:	f000 f840 	bl	8006ea0 <_lseek_r>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	4632      	mov	r2, r6
 8006e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e36:	f000 b857 	b.w	8006ee8 <_write_r>

08006e3a <__sseek>:
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e42:	f000 f82d 	bl	8006ea0 <_lseek_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	bf15      	itete	ne
 8006e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e56:	81a3      	strheq	r3, [r4, #12]
 8006e58:	bf18      	it	ne
 8006e5a:	81a3      	strhne	r3, [r4, #12]
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <__sclose>:
 8006e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e62:	f000 b80d 	b.w	8006e80 <_close_r>

08006e66 <memset>:
 8006e66:	4603      	mov	r3, r0
 8006e68:	4402      	add	r2, r0
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d100      	bne.n	8006e70 <memset+0xa>
 8006e6e:	4770      	bx	lr
 8006e70:	f803 1b01 	strb.w	r1, [r3], #1
 8006e74:	e7f9      	b.n	8006e6a <memset+0x4>
	...

08006e78 <_localeconv_r>:
 8006e78:	4800      	ldr	r0, [pc, #0]	; (8006e7c <_localeconv_r+0x4>)
 8006e7a:	4770      	bx	lr
 8006e7c:	20000168 	.word	0x20000168

08006e80 <_close_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	2300      	movs	r3, #0
 8006e84:	4d05      	ldr	r5, [pc, #20]	; (8006e9c <_close_r+0x1c>)
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	602b      	str	r3, [r5, #0]
 8006e8c:	f7fb ff52 	bl	8002d34 <_close>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_close_r+0x1a>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_close_r+0x1a>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	20000700 	.word	0x20000700

08006ea0 <_lseek_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4d05      	ldr	r5, [pc, #20]	; (8006ec0 <_lseek_r+0x20>)
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7fb ff64 	bl	8002d7c <_lseek>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_lseek_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_lseek_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	20000700 	.word	0x20000700

08006ec4 <_read_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	4611      	mov	r1, r2
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4d05      	ldr	r5, [pc, #20]	; (8006ee4 <_read_r+0x20>)
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fb fef5 	bl	8002cc2 <_read>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_read_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_read_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000700 	.word	0x20000700

08006ee8 <_write_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4d05      	ldr	r5, [pc, #20]	; (8006f08 <_write_r+0x20>)
 8006ef4:	602a      	str	r2, [r5, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f7fb ff00 	bl	8002cfc <_write>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_write_r+0x1e>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_write_r+0x1e>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20000700 	.word	0x20000700

08006f0c <__errno>:
 8006f0c:	4b01      	ldr	r3, [pc, #4]	; (8006f14 <__errno+0x8>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000074 	.word	0x20000074

08006f18 <__libc_init_array>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	4d0c      	ldr	r5, [pc, #48]	; (8006f50 <__libc_init_array+0x38>)
 8006f1e:	4c0d      	ldr	r4, [pc, #52]	; (8006f54 <__libc_init_array+0x3c>)
 8006f20:	1b64      	subs	r4, r4, r5
 8006f22:	10a4      	asrs	r4, r4, #2
 8006f24:	42a6      	cmp	r6, r4
 8006f26:	d109      	bne.n	8006f3c <__libc_init_array+0x24>
 8006f28:	f002 f888 	bl	800903c <_init>
 8006f2c:	2600      	movs	r6, #0
 8006f2e:	4d0a      	ldr	r5, [pc, #40]	; (8006f58 <__libc_init_array+0x40>)
 8006f30:	4c0a      	ldr	r4, [pc, #40]	; (8006f5c <__libc_init_array+0x44>)
 8006f32:	1b64      	subs	r4, r4, r5
 8006f34:	10a4      	asrs	r4, r4, #2
 8006f36:	42a6      	cmp	r6, r4
 8006f38:	d105      	bne.n	8006f46 <__libc_init_array+0x2e>
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f40:	4798      	blx	r3
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7ee      	b.n	8006f24 <__libc_init_array+0xc>
 8006f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4a:	4798      	blx	r3
 8006f4c:	3601      	adds	r6, #1
 8006f4e:	e7f2      	b.n	8006f36 <__libc_init_array+0x1e>
 8006f50:	08009434 	.word	0x08009434
 8006f54:	08009434 	.word	0x08009434
 8006f58:	08009434 	.word	0x08009434
 8006f5c:	08009438 	.word	0x08009438

08006f60 <__retarget_lock_init_recursive>:
 8006f60:	4770      	bx	lr

08006f62 <__retarget_lock_acquire_recursive>:
 8006f62:	4770      	bx	lr

08006f64 <__retarget_lock_release_recursive>:
 8006f64:	4770      	bx	lr

08006f66 <memchr>:
 8006f66:	4603      	mov	r3, r0
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	b2c9      	uxtb	r1, r1
 8006f6c:	4402      	add	r2, r0
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	d101      	bne.n	8006f78 <memchr+0x12>
 8006f74:	2000      	movs	r0, #0
 8006f76:	e003      	b.n	8006f80 <memchr+0x1a>
 8006f78:	7804      	ldrb	r4, [r0, #0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	428c      	cmp	r4, r1
 8006f7e:	d1f6      	bne.n	8006f6e <memchr+0x8>
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <quorem>:
 8006f82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	6903      	ldr	r3, [r0, #16]
 8006f88:	690c      	ldr	r4, [r1, #16]
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	db7f      	blt.n	8007090 <quorem+0x10e>
 8006f90:	3c01      	subs	r4, #1
 8006f92:	f100 0514 	add.w	r5, r0, #20
 8006f96:	f101 0814 	add.w	r8, r1, #20
 8006f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	429a      	cmp	r2, r3
 8006fac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fb8:	d331      	bcc.n	800701e <quorem+0x9c>
 8006fba:	f04f 0e00 	mov.w	lr, #0
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	46ac      	mov	ip, r5
 8006fc2:	46f2      	mov	sl, lr
 8006fc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fc8:	b293      	uxth	r3, r2
 8006fca:	fb06 e303 	mla	r3, r6, r3, lr
 8006fce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fd2:	0c1a      	lsrs	r2, r3, #16
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	fb06 220e 	mla	r2, r6, lr, r2
 8006fda:	ebaa 0303 	sub.w	r3, sl, r3
 8006fde:	f8dc a000 	ldr.w	sl, [ip]
 8006fe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fe6:	fa1f fa8a 	uxth.w	sl, sl
 8006fea:	4453      	add	r3, sl
 8006fec:	f8dc a000 	ldr.w	sl, [ip]
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ff6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007000:	4581      	cmp	r9, r0
 8007002:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007006:	f84c 3b04 	str.w	r3, [ip], #4
 800700a:	d2db      	bcs.n	8006fc4 <quorem+0x42>
 800700c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007010:	b92b      	cbnz	r3, 800701e <quorem+0x9c>
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	3b04      	subs	r3, #4
 8007016:	429d      	cmp	r5, r3
 8007018:	461a      	mov	r2, r3
 800701a:	d32d      	bcc.n	8007078 <quorem+0xf6>
 800701c:	613c      	str	r4, [r7, #16]
 800701e:	4638      	mov	r0, r7
 8007020:	f001 f994 	bl	800834c <__mcmp>
 8007024:	2800      	cmp	r0, #0
 8007026:	db23      	blt.n	8007070 <quorem+0xee>
 8007028:	4629      	mov	r1, r5
 800702a:	2000      	movs	r0, #0
 800702c:	3601      	adds	r6, #1
 800702e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007032:	f8d1 c000 	ldr.w	ip, [r1]
 8007036:	b293      	uxth	r3, r2
 8007038:	1ac3      	subs	r3, r0, r3
 800703a:	0c12      	lsrs	r2, r2, #16
 800703c:	fa1f f08c 	uxth.w	r0, ip
 8007040:	4403      	add	r3, r0
 8007042:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800704a:	b29b      	uxth	r3, r3
 800704c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007050:	45c1      	cmp	r9, r8
 8007052:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007056:	f841 3b04 	str.w	r3, [r1], #4
 800705a:	d2e8      	bcs.n	800702e <quorem+0xac>
 800705c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007064:	b922      	cbnz	r2, 8007070 <quorem+0xee>
 8007066:	3b04      	subs	r3, #4
 8007068:	429d      	cmp	r5, r3
 800706a:	461a      	mov	r2, r3
 800706c:	d30a      	bcc.n	8007084 <quorem+0x102>
 800706e:	613c      	str	r4, [r7, #16]
 8007070:	4630      	mov	r0, r6
 8007072:	b003      	add	sp, #12
 8007074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	3b04      	subs	r3, #4
 800707c:	2a00      	cmp	r2, #0
 800707e:	d1cd      	bne.n	800701c <quorem+0x9a>
 8007080:	3c01      	subs	r4, #1
 8007082:	e7c8      	b.n	8007016 <quorem+0x94>
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	3b04      	subs	r3, #4
 8007088:	2a00      	cmp	r2, #0
 800708a:	d1f0      	bne.n	800706e <quorem+0xec>
 800708c:	3c01      	subs	r4, #1
 800708e:	e7eb      	b.n	8007068 <quorem+0xe6>
 8007090:	2000      	movs	r0, #0
 8007092:	e7ee      	b.n	8007072 <quorem+0xf0>
 8007094:	0000      	movs	r0, r0
	...

08007098 <_dtoa_r>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	4616      	mov	r6, r2
 800709e:	461f      	mov	r7, r3
 80070a0:	69c4      	ldr	r4, [r0, #28]
 80070a2:	b099      	sub	sp, #100	; 0x64
 80070a4:	4605      	mov	r5, r0
 80070a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80070aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80070ae:	b974      	cbnz	r4, 80070ce <_dtoa_r+0x36>
 80070b0:	2010      	movs	r0, #16
 80070b2:	f000 fe1d 	bl	8007cf0 <malloc>
 80070b6:	4602      	mov	r2, r0
 80070b8:	61e8      	str	r0, [r5, #28]
 80070ba:	b920      	cbnz	r0, 80070c6 <_dtoa_r+0x2e>
 80070bc:	21ef      	movs	r1, #239	; 0xef
 80070be:	4bac      	ldr	r3, [pc, #688]	; (8007370 <_dtoa_r+0x2d8>)
 80070c0:	48ac      	ldr	r0, [pc, #688]	; (8007374 <_dtoa_r+0x2dc>)
 80070c2:	f001 fc7b 	bl	80089bc <__assert_func>
 80070c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070ca:	6004      	str	r4, [r0, #0]
 80070cc:	60c4      	str	r4, [r0, #12]
 80070ce:	69eb      	ldr	r3, [r5, #28]
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	b151      	cbz	r1, 80070ea <_dtoa_r+0x52>
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	2301      	movs	r3, #1
 80070d8:	4093      	lsls	r3, r2
 80070da:	604a      	str	r2, [r1, #4]
 80070dc:	608b      	str	r3, [r1, #8]
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fefa 	bl	8007ed8 <_Bfree>
 80070e4:	2200      	movs	r2, #0
 80070e6:	69eb      	ldr	r3, [r5, #28]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	1e3b      	subs	r3, r7, #0
 80070ec:	bfaf      	iteee	ge
 80070ee:	2300      	movge	r3, #0
 80070f0:	2201      	movlt	r2, #1
 80070f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070f6:	9305      	strlt	r3, [sp, #20]
 80070f8:	bfa8      	it	ge
 80070fa:	f8c8 3000 	strge.w	r3, [r8]
 80070fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007102:	4b9d      	ldr	r3, [pc, #628]	; (8007378 <_dtoa_r+0x2e0>)
 8007104:	bfb8      	it	lt
 8007106:	f8c8 2000 	strlt.w	r2, [r8]
 800710a:	ea33 0309 	bics.w	r3, r3, r9
 800710e:	d119      	bne.n	8007144 <_dtoa_r+0xac>
 8007110:	f242 730f 	movw	r3, #9999	; 0x270f
 8007114:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800711c:	4333      	orrs	r3, r6
 800711e:	f000 8589 	beq.w	8007c34 <_dtoa_r+0xb9c>
 8007122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007124:	b953      	cbnz	r3, 800713c <_dtoa_r+0xa4>
 8007126:	4b95      	ldr	r3, [pc, #596]	; (800737c <_dtoa_r+0x2e4>)
 8007128:	e023      	b.n	8007172 <_dtoa_r+0xda>
 800712a:	4b95      	ldr	r3, [pc, #596]	; (8007380 <_dtoa_r+0x2e8>)
 800712c:	9303      	str	r3, [sp, #12]
 800712e:	3308      	adds	r3, #8
 8007130:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	9803      	ldr	r0, [sp, #12]
 8007136:	b019      	add	sp, #100	; 0x64
 8007138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	4b8f      	ldr	r3, [pc, #572]	; (800737c <_dtoa_r+0x2e4>)
 800713e:	9303      	str	r3, [sp, #12]
 8007140:	3303      	adds	r3, #3
 8007142:	e7f5      	b.n	8007130 <_dtoa_r+0x98>
 8007144:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007148:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800714c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007150:	2200      	movs	r2, #0
 8007152:	2300      	movs	r3, #0
 8007154:	f7f9 fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8007158:	4680      	mov	r8, r0
 800715a:	b160      	cbz	r0, 8007176 <_dtoa_r+0xde>
 800715c:	2301      	movs	r3, #1
 800715e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8562 	beq.w	8007c2e <_dtoa_r+0xb96>
 800716a:	4b86      	ldr	r3, [pc, #536]	; (8007384 <_dtoa_r+0x2ec>)
 800716c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	3b01      	subs	r3, #1
 8007172:	9303      	str	r3, [sp, #12]
 8007174:	e7de      	b.n	8007134 <_dtoa_r+0x9c>
 8007176:	ab16      	add	r3, sp, #88	; 0x58
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	ab17      	add	r3, sp, #92	; 0x5c
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	4628      	mov	r0, r5
 8007180:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007184:	f001 f98a 	bl	800849c <__d2b>
 8007188:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800718c:	4682      	mov	sl, r0
 800718e:	2c00      	cmp	r4, #0
 8007190:	d07e      	beq.n	8007290 <_dtoa_r+0x1f8>
 8007192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007198:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800719c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80071a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80071a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80071ac:	4619      	mov	r1, r3
 80071ae:	2200      	movs	r2, #0
 80071b0:	4b75      	ldr	r3, [pc, #468]	; (8007388 <_dtoa_r+0x2f0>)
 80071b2:	f7f8 ffd9 	bl	8000168 <__aeabi_dsub>
 80071b6:	a368      	add	r3, pc, #416	; (adr r3, 8007358 <_dtoa_r+0x2c0>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f9 f98c 	bl	80004d8 <__aeabi_dmul>
 80071c0:	a367      	add	r3, pc, #412	; (adr r3, 8007360 <_dtoa_r+0x2c8>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f8 ffd1 	bl	800016c <__adddf3>
 80071ca:	4606      	mov	r6, r0
 80071cc:	4620      	mov	r0, r4
 80071ce:	460f      	mov	r7, r1
 80071d0:	f7f9 f918 	bl	8000404 <__aeabi_i2d>
 80071d4:	a364      	add	r3, pc, #400	; (adr r3, 8007368 <_dtoa_r+0x2d0>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 f97d 	bl	80004d8 <__aeabi_dmul>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4630      	mov	r0, r6
 80071e4:	4639      	mov	r1, r7
 80071e6:	f7f8 ffc1 	bl	800016c <__adddf3>
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	f7f9 fc23 	bl	8000a38 <__aeabi_d2iz>
 80071f2:	2200      	movs	r2, #0
 80071f4:	4683      	mov	fp, r0
 80071f6:	2300      	movs	r3, #0
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 fbde 	bl	80009bc <__aeabi_dcmplt>
 8007200:	b148      	cbz	r0, 8007216 <_dtoa_r+0x17e>
 8007202:	4658      	mov	r0, fp
 8007204:	f7f9 f8fe 	bl	8000404 <__aeabi_i2d>
 8007208:	4632      	mov	r2, r6
 800720a:	463b      	mov	r3, r7
 800720c:	f7f9 fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 8007210:	b908      	cbnz	r0, 8007216 <_dtoa_r+0x17e>
 8007212:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007216:	f1bb 0f16 	cmp.w	fp, #22
 800721a:	d857      	bhi.n	80072cc <_dtoa_r+0x234>
 800721c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007220:	4b5a      	ldr	r3, [pc, #360]	; (800738c <_dtoa_r+0x2f4>)
 8007222:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 fbc7 	bl	80009bc <__aeabi_dcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	d04e      	beq.n	80072d0 <_dtoa_r+0x238>
 8007232:	2300      	movs	r3, #0
 8007234:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007238:	930f      	str	r3, [sp, #60]	; 0x3c
 800723a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800723c:	1b1b      	subs	r3, r3, r4
 800723e:	1e5a      	subs	r2, r3, #1
 8007240:	bf46      	itte	mi
 8007242:	f1c3 0901 	rsbmi	r9, r3, #1
 8007246:	2300      	movmi	r3, #0
 8007248:	f04f 0900 	movpl.w	r9, #0
 800724c:	9209      	str	r2, [sp, #36]	; 0x24
 800724e:	bf48      	it	mi
 8007250:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007252:	f1bb 0f00 	cmp.w	fp, #0
 8007256:	db3d      	blt.n	80072d4 <_dtoa_r+0x23c>
 8007258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800725e:	445b      	add	r3, fp
 8007260:	9309      	str	r3, [sp, #36]	; 0x24
 8007262:	2300      	movs	r3, #0
 8007264:	930a      	str	r3, [sp, #40]	; 0x28
 8007266:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007268:	2b09      	cmp	r3, #9
 800726a:	d867      	bhi.n	800733c <_dtoa_r+0x2a4>
 800726c:	2b05      	cmp	r3, #5
 800726e:	bfc4      	itt	gt
 8007270:	3b04      	subgt	r3, #4
 8007272:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007276:	bfc8      	it	gt
 8007278:	2400      	movgt	r4, #0
 800727a:	f1a3 0302 	sub.w	r3, r3, #2
 800727e:	bfd8      	it	le
 8007280:	2401      	movle	r4, #1
 8007282:	2b03      	cmp	r3, #3
 8007284:	f200 8086 	bhi.w	8007394 <_dtoa_r+0x2fc>
 8007288:	e8df f003 	tbb	[pc, r3]
 800728c:	5637392c 	.word	0x5637392c
 8007290:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007294:	441c      	add	r4, r3
 8007296:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800729a:	2b20      	cmp	r3, #32
 800729c:	bfc1      	itttt	gt
 800729e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072a2:	fa09 f903 	lslgt.w	r9, r9, r3
 80072a6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80072aa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80072ae:	bfd6      	itet	le
 80072b0:	f1c3 0320 	rsble	r3, r3, #32
 80072b4:	ea49 0003 	orrgt.w	r0, r9, r3
 80072b8:	fa06 f003 	lslle.w	r0, r6, r3
 80072bc:	f7f9 f892 	bl	80003e4 <__aeabi_ui2d>
 80072c0:	2201      	movs	r2, #1
 80072c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80072c6:	3c01      	subs	r4, #1
 80072c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80072ca:	e76f      	b.n	80071ac <_dtoa_r+0x114>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7b3      	b.n	8007238 <_dtoa_r+0x1a0>
 80072d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80072d2:	e7b2      	b.n	800723a <_dtoa_r+0x1a2>
 80072d4:	f1cb 0300 	rsb	r3, fp, #0
 80072d8:	930a      	str	r3, [sp, #40]	; 0x28
 80072da:	2300      	movs	r3, #0
 80072dc:	eba9 090b 	sub.w	r9, r9, fp
 80072e0:	930e      	str	r3, [sp, #56]	; 0x38
 80072e2:	e7c0      	b.n	8007266 <_dtoa_r+0x1ce>
 80072e4:	2300      	movs	r3, #0
 80072e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dc55      	bgt.n	800739a <_dtoa_r+0x302>
 80072ee:	2301      	movs	r3, #1
 80072f0:	461a      	mov	r2, r3
 80072f2:	9306      	str	r3, [sp, #24]
 80072f4:	9308      	str	r3, [sp, #32]
 80072f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80072f8:	e00b      	b.n	8007312 <_dtoa_r+0x27a>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e7f3      	b.n	80072e6 <_dtoa_r+0x24e>
 80072fe:	2300      	movs	r3, #0
 8007300:	930b      	str	r3, [sp, #44]	; 0x2c
 8007302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007304:	445b      	add	r3, fp
 8007306:	9306      	str	r3, [sp, #24]
 8007308:	3301      	adds	r3, #1
 800730a:	2b01      	cmp	r3, #1
 800730c:	9308      	str	r3, [sp, #32]
 800730e:	bfb8      	it	lt
 8007310:	2301      	movlt	r3, #1
 8007312:	2100      	movs	r1, #0
 8007314:	2204      	movs	r2, #4
 8007316:	69e8      	ldr	r0, [r5, #28]
 8007318:	f102 0614 	add.w	r6, r2, #20
 800731c:	429e      	cmp	r6, r3
 800731e:	d940      	bls.n	80073a2 <_dtoa_r+0x30a>
 8007320:	6041      	str	r1, [r0, #4]
 8007322:	4628      	mov	r0, r5
 8007324:	f000 fd98 	bl	8007e58 <_Balloc>
 8007328:	9003      	str	r0, [sp, #12]
 800732a:	2800      	cmp	r0, #0
 800732c:	d13c      	bne.n	80073a8 <_dtoa_r+0x310>
 800732e:	4602      	mov	r2, r0
 8007330:	f240 11af 	movw	r1, #431	; 0x1af
 8007334:	4b16      	ldr	r3, [pc, #88]	; (8007390 <_dtoa_r+0x2f8>)
 8007336:	e6c3      	b.n	80070c0 <_dtoa_r+0x28>
 8007338:	2301      	movs	r3, #1
 800733a:	e7e1      	b.n	8007300 <_dtoa_r+0x268>
 800733c:	2401      	movs	r4, #1
 800733e:	2300      	movs	r3, #0
 8007340:	940b      	str	r4, [sp, #44]	; 0x2c
 8007342:	9322      	str	r3, [sp, #136]	; 0x88
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	2200      	movs	r2, #0
 800734a:	9306      	str	r3, [sp, #24]
 800734c:	9308      	str	r3, [sp, #32]
 800734e:	2312      	movs	r3, #18
 8007350:	e7d1      	b.n	80072f6 <_dtoa_r+0x25e>
 8007352:	bf00      	nop
 8007354:	f3af 8000 	nop.w
 8007358:	636f4361 	.word	0x636f4361
 800735c:	3fd287a7 	.word	0x3fd287a7
 8007360:	8b60c8b3 	.word	0x8b60c8b3
 8007364:	3fc68a28 	.word	0x3fc68a28
 8007368:	509f79fb 	.word	0x509f79fb
 800736c:	3fd34413 	.word	0x3fd34413
 8007370:	08009107 	.word	0x08009107
 8007374:	0800911e 	.word	0x0800911e
 8007378:	7ff00000 	.word	0x7ff00000
 800737c:	08009103 	.word	0x08009103
 8007380:	080090fa 	.word	0x080090fa
 8007384:	080090d7 	.word	0x080090d7
 8007388:	3ff80000 	.word	0x3ff80000
 800738c:	08009208 	.word	0x08009208
 8007390:	08009176 	.word	0x08009176
 8007394:	2301      	movs	r3, #1
 8007396:	930b      	str	r3, [sp, #44]	; 0x2c
 8007398:	e7d4      	b.n	8007344 <_dtoa_r+0x2ac>
 800739a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800739c:	9306      	str	r3, [sp, #24]
 800739e:	9308      	str	r3, [sp, #32]
 80073a0:	e7b7      	b.n	8007312 <_dtoa_r+0x27a>
 80073a2:	3101      	adds	r1, #1
 80073a4:	0052      	lsls	r2, r2, #1
 80073a6:	e7b7      	b.n	8007318 <_dtoa_r+0x280>
 80073a8:	69eb      	ldr	r3, [r5, #28]
 80073aa:	9a03      	ldr	r2, [sp, #12]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	9b08      	ldr	r3, [sp, #32]
 80073b0:	2b0e      	cmp	r3, #14
 80073b2:	f200 80a8 	bhi.w	8007506 <_dtoa_r+0x46e>
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	f000 80a5 	beq.w	8007506 <_dtoa_r+0x46e>
 80073bc:	f1bb 0f00 	cmp.w	fp, #0
 80073c0:	dd34      	ble.n	800742c <_dtoa_r+0x394>
 80073c2:	4b9a      	ldr	r3, [pc, #616]	; (800762c <_dtoa_r+0x594>)
 80073c4:	f00b 020f 	and.w	r2, fp, #15
 80073c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073d8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80073dc:	d016      	beq.n	800740c <_dtoa_r+0x374>
 80073de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073e2:	4b93      	ldr	r3, [pc, #588]	; (8007630 <_dtoa_r+0x598>)
 80073e4:	2703      	movs	r7, #3
 80073e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073ea:	f7f9 f99f 	bl	800072c <__aeabi_ddiv>
 80073ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073f2:	f004 040f 	and.w	r4, r4, #15
 80073f6:	4e8e      	ldr	r6, [pc, #568]	; (8007630 <_dtoa_r+0x598>)
 80073f8:	b954      	cbnz	r4, 8007410 <_dtoa_r+0x378>
 80073fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007402:	f7f9 f993 	bl	800072c <__aeabi_ddiv>
 8007406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800740a:	e029      	b.n	8007460 <_dtoa_r+0x3c8>
 800740c:	2702      	movs	r7, #2
 800740e:	e7f2      	b.n	80073f6 <_dtoa_r+0x35e>
 8007410:	07e1      	lsls	r1, r4, #31
 8007412:	d508      	bpl.n	8007426 <_dtoa_r+0x38e>
 8007414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007418:	e9d6 2300 	ldrd	r2, r3, [r6]
 800741c:	f7f9 f85c 	bl	80004d8 <__aeabi_dmul>
 8007420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007424:	3701      	adds	r7, #1
 8007426:	1064      	asrs	r4, r4, #1
 8007428:	3608      	adds	r6, #8
 800742a:	e7e5      	b.n	80073f8 <_dtoa_r+0x360>
 800742c:	f000 80a5 	beq.w	800757a <_dtoa_r+0x4e2>
 8007430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007434:	f1cb 0400 	rsb	r4, fp, #0
 8007438:	4b7c      	ldr	r3, [pc, #496]	; (800762c <_dtoa_r+0x594>)
 800743a:	f004 020f 	and.w	r2, r4, #15
 800743e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f7f9 f847 	bl	80004d8 <__aeabi_dmul>
 800744a:	2702      	movs	r7, #2
 800744c:	2300      	movs	r3, #0
 800744e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007452:	4e77      	ldr	r6, [pc, #476]	; (8007630 <_dtoa_r+0x598>)
 8007454:	1124      	asrs	r4, r4, #4
 8007456:	2c00      	cmp	r4, #0
 8007458:	f040 8084 	bne.w	8007564 <_dtoa_r+0x4cc>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1d2      	bne.n	8007406 <_dtoa_r+0x36e>
 8007460:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007464:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007468:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8087 	beq.w	800757e <_dtoa_r+0x4e6>
 8007470:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007474:	2200      	movs	r2, #0
 8007476:	4b6f      	ldr	r3, [pc, #444]	; (8007634 <_dtoa_r+0x59c>)
 8007478:	f7f9 faa0 	bl	80009bc <__aeabi_dcmplt>
 800747c:	2800      	cmp	r0, #0
 800747e:	d07e      	beq.n	800757e <_dtoa_r+0x4e6>
 8007480:	9b08      	ldr	r3, [sp, #32]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d07b      	beq.n	800757e <_dtoa_r+0x4e6>
 8007486:	9b06      	ldr	r3, [sp, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	dd38      	ble.n	80074fe <_dtoa_r+0x466>
 800748c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007490:	2200      	movs	r2, #0
 8007492:	4b69      	ldr	r3, [pc, #420]	; (8007638 <_dtoa_r+0x5a0>)
 8007494:	f7f9 f820 	bl	80004d8 <__aeabi_dmul>
 8007498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800749c:	9c06      	ldr	r4, [sp, #24]
 800749e:	f10b 38ff 	add.w	r8, fp, #4294967295
 80074a2:	3701      	adds	r7, #1
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7f8 ffad 	bl	8000404 <__aeabi_i2d>
 80074aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074ae:	f7f9 f813 	bl	80004d8 <__aeabi_dmul>
 80074b2:	2200      	movs	r2, #0
 80074b4:	4b61      	ldr	r3, [pc, #388]	; (800763c <_dtoa_r+0x5a4>)
 80074b6:	f7f8 fe59 	bl	800016c <__adddf3>
 80074ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074c2:	9611      	str	r6, [sp, #68]	; 0x44
 80074c4:	2c00      	cmp	r4, #0
 80074c6:	d15d      	bne.n	8007584 <_dtoa_r+0x4ec>
 80074c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074cc:	2200      	movs	r2, #0
 80074ce:	4b5c      	ldr	r3, [pc, #368]	; (8007640 <_dtoa_r+0x5a8>)
 80074d0:	f7f8 fe4a 	bl	8000168 <__aeabi_dsub>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074dc:	4633      	mov	r3, r6
 80074de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074e0:	f7f9 fa8a 	bl	80009f8 <__aeabi_dcmpgt>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f040 8295 	bne.w	8007a14 <_dtoa_r+0x97c>
 80074ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074f4:	f7f9 fa62 	bl	80009bc <__aeabi_dcmplt>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f040 8289 	bne.w	8007a10 <_dtoa_r+0x978>
 80074fe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007502:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007506:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007508:	2b00      	cmp	r3, #0
 800750a:	f2c0 8151 	blt.w	80077b0 <_dtoa_r+0x718>
 800750e:	f1bb 0f0e 	cmp.w	fp, #14
 8007512:	f300 814d 	bgt.w	80077b0 <_dtoa_r+0x718>
 8007516:	4b45      	ldr	r3, [pc, #276]	; (800762c <_dtoa_r+0x594>)
 8007518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800751c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007520:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007524:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007526:	2b00      	cmp	r3, #0
 8007528:	f280 80da 	bge.w	80076e0 <_dtoa_r+0x648>
 800752c:	9b08      	ldr	r3, [sp, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f300 80d6 	bgt.w	80076e0 <_dtoa_r+0x648>
 8007534:	f040 826b 	bne.w	8007a0e <_dtoa_r+0x976>
 8007538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800753c:	2200      	movs	r2, #0
 800753e:	4b40      	ldr	r3, [pc, #256]	; (8007640 <_dtoa_r+0x5a8>)
 8007540:	f7f8 ffca 	bl	80004d8 <__aeabi_dmul>
 8007544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007548:	f7f9 fa4c 	bl	80009e4 <__aeabi_dcmpge>
 800754c:	9c08      	ldr	r4, [sp, #32]
 800754e:	4626      	mov	r6, r4
 8007550:	2800      	cmp	r0, #0
 8007552:	f040 8241 	bne.w	80079d8 <_dtoa_r+0x940>
 8007556:	2331      	movs	r3, #49	; 0x31
 8007558:	9f03      	ldr	r7, [sp, #12]
 800755a:	f10b 0b01 	add.w	fp, fp, #1
 800755e:	f807 3b01 	strb.w	r3, [r7], #1
 8007562:	e23d      	b.n	80079e0 <_dtoa_r+0x948>
 8007564:	07e2      	lsls	r2, r4, #31
 8007566:	d505      	bpl.n	8007574 <_dtoa_r+0x4dc>
 8007568:	e9d6 2300 	ldrd	r2, r3, [r6]
 800756c:	f7f8 ffb4 	bl	80004d8 <__aeabi_dmul>
 8007570:	2301      	movs	r3, #1
 8007572:	3701      	adds	r7, #1
 8007574:	1064      	asrs	r4, r4, #1
 8007576:	3608      	adds	r6, #8
 8007578:	e76d      	b.n	8007456 <_dtoa_r+0x3be>
 800757a:	2702      	movs	r7, #2
 800757c:	e770      	b.n	8007460 <_dtoa_r+0x3c8>
 800757e:	46d8      	mov	r8, fp
 8007580:	9c08      	ldr	r4, [sp, #32]
 8007582:	e78f      	b.n	80074a4 <_dtoa_r+0x40c>
 8007584:	9903      	ldr	r1, [sp, #12]
 8007586:	4b29      	ldr	r3, [pc, #164]	; (800762c <_dtoa_r+0x594>)
 8007588:	4421      	add	r1, r4
 800758a:	9112      	str	r1, [sp, #72]	; 0x48
 800758c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800758e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007592:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800759a:	2900      	cmp	r1, #0
 800759c:	d054      	beq.n	8007648 <_dtoa_r+0x5b0>
 800759e:	2000      	movs	r0, #0
 80075a0:	4928      	ldr	r1, [pc, #160]	; (8007644 <_dtoa_r+0x5ac>)
 80075a2:	f7f9 f8c3 	bl	800072c <__aeabi_ddiv>
 80075a6:	463b      	mov	r3, r7
 80075a8:	4632      	mov	r2, r6
 80075aa:	f7f8 fddd 	bl	8000168 <__aeabi_dsub>
 80075ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075b2:	9f03      	ldr	r7, [sp, #12]
 80075b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075b8:	f7f9 fa3e 	bl	8000a38 <__aeabi_d2iz>
 80075bc:	4604      	mov	r4, r0
 80075be:	f7f8 ff21 	bl	8000404 <__aeabi_i2d>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ca:	f7f8 fdcd 	bl	8000168 <__aeabi_dsub>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	3430      	adds	r4, #48	; 0x30
 80075d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075dc:	f807 4b01 	strb.w	r4, [r7], #1
 80075e0:	f7f9 f9ec 	bl	80009bc <__aeabi_dcmplt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d173      	bne.n	80076d0 <_dtoa_r+0x638>
 80075e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ec:	2000      	movs	r0, #0
 80075ee:	4911      	ldr	r1, [pc, #68]	; (8007634 <_dtoa_r+0x59c>)
 80075f0:	f7f8 fdba 	bl	8000168 <__aeabi_dsub>
 80075f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075f8:	f7f9 f9e0 	bl	80009bc <__aeabi_dcmplt>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f040 80b6 	bne.w	800776e <_dtoa_r+0x6d6>
 8007602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007604:	429f      	cmp	r7, r3
 8007606:	f43f af7a 	beq.w	80074fe <_dtoa_r+0x466>
 800760a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800760e:	2200      	movs	r2, #0
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <_dtoa_r+0x5a0>)
 8007612:	f7f8 ff61 	bl	80004d8 <__aeabi_dmul>
 8007616:	2200      	movs	r2, #0
 8007618:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800761c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <_dtoa_r+0x5a0>)
 8007622:	f7f8 ff59 	bl	80004d8 <__aeabi_dmul>
 8007626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800762a:	e7c3      	b.n	80075b4 <_dtoa_r+0x51c>
 800762c:	08009208 	.word	0x08009208
 8007630:	080091e0 	.word	0x080091e0
 8007634:	3ff00000 	.word	0x3ff00000
 8007638:	40240000 	.word	0x40240000
 800763c:	401c0000 	.word	0x401c0000
 8007640:	40140000 	.word	0x40140000
 8007644:	3fe00000 	.word	0x3fe00000
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f8 ff44 	bl	80004d8 <__aeabi_dmul>
 8007650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007652:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007656:	9c03      	ldr	r4, [sp, #12]
 8007658:	9314      	str	r3, [sp, #80]	; 0x50
 800765a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800765e:	f7f9 f9eb 	bl	8000a38 <__aeabi_d2iz>
 8007662:	9015      	str	r0, [sp, #84]	; 0x54
 8007664:	f7f8 fece 	bl	8000404 <__aeabi_i2d>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007670:	f7f8 fd7a 	bl	8000168 <__aeabi_dsub>
 8007674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007676:	4606      	mov	r6, r0
 8007678:	3330      	adds	r3, #48	; 0x30
 800767a:	f804 3b01 	strb.w	r3, [r4], #1
 800767e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007680:	460f      	mov	r7, r1
 8007682:	429c      	cmp	r4, r3
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	d124      	bne.n	80076d4 <_dtoa_r+0x63c>
 800768a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800768e:	4baf      	ldr	r3, [pc, #700]	; (800794c <_dtoa_r+0x8b4>)
 8007690:	f7f8 fd6c 	bl	800016c <__adddf3>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f9 f9ac 	bl	80009f8 <__aeabi_dcmpgt>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d163      	bne.n	800776c <_dtoa_r+0x6d4>
 80076a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076a8:	2000      	movs	r0, #0
 80076aa:	49a8      	ldr	r1, [pc, #672]	; (800794c <_dtoa_r+0x8b4>)
 80076ac:	f7f8 fd5c 	bl	8000168 <__aeabi_dsub>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4630      	mov	r0, r6
 80076b6:	4639      	mov	r1, r7
 80076b8:	f7f9 f980 	bl	80009bc <__aeabi_dcmplt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f43f af1e 	beq.w	80074fe <_dtoa_r+0x466>
 80076c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076c4:	1e7b      	subs	r3, r7, #1
 80076c6:	9314      	str	r3, [sp, #80]	; 0x50
 80076c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80076cc:	2b30      	cmp	r3, #48	; 0x30
 80076ce:	d0f8      	beq.n	80076c2 <_dtoa_r+0x62a>
 80076d0:	46c3      	mov	fp, r8
 80076d2:	e03b      	b.n	800774c <_dtoa_r+0x6b4>
 80076d4:	4b9e      	ldr	r3, [pc, #632]	; (8007950 <_dtoa_r+0x8b8>)
 80076d6:	f7f8 feff 	bl	80004d8 <__aeabi_dmul>
 80076da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076de:	e7bc      	b.n	800765a <_dtoa_r+0x5c2>
 80076e0:	9f03      	ldr	r7, [sp, #12]
 80076e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80076e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ea:	4640      	mov	r0, r8
 80076ec:	4649      	mov	r1, r9
 80076ee:	f7f9 f81d 	bl	800072c <__aeabi_ddiv>
 80076f2:	f7f9 f9a1 	bl	8000a38 <__aeabi_d2iz>
 80076f6:	4604      	mov	r4, r0
 80076f8:	f7f8 fe84 	bl	8000404 <__aeabi_i2d>
 80076fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007700:	f7f8 feea 	bl	80004d8 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4640      	mov	r0, r8
 800770a:	4649      	mov	r1, r9
 800770c:	f7f8 fd2c 	bl	8000168 <__aeabi_dsub>
 8007710:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007714:	f807 6b01 	strb.w	r6, [r7], #1
 8007718:	9e03      	ldr	r6, [sp, #12]
 800771a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800771e:	1bbe      	subs	r6, r7, r6
 8007720:	45b4      	cmp	ip, r6
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	d136      	bne.n	8007796 <_dtoa_r+0x6fe>
 8007728:	f7f8 fd20 	bl	800016c <__adddf3>
 800772c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007730:	4680      	mov	r8, r0
 8007732:	4689      	mov	r9, r1
 8007734:	f7f9 f960 	bl	80009f8 <__aeabi_dcmpgt>
 8007738:	bb58      	cbnz	r0, 8007792 <_dtoa_r+0x6fa>
 800773a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800773e:	4640      	mov	r0, r8
 8007740:	4649      	mov	r1, r9
 8007742:	f7f9 f931 	bl	80009a8 <__aeabi_dcmpeq>
 8007746:	b108      	cbz	r0, 800774c <_dtoa_r+0x6b4>
 8007748:	07e3      	lsls	r3, r4, #31
 800774a:	d422      	bmi.n	8007792 <_dtoa_r+0x6fa>
 800774c:	4651      	mov	r1, sl
 800774e:	4628      	mov	r0, r5
 8007750:	f000 fbc2 	bl	8007ed8 <_Bfree>
 8007754:	2300      	movs	r3, #0
 8007756:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007758:	703b      	strb	r3, [r7, #0]
 800775a:	f10b 0301 	add.w	r3, fp, #1
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007762:	2b00      	cmp	r3, #0
 8007764:	f43f ace6 	beq.w	8007134 <_dtoa_r+0x9c>
 8007768:	601f      	str	r7, [r3, #0]
 800776a:	e4e3      	b.n	8007134 <_dtoa_r+0x9c>
 800776c:	4627      	mov	r7, r4
 800776e:	463b      	mov	r3, r7
 8007770:	461f      	mov	r7, r3
 8007772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007776:	2a39      	cmp	r2, #57	; 0x39
 8007778:	d107      	bne.n	800778a <_dtoa_r+0x6f2>
 800777a:	9a03      	ldr	r2, [sp, #12]
 800777c:	429a      	cmp	r2, r3
 800777e:	d1f7      	bne.n	8007770 <_dtoa_r+0x6d8>
 8007780:	2230      	movs	r2, #48	; 0x30
 8007782:	9903      	ldr	r1, [sp, #12]
 8007784:	f108 0801 	add.w	r8, r8, #1
 8007788:	700a      	strb	r2, [r1, #0]
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	3201      	adds	r2, #1
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e79e      	b.n	80076d0 <_dtoa_r+0x638>
 8007792:	46d8      	mov	r8, fp
 8007794:	e7eb      	b.n	800776e <_dtoa_r+0x6d6>
 8007796:	2200      	movs	r2, #0
 8007798:	4b6d      	ldr	r3, [pc, #436]	; (8007950 <_dtoa_r+0x8b8>)
 800779a:	f7f8 fe9d 	bl	80004d8 <__aeabi_dmul>
 800779e:	2200      	movs	r2, #0
 80077a0:	2300      	movs	r3, #0
 80077a2:	4680      	mov	r8, r0
 80077a4:	4689      	mov	r9, r1
 80077a6:	f7f9 f8ff 	bl	80009a8 <__aeabi_dcmpeq>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d09b      	beq.n	80076e6 <_dtoa_r+0x64e>
 80077ae:	e7cd      	b.n	800774c <_dtoa_r+0x6b4>
 80077b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	f000 80c4 	beq.w	8007940 <_dtoa_r+0x8a8>
 80077b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077ba:	2a01      	cmp	r2, #1
 80077bc:	f300 80a8 	bgt.w	8007910 <_dtoa_r+0x878>
 80077c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	f000 80a0 	beq.w	8007908 <_dtoa_r+0x870>
 80077c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077cc:	464f      	mov	r7, r9
 80077ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d2:	2101      	movs	r1, #1
 80077d4:	441a      	add	r2, r3
 80077d6:	4628      	mov	r0, r5
 80077d8:	4499      	add	r9, r3
 80077da:	9209      	str	r2, [sp, #36]	; 0x24
 80077dc:	f000 fc32 	bl	8008044 <__i2b>
 80077e0:	4606      	mov	r6, r0
 80077e2:	b15f      	cbz	r7, 80077fc <_dtoa_r+0x764>
 80077e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dd08      	ble.n	80077fc <_dtoa_r+0x764>
 80077ea:	42bb      	cmp	r3, r7
 80077ec:	bfa8      	it	ge
 80077ee:	463b      	movge	r3, r7
 80077f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f2:	eba9 0903 	sub.w	r9, r9, r3
 80077f6:	1aff      	subs	r7, r7, r3
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	9309      	str	r3, [sp, #36]	; 0x24
 80077fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fe:	b1f3      	cbz	r3, 800783e <_dtoa_r+0x7a6>
 8007800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80a0 	beq.w	8007948 <_dtoa_r+0x8b0>
 8007808:	2c00      	cmp	r4, #0
 800780a:	dd10      	ble.n	800782e <_dtoa_r+0x796>
 800780c:	4631      	mov	r1, r6
 800780e:	4622      	mov	r2, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 fcd5 	bl	80081c0 <__pow5mult>
 8007816:	4652      	mov	r2, sl
 8007818:	4601      	mov	r1, r0
 800781a:	4606      	mov	r6, r0
 800781c:	4628      	mov	r0, r5
 800781e:	f000 fc27 	bl	8008070 <__multiply>
 8007822:	4680      	mov	r8, r0
 8007824:	4651      	mov	r1, sl
 8007826:	4628      	mov	r0, r5
 8007828:	f000 fb56 	bl	8007ed8 <_Bfree>
 800782c:	46c2      	mov	sl, r8
 800782e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007830:	1b1a      	subs	r2, r3, r4
 8007832:	d004      	beq.n	800783e <_dtoa_r+0x7a6>
 8007834:	4651      	mov	r1, sl
 8007836:	4628      	mov	r0, r5
 8007838:	f000 fcc2 	bl	80081c0 <__pow5mult>
 800783c:	4682      	mov	sl, r0
 800783e:	2101      	movs	r1, #1
 8007840:	4628      	mov	r0, r5
 8007842:	f000 fbff 	bl	8008044 <__i2b>
 8007846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007848:	4604      	mov	r4, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	f340 8082 	ble.w	8007954 <_dtoa_r+0x8bc>
 8007850:	461a      	mov	r2, r3
 8007852:	4601      	mov	r1, r0
 8007854:	4628      	mov	r0, r5
 8007856:	f000 fcb3 	bl	80081c0 <__pow5mult>
 800785a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800785c:	4604      	mov	r4, r0
 800785e:	2b01      	cmp	r3, #1
 8007860:	dd7b      	ble.n	800795a <_dtoa_r+0x8c2>
 8007862:	f04f 0800 	mov.w	r8, #0
 8007866:	6923      	ldr	r3, [r4, #16]
 8007868:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800786c:	6918      	ldr	r0, [r3, #16]
 800786e:	f000 fb9b 	bl	8007fa8 <__hi0bits>
 8007872:	f1c0 0020 	rsb	r0, r0, #32
 8007876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007878:	4418      	add	r0, r3
 800787a:	f010 001f 	ands.w	r0, r0, #31
 800787e:	f000 8092 	beq.w	80079a6 <_dtoa_r+0x90e>
 8007882:	f1c0 0320 	rsb	r3, r0, #32
 8007886:	2b04      	cmp	r3, #4
 8007888:	f340 8085 	ble.w	8007996 <_dtoa_r+0x8fe>
 800788c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788e:	f1c0 001c 	rsb	r0, r0, #28
 8007892:	4403      	add	r3, r0
 8007894:	4481      	add	r9, r0
 8007896:	4407      	add	r7, r0
 8007898:	9309      	str	r3, [sp, #36]	; 0x24
 800789a:	f1b9 0f00 	cmp.w	r9, #0
 800789e:	dd05      	ble.n	80078ac <_dtoa_r+0x814>
 80078a0:	4651      	mov	r1, sl
 80078a2:	464a      	mov	r2, r9
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 fce5 	bl	8008274 <__lshift>
 80078aa:	4682      	mov	sl, r0
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dd05      	ble.n	80078be <_dtoa_r+0x826>
 80078b2:	4621      	mov	r1, r4
 80078b4:	461a      	mov	r2, r3
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 fcdc 	bl	8008274 <__lshift>
 80078bc:	4604      	mov	r4, r0
 80078be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d072      	beq.n	80079aa <_dtoa_r+0x912>
 80078c4:	4621      	mov	r1, r4
 80078c6:	4650      	mov	r0, sl
 80078c8:	f000 fd40 	bl	800834c <__mcmp>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	da6c      	bge.n	80079aa <_dtoa_r+0x912>
 80078d0:	2300      	movs	r3, #0
 80078d2:	4651      	mov	r1, sl
 80078d4:	220a      	movs	r2, #10
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 fb20 	bl	8007f1c <__multadd>
 80078dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078de:	4682      	mov	sl, r0
 80078e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 81ac 	beq.w	8007c42 <_dtoa_r+0xbaa>
 80078ea:	2300      	movs	r3, #0
 80078ec:	4631      	mov	r1, r6
 80078ee:	220a      	movs	r2, #10
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 fb13 	bl	8007f1c <__multadd>
 80078f6:	9b06      	ldr	r3, [sp, #24]
 80078f8:	4606      	mov	r6, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f300 8093 	bgt.w	8007a26 <_dtoa_r+0x98e>
 8007900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007902:	2b02      	cmp	r3, #2
 8007904:	dc59      	bgt.n	80079ba <_dtoa_r+0x922>
 8007906:	e08e      	b.n	8007a26 <_dtoa_r+0x98e>
 8007908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800790a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800790e:	e75d      	b.n	80077cc <_dtoa_r+0x734>
 8007910:	9b08      	ldr	r3, [sp, #32]
 8007912:	1e5c      	subs	r4, r3, #1
 8007914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007916:	42a3      	cmp	r3, r4
 8007918:	bfbf      	itttt	lt
 800791a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800791c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800791e:	1ae3      	sublt	r3, r4, r3
 8007920:	18d2      	addlt	r2, r2, r3
 8007922:	bfa8      	it	ge
 8007924:	1b1c      	subge	r4, r3, r4
 8007926:	9b08      	ldr	r3, [sp, #32]
 8007928:	bfbe      	ittt	lt
 800792a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800792c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800792e:	2400      	movlt	r4, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfb5      	itete	lt
 8007934:	eba9 0703 	sublt.w	r7, r9, r3
 8007938:	464f      	movge	r7, r9
 800793a:	2300      	movlt	r3, #0
 800793c:	9b08      	ldrge	r3, [sp, #32]
 800793e:	e747      	b.n	80077d0 <_dtoa_r+0x738>
 8007940:	464f      	mov	r7, r9
 8007942:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007944:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007946:	e74c      	b.n	80077e2 <_dtoa_r+0x74a>
 8007948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800794a:	e773      	b.n	8007834 <_dtoa_r+0x79c>
 800794c:	3fe00000 	.word	0x3fe00000
 8007950:	40240000 	.word	0x40240000
 8007954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007956:	2b01      	cmp	r3, #1
 8007958:	dc18      	bgt.n	800798c <_dtoa_r+0x8f4>
 800795a:	9b04      	ldr	r3, [sp, #16]
 800795c:	b9b3      	cbnz	r3, 800798c <_dtoa_r+0x8f4>
 800795e:	9b05      	ldr	r3, [sp, #20]
 8007960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007964:	b993      	cbnz	r3, 800798c <_dtoa_r+0x8f4>
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800796c:	0d1b      	lsrs	r3, r3, #20
 800796e:	051b      	lsls	r3, r3, #20
 8007970:	b17b      	cbz	r3, 8007992 <_dtoa_r+0x8fa>
 8007972:	f04f 0801 	mov.w	r8, #1
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	f109 0901 	add.w	r9, r9, #1
 800797c:	3301      	adds	r3, #1
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007982:	2b00      	cmp	r3, #0
 8007984:	f47f af6f 	bne.w	8007866 <_dtoa_r+0x7ce>
 8007988:	2001      	movs	r0, #1
 800798a:	e774      	b.n	8007876 <_dtoa_r+0x7de>
 800798c:	f04f 0800 	mov.w	r8, #0
 8007990:	e7f6      	b.n	8007980 <_dtoa_r+0x8e8>
 8007992:	4698      	mov	r8, r3
 8007994:	e7f4      	b.n	8007980 <_dtoa_r+0x8e8>
 8007996:	d080      	beq.n	800789a <_dtoa_r+0x802>
 8007998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800799a:	331c      	adds	r3, #28
 800799c:	441a      	add	r2, r3
 800799e:	4499      	add	r9, r3
 80079a0:	441f      	add	r7, r3
 80079a2:	9209      	str	r2, [sp, #36]	; 0x24
 80079a4:	e779      	b.n	800789a <_dtoa_r+0x802>
 80079a6:	4603      	mov	r3, r0
 80079a8:	e7f6      	b.n	8007998 <_dtoa_r+0x900>
 80079aa:	9b08      	ldr	r3, [sp, #32]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc34      	bgt.n	8007a1a <_dtoa_r+0x982>
 80079b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	dd31      	ble.n	8007a1a <_dtoa_r+0x982>
 80079b6:	9b08      	ldr	r3, [sp, #32]
 80079b8:	9306      	str	r3, [sp, #24]
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	b963      	cbnz	r3, 80079d8 <_dtoa_r+0x940>
 80079be:	4621      	mov	r1, r4
 80079c0:	2205      	movs	r2, #5
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 faaa 	bl	8007f1c <__multadd>
 80079c8:	4601      	mov	r1, r0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4650      	mov	r0, sl
 80079ce:	f000 fcbd 	bl	800834c <__mcmp>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	f73f adbf 	bgt.w	8007556 <_dtoa_r+0x4be>
 80079d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079da:	9f03      	ldr	r7, [sp, #12]
 80079dc:	ea6f 0b03 	mvn.w	fp, r3
 80079e0:	f04f 0800 	mov.w	r8, #0
 80079e4:	4621      	mov	r1, r4
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fa76 	bl	8007ed8 <_Bfree>
 80079ec:	2e00      	cmp	r6, #0
 80079ee:	f43f aead 	beq.w	800774c <_dtoa_r+0x6b4>
 80079f2:	f1b8 0f00 	cmp.w	r8, #0
 80079f6:	d005      	beq.n	8007a04 <_dtoa_r+0x96c>
 80079f8:	45b0      	cmp	r8, r6
 80079fa:	d003      	beq.n	8007a04 <_dtoa_r+0x96c>
 80079fc:	4641      	mov	r1, r8
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fa6a 	bl	8007ed8 <_Bfree>
 8007a04:	4631      	mov	r1, r6
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fa66 	bl	8007ed8 <_Bfree>
 8007a0c:	e69e      	b.n	800774c <_dtoa_r+0x6b4>
 8007a0e:	2400      	movs	r4, #0
 8007a10:	4626      	mov	r6, r4
 8007a12:	e7e1      	b.n	80079d8 <_dtoa_r+0x940>
 8007a14:	46c3      	mov	fp, r8
 8007a16:	4626      	mov	r6, r4
 8007a18:	e59d      	b.n	8007556 <_dtoa_r+0x4be>
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80c8 	beq.w	8007bb2 <_dtoa_r+0xb1a>
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	9306      	str	r3, [sp, #24]
 8007a26:	2f00      	cmp	r7, #0
 8007a28:	dd05      	ble.n	8007a36 <_dtoa_r+0x99e>
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 fc20 	bl	8008274 <__lshift>
 8007a34:	4606      	mov	r6, r0
 8007a36:	f1b8 0f00 	cmp.w	r8, #0
 8007a3a:	d05b      	beq.n	8007af4 <_dtoa_r+0xa5c>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	6871      	ldr	r1, [r6, #4]
 8007a40:	f000 fa0a 	bl	8007e58 <_Balloc>
 8007a44:	4607      	mov	r7, r0
 8007a46:	b928      	cbnz	r0, 8007a54 <_dtoa_r+0x9bc>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007a4e:	4b81      	ldr	r3, [pc, #516]	; (8007c54 <_dtoa_r+0xbbc>)
 8007a50:	f7ff bb36 	b.w	80070c0 <_dtoa_r+0x28>
 8007a54:	6932      	ldr	r2, [r6, #16]
 8007a56:	f106 010c 	add.w	r1, r6, #12
 8007a5a:	3202      	adds	r2, #2
 8007a5c:	0092      	lsls	r2, r2, #2
 8007a5e:	300c      	adds	r0, #12
 8007a60:	f000 ff9e 	bl	80089a0 <memcpy>
 8007a64:	2201      	movs	r2, #1
 8007a66:	4639      	mov	r1, r7
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 fc03 	bl	8008274 <__lshift>
 8007a6e:	46b0      	mov	r8, r6
 8007a70:	4606      	mov	r6, r0
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	9a03      	ldr	r2, [sp, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	9308      	str	r3, [sp, #32]
 8007a7a:	9b06      	ldr	r3, [sp, #24]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a80:	9b04      	ldr	r3, [sp, #16]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	930a      	str	r3, [sp, #40]	; 0x28
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	4650      	mov	r0, sl
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	f7ff fa76 	bl	8006f82 <quorem>
 8007a96:	4641      	mov	r1, r8
 8007a98:	9006      	str	r0, [sp, #24]
 8007a9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a9e:	4650      	mov	r0, sl
 8007aa0:	f000 fc54 	bl	800834c <__mcmp>
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	9009      	str	r0, [sp, #36]	; 0x24
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 fc6a 	bl	8008384 <__mdiff>
 8007ab0:	68c2      	ldr	r2, [r0, #12]
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	bb02      	cbnz	r2, 8007af8 <_dtoa_r+0xa60>
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	4650      	mov	r0, sl
 8007aba:	f000 fc47 	bl	800834c <__mcmp>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	920c      	str	r2, [sp, #48]	; 0x30
 8007ac6:	f000 fa07 	bl	8007ed8 <_Bfree>
 8007aca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007acc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ace:	9f08      	ldr	r7, [sp, #32]
 8007ad0:	ea43 0102 	orr.w	r1, r3, r2
 8007ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad6:	4319      	orrs	r1, r3
 8007ad8:	d110      	bne.n	8007afc <_dtoa_r+0xa64>
 8007ada:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ade:	d029      	beq.n	8007b34 <_dtoa_r+0xa9c>
 8007ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dd02      	ble.n	8007aec <_dtoa_r+0xa54>
 8007ae6:	9b06      	ldr	r3, [sp, #24]
 8007ae8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	f883 9000 	strb.w	r9, [r3]
 8007af2:	e777      	b.n	80079e4 <_dtoa_r+0x94c>
 8007af4:	4630      	mov	r0, r6
 8007af6:	e7ba      	b.n	8007a6e <_dtoa_r+0x9d6>
 8007af8:	2201      	movs	r2, #1
 8007afa:	e7e1      	b.n	8007ac0 <_dtoa_r+0xa28>
 8007afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	db04      	blt.n	8007b0c <_dtoa_r+0xa74>
 8007b02:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b04:	430b      	orrs	r3, r1
 8007b06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	d120      	bne.n	8007b4e <_dtoa_r+0xab6>
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	dded      	ble.n	8007aec <_dtoa_r+0xa54>
 8007b10:	4651      	mov	r1, sl
 8007b12:	2201      	movs	r2, #1
 8007b14:	4628      	mov	r0, r5
 8007b16:	f000 fbad 	bl	8008274 <__lshift>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	f000 fc15 	bl	800834c <__mcmp>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	dc03      	bgt.n	8007b2e <_dtoa_r+0xa96>
 8007b26:	d1e1      	bne.n	8007aec <_dtoa_r+0xa54>
 8007b28:	f019 0f01 	tst.w	r9, #1
 8007b2c:	d0de      	beq.n	8007aec <_dtoa_r+0xa54>
 8007b2e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b32:	d1d8      	bne.n	8007ae6 <_dtoa_r+0xa4e>
 8007b34:	2339      	movs	r3, #57	; 0x39
 8007b36:	9a04      	ldr	r2, [sp, #16]
 8007b38:	7013      	strb	r3, [r2, #0]
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	461f      	mov	r7, r3
 8007b3e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2a39      	cmp	r2, #57	; 0x39
 8007b46:	d06b      	beq.n	8007c20 <_dtoa_r+0xb88>
 8007b48:	3201      	adds	r2, #1
 8007b4a:	701a      	strb	r2, [r3, #0]
 8007b4c:	e74a      	b.n	80079e4 <_dtoa_r+0x94c>
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	dd07      	ble.n	8007b62 <_dtoa_r+0xaca>
 8007b52:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b56:	d0ed      	beq.n	8007b34 <_dtoa_r+0xa9c>
 8007b58:	9a04      	ldr	r2, [sp, #16]
 8007b5a:	f109 0301 	add.w	r3, r9, #1
 8007b5e:	7013      	strb	r3, [r2, #0]
 8007b60:	e740      	b.n	80079e4 <_dtoa_r+0x94c>
 8007b62:	9b08      	ldr	r3, [sp, #32]
 8007b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b66:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d042      	beq.n	8007bf4 <_dtoa_r+0xb5c>
 8007b6e:	4651      	mov	r1, sl
 8007b70:	2300      	movs	r3, #0
 8007b72:	220a      	movs	r2, #10
 8007b74:	4628      	mov	r0, r5
 8007b76:	f000 f9d1 	bl	8007f1c <__multadd>
 8007b7a:	45b0      	cmp	r8, r6
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	f04f 020a 	mov.w	r2, #10
 8007b86:	4641      	mov	r1, r8
 8007b88:	4628      	mov	r0, r5
 8007b8a:	d107      	bne.n	8007b9c <_dtoa_r+0xb04>
 8007b8c:	f000 f9c6 	bl	8007f1c <__multadd>
 8007b90:	4680      	mov	r8, r0
 8007b92:	4606      	mov	r6, r0
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	3301      	adds	r3, #1
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	e775      	b.n	8007a88 <_dtoa_r+0x9f0>
 8007b9c:	f000 f9be 	bl	8007f1c <__multadd>
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	220a      	movs	r2, #10
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f9b7 	bl	8007f1c <__multadd>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	e7f0      	b.n	8007b94 <_dtoa_r+0xafc>
 8007bb2:	9b08      	ldr	r3, [sp, #32]
 8007bb4:	9306      	str	r3, [sp, #24]
 8007bb6:	9f03      	ldr	r7, [sp, #12]
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4650      	mov	r0, sl
 8007bbc:	f7ff f9e1 	bl	8006f82 <quorem>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bc6:	f807 9b01 	strb.w	r9, [r7], #1
 8007bca:	1afa      	subs	r2, r7, r3
 8007bcc:	9b06      	ldr	r3, [sp, #24]
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	dd07      	ble.n	8007be2 <_dtoa_r+0xb4a>
 8007bd2:	4651      	mov	r1, sl
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	220a      	movs	r2, #10
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 f99f 	bl	8007f1c <__multadd>
 8007bde:	4682      	mov	sl, r0
 8007be0:	e7ea      	b.n	8007bb8 <_dtoa_r+0xb20>
 8007be2:	9b06      	ldr	r3, [sp, #24]
 8007be4:	f04f 0800 	mov.w	r8, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	bfcc      	ite	gt
 8007bec:	461f      	movgt	r7, r3
 8007bee:	2701      	movle	r7, #1
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	441f      	add	r7, r3
 8007bf4:	4651      	mov	r1, sl
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 fb3b 	bl	8008274 <__lshift>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4682      	mov	sl, r0
 8007c02:	f000 fba3 	bl	800834c <__mcmp>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	dc97      	bgt.n	8007b3a <_dtoa_r+0xaa2>
 8007c0a:	d102      	bne.n	8007c12 <_dtoa_r+0xb7a>
 8007c0c:	f019 0f01 	tst.w	r9, #1
 8007c10:	d193      	bne.n	8007b3a <_dtoa_r+0xaa2>
 8007c12:	463b      	mov	r3, r7
 8007c14:	461f      	mov	r7, r3
 8007c16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c1a:	2a30      	cmp	r2, #48	; 0x30
 8007c1c:	d0fa      	beq.n	8007c14 <_dtoa_r+0xb7c>
 8007c1e:	e6e1      	b.n	80079e4 <_dtoa_r+0x94c>
 8007c20:	9a03      	ldr	r2, [sp, #12]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d18a      	bne.n	8007b3c <_dtoa_r+0xaa4>
 8007c26:	2331      	movs	r3, #49	; 0x31
 8007c28:	f10b 0b01 	add.w	fp, fp, #1
 8007c2c:	e797      	b.n	8007b5e <_dtoa_r+0xac6>
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <_dtoa_r+0xbc0>)
 8007c30:	f7ff ba9f 	b.w	8007172 <_dtoa_r+0xda>
 8007c34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f47f aa77 	bne.w	800712a <_dtoa_r+0x92>
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <_dtoa_r+0xbc4>)
 8007c3e:	f7ff ba98 	b.w	8007172 <_dtoa_r+0xda>
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dcb6      	bgt.n	8007bb6 <_dtoa_r+0xb1e>
 8007c48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	f73f aeb5 	bgt.w	80079ba <_dtoa_r+0x922>
 8007c50:	e7b1      	b.n	8007bb6 <_dtoa_r+0xb1e>
 8007c52:	bf00      	nop
 8007c54:	08009176 	.word	0x08009176
 8007c58:	080090d6 	.word	0x080090d6
 8007c5c:	080090fa 	.word	0x080090fa

08007c60 <_free_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d040      	beq.n	8007cea <_free_r+0x8a>
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f0c      	subs	r4, r1, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	18e4      	addlt	r4, r4, r3
 8007c74:	f000 f8e4 	bl	8007e40 <__malloc_lock>
 8007c78:	4a1c      	ldr	r2, [pc, #112]	; (8007cec <_free_r+0x8c>)
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x2c>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	4628      	mov	r0, r5
 8007c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c88:	f000 b8e0 	b.w	8007e4c <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x42>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	1821      	adds	r1, r4, r0
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1809      	addeq	r1, r1, r0
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x1e>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x4c>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x42>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1850      	adds	r0, r2, r1
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x6c>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	4401      	add	r1, r0
 8007cb8:	1850      	adds	r0, r2, r1
 8007cba:	4283      	cmp	r3, r0
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x22>
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4408      	add	r0, r1
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	6053      	str	r3, [r2, #4]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x22>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x74>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x22>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	1821      	adds	r1, r4, r0
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf01      	itttt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	1809      	addeq	r1, r1, r0
 8007ce2:	6021      	streq	r1, [r4, #0]
 8007ce4:	6063      	str	r3, [r4, #4]
 8007ce6:	6054      	str	r4, [r2, #4]
 8007ce8:	e7cb      	b.n	8007c82 <_free_r+0x22>
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20000708 	.word	0x20000708

08007cf0 <malloc>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <malloc+0xc>)
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f000 b823 	b.w	8007d40 <_malloc_r>
 8007cfa:	bf00      	nop
 8007cfc:	20000074 	.word	0x20000074

08007d00 <sbrk_aligned>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4e0e      	ldr	r6, [pc, #56]	; (8007d3c <sbrk_aligned+0x3c>)
 8007d04:	460c      	mov	r4, r1
 8007d06:	6831      	ldr	r1, [r6, #0]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	b911      	cbnz	r1, 8007d12 <sbrk_aligned+0x12>
 8007d0c:	f000 fe38 	bl	8008980 <_sbrk_r>
 8007d10:	6030      	str	r0, [r6, #0]
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 fe33 	bl	8008980 <_sbrk_r>
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	d00a      	beq.n	8007d34 <sbrk_aligned+0x34>
 8007d1e:	1cc4      	adds	r4, r0, #3
 8007d20:	f024 0403 	bic.w	r4, r4, #3
 8007d24:	42a0      	cmp	r0, r4
 8007d26:	d007      	beq.n	8007d38 <sbrk_aligned+0x38>
 8007d28:	1a21      	subs	r1, r4, r0
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 fe28 	bl	8008980 <_sbrk_r>
 8007d30:	3001      	adds	r0, #1
 8007d32:	d101      	bne.n	8007d38 <sbrk_aligned+0x38>
 8007d34:	f04f 34ff 	mov.w	r4, #4294967295
 8007d38:	4620      	mov	r0, r4
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	2000070c 	.word	0x2000070c

08007d40 <_malloc_r>:
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d44:	1ccd      	adds	r5, r1, #3
 8007d46:	f025 0503 	bic.w	r5, r5, #3
 8007d4a:	3508      	adds	r5, #8
 8007d4c:	2d0c      	cmp	r5, #12
 8007d4e:	bf38      	it	cc
 8007d50:	250c      	movcc	r5, #12
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	4607      	mov	r7, r0
 8007d56:	db01      	blt.n	8007d5c <_malloc_r+0x1c>
 8007d58:	42a9      	cmp	r1, r5
 8007d5a:	d905      	bls.n	8007d68 <_malloc_r+0x28>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	2600      	movs	r6, #0
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4630      	mov	r0, r6
 8007d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e3c <_malloc_r+0xfc>
 8007d6c:	f000 f868 	bl	8007e40 <__malloc_lock>
 8007d70:	f8d8 3000 	ldr.w	r3, [r8]
 8007d74:	461c      	mov	r4, r3
 8007d76:	bb5c      	cbnz	r4, 8007dd0 <_malloc_r+0x90>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f7ff ffc0 	bl	8007d00 <sbrk_aligned>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	4604      	mov	r4, r0
 8007d84:	d155      	bne.n	8007e32 <_malloc_r+0xf2>
 8007d86:	f8d8 4000 	ldr.w	r4, [r8]
 8007d8a:	4626      	mov	r6, r4
 8007d8c:	2e00      	cmp	r6, #0
 8007d8e:	d145      	bne.n	8007e1c <_malloc_r+0xdc>
 8007d90:	2c00      	cmp	r4, #0
 8007d92:	d048      	beq.n	8007e26 <_malloc_r+0xe6>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	4631      	mov	r1, r6
 8007d98:	4638      	mov	r0, r7
 8007d9a:	eb04 0903 	add.w	r9, r4, r3
 8007d9e:	f000 fdef 	bl	8008980 <_sbrk_r>
 8007da2:	4581      	cmp	r9, r0
 8007da4:	d13f      	bne.n	8007e26 <_malloc_r+0xe6>
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	4638      	mov	r0, r7
 8007daa:	1a6d      	subs	r5, r5, r1
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7ff ffa7 	bl	8007d00 <sbrk_aligned>
 8007db2:	3001      	adds	r0, #1
 8007db4:	d037      	beq.n	8007e26 <_malloc_r+0xe6>
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	442b      	add	r3, r5
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d038      	beq.n	8007e36 <_malloc_r+0xf6>
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	42a2      	cmp	r2, r4
 8007dc8:	d12b      	bne.n	8007e22 <_malloc_r+0xe2>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	e00f      	b.n	8007df0 <_malloc_r+0xb0>
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	1b52      	subs	r2, r2, r5
 8007dd4:	d41f      	bmi.n	8007e16 <_malloc_r+0xd6>
 8007dd6:	2a0b      	cmp	r2, #11
 8007dd8:	d917      	bls.n	8007e0a <_malloc_r+0xca>
 8007dda:	1961      	adds	r1, r4, r5
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	6025      	str	r5, [r4, #0]
 8007de0:	bf18      	it	ne
 8007de2:	6059      	strne	r1, [r3, #4]
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	bf08      	it	eq
 8007de8:	f8c8 1000 	streq.w	r1, [r8]
 8007dec:	5162      	str	r2, [r4, r5]
 8007dee:	604b      	str	r3, [r1, #4]
 8007df0:	4638      	mov	r0, r7
 8007df2:	f104 060b 	add.w	r6, r4, #11
 8007df6:	f000 f829 	bl	8007e4c <__malloc_unlock>
 8007dfa:	f026 0607 	bic.w	r6, r6, #7
 8007dfe:	1d23      	adds	r3, r4, #4
 8007e00:	1af2      	subs	r2, r6, r3
 8007e02:	d0ae      	beq.n	8007d62 <_malloc_r+0x22>
 8007e04:	1b9b      	subs	r3, r3, r6
 8007e06:	50a3      	str	r3, [r4, r2]
 8007e08:	e7ab      	b.n	8007d62 <_malloc_r+0x22>
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	d1dd      	bne.n	8007dcc <_malloc_r+0x8c>
 8007e10:	f8c8 2000 	str.w	r2, [r8]
 8007e14:	e7ec      	b.n	8007df0 <_malloc_r+0xb0>
 8007e16:	4623      	mov	r3, r4
 8007e18:	6864      	ldr	r4, [r4, #4]
 8007e1a:	e7ac      	b.n	8007d76 <_malloc_r+0x36>
 8007e1c:	4634      	mov	r4, r6
 8007e1e:	6876      	ldr	r6, [r6, #4]
 8007e20:	e7b4      	b.n	8007d8c <_malloc_r+0x4c>
 8007e22:	4613      	mov	r3, r2
 8007e24:	e7cc      	b.n	8007dc0 <_malloc_r+0x80>
 8007e26:	230c      	movs	r3, #12
 8007e28:	4638      	mov	r0, r7
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	f000 f80e 	bl	8007e4c <__malloc_unlock>
 8007e30:	e797      	b.n	8007d62 <_malloc_r+0x22>
 8007e32:	6025      	str	r5, [r4, #0]
 8007e34:	e7dc      	b.n	8007df0 <_malloc_r+0xb0>
 8007e36:	605b      	str	r3, [r3, #4]
 8007e38:	deff      	udf	#255	; 0xff
 8007e3a:	bf00      	nop
 8007e3c:	20000708 	.word	0x20000708

08007e40 <__malloc_lock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__malloc_lock+0x8>)
 8007e42:	f7ff b88e 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 8007e46:	bf00      	nop
 8007e48:	20000704 	.word	0x20000704

08007e4c <__malloc_unlock>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	; (8007e54 <__malloc_unlock+0x8>)
 8007e4e:	f7ff b889 	b.w	8006f64 <__retarget_lock_release_recursive>
 8007e52:	bf00      	nop
 8007e54:	20000704 	.word	0x20000704

08007e58 <_Balloc>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	69c6      	ldr	r6, [r0, #28]
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	460d      	mov	r5, r1
 8007e60:	b976      	cbnz	r6, 8007e80 <_Balloc+0x28>
 8007e62:	2010      	movs	r0, #16
 8007e64:	f7ff ff44 	bl	8007cf0 <malloc>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	61e0      	str	r0, [r4, #28]
 8007e6c:	b920      	cbnz	r0, 8007e78 <_Balloc+0x20>
 8007e6e:	216b      	movs	r1, #107	; 0x6b
 8007e70:	4b17      	ldr	r3, [pc, #92]	; (8007ed0 <_Balloc+0x78>)
 8007e72:	4818      	ldr	r0, [pc, #96]	; (8007ed4 <_Balloc+0x7c>)
 8007e74:	f000 fda2 	bl	80089bc <__assert_func>
 8007e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e7c:	6006      	str	r6, [r0, #0]
 8007e7e:	60c6      	str	r6, [r0, #12]
 8007e80:	69e6      	ldr	r6, [r4, #28]
 8007e82:	68f3      	ldr	r3, [r6, #12]
 8007e84:	b183      	cbz	r3, 8007ea8 <_Balloc+0x50>
 8007e86:	69e3      	ldr	r3, [r4, #28]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e8e:	b9b8      	cbnz	r0, 8007ec0 <_Balloc+0x68>
 8007e90:	2101      	movs	r1, #1
 8007e92:	fa01 f605 	lsl.w	r6, r1, r5
 8007e96:	1d72      	adds	r2, r6, #5
 8007e98:	4620      	mov	r0, r4
 8007e9a:	0092      	lsls	r2, r2, #2
 8007e9c:	f000 fdac 	bl	80089f8 <_calloc_r>
 8007ea0:	b160      	cbz	r0, 8007ebc <_Balloc+0x64>
 8007ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ea6:	e00e      	b.n	8007ec6 <_Balloc+0x6e>
 8007ea8:	2221      	movs	r2, #33	; 0x21
 8007eaa:	2104      	movs	r1, #4
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fda3 	bl	80089f8 <_calloc_r>
 8007eb2:	69e3      	ldr	r3, [r4, #28]
 8007eb4:	60f0      	str	r0, [r6, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e4      	bne.n	8007e86 <_Balloc+0x2e>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	6802      	ldr	r2, [r0, #0]
 8007ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ecc:	e7f7      	b.n	8007ebe <_Balloc+0x66>
 8007ece:	bf00      	nop
 8007ed0:	08009107 	.word	0x08009107
 8007ed4:	08009187 	.word	0x08009187

08007ed8 <_Bfree>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	69c6      	ldr	r6, [r0, #28]
 8007edc:	4605      	mov	r5, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	b976      	cbnz	r6, 8007f00 <_Bfree+0x28>
 8007ee2:	2010      	movs	r0, #16
 8007ee4:	f7ff ff04 	bl	8007cf0 <malloc>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	61e8      	str	r0, [r5, #28]
 8007eec:	b920      	cbnz	r0, 8007ef8 <_Bfree+0x20>
 8007eee:	218f      	movs	r1, #143	; 0x8f
 8007ef0:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <_Bfree+0x3c>)
 8007ef2:	4809      	ldr	r0, [pc, #36]	; (8007f18 <_Bfree+0x40>)
 8007ef4:	f000 fd62 	bl	80089bc <__assert_func>
 8007ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007efc:	6006      	str	r6, [r0, #0]
 8007efe:	60c6      	str	r6, [r0, #12]
 8007f00:	b13c      	cbz	r4, 8007f12 <_Bfree+0x3a>
 8007f02:	69eb      	ldr	r3, [r5, #28]
 8007f04:	6862      	ldr	r2, [r4, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f0c:	6021      	str	r1, [r4, #0]
 8007f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	08009107 	.word	0x08009107
 8007f18:	08009187 	.word	0x08009187

08007f1c <__multadd>:
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	4607      	mov	r7, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	461e      	mov	r6, r3
 8007f26:	2000      	movs	r0, #0
 8007f28:	690d      	ldr	r5, [r1, #16]
 8007f2a:	f101 0c14 	add.w	ip, r1, #20
 8007f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f32:	3001      	adds	r0, #1
 8007f34:	b299      	uxth	r1, r3
 8007f36:	fb02 6101 	mla	r1, r2, r1, r6
 8007f3a:	0c1e      	lsrs	r6, r3, #16
 8007f3c:	0c0b      	lsrs	r3, r1, #16
 8007f3e:	fb02 3306 	mla	r3, r2, r6, r3
 8007f42:	b289      	uxth	r1, r1
 8007f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f48:	4285      	cmp	r5, r0
 8007f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8007f52:	dcec      	bgt.n	8007f2e <__multadd+0x12>
 8007f54:	b30e      	cbz	r6, 8007f9a <__multadd+0x7e>
 8007f56:	68a3      	ldr	r3, [r4, #8]
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dc19      	bgt.n	8007f90 <__multadd+0x74>
 8007f5c:	6861      	ldr	r1, [r4, #4]
 8007f5e:	4638      	mov	r0, r7
 8007f60:	3101      	adds	r1, #1
 8007f62:	f7ff ff79 	bl	8007e58 <_Balloc>
 8007f66:	4680      	mov	r8, r0
 8007f68:	b928      	cbnz	r0, 8007f76 <__multadd+0x5a>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	21ba      	movs	r1, #186	; 0xba
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <__multadd+0x84>)
 8007f70:	480c      	ldr	r0, [pc, #48]	; (8007fa4 <__multadd+0x88>)
 8007f72:	f000 fd23 	bl	80089bc <__assert_func>
 8007f76:	6922      	ldr	r2, [r4, #16]
 8007f78:	f104 010c 	add.w	r1, r4, #12
 8007f7c:	3202      	adds	r2, #2
 8007f7e:	0092      	lsls	r2, r2, #2
 8007f80:	300c      	adds	r0, #12
 8007f82:	f000 fd0d 	bl	80089a0 <memcpy>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7ff ffa5 	bl	8007ed8 <_Bfree>
 8007f8e:	4644      	mov	r4, r8
 8007f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f94:	3501      	adds	r5, #1
 8007f96:	615e      	str	r6, [r3, #20]
 8007f98:	6125      	str	r5, [r4, #16]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa0:	08009176 	.word	0x08009176
 8007fa4:	08009187 	.word	0x08009187

08007fa8 <__hi0bits>:
 8007fa8:	0c02      	lsrs	r2, r0, #16
 8007faa:	0412      	lsls	r2, r2, #16
 8007fac:	4603      	mov	r3, r0
 8007fae:	b9ca      	cbnz	r2, 8007fe4 <__hi0bits+0x3c>
 8007fb0:	0403      	lsls	r3, r0, #16
 8007fb2:	2010      	movs	r0, #16
 8007fb4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007fb8:	bf04      	itt	eq
 8007fba:	021b      	lsleq	r3, r3, #8
 8007fbc:	3008      	addeq	r0, #8
 8007fbe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fc2:	bf04      	itt	eq
 8007fc4:	011b      	lsleq	r3, r3, #4
 8007fc6:	3004      	addeq	r0, #4
 8007fc8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fcc:	bf04      	itt	eq
 8007fce:	009b      	lsleq	r3, r3, #2
 8007fd0:	3002      	addeq	r0, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	db05      	blt.n	8007fe2 <__hi0bits+0x3a>
 8007fd6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007fda:	f100 0001 	add.w	r0, r0, #1
 8007fde:	bf08      	it	eq
 8007fe0:	2020      	moveq	r0, #32
 8007fe2:	4770      	bx	lr
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	e7e5      	b.n	8007fb4 <__hi0bits+0xc>

08007fe8 <__lo0bits>:
 8007fe8:	6803      	ldr	r3, [r0, #0]
 8007fea:	4602      	mov	r2, r0
 8007fec:	f013 0007 	ands.w	r0, r3, #7
 8007ff0:	d00b      	beq.n	800800a <__lo0bits+0x22>
 8007ff2:	07d9      	lsls	r1, r3, #31
 8007ff4:	d421      	bmi.n	800803a <__lo0bits+0x52>
 8007ff6:	0798      	lsls	r0, r3, #30
 8007ff8:	bf49      	itett	mi
 8007ffa:	085b      	lsrmi	r3, r3, #1
 8007ffc:	089b      	lsrpl	r3, r3, #2
 8007ffe:	2001      	movmi	r0, #1
 8008000:	6013      	strmi	r3, [r2, #0]
 8008002:	bf5c      	itt	pl
 8008004:	2002      	movpl	r0, #2
 8008006:	6013      	strpl	r3, [r2, #0]
 8008008:	4770      	bx	lr
 800800a:	b299      	uxth	r1, r3
 800800c:	b909      	cbnz	r1, 8008012 <__lo0bits+0x2a>
 800800e:	2010      	movs	r0, #16
 8008010:	0c1b      	lsrs	r3, r3, #16
 8008012:	b2d9      	uxtb	r1, r3
 8008014:	b909      	cbnz	r1, 800801a <__lo0bits+0x32>
 8008016:	3008      	adds	r0, #8
 8008018:	0a1b      	lsrs	r3, r3, #8
 800801a:	0719      	lsls	r1, r3, #28
 800801c:	bf04      	itt	eq
 800801e:	091b      	lsreq	r3, r3, #4
 8008020:	3004      	addeq	r0, #4
 8008022:	0799      	lsls	r1, r3, #30
 8008024:	bf04      	itt	eq
 8008026:	089b      	lsreq	r3, r3, #2
 8008028:	3002      	addeq	r0, #2
 800802a:	07d9      	lsls	r1, r3, #31
 800802c:	d403      	bmi.n	8008036 <__lo0bits+0x4e>
 800802e:	085b      	lsrs	r3, r3, #1
 8008030:	f100 0001 	add.w	r0, r0, #1
 8008034:	d003      	beq.n	800803e <__lo0bits+0x56>
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	4770      	bx	lr
 800803a:	2000      	movs	r0, #0
 800803c:	4770      	bx	lr
 800803e:	2020      	movs	r0, #32
 8008040:	4770      	bx	lr
	...

08008044 <__i2b>:
 8008044:	b510      	push	{r4, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	2101      	movs	r1, #1
 800804a:	f7ff ff05 	bl	8007e58 <_Balloc>
 800804e:	4602      	mov	r2, r0
 8008050:	b928      	cbnz	r0, 800805e <__i2b+0x1a>
 8008052:	f240 1145 	movw	r1, #325	; 0x145
 8008056:	4b04      	ldr	r3, [pc, #16]	; (8008068 <__i2b+0x24>)
 8008058:	4804      	ldr	r0, [pc, #16]	; (800806c <__i2b+0x28>)
 800805a:	f000 fcaf 	bl	80089bc <__assert_func>
 800805e:	2301      	movs	r3, #1
 8008060:	6144      	str	r4, [r0, #20]
 8008062:	6103      	str	r3, [r0, #16]
 8008064:	bd10      	pop	{r4, pc}
 8008066:	bf00      	nop
 8008068:	08009176 	.word	0x08009176
 800806c:	08009187 	.word	0x08009187

08008070 <__multiply>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4691      	mov	r9, r2
 8008076:	690a      	ldr	r2, [r1, #16]
 8008078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800807c:	460c      	mov	r4, r1
 800807e:	429a      	cmp	r2, r3
 8008080:	bfbe      	ittt	lt
 8008082:	460b      	movlt	r3, r1
 8008084:	464c      	movlt	r4, r9
 8008086:	4699      	movlt	r9, r3
 8008088:	6927      	ldr	r7, [r4, #16]
 800808a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800808e:	68a3      	ldr	r3, [r4, #8]
 8008090:	6861      	ldr	r1, [r4, #4]
 8008092:	eb07 060a 	add.w	r6, r7, sl
 8008096:	42b3      	cmp	r3, r6
 8008098:	b085      	sub	sp, #20
 800809a:	bfb8      	it	lt
 800809c:	3101      	addlt	r1, #1
 800809e:	f7ff fedb 	bl	8007e58 <_Balloc>
 80080a2:	b930      	cbnz	r0, 80080b2 <__multiply+0x42>
 80080a4:	4602      	mov	r2, r0
 80080a6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80080aa:	4b43      	ldr	r3, [pc, #268]	; (80081b8 <__multiply+0x148>)
 80080ac:	4843      	ldr	r0, [pc, #268]	; (80081bc <__multiply+0x14c>)
 80080ae:	f000 fc85 	bl	80089bc <__assert_func>
 80080b2:	f100 0514 	add.w	r5, r0, #20
 80080b6:	462b      	mov	r3, r5
 80080b8:	2200      	movs	r2, #0
 80080ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080be:	4543      	cmp	r3, r8
 80080c0:	d321      	bcc.n	8008106 <__multiply+0x96>
 80080c2:	f104 0314 	add.w	r3, r4, #20
 80080c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80080ca:	f109 0314 	add.w	r3, r9, #20
 80080ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80080d2:	9202      	str	r2, [sp, #8]
 80080d4:	1b3a      	subs	r2, r7, r4
 80080d6:	3a15      	subs	r2, #21
 80080d8:	f022 0203 	bic.w	r2, r2, #3
 80080dc:	3204      	adds	r2, #4
 80080de:	f104 0115 	add.w	r1, r4, #21
 80080e2:	428f      	cmp	r7, r1
 80080e4:	bf38      	it	cc
 80080e6:	2204      	movcc	r2, #4
 80080e8:	9201      	str	r2, [sp, #4]
 80080ea:	9a02      	ldr	r2, [sp, #8]
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d80c      	bhi.n	800810c <__multiply+0x9c>
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	dd03      	ble.n	80080fe <__multiply+0x8e>
 80080f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d05a      	beq.n	80081b4 <__multiply+0x144>
 80080fe:	6106      	str	r6, [r0, #16]
 8008100:	b005      	add	sp, #20
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	f843 2b04 	str.w	r2, [r3], #4
 800810a:	e7d8      	b.n	80080be <__multiply+0x4e>
 800810c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008110:	f1ba 0f00 	cmp.w	sl, #0
 8008114:	d023      	beq.n	800815e <__multiply+0xee>
 8008116:	46a9      	mov	r9, r5
 8008118:	f04f 0c00 	mov.w	ip, #0
 800811c:	f104 0e14 	add.w	lr, r4, #20
 8008120:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008124:	f8d9 1000 	ldr.w	r1, [r9]
 8008128:	fa1f fb82 	uxth.w	fp, r2
 800812c:	b289      	uxth	r1, r1
 800812e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008132:	4461      	add	r1, ip
 8008134:	f8d9 c000 	ldr.w	ip, [r9]
 8008138:	0c12      	lsrs	r2, r2, #16
 800813a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800813e:	fb0a c202 	mla	r2, sl, r2, ip
 8008142:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008146:	b289      	uxth	r1, r1
 8008148:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800814c:	4577      	cmp	r7, lr
 800814e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008152:	f849 1b04 	str.w	r1, [r9], #4
 8008156:	d8e3      	bhi.n	8008120 <__multiply+0xb0>
 8008158:	9a01      	ldr	r2, [sp, #4]
 800815a:	f845 c002 	str.w	ip, [r5, r2]
 800815e:	9a03      	ldr	r2, [sp, #12]
 8008160:	3304      	adds	r3, #4
 8008162:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008166:	f1b9 0f00 	cmp.w	r9, #0
 800816a:	d021      	beq.n	80081b0 <__multiply+0x140>
 800816c:	46ae      	mov	lr, r5
 800816e:	f04f 0a00 	mov.w	sl, #0
 8008172:	6829      	ldr	r1, [r5, #0]
 8008174:	f104 0c14 	add.w	ip, r4, #20
 8008178:	f8bc b000 	ldrh.w	fp, [ip]
 800817c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008180:	b289      	uxth	r1, r1
 8008182:	fb09 220b 	mla	r2, r9, fp, r2
 8008186:	4452      	add	r2, sl
 8008188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800818c:	f84e 1b04 	str.w	r1, [lr], #4
 8008190:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008194:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008198:	f8be 1000 	ldrh.w	r1, [lr]
 800819c:	4567      	cmp	r7, ip
 800819e:	fb09 110a 	mla	r1, r9, sl, r1
 80081a2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80081a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081aa:	d8e5      	bhi.n	8008178 <__multiply+0x108>
 80081ac:	9a01      	ldr	r2, [sp, #4]
 80081ae:	50a9      	str	r1, [r5, r2]
 80081b0:	3504      	adds	r5, #4
 80081b2:	e79a      	b.n	80080ea <__multiply+0x7a>
 80081b4:	3e01      	subs	r6, #1
 80081b6:	e79c      	b.n	80080f2 <__multiply+0x82>
 80081b8:	08009176 	.word	0x08009176
 80081bc:	08009187 	.word	0x08009187

080081c0 <__pow5mult>:
 80081c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c4:	4615      	mov	r5, r2
 80081c6:	f012 0203 	ands.w	r2, r2, #3
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	d007      	beq.n	80081e0 <__pow5mult+0x20>
 80081d0:	4c25      	ldr	r4, [pc, #148]	; (8008268 <__pow5mult+0xa8>)
 80081d2:	3a01      	subs	r2, #1
 80081d4:	2300      	movs	r3, #0
 80081d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081da:	f7ff fe9f 	bl	8007f1c <__multadd>
 80081de:	4607      	mov	r7, r0
 80081e0:	10ad      	asrs	r5, r5, #2
 80081e2:	d03d      	beq.n	8008260 <__pow5mult+0xa0>
 80081e4:	69f4      	ldr	r4, [r6, #28]
 80081e6:	b97c      	cbnz	r4, 8008208 <__pow5mult+0x48>
 80081e8:	2010      	movs	r0, #16
 80081ea:	f7ff fd81 	bl	8007cf0 <malloc>
 80081ee:	4602      	mov	r2, r0
 80081f0:	61f0      	str	r0, [r6, #28]
 80081f2:	b928      	cbnz	r0, 8008200 <__pow5mult+0x40>
 80081f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80081f8:	4b1c      	ldr	r3, [pc, #112]	; (800826c <__pow5mult+0xac>)
 80081fa:	481d      	ldr	r0, [pc, #116]	; (8008270 <__pow5mult+0xb0>)
 80081fc:	f000 fbde 	bl	80089bc <__assert_func>
 8008200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008204:	6004      	str	r4, [r0, #0]
 8008206:	60c4      	str	r4, [r0, #12]
 8008208:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800820c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008210:	b94c      	cbnz	r4, 8008226 <__pow5mult+0x66>
 8008212:	f240 2171 	movw	r1, #625	; 0x271
 8008216:	4630      	mov	r0, r6
 8008218:	f7ff ff14 	bl	8008044 <__i2b>
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	f8c8 0008 	str.w	r0, [r8, #8]
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	f04f 0900 	mov.w	r9, #0
 800822a:	07eb      	lsls	r3, r5, #31
 800822c:	d50a      	bpl.n	8008244 <__pow5mult+0x84>
 800822e:	4639      	mov	r1, r7
 8008230:	4622      	mov	r2, r4
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff ff1c 	bl	8008070 <__multiply>
 8008238:	4680      	mov	r8, r0
 800823a:	4639      	mov	r1, r7
 800823c:	4630      	mov	r0, r6
 800823e:	f7ff fe4b 	bl	8007ed8 <_Bfree>
 8008242:	4647      	mov	r7, r8
 8008244:	106d      	asrs	r5, r5, #1
 8008246:	d00b      	beq.n	8008260 <__pow5mult+0xa0>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	b938      	cbnz	r0, 800825c <__pow5mult+0x9c>
 800824c:	4622      	mov	r2, r4
 800824e:	4621      	mov	r1, r4
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff ff0d 	bl	8008070 <__multiply>
 8008256:	6020      	str	r0, [r4, #0]
 8008258:	f8c0 9000 	str.w	r9, [r0]
 800825c:	4604      	mov	r4, r0
 800825e:	e7e4      	b.n	800822a <__pow5mult+0x6a>
 8008260:	4638      	mov	r0, r7
 8008262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008266:	bf00      	nop
 8008268:	080092d0 	.word	0x080092d0
 800826c:	08009107 	.word	0x08009107
 8008270:	08009187 	.word	0x08009187

08008274 <__lshift>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	460c      	mov	r4, r1
 800827a:	4607      	mov	r7, r0
 800827c:	4691      	mov	r9, r2
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	6849      	ldr	r1, [r1, #4]
 8008282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800828c:	f108 0601 	add.w	r6, r8, #1
 8008290:	42b3      	cmp	r3, r6
 8008292:	db0b      	blt.n	80082ac <__lshift+0x38>
 8008294:	4638      	mov	r0, r7
 8008296:	f7ff fddf 	bl	8007e58 <_Balloc>
 800829a:	4605      	mov	r5, r0
 800829c:	b948      	cbnz	r0, 80082b2 <__lshift+0x3e>
 800829e:	4602      	mov	r2, r0
 80082a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80082a4:	4b27      	ldr	r3, [pc, #156]	; (8008344 <__lshift+0xd0>)
 80082a6:	4828      	ldr	r0, [pc, #160]	; (8008348 <__lshift+0xd4>)
 80082a8:	f000 fb88 	bl	80089bc <__assert_func>
 80082ac:	3101      	adds	r1, #1
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	e7ee      	b.n	8008290 <__lshift+0x1c>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f100 0114 	add.w	r1, r0, #20
 80082b8:	f100 0210 	add.w	r2, r0, #16
 80082bc:	4618      	mov	r0, r3
 80082be:	4553      	cmp	r3, sl
 80082c0:	db33      	blt.n	800832a <__lshift+0xb6>
 80082c2:	6920      	ldr	r0, [r4, #16]
 80082c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082c8:	f104 0314 	add.w	r3, r4, #20
 80082cc:	f019 091f 	ands.w	r9, r9, #31
 80082d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082d8:	d02b      	beq.n	8008332 <__lshift+0xbe>
 80082da:	468a      	mov	sl, r1
 80082dc:	2200      	movs	r2, #0
 80082de:	f1c9 0e20 	rsb	lr, r9, #32
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	fa00 f009 	lsl.w	r0, r0, r9
 80082e8:	4310      	orrs	r0, r2
 80082ea:	f84a 0b04 	str.w	r0, [sl], #4
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	459c      	cmp	ip, r3
 80082f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80082f8:	d8f3      	bhi.n	80082e2 <__lshift+0x6e>
 80082fa:	ebac 0304 	sub.w	r3, ip, r4
 80082fe:	3b15      	subs	r3, #21
 8008300:	f023 0303 	bic.w	r3, r3, #3
 8008304:	3304      	adds	r3, #4
 8008306:	f104 0015 	add.w	r0, r4, #21
 800830a:	4584      	cmp	ip, r0
 800830c:	bf38      	it	cc
 800830e:	2304      	movcc	r3, #4
 8008310:	50ca      	str	r2, [r1, r3]
 8008312:	b10a      	cbz	r2, 8008318 <__lshift+0xa4>
 8008314:	f108 0602 	add.w	r6, r8, #2
 8008318:	3e01      	subs	r6, #1
 800831a:	4638      	mov	r0, r7
 800831c:	4621      	mov	r1, r4
 800831e:	612e      	str	r6, [r5, #16]
 8008320:	f7ff fdda 	bl	8007ed8 <_Bfree>
 8008324:	4628      	mov	r0, r5
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	f842 0f04 	str.w	r0, [r2, #4]!
 800832e:	3301      	adds	r3, #1
 8008330:	e7c5      	b.n	80082be <__lshift+0x4a>
 8008332:	3904      	subs	r1, #4
 8008334:	f853 2b04 	ldr.w	r2, [r3], #4
 8008338:	459c      	cmp	ip, r3
 800833a:	f841 2f04 	str.w	r2, [r1, #4]!
 800833e:	d8f9      	bhi.n	8008334 <__lshift+0xc0>
 8008340:	e7ea      	b.n	8008318 <__lshift+0xa4>
 8008342:	bf00      	nop
 8008344:	08009176 	.word	0x08009176
 8008348:	08009187 	.word	0x08009187

0800834c <__mcmp>:
 800834c:	4603      	mov	r3, r0
 800834e:	690a      	ldr	r2, [r1, #16]
 8008350:	6900      	ldr	r0, [r0, #16]
 8008352:	b530      	push	{r4, r5, lr}
 8008354:	1a80      	subs	r0, r0, r2
 8008356:	d10d      	bne.n	8008374 <__mcmp+0x28>
 8008358:	3314      	adds	r3, #20
 800835a:	3114      	adds	r1, #20
 800835c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008360:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800836c:	4295      	cmp	r5, r2
 800836e:	d002      	beq.n	8008376 <__mcmp+0x2a>
 8008370:	d304      	bcc.n	800837c <__mcmp+0x30>
 8008372:	2001      	movs	r0, #1
 8008374:	bd30      	pop	{r4, r5, pc}
 8008376:	42a3      	cmp	r3, r4
 8008378:	d3f4      	bcc.n	8008364 <__mcmp+0x18>
 800837a:	e7fb      	b.n	8008374 <__mcmp+0x28>
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e7f8      	b.n	8008374 <__mcmp+0x28>
	...

08008384 <__mdiff>:
 8008384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	460d      	mov	r5, r1
 800838a:	4607      	mov	r7, r0
 800838c:	4611      	mov	r1, r2
 800838e:	4628      	mov	r0, r5
 8008390:	4614      	mov	r4, r2
 8008392:	f7ff ffdb 	bl	800834c <__mcmp>
 8008396:	1e06      	subs	r6, r0, #0
 8008398:	d111      	bne.n	80083be <__mdiff+0x3a>
 800839a:	4631      	mov	r1, r6
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff fd5b 	bl	8007e58 <_Balloc>
 80083a2:	4602      	mov	r2, r0
 80083a4:	b928      	cbnz	r0, 80083b2 <__mdiff+0x2e>
 80083a6:	f240 2137 	movw	r1, #567	; 0x237
 80083aa:	4b3a      	ldr	r3, [pc, #232]	; (8008494 <__mdiff+0x110>)
 80083ac:	483a      	ldr	r0, [pc, #232]	; (8008498 <__mdiff+0x114>)
 80083ae:	f000 fb05 	bl	80089bc <__assert_func>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80083b8:	4610      	mov	r0, r2
 80083ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083be:	bfa4      	itt	ge
 80083c0:	4623      	movge	r3, r4
 80083c2:	462c      	movge	r4, r5
 80083c4:	4638      	mov	r0, r7
 80083c6:	6861      	ldr	r1, [r4, #4]
 80083c8:	bfa6      	itte	ge
 80083ca:	461d      	movge	r5, r3
 80083cc:	2600      	movge	r6, #0
 80083ce:	2601      	movlt	r6, #1
 80083d0:	f7ff fd42 	bl	8007e58 <_Balloc>
 80083d4:	4602      	mov	r2, r0
 80083d6:	b918      	cbnz	r0, 80083e0 <__mdiff+0x5c>
 80083d8:	f240 2145 	movw	r1, #581	; 0x245
 80083dc:	4b2d      	ldr	r3, [pc, #180]	; (8008494 <__mdiff+0x110>)
 80083de:	e7e5      	b.n	80083ac <__mdiff+0x28>
 80083e0:	f102 0814 	add.w	r8, r2, #20
 80083e4:	46c2      	mov	sl, r8
 80083e6:	f04f 0c00 	mov.w	ip, #0
 80083ea:	6927      	ldr	r7, [r4, #16]
 80083ec:	60c6      	str	r6, [r0, #12]
 80083ee:	692e      	ldr	r6, [r5, #16]
 80083f0:	f104 0014 	add.w	r0, r4, #20
 80083f4:	f105 0914 	add.w	r9, r5, #20
 80083f8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80083fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008400:	3410      	adds	r4, #16
 8008402:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008406:	f859 3b04 	ldr.w	r3, [r9], #4
 800840a:	fa1f f18b 	uxth.w	r1, fp
 800840e:	4461      	add	r1, ip
 8008410:	fa1f fc83 	uxth.w	ip, r3
 8008414:	0c1b      	lsrs	r3, r3, #16
 8008416:	eba1 010c 	sub.w	r1, r1, ip
 800841a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800841e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008422:	b289      	uxth	r1, r1
 8008424:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008428:	454e      	cmp	r6, r9
 800842a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800842e:	f84a 1b04 	str.w	r1, [sl], #4
 8008432:	d8e6      	bhi.n	8008402 <__mdiff+0x7e>
 8008434:	1b73      	subs	r3, r6, r5
 8008436:	3b15      	subs	r3, #21
 8008438:	f023 0303 	bic.w	r3, r3, #3
 800843c:	3515      	adds	r5, #21
 800843e:	3304      	adds	r3, #4
 8008440:	42ae      	cmp	r6, r5
 8008442:	bf38      	it	cc
 8008444:	2304      	movcc	r3, #4
 8008446:	4418      	add	r0, r3
 8008448:	4443      	add	r3, r8
 800844a:	461e      	mov	r6, r3
 800844c:	4605      	mov	r5, r0
 800844e:	4575      	cmp	r5, lr
 8008450:	d30e      	bcc.n	8008470 <__mdiff+0xec>
 8008452:	f10e 0103 	add.w	r1, lr, #3
 8008456:	1a09      	subs	r1, r1, r0
 8008458:	f021 0103 	bic.w	r1, r1, #3
 800845c:	3803      	subs	r0, #3
 800845e:	4586      	cmp	lr, r0
 8008460:	bf38      	it	cc
 8008462:	2100      	movcc	r1, #0
 8008464:	440b      	add	r3, r1
 8008466:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800846a:	b189      	cbz	r1, 8008490 <__mdiff+0x10c>
 800846c:	6117      	str	r7, [r2, #16]
 800846e:	e7a3      	b.n	80083b8 <__mdiff+0x34>
 8008470:	f855 8b04 	ldr.w	r8, [r5], #4
 8008474:	fa1f f188 	uxth.w	r1, r8
 8008478:	4461      	add	r1, ip
 800847a:	140c      	asrs	r4, r1, #16
 800847c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008480:	b289      	uxth	r1, r1
 8008482:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008486:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800848a:	f846 1b04 	str.w	r1, [r6], #4
 800848e:	e7de      	b.n	800844e <__mdiff+0xca>
 8008490:	3f01      	subs	r7, #1
 8008492:	e7e8      	b.n	8008466 <__mdiff+0xe2>
 8008494:	08009176 	.word	0x08009176
 8008498:	08009187 	.word	0x08009187

0800849c <__d2b>:
 800849c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800849e:	2101      	movs	r1, #1
 80084a0:	4617      	mov	r7, r2
 80084a2:	461c      	mov	r4, r3
 80084a4:	9e08      	ldr	r6, [sp, #32]
 80084a6:	f7ff fcd7 	bl	8007e58 <_Balloc>
 80084aa:	4605      	mov	r5, r0
 80084ac:	b930      	cbnz	r0, 80084bc <__d2b+0x20>
 80084ae:	4602      	mov	r2, r0
 80084b0:	f240 310f 	movw	r1, #783	; 0x30f
 80084b4:	4b22      	ldr	r3, [pc, #136]	; (8008540 <__d2b+0xa4>)
 80084b6:	4823      	ldr	r0, [pc, #140]	; (8008544 <__d2b+0xa8>)
 80084b8:	f000 fa80 	bl	80089bc <__assert_func>
 80084bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80084c0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80084c4:	bb24      	cbnz	r4, 8008510 <__d2b+0x74>
 80084c6:	2f00      	cmp	r7, #0
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	d026      	beq.n	800851a <__d2b+0x7e>
 80084cc:	4668      	mov	r0, sp
 80084ce:	9700      	str	r7, [sp, #0]
 80084d0:	f7ff fd8a 	bl	8007fe8 <__lo0bits>
 80084d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084d8:	b1e8      	cbz	r0, 8008516 <__d2b+0x7a>
 80084da:	f1c0 0320 	rsb	r3, r0, #32
 80084de:	fa02 f303 	lsl.w	r3, r2, r3
 80084e2:	430b      	orrs	r3, r1
 80084e4:	40c2      	lsrs	r2, r0
 80084e6:	616b      	str	r3, [r5, #20]
 80084e8:	9201      	str	r2, [sp, #4]
 80084ea:	9b01      	ldr	r3, [sp, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bf14      	ite	ne
 80084f0:	2102      	movne	r1, #2
 80084f2:	2101      	moveq	r1, #1
 80084f4:	61ab      	str	r3, [r5, #24]
 80084f6:	6129      	str	r1, [r5, #16]
 80084f8:	b1bc      	cbz	r4, 800852a <__d2b+0x8e>
 80084fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80084fe:	4404      	add	r4, r0
 8008500:	6034      	str	r4, [r6, #0]
 8008502:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008508:	6018      	str	r0, [r3, #0]
 800850a:	4628      	mov	r0, r5
 800850c:	b003      	add	sp, #12
 800850e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008514:	e7d7      	b.n	80084c6 <__d2b+0x2a>
 8008516:	6169      	str	r1, [r5, #20]
 8008518:	e7e7      	b.n	80084ea <__d2b+0x4e>
 800851a:	a801      	add	r0, sp, #4
 800851c:	f7ff fd64 	bl	8007fe8 <__lo0bits>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	2101      	movs	r1, #1
 8008524:	616b      	str	r3, [r5, #20]
 8008526:	3020      	adds	r0, #32
 8008528:	e7e5      	b.n	80084f6 <__d2b+0x5a>
 800852a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800852e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008532:	6030      	str	r0, [r6, #0]
 8008534:	6918      	ldr	r0, [r3, #16]
 8008536:	f7ff fd37 	bl	8007fa8 <__hi0bits>
 800853a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800853e:	e7e2      	b.n	8008506 <__d2b+0x6a>
 8008540:	08009176 	.word	0x08009176
 8008544:	08009187 	.word	0x08009187

08008548 <__ssputs_r>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	461f      	mov	r7, r3
 800854e:	688e      	ldr	r6, [r1, #8]
 8008550:	4682      	mov	sl, r0
 8008552:	42be      	cmp	r6, r7
 8008554:	460c      	mov	r4, r1
 8008556:	4690      	mov	r8, r2
 8008558:	680b      	ldr	r3, [r1, #0]
 800855a:	d82c      	bhi.n	80085b6 <__ssputs_r+0x6e>
 800855c:	898a      	ldrh	r2, [r1, #12]
 800855e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008562:	d026      	beq.n	80085b2 <__ssputs_r+0x6a>
 8008564:	6965      	ldr	r5, [r4, #20]
 8008566:	6909      	ldr	r1, [r1, #16]
 8008568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800856c:	eba3 0901 	sub.w	r9, r3, r1
 8008570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008574:	1c7b      	adds	r3, r7, #1
 8008576:	444b      	add	r3, r9
 8008578:	106d      	asrs	r5, r5, #1
 800857a:	429d      	cmp	r5, r3
 800857c:	bf38      	it	cc
 800857e:	461d      	movcc	r5, r3
 8008580:	0553      	lsls	r3, r2, #21
 8008582:	d527      	bpl.n	80085d4 <__ssputs_r+0x8c>
 8008584:	4629      	mov	r1, r5
 8008586:	f7ff fbdb 	bl	8007d40 <_malloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	b360      	cbz	r0, 80085e8 <__ssputs_r+0xa0>
 800858e:	464a      	mov	r2, r9
 8008590:	6921      	ldr	r1, [r4, #16]
 8008592:	f000 fa05 	bl	80089a0 <memcpy>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	6126      	str	r6, [r4, #16]
 80085a4:	444e      	add	r6, r9
 80085a6:	6026      	str	r6, [r4, #0]
 80085a8:	463e      	mov	r6, r7
 80085aa:	6165      	str	r5, [r4, #20]
 80085ac:	eba5 0509 	sub.w	r5, r5, r9
 80085b0:	60a5      	str	r5, [r4, #8]
 80085b2:	42be      	cmp	r6, r7
 80085b4:	d900      	bls.n	80085b8 <__ssputs_r+0x70>
 80085b6:	463e      	mov	r6, r7
 80085b8:	4632      	mov	r2, r6
 80085ba:	4641      	mov	r1, r8
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	f000 f9c5 	bl	800894c <memmove>
 80085c2:	2000      	movs	r0, #0
 80085c4:	68a3      	ldr	r3, [r4, #8]
 80085c6:	1b9b      	subs	r3, r3, r6
 80085c8:	60a3      	str	r3, [r4, #8]
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	4433      	add	r3, r6
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	462a      	mov	r2, r5
 80085d6:	f000 fa35 	bl	8008a44 <_realloc_r>
 80085da:	4606      	mov	r6, r0
 80085dc:	2800      	cmp	r0, #0
 80085de:	d1e0      	bne.n	80085a2 <__ssputs_r+0x5a>
 80085e0:	4650      	mov	r0, sl
 80085e2:	6921      	ldr	r1, [r4, #16]
 80085e4:	f7ff fb3c 	bl	8007c60 <_free_r>
 80085e8:	230c      	movs	r3, #12
 80085ea:	f8ca 3000 	str.w	r3, [sl]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f8:	81a3      	strh	r3, [r4, #12]
 80085fa:	e7e9      	b.n	80085d0 <__ssputs_r+0x88>

080085fc <_svfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	4698      	mov	r8, r3
 8008602:	898b      	ldrh	r3, [r1, #12]
 8008604:	4607      	mov	r7, r0
 8008606:	061b      	lsls	r3, r3, #24
 8008608:	460d      	mov	r5, r1
 800860a:	4614      	mov	r4, r2
 800860c:	b09d      	sub	sp, #116	; 0x74
 800860e:	d50e      	bpl.n	800862e <_svfiprintf_r+0x32>
 8008610:	690b      	ldr	r3, [r1, #16]
 8008612:	b963      	cbnz	r3, 800862e <_svfiprintf_r+0x32>
 8008614:	2140      	movs	r1, #64	; 0x40
 8008616:	f7ff fb93 	bl	8007d40 <_malloc_r>
 800861a:	6028      	str	r0, [r5, #0]
 800861c:	6128      	str	r0, [r5, #16]
 800861e:	b920      	cbnz	r0, 800862a <_svfiprintf_r+0x2e>
 8008620:	230c      	movs	r3, #12
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	e0d0      	b.n	80087cc <_svfiprintf_r+0x1d0>
 800862a:	2340      	movs	r3, #64	; 0x40
 800862c:	616b      	str	r3, [r5, #20]
 800862e:	2300      	movs	r3, #0
 8008630:	9309      	str	r3, [sp, #36]	; 0x24
 8008632:	2320      	movs	r3, #32
 8008634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008638:	2330      	movs	r3, #48	; 0x30
 800863a:	f04f 0901 	mov.w	r9, #1
 800863e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008642:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80087e4 <_svfiprintf_r+0x1e8>
 8008646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800864a:	4623      	mov	r3, r4
 800864c:	469a      	mov	sl, r3
 800864e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008652:	b10a      	cbz	r2, 8008658 <_svfiprintf_r+0x5c>
 8008654:	2a25      	cmp	r2, #37	; 0x25
 8008656:	d1f9      	bne.n	800864c <_svfiprintf_r+0x50>
 8008658:	ebba 0b04 	subs.w	fp, sl, r4
 800865c:	d00b      	beq.n	8008676 <_svfiprintf_r+0x7a>
 800865e:	465b      	mov	r3, fp
 8008660:	4622      	mov	r2, r4
 8008662:	4629      	mov	r1, r5
 8008664:	4638      	mov	r0, r7
 8008666:	f7ff ff6f 	bl	8008548 <__ssputs_r>
 800866a:	3001      	adds	r0, #1
 800866c:	f000 80a9 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008672:	445a      	add	r2, fp
 8008674:	9209      	str	r2, [sp, #36]	; 0x24
 8008676:	f89a 3000 	ldrb.w	r3, [sl]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80a1 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008680:	2300      	movs	r3, #0
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868a:	f10a 0a01 	add.w	sl, sl, #1
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008696:	931a      	str	r3, [sp, #104]	; 0x68
 8008698:	4654      	mov	r4, sl
 800869a:	2205      	movs	r2, #5
 800869c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a0:	4850      	ldr	r0, [pc, #320]	; (80087e4 <_svfiprintf_r+0x1e8>)
 80086a2:	f7fe fc60 	bl	8006f66 <memchr>
 80086a6:	9a04      	ldr	r2, [sp, #16]
 80086a8:	b9d8      	cbnz	r0, 80086e2 <_svfiprintf_r+0xe6>
 80086aa:	06d0      	lsls	r0, r2, #27
 80086ac:	bf44      	itt	mi
 80086ae:	2320      	movmi	r3, #32
 80086b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b4:	0711      	lsls	r1, r2, #28
 80086b6:	bf44      	itt	mi
 80086b8:	232b      	movmi	r3, #43	; 0x2b
 80086ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086be:	f89a 3000 	ldrb.w	r3, [sl]
 80086c2:	2b2a      	cmp	r3, #42	; 0x2a
 80086c4:	d015      	beq.n	80086f2 <_svfiprintf_r+0xf6>
 80086c6:	4654      	mov	r4, sl
 80086c8:	2000      	movs	r0, #0
 80086ca:	f04f 0c0a 	mov.w	ip, #10
 80086ce:	9a07      	ldr	r2, [sp, #28]
 80086d0:	4621      	mov	r1, r4
 80086d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d6:	3b30      	subs	r3, #48	; 0x30
 80086d8:	2b09      	cmp	r3, #9
 80086da:	d94d      	bls.n	8008778 <_svfiprintf_r+0x17c>
 80086dc:	b1b0      	cbz	r0, 800870c <_svfiprintf_r+0x110>
 80086de:	9207      	str	r2, [sp, #28]
 80086e0:	e014      	b.n	800870c <_svfiprintf_r+0x110>
 80086e2:	eba0 0308 	sub.w	r3, r0, r8
 80086e6:	fa09 f303 	lsl.w	r3, r9, r3
 80086ea:	4313      	orrs	r3, r2
 80086ec:	46a2      	mov	sl, r4
 80086ee:	9304      	str	r3, [sp, #16]
 80086f0:	e7d2      	b.n	8008698 <_svfiprintf_r+0x9c>
 80086f2:	9b03      	ldr	r3, [sp, #12]
 80086f4:	1d19      	adds	r1, r3, #4
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	9103      	str	r1, [sp, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfbb      	ittet	lt
 80086fe:	425b      	neglt	r3, r3
 8008700:	f042 0202 	orrlt.w	r2, r2, #2
 8008704:	9307      	strge	r3, [sp, #28]
 8008706:	9307      	strlt	r3, [sp, #28]
 8008708:	bfb8      	it	lt
 800870a:	9204      	strlt	r2, [sp, #16]
 800870c:	7823      	ldrb	r3, [r4, #0]
 800870e:	2b2e      	cmp	r3, #46	; 0x2e
 8008710:	d10c      	bne.n	800872c <_svfiprintf_r+0x130>
 8008712:	7863      	ldrb	r3, [r4, #1]
 8008714:	2b2a      	cmp	r3, #42	; 0x2a
 8008716:	d134      	bne.n	8008782 <_svfiprintf_r+0x186>
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	3402      	adds	r4, #2
 800871c:	1d1a      	adds	r2, r3, #4
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	9203      	str	r2, [sp, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	bfb8      	it	lt
 8008726:	f04f 33ff 	movlt.w	r3, #4294967295
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80087e8 <_svfiprintf_r+0x1ec>
 8008730:	2203      	movs	r2, #3
 8008732:	4650      	mov	r0, sl
 8008734:	7821      	ldrb	r1, [r4, #0]
 8008736:	f7fe fc16 	bl	8006f66 <memchr>
 800873a:	b138      	cbz	r0, 800874c <_svfiprintf_r+0x150>
 800873c:	2240      	movs	r2, #64	; 0x40
 800873e:	9b04      	ldr	r3, [sp, #16]
 8008740:	eba0 000a 	sub.w	r0, r0, sl
 8008744:	4082      	lsls	r2, r0
 8008746:	4313      	orrs	r3, r2
 8008748:	3401      	adds	r4, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008750:	2206      	movs	r2, #6
 8008752:	4826      	ldr	r0, [pc, #152]	; (80087ec <_svfiprintf_r+0x1f0>)
 8008754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008758:	f7fe fc05 	bl	8006f66 <memchr>
 800875c:	2800      	cmp	r0, #0
 800875e:	d038      	beq.n	80087d2 <_svfiprintf_r+0x1d6>
 8008760:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <_svfiprintf_r+0x1f4>)
 8008762:	bb1b      	cbnz	r3, 80087ac <_svfiprintf_r+0x1b0>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3307      	adds	r3, #7
 8008768:	f023 0307 	bic.w	r3, r3, #7
 800876c:	3308      	adds	r3, #8
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008772:	4433      	add	r3, r6
 8008774:	9309      	str	r3, [sp, #36]	; 0x24
 8008776:	e768      	b.n	800864a <_svfiprintf_r+0x4e>
 8008778:	460c      	mov	r4, r1
 800877a:	2001      	movs	r0, #1
 800877c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008780:	e7a6      	b.n	80086d0 <_svfiprintf_r+0xd4>
 8008782:	2300      	movs	r3, #0
 8008784:	f04f 0c0a 	mov.w	ip, #10
 8008788:	4619      	mov	r1, r3
 800878a:	3401      	adds	r4, #1
 800878c:	9305      	str	r3, [sp, #20]
 800878e:	4620      	mov	r0, r4
 8008790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008794:	3a30      	subs	r2, #48	; 0x30
 8008796:	2a09      	cmp	r2, #9
 8008798:	d903      	bls.n	80087a2 <_svfiprintf_r+0x1a6>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0c6      	beq.n	800872c <_svfiprintf_r+0x130>
 800879e:	9105      	str	r1, [sp, #20]
 80087a0:	e7c4      	b.n	800872c <_svfiprintf_r+0x130>
 80087a2:	4604      	mov	r4, r0
 80087a4:	2301      	movs	r3, #1
 80087a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087aa:	e7f0      	b.n	800878e <_svfiprintf_r+0x192>
 80087ac:	ab03      	add	r3, sp, #12
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	462a      	mov	r2, r5
 80087b2:	4638      	mov	r0, r7
 80087b4:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <_svfiprintf_r+0x1f8>)
 80087b6:	a904      	add	r1, sp, #16
 80087b8:	f7fd fe6e 	bl	8006498 <_printf_float>
 80087bc:	1c42      	adds	r2, r0, #1
 80087be:	4606      	mov	r6, r0
 80087c0:	d1d6      	bne.n	8008770 <_svfiprintf_r+0x174>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	065b      	lsls	r3, r3, #25
 80087c6:	f53f af2d 	bmi.w	8008624 <_svfiprintf_r+0x28>
 80087ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087cc:	b01d      	add	sp, #116	; 0x74
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	ab03      	add	r3, sp, #12
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	462a      	mov	r2, r5
 80087d8:	4638      	mov	r0, r7
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <_svfiprintf_r+0x1f8>)
 80087dc:	a904      	add	r1, sp, #16
 80087de:	f7fe f8fb 	bl	80069d8 <_printf_i>
 80087e2:	e7eb      	b.n	80087bc <_svfiprintf_r+0x1c0>
 80087e4:	080092dc 	.word	0x080092dc
 80087e8:	080092e2 	.word	0x080092e2
 80087ec:	080092e6 	.word	0x080092e6
 80087f0:	08006499 	.word	0x08006499
 80087f4:	08008549 	.word	0x08008549

080087f8 <__sflush_r>:
 80087f8:	898a      	ldrh	r2, [r1, #12]
 80087fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fc:	4605      	mov	r5, r0
 80087fe:	0710      	lsls	r0, r2, #28
 8008800:	460c      	mov	r4, r1
 8008802:	d457      	bmi.n	80088b4 <__sflush_r+0xbc>
 8008804:	684b      	ldr	r3, [r1, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dc04      	bgt.n	8008814 <__sflush_r+0x1c>
 800880a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	dc01      	bgt.n	8008814 <__sflush_r+0x1c>
 8008810:	2000      	movs	r0, #0
 8008812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008816:	2e00      	cmp	r6, #0
 8008818:	d0fa      	beq.n	8008810 <__sflush_r+0x18>
 800881a:	2300      	movs	r3, #0
 800881c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008820:	682f      	ldr	r7, [r5, #0]
 8008822:	6a21      	ldr	r1, [r4, #32]
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	d032      	beq.n	800888e <__sflush_r+0x96>
 8008828:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	075a      	lsls	r2, r3, #29
 800882e:	d505      	bpl.n	800883c <__sflush_r+0x44>
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	1ac0      	subs	r0, r0, r3
 8008834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008836:	b10b      	cbz	r3, 800883c <__sflush_r+0x44>
 8008838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800883a:	1ac0      	subs	r0, r0, r3
 800883c:	2300      	movs	r3, #0
 800883e:	4602      	mov	r2, r0
 8008840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008842:	4628      	mov	r0, r5
 8008844:	6a21      	ldr	r1, [r4, #32]
 8008846:	47b0      	blx	r6
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	d106      	bne.n	800885c <__sflush_r+0x64>
 800884e:	6829      	ldr	r1, [r5, #0]
 8008850:	291d      	cmp	r1, #29
 8008852:	d82b      	bhi.n	80088ac <__sflush_r+0xb4>
 8008854:	4a28      	ldr	r2, [pc, #160]	; (80088f8 <__sflush_r+0x100>)
 8008856:	410a      	asrs	r2, r1
 8008858:	07d6      	lsls	r6, r2, #31
 800885a:	d427      	bmi.n	80088ac <__sflush_r+0xb4>
 800885c:	2200      	movs	r2, #0
 800885e:	6062      	str	r2, [r4, #4]
 8008860:	6922      	ldr	r2, [r4, #16]
 8008862:	04d9      	lsls	r1, r3, #19
 8008864:	6022      	str	r2, [r4, #0]
 8008866:	d504      	bpl.n	8008872 <__sflush_r+0x7a>
 8008868:	1c42      	adds	r2, r0, #1
 800886a:	d101      	bne.n	8008870 <__sflush_r+0x78>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b903      	cbnz	r3, 8008872 <__sflush_r+0x7a>
 8008870:	6560      	str	r0, [r4, #84]	; 0x54
 8008872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008874:	602f      	str	r7, [r5, #0]
 8008876:	2900      	cmp	r1, #0
 8008878:	d0ca      	beq.n	8008810 <__sflush_r+0x18>
 800887a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800887e:	4299      	cmp	r1, r3
 8008880:	d002      	beq.n	8008888 <__sflush_r+0x90>
 8008882:	4628      	mov	r0, r5
 8008884:	f7ff f9ec 	bl	8007c60 <_free_r>
 8008888:	2000      	movs	r0, #0
 800888a:	6360      	str	r0, [r4, #52]	; 0x34
 800888c:	e7c1      	b.n	8008812 <__sflush_r+0x1a>
 800888e:	2301      	movs	r3, #1
 8008890:	4628      	mov	r0, r5
 8008892:	47b0      	blx	r6
 8008894:	1c41      	adds	r1, r0, #1
 8008896:	d1c8      	bne.n	800882a <__sflush_r+0x32>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0c5      	beq.n	800882a <__sflush_r+0x32>
 800889e:	2b1d      	cmp	r3, #29
 80088a0:	d001      	beq.n	80088a6 <__sflush_r+0xae>
 80088a2:	2b16      	cmp	r3, #22
 80088a4:	d101      	bne.n	80088aa <__sflush_r+0xb2>
 80088a6:	602f      	str	r7, [r5, #0]
 80088a8:	e7b2      	b.n	8008810 <__sflush_r+0x18>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	e7ae      	b.n	8008812 <__sflush_r+0x1a>
 80088b4:	690f      	ldr	r7, [r1, #16]
 80088b6:	2f00      	cmp	r7, #0
 80088b8:	d0aa      	beq.n	8008810 <__sflush_r+0x18>
 80088ba:	0793      	lsls	r3, r2, #30
 80088bc:	bf18      	it	ne
 80088be:	2300      	movne	r3, #0
 80088c0:	680e      	ldr	r6, [r1, #0]
 80088c2:	bf08      	it	eq
 80088c4:	694b      	ldreq	r3, [r1, #20]
 80088c6:	1bf6      	subs	r6, r6, r7
 80088c8:	600f      	str	r7, [r1, #0]
 80088ca:	608b      	str	r3, [r1, #8]
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	dd9f      	ble.n	8008810 <__sflush_r+0x18>
 80088d0:	4633      	mov	r3, r6
 80088d2:	463a      	mov	r2, r7
 80088d4:	4628      	mov	r0, r5
 80088d6:	6a21      	ldr	r1, [r4, #32]
 80088d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80088dc:	47e0      	blx	ip
 80088de:	2800      	cmp	r0, #0
 80088e0:	dc06      	bgt.n	80088f0 <__sflush_r+0xf8>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	e790      	b.n	8008812 <__sflush_r+0x1a>
 80088f0:	4407      	add	r7, r0
 80088f2:	1a36      	subs	r6, r6, r0
 80088f4:	e7ea      	b.n	80088cc <__sflush_r+0xd4>
 80088f6:	bf00      	nop
 80088f8:	dfbffffe 	.word	0xdfbffffe

080088fc <_fflush_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	690b      	ldr	r3, [r1, #16]
 8008900:	4605      	mov	r5, r0
 8008902:	460c      	mov	r4, r1
 8008904:	b913      	cbnz	r3, 800890c <_fflush_r+0x10>
 8008906:	2500      	movs	r5, #0
 8008908:	4628      	mov	r0, r5
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	b118      	cbz	r0, 8008916 <_fflush_r+0x1a>
 800890e:	6a03      	ldr	r3, [r0, #32]
 8008910:	b90b      	cbnz	r3, 8008916 <_fflush_r+0x1a>
 8008912:	f7fe fa0f 	bl	8006d34 <__sinit>
 8008916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f3      	beq.n	8008906 <_fflush_r+0xa>
 800891e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008920:	07d0      	lsls	r0, r2, #31
 8008922:	d404      	bmi.n	800892e <_fflush_r+0x32>
 8008924:	0599      	lsls	r1, r3, #22
 8008926:	d402      	bmi.n	800892e <_fflush_r+0x32>
 8008928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800892a:	f7fe fb1a 	bl	8006f62 <__retarget_lock_acquire_recursive>
 800892e:	4628      	mov	r0, r5
 8008930:	4621      	mov	r1, r4
 8008932:	f7ff ff61 	bl	80087f8 <__sflush_r>
 8008936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008938:	4605      	mov	r5, r0
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	d4e4      	bmi.n	8008908 <_fflush_r+0xc>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	059b      	lsls	r3, r3, #22
 8008942:	d4e1      	bmi.n	8008908 <_fflush_r+0xc>
 8008944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008946:	f7fe fb0d 	bl	8006f64 <__retarget_lock_release_recursive>
 800894a:	e7dd      	b.n	8008908 <_fflush_r+0xc>

0800894c <memmove>:
 800894c:	4288      	cmp	r0, r1
 800894e:	b510      	push	{r4, lr}
 8008950:	eb01 0402 	add.w	r4, r1, r2
 8008954:	d902      	bls.n	800895c <memmove+0x10>
 8008956:	4284      	cmp	r4, r0
 8008958:	4623      	mov	r3, r4
 800895a:	d807      	bhi.n	800896c <memmove+0x20>
 800895c:	1e43      	subs	r3, r0, #1
 800895e:	42a1      	cmp	r1, r4
 8008960:	d008      	beq.n	8008974 <memmove+0x28>
 8008962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800896a:	e7f8      	b.n	800895e <memmove+0x12>
 800896c:	4601      	mov	r1, r0
 800896e:	4402      	add	r2, r0
 8008970:	428a      	cmp	r2, r1
 8008972:	d100      	bne.n	8008976 <memmove+0x2a>
 8008974:	bd10      	pop	{r4, pc}
 8008976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800897a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800897e:	e7f7      	b.n	8008970 <memmove+0x24>

08008980 <_sbrk_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	2300      	movs	r3, #0
 8008984:	4d05      	ldr	r5, [pc, #20]	; (800899c <_sbrk_r+0x1c>)
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	f7fa fa02 	bl	8002d94 <_sbrk>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_sbrk_r+0x1a>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_sbrk_r+0x1a>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	20000700 	.word	0x20000700

080089a0 <memcpy>:
 80089a0:	440a      	add	r2, r1
 80089a2:	4291      	cmp	r1, r2
 80089a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a8:	d100      	bne.n	80089ac <memcpy+0xc>
 80089aa:	4770      	bx	lr
 80089ac:	b510      	push	{r4, lr}
 80089ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b2:	4291      	cmp	r1, r2
 80089b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b8:	d1f9      	bne.n	80089ae <memcpy+0xe>
 80089ba:	bd10      	pop	{r4, pc}

080089bc <__assert_func>:
 80089bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089be:	4614      	mov	r4, r2
 80089c0:	461a      	mov	r2, r3
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <__assert_func+0x2c>)
 80089c4:	4605      	mov	r5, r0
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68d8      	ldr	r0, [r3, #12]
 80089ca:	b14c      	cbz	r4, 80089e0 <__assert_func+0x24>
 80089cc:	4b07      	ldr	r3, [pc, #28]	; (80089ec <__assert_func+0x30>)
 80089ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089d2:	9100      	str	r1, [sp, #0]
 80089d4:	462b      	mov	r3, r5
 80089d6:	4906      	ldr	r1, [pc, #24]	; (80089f0 <__assert_func+0x34>)
 80089d8:	f000 f870 	bl	8008abc <fiprintf>
 80089dc:	f000 f880 	bl	8008ae0 <abort>
 80089e0:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <__assert_func+0x38>)
 80089e2:	461c      	mov	r4, r3
 80089e4:	e7f3      	b.n	80089ce <__assert_func+0x12>
 80089e6:	bf00      	nop
 80089e8:	20000074 	.word	0x20000074
 80089ec:	080092f7 	.word	0x080092f7
 80089f0:	08009304 	.word	0x08009304
 80089f4:	08009332 	.word	0x08009332

080089f8 <_calloc_r>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	fba1 5402 	umull	r5, r4, r1, r2
 80089fe:	b934      	cbnz	r4, 8008a0e <_calloc_r+0x16>
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7ff f99d 	bl	8007d40 <_malloc_r>
 8008a06:	4606      	mov	r6, r0
 8008a08:	b928      	cbnz	r0, 8008a16 <_calloc_r+0x1e>
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	bd70      	pop	{r4, r5, r6, pc}
 8008a0e:	220c      	movs	r2, #12
 8008a10:	2600      	movs	r6, #0
 8008a12:	6002      	str	r2, [r0, #0]
 8008a14:	e7f9      	b.n	8008a0a <_calloc_r+0x12>
 8008a16:	462a      	mov	r2, r5
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7fe fa24 	bl	8006e66 <memset>
 8008a1e:	e7f4      	b.n	8008a0a <_calloc_r+0x12>

08008a20 <__ascii_mbtowc>:
 8008a20:	b082      	sub	sp, #8
 8008a22:	b901      	cbnz	r1, 8008a26 <__ascii_mbtowc+0x6>
 8008a24:	a901      	add	r1, sp, #4
 8008a26:	b142      	cbz	r2, 8008a3a <__ascii_mbtowc+0x1a>
 8008a28:	b14b      	cbz	r3, 8008a3e <__ascii_mbtowc+0x1e>
 8008a2a:	7813      	ldrb	r3, [r2, #0]
 8008a2c:	600b      	str	r3, [r1, #0]
 8008a2e:	7812      	ldrb	r2, [r2, #0]
 8008a30:	1e10      	subs	r0, r2, #0
 8008a32:	bf18      	it	ne
 8008a34:	2001      	movne	r0, #1
 8008a36:	b002      	add	sp, #8
 8008a38:	4770      	bx	lr
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	e7fb      	b.n	8008a36 <__ascii_mbtowc+0x16>
 8008a3e:	f06f 0001 	mvn.w	r0, #1
 8008a42:	e7f8      	b.n	8008a36 <__ascii_mbtowc+0x16>

08008a44 <_realloc_r>:
 8008a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4614      	mov	r4, r2
 8008a4c:	460e      	mov	r6, r1
 8008a4e:	b921      	cbnz	r1, 8008a5a <_realloc_r+0x16>
 8008a50:	4611      	mov	r1, r2
 8008a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a56:	f7ff b973 	b.w	8007d40 <_malloc_r>
 8008a5a:	b92a      	cbnz	r2, 8008a68 <_realloc_r+0x24>
 8008a5c:	f7ff f900 	bl	8007c60 <_free_r>
 8008a60:	4625      	mov	r5, r4
 8008a62:	4628      	mov	r0, r5
 8008a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a68:	f000 f841 	bl	8008aee <_malloc_usable_size_r>
 8008a6c:	4284      	cmp	r4, r0
 8008a6e:	4607      	mov	r7, r0
 8008a70:	d802      	bhi.n	8008a78 <_realloc_r+0x34>
 8008a72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a76:	d812      	bhi.n	8008a9e <_realloc_r+0x5a>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	f7ff f960 	bl	8007d40 <_malloc_r>
 8008a80:	4605      	mov	r5, r0
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d0ed      	beq.n	8008a62 <_realloc_r+0x1e>
 8008a86:	42bc      	cmp	r4, r7
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	bf28      	it	cs
 8008a8e:	463a      	movcs	r2, r7
 8008a90:	f7ff ff86 	bl	80089a0 <memcpy>
 8008a94:	4631      	mov	r1, r6
 8008a96:	4640      	mov	r0, r8
 8008a98:	f7ff f8e2 	bl	8007c60 <_free_r>
 8008a9c:	e7e1      	b.n	8008a62 <_realloc_r+0x1e>
 8008a9e:	4635      	mov	r5, r6
 8008aa0:	e7df      	b.n	8008a62 <_realloc_r+0x1e>

08008aa2 <__ascii_wctomb>:
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	b141      	cbz	r1, 8008aba <__ascii_wctomb+0x18>
 8008aa8:	2aff      	cmp	r2, #255	; 0xff
 8008aaa:	d904      	bls.n	8008ab6 <__ascii_wctomb+0x14>
 8008aac:	228a      	movs	r2, #138	; 0x8a
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	4770      	bx	lr
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	700a      	strb	r2, [r1, #0]
 8008aba:	4770      	bx	lr

08008abc <fiprintf>:
 8008abc:	b40e      	push	{r1, r2, r3}
 8008abe:	b503      	push	{r0, r1, lr}
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	4805      	ldr	r0, [pc, #20]	; (8008adc <fiprintf+0x20>)
 8008ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	f000 f83d 	bl	8008b4c <_vfiprintf_r>
 8008ad2:	b002      	add	sp, #8
 8008ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad8:	b003      	add	sp, #12
 8008ada:	4770      	bx	lr
 8008adc:	20000074 	.word	0x20000074

08008ae0 <abort>:
 8008ae0:	2006      	movs	r0, #6
 8008ae2:	b508      	push	{r3, lr}
 8008ae4:	f000 fa0a 	bl	8008efc <raise>
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7fa f8e0 	bl	8002cae <_exit>

08008aee <_malloc_usable_size_r>:
 8008aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af2:	1f18      	subs	r0, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bfbc      	itt	lt
 8008af8:	580b      	ldrlt	r3, [r1, r0]
 8008afa:	18c0      	addlt	r0, r0, r3
 8008afc:	4770      	bx	lr

08008afe <__sfputc_r>:
 8008afe:	6893      	ldr	r3, [r2, #8]
 8008b00:	b410      	push	{r4}
 8008b02:	3b01      	subs	r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	6093      	str	r3, [r2, #8]
 8008b08:	da07      	bge.n	8008b1a <__sfputc_r+0x1c>
 8008b0a:	6994      	ldr	r4, [r2, #24]
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	db01      	blt.n	8008b14 <__sfputc_r+0x16>
 8008b10:	290a      	cmp	r1, #10
 8008b12:	d102      	bne.n	8008b1a <__sfputc_r+0x1c>
 8008b14:	bc10      	pop	{r4}
 8008b16:	f000 b933 	b.w	8008d80 <__swbuf_r>
 8008b1a:	6813      	ldr	r3, [r2, #0]
 8008b1c:	1c58      	adds	r0, r3, #1
 8008b1e:	6010      	str	r0, [r2, #0]
 8008b20:	7019      	strb	r1, [r3, #0]
 8008b22:	4608      	mov	r0, r1
 8008b24:	bc10      	pop	{r4}
 8008b26:	4770      	bx	lr

08008b28 <__sfputs_r>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4614      	mov	r4, r2
 8008b30:	18d5      	adds	r5, r2, r3
 8008b32:	42ac      	cmp	r4, r5
 8008b34:	d101      	bne.n	8008b3a <__sfputs_r+0x12>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e007      	b.n	8008b4a <__sfputs_r+0x22>
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b42:	f7ff ffdc 	bl	8008afe <__sfputc_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d1f3      	bne.n	8008b32 <__sfputs_r+0xa>
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b4c <_vfiprintf_r>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	460d      	mov	r5, r1
 8008b52:	4614      	mov	r4, r2
 8008b54:	4698      	mov	r8, r3
 8008b56:	4606      	mov	r6, r0
 8008b58:	b09d      	sub	sp, #116	; 0x74
 8008b5a:	b118      	cbz	r0, 8008b64 <_vfiprintf_r+0x18>
 8008b5c:	6a03      	ldr	r3, [r0, #32]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_vfiprintf_r+0x18>
 8008b60:	f7fe f8e8 	bl	8006d34 <__sinit>
 8008b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_vfiprintf_r+0x2a>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	059a      	lsls	r2, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_vfiprintf_r+0x2a>
 8008b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b72:	f7fe f9f6 	bl	8006f62 <__retarget_lock_acquire_recursive>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	071b      	lsls	r3, r3, #28
 8008b7a:	d501      	bpl.n	8008b80 <_vfiprintf_r+0x34>
 8008b7c:	692b      	ldr	r3, [r5, #16]
 8008b7e:	b99b      	cbnz	r3, 8008ba8 <_vfiprintf_r+0x5c>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f93a 	bl	8008dfc <__swsetup_r>
 8008b88:	b170      	cbz	r0, 8008ba8 <_vfiprintf_r+0x5c>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8c:	07dc      	lsls	r4, r3, #31
 8008b8e:	d504      	bpl.n	8008b9a <_vfiprintf_r+0x4e>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b01d      	add	sp, #116	; 0x74
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	0598      	lsls	r0, r3, #22
 8008b9e:	d4f7      	bmi.n	8008b90 <_vfiprintf_r+0x44>
 8008ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ba2:	f7fe f9df 	bl	8006f64 <__retarget_lock_release_recursive>
 8008ba6:	e7f3      	b.n	8008b90 <_vfiprintf_r+0x44>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	2320      	movs	r3, #32
 8008bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb2:	2330      	movs	r3, #48	; 0x30
 8008bb4:	f04f 0901 	mov.w	r9, #1
 8008bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008d6c <_vfiprintf_r+0x220>
 8008bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	469a      	mov	sl, r3
 8008bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bcc:	b10a      	cbz	r2, 8008bd2 <_vfiprintf_r+0x86>
 8008bce:	2a25      	cmp	r2, #37	; 0x25
 8008bd0:	d1f9      	bne.n	8008bc6 <_vfiprintf_r+0x7a>
 8008bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd6:	d00b      	beq.n	8008bf0 <_vfiprintf_r+0xa4>
 8008bd8:	465b      	mov	r3, fp
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ffa2 	bl	8008b28 <__sfputs_r>
 8008be4:	3001      	adds	r0, #1
 8008be6:	f000 80a9 	beq.w	8008d3c <_vfiprintf_r+0x1f0>
 8008bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bec:	445a      	add	r2, fp
 8008bee:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 80a1 	beq.w	8008d3c <_vfiprintf_r+0x1f0>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c04:	f10a 0a01 	add.w	sl, sl, #1
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	9307      	str	r3, [sp, #28]
 8008c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c10:	931a      	str	r3, [sp, #104]	; 0x68
 8008c12:	4654      	mov	r4, sl
 8008c14:	2205      	movs	r2, #5
 8008c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1a:	4854      	ldr	r0, [pc, #336]	; (8008d6c <_vfiprintf_r+0x220>)
 8008c1c:	f7fe f9a3 	bl	8006f66 <memchr>
 8008c20:	9a04      	ldr	r2, [sp, #16]
 8008c22:	b9d8      	cbnz	r0, 8008c5c <_vfiprintf_r+0x110>
 8008c24:	06d1      	lsls	r1, r2, #27
 8008c26:	bf44      	itt	mi
 8008c28:	2320      	movmi	r3, #32
 8008c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c2e:	0713      	lsls	r3, r2, #28
 8008c30:	bf44      	itt	mi
 8008c32:	232b      	movmi	r3, #43	; 0x2b
 8008c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c38:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3e:	d015      	beq.n	8008c6c <_vfiprintf_r+0x120>
 8008c40:	4654      	mov	r4, sl
 8008c42:	2000      	movs	r0, #0
 8008c44:	f04f 0c0a 	mov.w	ip, #10
 8008c48:	9a07      	ldr	r2, [sp, #28]
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c50:	3b30      	subs	r3, #48	; 0x30
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	d94d      	bls.n	8008cf2 <_vfiprintf_r+0x1a6>
 8008c56:	b1b0      	cbz	r0, 8008c86 <_vfiprintf_r+0x13a>
 8008c58:	9207      	str	r2, [sp, #28]
 8008c5a:	e014      	b.n	8008c86 <_vfiprintf_r+0x13a>
 8008c5c:	eba0 0308 	sub.w	r3, r0, r8
 8008c60:	fa09 f303 	lsl.w	r3, r9, r3
 8008c64:	4313      	orrs	r3, r2
 8008c66:	46a2      	mov	sl, r4
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	e7d2      	b.n	8008c12 <_vfiprintf_r+0xc6>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	1d19      	adds	r1, r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	9103      	str	r1, [sp, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bfbb      	ittet	lt
 8008c78:	425b      	neglt	r3, r3
 8008c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7e:	9307      	strge	r3, [sp, #28]
 8008c80:	9307      	strlt	r3, [sp, #28]
 8008c82:	bfb8      	it	lt
 8008c84:	9204      	strlt	r2, [sp, #16]
 8008c86:	7823      	ldrb	r3, [r4, #0]
 8008c88:	2b2e      	cmp	r3, #46	; 0x2e
 8008c8a:	d10c      	bne.n	8008ca6 <_vfiprintf_r+0x15a>
 8008c8c:	7863      	ldrb	r3, [r4, #1]
 8008c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c90:	d134      	bne.n	8008cfc <_vfiprintf_r+0x1b0>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	3402      	adds	r4, #2
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	9203      	str	r2, [sp, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bfb8      	it	lt
 8008ca0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca4:	9305      	str	r3, [sp, #20]
 8008ca6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d70 <_vfiprintf_r+0x224>
 8008caa:	2203      	movs	r2, #3
 8008cac:	4650      	mov	r0, sl
 8008cae:	7821      	ldrb	r1, [r4, #0]
 8008cb0:	f7fe f959 	bl	8006f66 <memchr>
 8008cb4:	b138      	cbz	r0, 8008cc6 <_vfiprintf_r+0x17a>
 8008cb6:	2240      	movs	r2, #64	; 0x40
 8008cb8:	9b04      	ldr	r3, [sp, #16]
 8008cba:	eba0 000a 	sub.w	r0, r0, sl
 8008cbe:	4082      	lsls	r2, r0
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	3401      	adds	r4, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cca:	2206      	movs	r2, #6
 8008ccc:	4829      	ldr	r0, [pc, #164]	; (8008d74 <_vfiprintf_r+0x228>)
 8008cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd2:	f7fe f948 	bl	8006f66 <memchr>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d03f      	beq.n	8008d5a <_vfiprintf_r+0x20e>
 8008cda:	4b27      	ldr	r3, [pc, #156]	; (8008d78 <_vfiprintf_r+0x22c>)
 8008cdc:	bb1b      	cbnz	r3, 8008d26 <_vfiprintf_r+0x1da>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	f023 0307 	bic.w	r3, r3, #7
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	443b      	add	r3, r7
 8008cee:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf0:	e768      	b.n	8008bc4 <_vfiprintf_r+0x78>
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cfa:	e7a6      	b.n	8008c4a <_vfiprintf_r+0xfe>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f04f 0c0a 	mov.w	ip, #10
 8008d02:	4619      	mov	r1, r3
 8008d04:	3401      	adds	r4, #1
 8008d06:	9305      	str	r3, [sp, #20]
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0e:	3a30      	subs	r2, #48	; 0x30
 8008d10:	2a09      	cmp	r2, #9
 8008d12:	d903      	bls.n	8008d1c <_vfiprintf_r+0x1d0>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0c6      	beq.n	8008ca6 <_vfiprintf_r+0x15a>
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	e7c4      	b.n	8008ca6 <_vfiprintf_r+0x15a>
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	2301      	movs	r3, #1
 8008d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d24:	e7f0      	b.n	8008d08 <_vfiprintf_r+0x1bc>
 8008d26:	ab03      	add	r3, sp, #12
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <_vfiprintf_r+0x230>)
 8008d30:	a904      	add	r1, sp, #16
 8008d32:	f7fd fbb1 	bl	8006498 <_printf_float>
 8008d36:	4607      	mov	r7, r0
 8008d38:	1c78      	adds	r0, r7, #1
 8008d3a:	d1d6      	bne.n	8008cea <_vfiprintf_r+0x19e>
 8008d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d3e:	07d9      	lsls	r1, r3, #31
 8008d40:	d405      	bmi.n	8008d4e <_vfiprintf_r+0x202>
 8008d42:	89ab      	ldrh	r3, [r5, #12]
 8008d44:	059a      	lsls	r2, r3, #22
 8008d46:	d402      	bmi.n	8008d4e <_vfiprintf_r+0x202>
 8008d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d4a:	f7fe f90b 	bl	8006f64 <__retarget_lock_release_recursive>
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	065b      	lsls	r3, r3, #25
 8008d52:	f53f af1d 	bmi.w	8008b90 <_vfiprintf_r+0x44>
 8008d56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d58:	e71c      	b.n	8008b94 <_vfiprintf_r+0x48>
 8008d5a:	ab03      	add	r3, sp, #12
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	462a      	mov	r2, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <_vfiprintf_r+0x230>)
 8008d64:	a904      	add	r1, sp, #16
 8008d66:	f7fd fe37 	bl	80069d8 <_printf_i>
 8008d6a:	e7e4      	b.n	8008d36 <_vfiprintf_r+0x1ea>
 8008d6c:	080092dc 	.word	0x080092dc
 8008d70:	080092e2 	.word	0x080092e2
 8008d74:	080092e6 	.word	0x080092e6
 8008d78:	08006499 	.word	0x08006499
 8008d7c:	08008b29 	.word	0x08008b29

08008d80 <__swbuf_r>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	460e      	mov	r6, r1
 8008d84:	4614      	mov	r4, r2
 8008d86:	4605      	mov	r5, r0
 8008d88:	b118      	cbz	r0, 8008d92 <__swbuf_r+0x12>
 8008d8a:	6a03      	ldr	r3, [r0, #32]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <__swbuf_r+0x12>
 8008d8e:	f7fd ffd1 	bl	8006d34 <__sinit>
 8008d92:	69a3      	ldr	r3, [r4, #24]
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	071a      	lsls	r2, r3, #28
 8008d9a:	d525      	bpl.n	8008de8 <__swbuf_r+0x68>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	b31b      	cbz	r3, 8008de8 <__swbuf_r+0x68>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	6922      	ldr	r2, [r4, #16]
 8008da4:	b2f6      	uxtb	r6, r6
 8008da6:	1a98      	subs	r0, r3, r2
 8008da8:	6963      	ldr	r3, [r4, #20]
 8008daa:	4637      	mov	r7, r6
 8008dac:	4283      	cmp	r3, r0
 8008dae:	dc04      	bgt.n	8008dba <__swbuf_r+0x3a>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f7ff fda2 	bl	80088fc <_fflush_r>
 8008db8:	b9e0      	cbnz	r0, 8008df4 <__swbuf_r+0x74>
 8008dba:	68a3      	ldr	r3, [r4, #8]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	60a3      	str	r3, [r4, #8]
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	6022      	str	r2, [r4, #0]
 8008dc6:	701e      	strb	r6, [r3, #0]
 8008dc8:	6962      	ldr	r2, [r4, #20]
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d004      	beq.n	8008dda <__swbuf_r+0x5a>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	07db      	lsls	r3, r3, #31
 8008dd4:	d506      	bpl.n	8008de4 <__swbuf_r+0x64>
 8008dd6:	2e0a      	cmp	r6, #10
 8008dd8:	d104      	bne.n	8008de4 <__swbuf_r+0x64>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7ff fd8d 	bl	80088fc <_fflush_r>
 8008de2:	b938      	cbnz	r0, 8008df4 <__swbuf_r+0x74>
 8008de4:	4638      	mov	r0, r7
 8008de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 f806 	bl	8008dfc <__swsetup_r>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d0d5      	beq.n	8008da0 <__swbuf_r+0x20>
 8008df4:	f04f 37ff 	mov.w	r7, #4294967295
 8008df8:	e7f4      	b.n	8008de4 <__swbuf_r+0x64>
	...

08008dfc <__swsetup_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4b2a      	ldr	r3, [pc, #168]	; (8008ea8 <__swsetup_r+0xac>)
 8008e00:	4605      	mov	r5, r0
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	460c      	mov	r4, r1
 8008e06:	b118      	cbz	r0, 8008e10 <__swsetup_r+0x14>
 8008e08:	6a03      	ldr	r3, [r0, #32]
 8008e0a:	b90b      	cbnz	r3, 8008e10 <__swsetup_r+0x14>
 8008e0c:	f7fd ff92 	bl	8006d34 <__sinit>
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e16:	0718      	lsls	r0, r3, #28
 8008e18:	d422      	bmi.n	8008e60 <__swsetup_r+0x64>
 8008e1a:	06d9      	lsls	r1, r3, #27
 8008e1c:	d407      	bmi.n	8008e2e <__swsetup_r+0x32>
 8008e1e:	2309      	movs	r3, #9
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	e034      	b.n	8008e98 <__swsetup_r+0x9c>
 8008e2e:	0758      	lsls	r0, r3, #29
 8008e30:	d512      	bpl.n	8008e58 <__swsetup_r+0x5c>
 8008e32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e34:	b141      	cbz	r1, 8008e48 <__swsetup_r+0x4c>
 8008e36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e3a:	4299      	cmp	r1, r3
 8008e3c:	d002      	beq.n	8008e44 <__swsetup_r+0x48>
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f7fe ff0e 	bl	8007c60 <_free_r>
 8008e44:	2300      	movs	r3, #0
 8008e46:	6363      	str	r3, [r4, #52]	; 0x34
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e4e:	81a3      	strh	r3, [r4, #12]
 8008e50:	2300      	movs	r3, #0
 8008e52:	6063      	str	r3, [r4, #4]
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	6023      	str	r3, [r4, #0]
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	f043 0308 	orr.w	r3, r3, #8
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	b94b      	cbnz	r3, 8008e78 <__swsetup_r+0x7c>
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e6e:	d003      	beq.n	8008e78 <__swsetup_r+0x7c>
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f883 	bl	8008f7e <__smakebuf_r>
 8008e78:	89a0      	ldrh	r0, [r4, #12]
 8008e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e7e:	f010 0301 	ands.w	r3, r0, #1
 8008e82:	d00a      	beq.n	8008e9a <__swsetup_r+0x9e>
 8008e84:	2300      	movs	r3, #0
 8008e86:	60a3      	str	r3, [r4, #8]
 8008e88:	6963      	ldr	r3, [r4, #20]
 8008e8a:	425b      	negs	r3, r3
 8008e8c:	61a3      	str	r3, [r4, #24]
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	b943      	cbnz	r3, 8008ea4 <__swsetup_r+0xa8>
 8008e92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e96:	d1c4      	bne.n	8008e22 <__swsetup_r+0x26>
 8008e98:	bd38      	pop	{r3, r4, r5, pc}
 8008e9a:	0781      	lsls	r1, r0, #30
 8008e9c:	bf58      	it	pl
 8008e9e:	6963      	ldrpl	r3, [r4, #20]
 8008ea0:	60a3      	str	r3, [r4, #8]
 8008ea2:	e7f4      	b.n	8008e8e <__swsetup_r+0x92>
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e7f7      	b.n	8008e98 <__swsetup_r+0x9c>
 8008ea8:	20000074 	.word	0x20000074

08008eac <_raise_r>:
 8008eac:	291f      	cmp	r1, #31
 8008eae:	b538      	push	{r3, r4, r5, lr}
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	d904      	bls.n	8008ec0 <_raise_r+0x14>
 8008eb6:	2316      	movs	r3, #22
 8008eb8:	6003      	str	r3, [r0, #0]
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ec2:	b112      	cbz	r2, 8008eca <_raise_r+0x1e>
 8008ec4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ec8:	b94b      	cbnz	r3, 8008ede <_raise_r+0x32>
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 f830 	bl	8008f30 <_getpid_r>
 8008ed0:	462a      	mov	r2, r5
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eda:	f000 b817 	b.w	8008f0c <_kill_r>
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d00a      	beq.n	8008ef8 <_raise_r+0x4c>
 8008ee2:	1c59      	adds	r1, r3, #1
 8008ee4:	d103      	bne.n	8008eee <_raise_r+0x42>
 8008ee6:	2316      	movs	r3, #22
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	2001      	movs	r0, #1
 8008eec:	e7e7      	b.n	8008ebe <_raise_r+0x12>
 8008eee:	2400      	movs	r4, #0
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ef6:	4798      	blx	r3
 8008ef8:	2000      	movs	r0, #0
 8008efa:	e7e0      	b.n	8008ebe <_raise_r+0x12>

08008efc <raise>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <raise+0xc>)
 8008efe:	4601      	mov	r1, r0
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f7ff bfd3 	b.w	8008eac <_raise_r>
 8008f06:	bf00      	nop
 8008f08:	20000074 	.word	0x20000074

08008f0c <_kill_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4d06      	ldr	r5, [pc, #24]	; (8008f2c <_kill_r+0x20>)
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	602b      	str	r3, [r5, #0]
 8008f1a:	f7f9 feb8 	bl	8002c8e <_kill>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d102      	bne.n	8008f28 <_kill_r+0x1c>
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	b103      	cbz	r3, 8008f28 <_kill_r+0x1c>
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	bd38      	pop	{r3, r4, r5, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000700 	.word	0x20000700

08008f30 <_getpid_r>:
 8008f30:	f7f9 bea6 	b.w	8002c80 <_getpid>

08008f34 <__swhatbuf_r>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	460c      	mov	r4, r1
 8008f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	461e      	mov	r6, r3
 8008f42:	b096      	sub	sp, #88	; 0x58
 8008f44:	da0c      	bge.n	8008f60 <__swhatbuf_r+0x2c>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f4e:	bf0c      	ite	eq
 8008f50:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f54:	2340      	movne	r3, #64	; 0x40
 8008f56:	2000      	movs	r0, #0
 8008f58:	6031      	str	r1, [r6, #0]
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	b016      	add	sp, #88	; 0x58
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	466a      	mov	r2, sp
 8008f62:	f000 f849 	bl	8008ff8 <_fstat_r>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	dbed      	blt.n	8008f46 <__swhatbuf_r+0x12>
 8008f6a:	9901      	ldr	r1, [sp, #4]
 8008f6c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f70:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f74:	4259      	negs	r1, r3
 8008f76:	4159      	adcs	r1, r3
 8008f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f7c:	e7eb      	b.n	8008f56 <__swhatbuf_r+0x22>

08008f7e <__smakebuf_r>:
 8008f7e:	898b      	ldrh	r3, [r1, #12]
 8008f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f82:	079d      	lsls	r5, r3, #30
 8008f84:	4606      	mov	r6, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	d507      	bpl.n	8008f9a <__smakebuf_r+0x1c>
 8008f8a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	2301      	movs	r3, #1
 8008f94:	6163      	str	r3, [r4, #20]
 8008f96:	b002      	add	sp, #8
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	466a      	mov	r2, sp
 8008f9c:	ab01      	add	r3, sp, #4
 8008f9e:	f7ff ffc9 	bl	8008f34 <__swhatbuf_r>
 8008fa2:	9900      	ldr	r1, [sp, #0]
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7fe feca 	bl	8007d40 <_malloc_r>
 8008fac:	b948      	cbnz	r0, 8008fc2 <__smakebuf_r+0x44>
 8008fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb2:	059a      	lsls	r2, r3, #22
 8008fb4:	d4ef      	bmi.n	8008f96 <__smakebuf_r+0x18>
 8008fb6:	f023 0303 	bic.w	r3, r3, #3
 8008fba:	f043 0302 	orr.w	r3, r3, #2
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	e7e3      	b.n	8008f8a <__smakebuf_r+0xc>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	6020      	str	r0, [r4, #0]
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	9b00      	ldr	r3, [sp, #0]
 8008fce:	6120      	str	r0, [r4, #16]
 8008fd0:	6163      	str	r3, [r4, #20]
 8008fd2:	9b01      	ldr	r3, [sp, #4]
 8008fd4:	b15b      	cbz	r3, 8008fee <__smakebuf_r+0x70>
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fdc:	f000 f81e 	bl	800901c <_isatty_r>
 8008fe0:	b128      	cbz	r0, 8008fee <__smakebuf_r+0x70>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f023 0303 	bic.w	r3, r3, #3
 8008fe8:	f043 0301 	orr.w	r3, r3, #1
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	431d      	orrs	r5, r3
 8008ff2:	81a5      	strh	r5, [r4, #12]
 8008ff4:	e7cf      	b.n	8008f96 <__smakebuf_r+0x18>
	...

08008ff8 <_fstat_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4d06      	ldr	r5, [pc, #24]	; (8009018 <_fstat_r+0x20>)
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	f7f9 fea0 	bl	8002d4a <_fstat>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d102      	bne.n	8009014 <_fstat_r+0x1c>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	b103      	cbz	r3, 8009014 <_fstat_r+0x1c>
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	20000700 	.word	0x20000700

0800901c <_isatty_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	2300      	movs	r3, #0
 8009020:	4d05      	ldr	r5, [pc, #20]	; (8009038 <_isatty_r+0x1c>)
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f9 fe9e 	bl	8002d68 <_isatty>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_isatty_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_isatty_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20000700 	.word	0x20000700

0800903c <_init>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr

08009048 <_fini>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr
