
Carritov3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08008b08  08008b08  00018b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008edc  08008edc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008edc  08008edc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200001e4  080090c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  080090c8  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f538  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b3  00000000  00000000  0002f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00031840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c73  00000000  00000000  00032800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cfd  00000000  00000000  00033473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e55  00000000  00000000  0004c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f1f6  00000000  00000000  0005dfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005560  00000000  00000000  000ed1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f271c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008aec 	.word	0x08008aec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008aec 	.word	0x08008aec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <Forward>:
 *      Author: Jorge
 */

#include "main.h"

void Forward(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); //izq atras
 8001034:	2200      	movs	r2, #0
 8001036:	2101      	movs	r1, #1
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <Forward+0x5c>)
 800103a:	f001 ff61 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); //izq atras
 800103e:	2201      	movs	r2, #1
 8001040:	2102      	movs	r1, #2
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <Forward+0x5c>)
 8001044:	f001 ff5c 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //derehca atras
 8001048:	2201      	movs	r2, #1
 800104a:	2104      	movs	r1, #4
 800104c:	480f      	ldr	r0, [pc, #60]	; (800108c <Forward+0x5c>)
 800104e:	f001 ff57 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //derecha atrasa
 8001052:	2200      	movs	r2, #0
 8001054:	2108      	movs	r1, #8
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <Forward+0x5c>)
 8001058:	f001 ff52 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0); //derecha enfrente
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <Forward+0x5c>)
 8001064:	f001 ff4c 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); //derecha enfrente
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	4808      	ldr	r0, [pc, #32]	; (8001090 <Forward+0x60>)
 800106e:	f001 ff47 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //izq enfrente
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <Forward+0x60>)
 8001078:	f001 ff42 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // ezq enfrente
 800107c:	2200      	movs	r2, #0
 800107e:	2120      	movs	r1, #32
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <Forward+0x60>)
 8001082:	f001 ff3d 	bl	8002f00 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00

08001094 <RightTurn>:

void RightTurn(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <RightTurn+0x5c>)
 800109e:	f001 ff2f 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2102      	movs	r1, #2
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <RightTurn+0x5c>)
 80010a8:	f001 ff2a 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2104      	movs	r1, #4
 80010b0:	480f      	ldr	r0, [pc, #60]	; (80010f0 <RightTurn+0x5c>)
 80010b2:	f001 ff25 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2108      	movs	r1, #8
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <RightTurn+0x5c>)
 80010bc:	f001 ff20 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	480a      	ldr	r0, [pc, #40]	; (80010f0 <RightTurn+0x5c>)
 80010c8:	f001 ff1a 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2108      	movs	r1, #8
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <RightTurn+0x60>)
 80010d2:	f001 ff15 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <RightTurn+0x60>)
 80010dc:	f001 ff10 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <RightTurn+0x60>)
 80010e6:	f001 ff0b 	bl	8002f00 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <Stop>:

void Stop(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <Stop+0x5c>)
 8001102:	f001 fefd 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	4812      	ldr	r0, [pc, #72]	; (8001154 <Stop+0x5c>)
 800110c:	f001 fef8 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2104      	movs	r1, #4
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <Stop+0x5c>)
 8001116:	f001 fef3 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <Stop+0x5c>)
 8001120:	f001 feee 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <Stop+0x5c>)
 800112c:	f001 fee8 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2108      	movs	r1, #8
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <Stop+0x60>)
 8001136:	f001 fee3 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2110      	movs	r1, #16
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <Stop+0x60>)
 8001140:	f001 fede 	bl	8002f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2120      	movs	r1, #32
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <Stop+0x60>)
 800114a:	f001 fed9 	bl	8002f00 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00

0800115c <PIDpwm_Init>:
 * @param Ti  Integral
 * @param Td  Derivate
 * @param min_output  minimum output of pwm
 * @param max_output maximum outut of pwm
 */
void PIDpwm_Init(PIDpwm_Controller *pid, float Kp, float Ti, float Td, float min_output, float max_output){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	601a      	str	r2, [r3, #0]
	pid->Ki = Kp*Ti;
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	68b8      	ldr	r0, [r7, #8]
 8001174:	f7ff fd96 	bl	8000ca4 <__aeabi_fmul>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kp*Td;
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f7ff fd8e 	bl	8000ca4 <__aeabi_fmul>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	609a      	str	r2, [r3, #8]

	//inicializar variables tipo float
	pid->Sp = 0.0f;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
	pid->errorAnterior = 0.0f;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    pid->medicionSensor_Anterior = 0.0f;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
    //limites del PID
    pid->min_output = min_output;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	61da      	str	r2, [r3, #28]
    pid->max_output = max_output;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	621a      	str	r2, [r3, #32]
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <PIDpwm_Compute>:

float PIDpwm_Compute(PIDpwm_Controller *pid, float medicionSensor) {
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    float error = pid->Sp - medicionSensor;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fc5b 	bl	8000a90 <__aeabi_fsub>
 80011da:	4603      	mov	r3, r0
 80011dc:	613b      	str	r3, [r7, #16]
    pid->integral += error;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	6939      	ldr	r1, [r7, #16]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fc55 	bl	8000a94 <__addsf3>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	611a      	str	r2, [r3, #16]
    float derivativo = error - pid->errorAnterior;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4619      	mov	r1, r3
 80011f8:	6938      	ldr	r0, [r7, #16]
 80011fa:	f7ff fc49 	bl	8000a90 <__aeabi_fsub>
 80011fe:	4603      	mov	r3, r0
 8001200:	60fb      	str	r3, [r7, #12]
    float output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivativo;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fd4b 	bl	8000ca4 <__aeabi_fmul>
 800120e:	4603      	mov	r3, r0
 8001210:	461c      	mov	r4, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f7ff fd41 	bl	8000ca4 <__aeabi_fmul>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff fc34 	bl	8000a94 <__addsf3>
 800122c:	4603      	mov	r3, r0
 800122e:	461c      	mov	r4, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fd34 	bl	8000ca4 <__aeabi_fmul>
 800123c:	4603      	mov	r3, r0
 800123e:	4619      	mov	r1, r3
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fc27 	bl	8000a94 <__addsf3>
 8001246:	4603      	mov	r3, r0
 8001248:	617b      	str	r3, [r7, #20]

    //saturación de la salida
    if (output > pid->max_output) output = pid->max_output;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4619      	mov	r1, r3
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f7ff fee3 	bl	800101c <__aeabi_fcmpgt>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <PIDpwm_Compute+0x9e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	617b      	str	r3, [r7, #20]
    if (output < pid->min_output) output = pid->min_output;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4619      	mov	r1, r3
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f7ff feb9 	bl	8000fe0 <__aeabi_fcmplt>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <PIDpwm_Compute+0xb6>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	617b      	str	r3, [r7, #20]

    //actualizar para la próxima iteración
    pid->errorAnterior = error;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	615a      	str	r2, [r3, #20]
    pid->medicionSensor_Anterior = medicionSensor;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	619a      	str	r2, [r3, #24]

    return output * 255/pid->max_output;
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <PIDpwm_Compute+0xe4>)
 8001288:	6978      	ldr	r0, [r7, #20]
 800128a:	f7ff fd0b 	bl	8000ca4 <__aeabi_fmul>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f7ff fdb7 	bl	8000e0c <__aeabi_fdiv>
 800129e:	4603      	mov	r3, r0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	437f0000 	.word	0x437f0000

080012ac <MPU_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_init(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af04      	add	r7, sp, #16
	/*IMU 60050 configuration*/
	uint8_t check, data;

	/*WHO_AM_I register, returns 0x58 if connected*/
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x75, 1, &check, 1, 100);
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <MPU_init+0x120>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b299      	uxth	r1, r3
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2301      	movs	r3, #1
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	1d7b      	adds	r3, r7, #5
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	2275      	movs	r2, #117	; 0x75
 80012c8:	4841      	ldr	r0, [pc, #260]	; (80013d0 <MPU_init+0x124>)
 80012ca:	f002 f887 	bl	80033dc <HAL_I2C_Mem_Read>

	if(check == 104){
 80012ce:	797b      	ldrb	r3, [r7, #5]
 80012d0:	2b68      	cmp	r3, #104	; 0x68
 80012d2:	d177      	bne.n	80013c4 <MPU_init+0x118>
		/*PWR_MGMT_1 register. Write 0 for normal use*/
		data = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x6B, 1, &data, 1, 100);
 80012d8:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <MPU_init+0x120>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b299      	uxth	r1, r3
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	226b      	movs	r2, #107	; 0x6b
 80012ee:	4838      	ldr	r0, [pc, #224]	; (80013d0 <MPU_init+0x124>)
 80012f0:	f001 ff7a 	bl	80031e8 <HAL_I2C_Mem_Write>

		/*SMPRT_DIV register*/
		data = 0x07;
 80012f4:	2307      	movs	r3, #7
 80012f6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x19, 1, &data, 1, 100);
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <MPU_init+0x120>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b299      	uxth	r1, r3
 80012fe:	2364      	movs	r3, #100	; 0x64
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	2219      	movs	r2, #25
 800130e:	4830      	ldr	r0, [pc, #192]	; (80013d0 <MPU_init+0x124>)
 8001310:	f001 ff6a 	bl	80031e8 <HAL_I2C_Mem_Write>

		/*Acceleration Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MPU_init+0x120>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b299      	uxth	r1, r3
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	221c      	movs	r2, #28
 800132a:	4829      	ldr	r0, [pc, #164]	; (80013d0 <MPU_init+0x124>)
 800132c:	f002 f856 	bl	80033dc <HAL_I2C_Mem_Read>

		uint8_t precission_selector = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	71fb      	strb	r3, [r7, #7]
		 * 0 for +- 2g
		 * 1 for +- 4g
		 * 2 for +- 8g
		 * 3 for +- 16g
		 */
		data = (data & ~(0b11<<3));
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	f023 0318 	bic.w	r3, r3, #24
 800133a:	b2db      	uxtb	r3, r3
 800133c:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector << 3));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	b25a      	sxtb	r2, r3
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b25b      	sxtb	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MPU_init+0x120>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b299      	uxth	r1, r3
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	221c      	movs	r2, #28
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <MPU_init+0x124>)
 8001368:	f001 ff3e 	bl	80031e8 <HAL_I2C_Mem_Write>


		/*Gyro Register configuration*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1B, 1, &data, 1, 100);
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MPU_init+0x120>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b299      	uxth	r1, r3
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2301      	movs	r3, #1
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	221b      	movs	r2, #27
 8001382:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MPU_init+0x124>)
 8001384:	f002 f82a 	bl	80033dc <HAL_I2C_Mem_Read>

		uint8_t precission_selector_gyro = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	71bb      	strb	r3, [r7, #6]
		 * 0 for +- 250 deg/s
		 * 1 for +- 500 deg/s
		 * 2 for +- 1000 deg/s
		 * 3 for +- 2000 deg/s
		 */
		data = (data & ~(0b11<<3));
 800138c:	793b      	ldrb	r3, [r7, #4]
 800138e:	f023 0318 	bic.w	r3, r3, #24
 8001392:	b2db      	uxtb	r3, r3
 8001394:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector_gyro << 3));
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	b25a      	sxtb	r2, r3
 800139c:	793b      	ldrb	r3, [r7, #4]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1B, 1,&data, 1, 100);
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MPU_init+0x120>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b299      	uxth	r1, r3
 80013ae:	2364      	movs	r3, #100	; 0x64
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	221b      	movs	r2, #27
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MPU_init+0x124>)
 80013c0:	f001 ff12 	bl	80031e8 <HAL_I2C_Mem_Write>

	}

}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000200 	.word	0x20000200

080013d4 <MPU_Read_gyro>:
	 accel_x = accel_x * 9.81;
	 accel_y = accel_y * 9.81;
	 accel_z = accel_z * 9.81;
	}

void MPU_Read_gyro(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af04      	add	r7, sp, #16
	 * 0x46 ACCEL_YOUT_L
	 * 0x47 ACCEL_ZOUT_H
	 * 0x48 ACCEL_ZOUT_L
	 * */

	if(count < 5){
 80013da:	4b66      	ldr	r3, [pc, #408]	; (8001574 <MPU_Read_gyro+0x1a0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	f200 8094 	bhi.w	800150c <MPU_Read_gyro+0x138>

		/*Read registers in order*/
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x43, 1, gyro_raw_data, 6, 1000);
 80013e4:	4b64      	ldr	r3, [pc, #400]	; (8001578 <MPU_Read_gyro+0x1a4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	2306      	movs	r3, #6
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <MPU_Read_gyro+0x1a8>)
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	2243      	movs	r2, #67	; 0x43
 80013fc:	4860      	ldr	r0, [pc, #384]	; (8001580 <MPU_Read_gyro+0x1ac>)
 80013fe:	f001 ffed 	bl	80033dc <HAL_I2C_Mem_Read>
		 * 250
		 * 500
		 * 1000
		 * 2000
		 * */
		float gyro_Precission = 250;
 8001402:	4b60      	ldr	r3, [pc, #384]	; (8001584 <MPU_Read_gyro+0x1b0>)
 8001404:	607b      	str	r3, [r7, #4]

		 gyro_x = (float)(((int16_t)(gyro_raw_data[0] << 8 | gyro_raw_data[1])) * gyro_Precission/32768);
 8001406:	4b5d      	ldr	r3, [pc, #372]	; (800157c <MPU_Read_gyro+0x1a8>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <MPU_Read_gyro+0x1a8>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21b      	sxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fbef 	bl	8000bfc <__aeabi_i2f>
 800141e:	4603      	mov	r3, r0
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fc3e 	bl	8000ca4 <__aeabi_fmul>
 8001428:	4603      	mov	r3, r0
 800142a:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fcec 	bl	8000e0c <__aeabi_fdiv>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <MPU_Read_gyro+0x1b4>)
 800143a:	601a      	str	r2, [r3, #0]
		 gyro_y = (float)(((int16_t)(gyro_raw_data[2] << 8 | gyro_raw_data[3])) * gyro_Precission/32768);
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <MPU_Read_gyro+0x1a8>)
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <MPU_Read_gyro+0x1a8>)
 8001446:	78db      	ldrb	r3, [r3, #3]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21b      	sxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbd4 	bl	8000bfc <__aeabi_i2f>
 8001454:	4603      	mov	r3, r0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fc23 	bl	8000ca4 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fcd1 	bl	8000e0c <__aeabi_fdiv>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <MPU_Read_gyro+0x1b8>)
 8001470:	601a      	str	r2, [r3, #0]
		 gyro_z = (float)(((int16_t)(gyro_raw_data[4] << 8 | gyro_raw_data[5])) * gyro_Precission/32768);
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <MPU_Read_gyro+0x1a8>)
 8001474:	791b      	ldrb	r3, [r3, #4]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <MPU_Read_gyro+0x1a8>)
 800147c:	795b      	ldrb	r3, [r3, #5]
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fbb9 	bl	8000bfc <__aeabi_i2f>
 800148a:	4603      	mov	r3, r0
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc08 	bl	8000ca4 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fcb6 	bl	8000e0c <__aeabi_fdiv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <MPU_Read_gyro+0x1bc>)
 80014a6:	601a      	str	r2, [r3, #0]

		 /*Gyro values adjusted with calibration values*/
		 gyro_x += Gyro_X_calibration;
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <MPU_Read_gyro+0x1b4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a39      	ldr	r2, [pc, #228]	; (8001594 <MPU_Read_gyro+0x1c0>)
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff faee 	bl	8000a94 <__addsf3>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MPU_Read_gyro+0x1b4>)
 80014be:	601a      	str	r2, [r3, #0]
		 gyro_y += Gyro_Y_calibration;
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <MPU_Read_gyro+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a34      	ldr	r2, [pc, #208]	; (8001598 <MPU_Read_gyro+0x1c4>)
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fae2 	bl	8000a94 <__addsf3>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <MPU_Read_gyro+0x1b8>)
 80014d6:	601a      	str	r2, [r3, #0]
		 gyro_z += Gyro_Z_calibration;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <MPU_Read_gyro+0x1bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2f      	ldr	r2, [pc, #188]	; (800159c <MPU_Read_gyro+0x1c8>)
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fad6 	bl	8000a94 <__addsf3>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MPU_Read_gyro+0x1bc>)
 80014ee:	601a      	str	r2, [r3, #0]

		 GyroMean[count] = gyro_z;
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MPU_Read_gyro+0x1a0>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MPU_Read_gyro+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <MPU_Read_gyro+0x1cc>)
 80014fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		 count++;
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MPU_Read_gyro+0x1a0>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MPU_Read_gyro+0x1a0>)
 800150a:	701a      	strb	r2, [r3, #0]
	}

	if(count == 5){
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MPU_Read_gyro+0x1a0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b05      	cmp	r3, #5
 8001512:	d12b      	bne.n	800156c <MPU_Read_gyro+0x198>
		/*Moving average of 5*/
		gyro_mean = (GyroMean[0]+GyroMean[1]+GyroMean[2]+GyroMean[3]+GyroMean[4])/5;
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MPU_Read_gyro+0x1cc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <MPU_Read_gyro+0x1cc>)
 800151a:	6852      	ldr	r2, [r2, #4]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fab8 	bl	8000a94 <__addsf3>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MPU_Read_gyro+0x1cc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff fab0 	bl	8000a94 <__addsf3>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MPU_Read_gyro+0x1cc>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f7ff faa8 	bl	8000a94 <__addsf3>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MPU_Read_gyro+0x1cc>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f7ff faa0 	bl	8000a94 <__addsf3>
 8001554:	4603      	mov	r3, r0
 8001556:	4913      	ldr	r1, [pc, #76]	; (80015a4 <MPU_Read_gyro+0x1d0>)
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fc57 	bl	8000e0c <__aeabi_fdiv>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MPU_Read_gyro+0x1d4>)
 8001564:	601a      	str	r2, [r3, #0]
		count = 0;
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <MPU_Read_gyro+0x1a0>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
	}
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000530 	.word	0x20000530
 8001578:	20000000 	.word	0x20000000
 800157c:	200003bc 	.word	0x200003bc
 8001580:	20000200 	.word	0x20000200
 8001584:	437a0000 	.word	0x437a0000
 8001588:	200003c4 	.word	0x200003c4
 800158c:	200003c8 	.word	0x200003c8
 8001590:	200003cc 	.word	0x200003cc
 8001594:	200003f4 	.word	0x200003f4
 8001598:	200003f8 	.word	0x200003f8
 800159c:	200003fc 	.word	0x200003fc
 80015a0:	200003d0 	.word	0x200003d0
 80015a4:	40a00000 	.word	0x40a00000
 80015a8:	200003e4 	.word	0x200003e4

080015ac <Gyro_calibration>:


void Gyro_calibration(void){
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0

	uint16_t counter = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	81fb      	strh	r3, [r7, #14]
	uint32_t StartTime_cal = HAL_GetTick();
 80015b6:	f001 fa07 	bl	80029c8 <HAL_GetTick>
 80015ba:	6078      	str	r0, [r7, #4]
	uint32_t ElapsedTime_cal = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]

	/*Calibrate value for 9 seconds*/
	while(ElapsedTime_cal < 9000){
 80015c0:	e02f      	b.n	8001622 <Gyro_calibration+0x76>

		MPU_Read_gyro();
 80015c2:	f7ff ff07 	bl	80013d4 <MPU_Read_gyro>
		GyroValuesx += gyro_x;
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <Gyro_calibration+0xf0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a35      	ldr	r2, [pc, #212]	; (80016a0 <Gyro_calibration+0xf4>)
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fa5f 	bl	8000a94 <__addsf3>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <Gyro_calibration+0xf0>)
 80015dc:	601a      	str	r2, [r3, #0]
		GyroValuesy += gyro_y;
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <Gyro_calibration+0xf8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <Gyro_calibration+0xfc>)
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fa53 	bl	8000a94 <__addsf3>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <Gyro_calibration+0xf8>)
 80015f4:	601a      	str	r2, [r3, #0]
		GyroValuesz += gyro_z;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <Gyro_calibration+0x100>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <Gyro_calibration+0x104>)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fa47 	bl	8000a94 <__addsf3>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <Gyro_calibration+0x100>)
 800160c:	601a      	str	r2, [r3, #0]

		counter++;
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	3301      	adds	r3, #1
 8001612:	81fb      	strh	r3, [r7, #14]

		uint32_t CurrentTime_cal = HAL_GetTick();
 8001614:	f001 f9d8 	bl	80029c8 <HAL_GetTick>
 8001618:	6038      	str	r0, [r7, #0]
		ElapsedTime_cal = CurrentTime_cal - StartTime_cal;
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	60bb      	str	r3, [r7, #8]
	while(ElapsedTime_cal < 9000){
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f242 3227 	movw	r2, #8999	; 0x2327
 8001628:	4293      	cmp	r3, r2
 800162a:	d9ca      	bls.n	80015c2 <Gyro_calibration+0x16>
	}

	/*Calibration values, average of gyros values*/
	Gyro_X_calibration = -1 * GyroValuesx/counter;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <Gyro_calibration+0xf0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fae0 	bl	8000bfc <__aeabi_i2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4619      	mov	r1, r3
 8001640:	4620      	mov	r0, r4
 8001642:	f7ff fbe3 	bl	8000e0c <__aeabi_fdiv>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <Gyro_calibration+0x108>)
 800164c:	601a      	str	r2, [r3, #0]
	Gyro_Y_calibration = -1 * GyroValuesy/counter;
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <Gyro_calibration+0xf8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff facf 	bl	8000bfc <__aeabi_i2f>
 800165e:	4603      	mov	r3, r0
 8001660:	4619      	mov	r1, r3
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff fbd2 	bl	8000e0c <__aeabi_fdiv>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <Gyro_calibration+0x10c>)
 800166e:	601a      	str	r2, [r3, #0]
	Gyro_Z_calibration = -1 * GyroValuesz/counter;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <Gyro_calibration+0x100>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fabe 	bl	8000bfc <__aeabi_i2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fbc1 	bl	8000e0c <__aeabi_fdiv>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <Gyro_calibration+0x110>)
 8001690:	601a      	str	r2, [r3, #0]

}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	200003e8 	.word	0x200003e8
 80016a0:	200003c4 	.word	0x200003c4
 80016a4:	200003ec 	.word	0x200003ec
 80016a8:	200003c8 	.word	0x200003c8
 80016ac:	200003f0 	.word	0x200003f0
 80016b0:	200003cc 	.word	0x200003cc
 80016b4:	200003f4 	.word	0x200003f4
 80016b8:	200003f8 	.word	0x200003f8
 80016bc:	200003fc 	.word	0x200003fc

080016c0 <MPU_GetYaw>:

void MPU_GetYaw(uint8_t elapsed){
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	uint8_t alfa = 0.999;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]

	yawangle_new = prev_yaw + gyro_z * elapsed/1000;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa93 	bl	8000bfc <__aeabi_i2f>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <MPU_GetYaw+0x9c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f7ff fae0 	bl	8000ca4 <__aeabi_fmul>
 80016e4:	4603      	mov	r3, r0
 80016e6:	491e      	ldr	r1, [pc, #120]	; (8001760 <MPU_GetYaw+0xa0>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb8f 	bl	8000e0c <__aeabi_fdiv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MPU_GetYaw+0xa4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4619      	mov	r1, r3
 80016f8:	4610      	mov	r0, r2
 80016fa:	f7ff f9cb 	bl	8000a94 <__addsf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MPU_GetYaw+0xa8>)
 8001704:	601a      	str	r2, [r3, #0]

	yawangle = alfa * prev_yaw + (1-alfa) * yawangle_new;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fa77 	bl	8000bfc <__aeabi_i2f>
 800170e:	4602      	mov	r2, r0
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MPU_GetYaw+0xa4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff fac4 	bl	8000ca4 <__aeabi_fmul>
 800171c:	4603      	mov	r3, r0
 800171e:	461c      	mov	r4, r3
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	f1c3 0301 	rsb	r3, r3, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa68 	bl	8000bfc <__aeabi_i2f>
 800172c:	4602      	mov	r2, r0
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MPU_GetYaw+0xa8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	4610      	mov	r0, r2
 8001736:	f7ff fab5 	bl	8000ca4 <__aeabi_fmul>
 800173a:	4603      	mov	r3, r0
 800173c:	4619      	mov	r1, r3
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff f9a8 	bl	8000a94 <__addsf3>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <MPU_GetYaw+0xac>)
 800174a:	601a      	str	r2, [r3, #0]

	prev_yaw = yawangle_new;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MPU_GetYaw+0xa8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <MPU_GetYaw+0xa4>)
 8001752:	6013      	str	r3, [r2, #0]


	//filteredYaw = alfa*(filteredYaw + gyro_z * elapsed/1000) + (1-alfa)*YawMag;
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	200003cc 	.word	0x200003cc
 8001760:	447a0000 	.word	0x447a0000
 8001764:	20000408 	.word	0x20000408
 8001768:	20000404 	.word	0x20000404
 800176c:	20000400 	.word	0x20000400

08001770 <Mag_init>:

void Mag_init(void){
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af04      	add	r7, sp, #16

	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x08,1, 0x01, 1, 100);
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <Mag_init+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b299      	uxth	r1, r3
 800177c:	2364      	movs	r3, #100	; 0x64
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2301      	movs	r3, #1
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	2208      	movs	r2, #8
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <Mag_init+0x48>)
 800178e:	f001 fd2b 	bl	80031e8 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&hi2c1, MAG_ADDRESS, 0x09,1, 0x1D, 1, 100);
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <Mag_init+0x44>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b299      	uxth	r1, r3
 8001798:	2364      	movs	r3, #100	; 0x64
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2301      	movs	r3, #1
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	231d      	movs	r3, #29
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	2209      	movs	r2, #9
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <Mag_init+0x48>)
 80017aa:	f001 fd1d 	bl	80031e8 <HAL_I2C_Mem_Write>
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000001 	.word	0x20000001
 80017b8:	20000200 	.word	0x20000200

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09c      	sub	sp, #112	; 0x70
 80017c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f001 f8a9 	bl	8002918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f9b3 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f000 fbd1 	bl	8001f70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ce:	f000 fa11 	bl	8001bf4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80017d2:	f000 fadb 	bl	8001d8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80017d6:	f000 fba1 	bl	8001f1c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80017da:	f000 fb51 	bl	8001e80 <MX_TIM4_Init>
  MX_TIM2_Init();
 80017de:	f000 fa87 	bl	8001cf0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80017e2:	f000 fa35 	bl	8001c50 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80017e6:	f000 f9e8 	bl	8001bba <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*Check if MPU6050 is connected*/
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDRESS, 10, 100);
 80017ea:	4b8b      	ldr	r3, [pc, #556]	; (8001a18 <main+0x25c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b299      	uxth	r1, r3
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	220a      	movs	r2, #10
 80017f4:	4889      	ldr	r0, [pc, #548]	; (8001a1c <main+0x260>)
 80017f6:	f002 f859 	bl	80038ac <HAL_I2C_IsDeviceReady>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  /*Check if QMC5883 is connected*/
  HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c1, MAG_ADDRESS, 10, 1000);
 8001800:	4b87      	ldr	r3, [pc, #540]	; (8001a20 <main+0x264>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b299      	uxth	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	220a      	movs	r2, #10
 800180c:	4883      	ldr	r0, [pc, #524]	; (8001a1c <main+0x260>)
 800180e:	f002 f84d 	bl	80038ac <HAL_I2C_IsDeviceReady>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

  if(ret == HAL_OK /*&& ready == HAL_OK*/){
 8001818:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800181c:	2b00      	cmp	r3, #0
 800181e:	d117      	bne.n	8001850 <main+0x94>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001826:	487f      	ldr	r0, [pc, #508]	; (8001a24 <main+0x268>)
 8001828:	f001 fb6a 	bl	8002f00 <HAL_GPIO_WritePin>
	  char transmission_buffer[17];
	  uint8_t transmission_size = sprintf(transmission_buffer,"Device connected \n");
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	497e      	ldr	r1, [pc, #504]	; (8001a28 <main+0x26c>)
 8001830:	4618      	mov	r0, r3
 8001832:	f005 f80d 	bl	8006850 <siprintf>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	  HAL_UART_Transmit(&huart1,&transmission_buffer,transmission_size, 500);
 800183c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001840:	b29a      	uxth	r2, r3
 8001842:	1d39      	adds	r1, r7, #4
 8001844:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001848:	4878      	ldr	r0, [pc, #480]	; (8001a2c <main+0x270>)
 800184a:	f004 f8cf 	bl	80059ec <HAL_UART_Transmit>
 800184e:	e005      	b.n	800185c <main+0xa0>
  }
  else{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	4873      	ldr	r0, [pc, #460]	; (8001a24 <main+0x268>)
 8001858:	f001 fb52 	bl	8002f00 <HAL_GPIO_WritePin>
  }

  Mag_init();
 800185c:	f7ff ff88 	bl	8001770 <Mag_init>
  MPU_init();
 8001860:	f7ff fd24 	bl	80012ac <MPU_init>

  Gyro_calibration();
 8001864:	f7ff fea2 	bl	80015ac <Gyro_calibration>

  HAL_TIM_Base_Start_IT(&htim4);
 8001868:	4871      	ldr	r0, [pc, #452]	; (8001a30 <main+0x274>)
 800186a:	f003 f961 	bl	8004b30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800186e:	4871      	ldr	r0, [pc, #452]	; (8001a34 <main+0x278>)
 8001870:	f003 f95e 	bl	8004b30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	4870      	ldr	r0, [pc, #448]	; (8001a38 <main+0x27c>)
 8001878:	f003 f9fc 	bl	8004c74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800187c:	2104      	movs	r1, #4
 800187e:	486e      	ldr	r0, [pc, #440]	; (8001a38 <main+0x27c>)
 8001880:	f003 f9f8 	bl	8004c74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001884:	2108      	movs	r1, #8
 8001886:	486c      	ldr	r0, [pc, #432]	; (8001a38 <main+0x27c>)
 8001888:	f003 f9f4 	bl	8004c74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800188c:	210c      	movs	r1, #12
 800188e:	486a      	ldr	r0, [pc, #424]	; (8001a38 <main+0x27c>)
 8001890:	f003 f9f0 	bl	8004c74 <HAL_TIM_PWM_Start>

  uint32_t start_time, elapsed_time, current_time;
  uint32_t start_time2,elapsed_time2, current_time2;
  uint32_t Time = HAL_GetTick();
 8001894:	f001 f898 	bl	80029c8 <HAL_GetTick>
 8001898:	65f8      	str	r0, [r7, #92]	; 0x5c

 char Dats[50];

/*Initialize PID functions with its obtained Kp, Ti, Td and reference values*/
 PIDpwm_Init(&pidMotor_lf, 1.83012063f, 7.53971571f, 0.0f, 80.0f, 400.0f);
 800189a:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <main+0x280>)
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <main+0x284>)
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	4a67      	ldr	r2, [pc, #412]	; (8001a44 <main+0x288>)
 80018a8:	4967      	ldr	r1, [pc, #412]	; (8001a48 <main+0x28c>)
 80018aa:	4868      	ldr	r0, [pc, #416]	; (8001a4c <main+0x290>)
 80018ac:	f7ff fc56 	bl	800115c <PIDpwm_Init>
 PIDpwm_Init(&pidMotor_rf, 1.83012063f, 7.53971571f, 0.0f, 80.0f, 400.0f);
 80018b0:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <main+0x280>)
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	4b62      	ldr	r3, [pc, #392]	; (8001a40 <main+0x284>)
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	4a61      	ldr	r2, [pc, #388]	; (8001a44 <main+0x288>)
 80018be:	4962      	ldr	r1, [pc, #392]	; (8001a48 <main+0x28c>)
 80018c0:	4863      	ldr	r0, [pc, #396]	; (8001a50 <main+0x294>)
 80018c2:	f7ff fc4b 	bl	800115c <PIDpwm_Init>
 PIDpwm_Init(&pidMotor_lb, 1.83012063f, 7.53971571f, 0.0f, 80.0f, 400.0f);
 80018c6:	4b5d      	ldr	r3, [pc, #372]	; (8001a3c <main+0x280>)
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <main+0x284>)
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	4a5c      	ldr	r2, [pc, #368]	; (8001a44 <main+0x288>)
 80018d4:	495c      	ldr	r1, [pc, #368]	; (8001a48 <main+0x28c>)
 80018d6:	485f      	ldr	r0, [pc, #380]	; (8001a54 <main+0x298>)
 80018d8:	f7ff fc40 	bl	800115c <PIDpwm_Init>
 PIDpwm_Init(&pidMotor_rb, 1.83012063f, 7.53971571f, 0.0f, 80.0f, 400.0f);
 80018dc:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <main+0x280>)
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <main+0x284>)
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <main+0x288>)
 80018ea:	4957      	ldr	r1, [pc, #348]	; (8001a48 <main+0x28c>)
 80018ec:	485a      	ldr	r0, [pc, #360]	; (8001a58 <main+0x29c>)
 80018ee:	f7ff fc35 	bl	800115c <PIDpwm_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	2203      	movs	r2, #3
 80018f6:	4959      	ldr	r1, [pc, #356]	; (8001a5c <main+0x2a0>)
 80018f8:	484c      	ldr	r0, [pc, #304]	; (8001a2c <main+0x270>)
 80018fa:	f004 f8fa 	bl	8005af2 <HAL_UART_Receive>

	  /*State Machine for going forward and turning right.*/
	  switch(state){
 80018fe:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <main+0x2a4>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d002      	beq.n	800190c <main+0x150>
 8001906:	2b02      	cmp	r3, #2
 8001908:	d027      	beq.n	800195a <main+0x19e>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
			  break;

		  default:
			  break;
 800190a:	e049      	b.n	80019a0 <main+0x1e4>
			  Forward();
 800190c:	f7ff fb90 	bl	8001030 <Forward>
			  pwm_lf = 4095;
 8001910:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <main+0x2a8>)
 8001912:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001916:	801a      	strh	r2, [r3, #0]
			  pwm_lb = 4095;
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <main+0x2ac>)
 800191a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800191e:	801a      	strh	r2, [r3, #0]
			  pwm_rb = 4095;
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <main+0x2b0>)
 8001922:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001926:	801a      	strh	r2, [r3, #0]
			  pwm_rf = 4095;
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <main+0x2b4>)
 800192a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800192e:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <main+0x2b4>)
 8001932:	881a      	ldrh	r2, [r3, #0]
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <main+0x27c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <main+0x2a8>)
 800193c:	881a      	ldrh	r2, [r3, #0]
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <main+0x27c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 8001944:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <main+0x2ac>)
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <main+0x27c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 800194e:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <main+0x2b0>)
 8001950:	881a      	ldrh	r2, [r3, #0]
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <main+0x27c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
			  break;
 8001958:	e022      	b.n	80019a0 <main+0x1e4>
			  RightTurn();
 800195a:	f7ff fb9b 	bl	8001094 <RightTurn>
			  pwm_lb = 100;
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <main+0x2ac>)
 8001960:	2264      	movs	r2, #100	; 0x64
 8001962:	801a      	strh	r2, [r3, #0]
			  pwm_rb = 100;
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <main+0x2b0>)
 8001966:	2264      	movs	r2, #100	; 0x64
 8001968:	801a      	strh	r2, [r3, #0]
			  pwm_rf = 100;
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <main+0x2b4>)
 800196c:	2264      	movs	r2, #100	; 0x64
 800196e:	801a      	strh	r2, [r3, #0]
			  pwm_lf = 100;
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <main+0x2a8>)
 8001972:	2264      	movs	r2, #100	; 0x64
 8001974:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <main+0x2b4>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <main+0x27c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <main+0x2a8>)
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <main+0x27c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <main+0x2ac>)
 800198c:	881a      	ldrh	r2, [r3, #0]
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <main+0x27c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <main+0x2b0>)
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <main+0x27c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
			  break;
 800199e:	bf00      	nop
	  }



	  current_time = HAL_GetTick();
 80019a0:	f001 f812 	bl	80029c8 <HAL_GetTick>
 80019a4:	65b8      	str	r0, [r7, #88]	; 0x58
	  elapsed_time = current_time - start_time;
 80019a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	657b      	str	r3, [r7, #84]	; 0x54


	  /*State machines logic */
	  if(state == 0){
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <main+0x2a4>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d115      	bne.n	80019e2 <main+0x226>
		  /*Start Command*/
		  if(Commands[0] == 'S'){
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <main+0x2a0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b53      	cmp	r3, #83	; 0x53
 80019bc:	f040 808e 	bne.w	8001adc <main+0x320>
			  start_time = HAL_GetTick();
 80019c0:	f001 f802 	bl	80029c8 <HAL_GetTick>
 80019c4:	6678      	str	r0, [r7, #100]	; 0x64
			  elapsed_time = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	657b      	str	r3, [r7, #84]	; 0x54
			  start_time2 = HAL_GetTick();
 80019ca:	f000 fffd 	bl	80029c8 <HAL_GetTick>
 80019ce:	6538      	str	r0, [r7, #80]	; 0x50
			  elapsed_time2 = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
			  state++;
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <main+0x2a4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <main+0x2a4>)
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e07c      	b.n	8001adc <main+0x320>
		  }
	  }
	  else if(state == 1){
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <main+0x2a4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d144      	bne.n	8001a74 <main+0x2b8>
		  /*Drive Forward for 5 seconds*/ // Change THIS!!
		  if(elapsed_time > 5000){
 80019ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d973      	bls.n	8001adc <main+0x320>
			  start_time = HAL_GetTick();
 80019f4:	f000 ffe8 	bl	80029c8 <HAL_GetTick>
 80019f8:	6678      	str	r0, [r7, #100]	; 0x64
			  elapsed_time = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	657b      	str	r3, [r7, #84]	; 0x54
			  start_time2 = HAL_GetTick();
 80019fe:	f000 ffe3 	bl	80029c8 <HAL_GetTick>
 8001a02:	6538      	str	r0, [r7, #80]	; 0x50
			  elapsed_time2 = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
			  state++;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <main+0x2a4>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <main+0x2a4>)
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e062      	b.n	8001adc <main+0x320>
 8001a16:	bf00      	nop
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000200 	.word	0x20000200
 8001a20:	20000001 	.word	0x20000001
 8001a24:	40011000 	.word	0x40011000
 8001a28:	08008b08 	.word	0x08008b08
 8001a2c:	20000374 	.word	0x20000374
 8001a30:	2000032c 	.word	0x2000032c
 8001a34:	2000029c 	.word	0x2000029c
 8001a38:	200002e4 	.word	0x200002e4
 8001a3c:	43c80000 	.word	0x43c80000
 8001a40:	42a00000 	.word	0x42a00000
 8001a44:	40f1455a 	.word	0x40f1455a
 8001a48:	3fea4165 	.word	0x3fea4165
 8001a4c:	2000045c 	.word	0x2000045c
 8001a50:	20000438 	.word	0x20000438
 8001a54:	200004a4 	.word	0x200004a4
 8001a58:	20000480 	.word	0x20000480
 8001a5c:	200004c8 	.word	0x200004c8
 8001a60:	2000040c 	.word	0x2000040c
 8001a64:	20000432 	.word	0x20000432
 8001a68:	20000436 	.word	0x20000436
 8001a6c:	20000434 	.word	0x20000434
 8001a70:	20000430 	.word	0x20000430
		  }
	  }
	  else if(state == 2){
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <main+0x350>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d12f      	bne.n	8001adc <main+0x320>
		  /*Turn right until yaw reference value*/
		  if(yawangle <= yaw_reference){
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <main+0x354>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <main+0x358>)
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fab4 	bl	8000ff4 <__aeabi_fcmple>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d024      	beq.n	8001adc <main+0x320>
			  yaw_reference += -90 + (-yawangle + yaw_reference);
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <main+0x358>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <main+0x354>)
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fff7 	bl	8000a90 <__aeabi_fsub>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	491c      	ldr	r1, [pc, #112]	; (8001b18 <main+0x35c>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fff2 	bl	8000a90 <__aeabi_fsub>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <main+0x358>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f7fe ffec 	bl	8000a94 <__addsf3>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <main+0x358>)
 8001ac2:	601a      	str	r2, [r3, #0]
			  	//yaw_reference += -90;
				Stop();
 8001ac4:	f7ff fb18 	bl	80010f8 <Stop>
				/*Recalibrate at every stop*/
				Gyro_calibration();
 8001ac8:	f7ff fd70 	bl	80015ac <Gyro_calibration>
				start_time = HAL_GetTick();
 8001acc:	f000 ff7c 	bl	80029c8 <HAL_GetTick>
 8001ad0:	6678      	str	r0, [r7, #100]	; 0x64
				elapsed_time = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	657b      	str	r3, [r7, #84]	; 0x54
			  	state = 1;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <main+0x350>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /*Stop Command*/
	  if(Commands[0] == 'E'){
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <main+0x360>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b45      	cmp	r3, #69	; 0x45
 8001ae2:	f47f af06 	bne.w	80018f2 <main+0x136>
		  Stop();
 8001ae6:	f7ff fb07 	bl	80010f8 <Stop>

		  state = 0;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <main+0x350>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]

		  pwm_rf = 0;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <main+0x364>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	801a      	strh	r2, [r3, #0]
		  pwm_lf = 0;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <main+0x368>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	801a      	strh	r2, [r3, #0]
		  pwm_rb = 0;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <main+0x36c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	801a      	strh	r2, [r3, #0]
		  pwm_lb = 0;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <main+0x370>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 8001b08:	e6f3      	b.n	80018f2 <main+0x136>
 8001b0a:	bf00      	nop
 8001b0c:	2000040c 	.word	0x2000040c
 8001b10:	20000400 	.word	0x20000400
 8001b14:	20000004 	.word	0x20000004
 8001b18:	42b40000 	.word	0x42b40000
 8001b1c:	200004c8 	.word	0x200004c8
 8001b20:	20000430 	.word	0x20000430
 8001b24:	20000432 	.word	0x20000432
 8001b28:	20000434 	.word	0x20000434
 8001b2c:	20000436 	.word	0x20000436

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b090      	sub	sp, #64	; 0x40
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0318 	add.w	r3, r7, #24
 8001b3a:	2228      	movs	r2, #40	; 0x28
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fee9 	bl	8006916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b60:	2301      	movs	r3, #1
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b64:	2302      	movs	r3, #2
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 fb79 	bl	8004270 <HAL_RCC_OscConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b84:	f000 fc1c 	bl	80023c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b88:	230f      	movs	r3, #15
 8001b8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 fde6 	bl	8004774 <HAL_RCC_ClockConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bae:	f000 fc07 	bl	80023c0 <Error_Handler>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3740      	adds	r7, #64	; 0x40
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2028      	movs	r0, #40	; 0x28
 8001bc4:	f000 ffe1 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bc8:	2028      	movs	r0, #40	; 0x28
 8001bca:	f000 fffa 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	201e      	movs	r0, #30
 8001bd4:	f000 ffd9 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bd8:	201e      	movs	r0, #30
 8001bda:	f000 fff2 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	201c      	movs	r0, #28
 8001be4:	f000 ffd1 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be8:	201c      	movs	r0, #28
 8001bea:	f000 ffea 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <MX_I2C1_Init+0x54>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <MX_I2C1_Init+0x58>)
 8001c02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c32:	f001 f995 	bl	8002f60 <HAL_I2C_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c3c:	f000 fbc0 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000200 	.word	0x20000200
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	000186a0 	.word	0x000186a0

08001c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c98:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001c9a:	f002 fef9 	bl	8004a90 <HAL_TIM_Base_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ca4:	f000 fb8c 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001cb6:	f003 fa49 	bl	800514c <HAL_TIM_ConfigClockSource>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001cc0:	f000 fb7e 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_TIM1_Init+0x98>)
 8001cd2:	f003 fdcb 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cdc:	f000 fb70 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000254 	.word	0x20000254
 8001cec:	40012c00 	.word	0x40012c00

08001cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0308 	add.w	r3, r7, #8
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	463b      	mov	r3, r7
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d16:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d38:	f002 feaa 	bl	8004a90 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d42:	f000 fb3d 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4619      	mov	r1, r3
 8001d52:	480d      	ldr	r0, [pc, #52]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d54:	f003 f9fa 	bl	800514c <HAL_TIM_ConfigClockSource>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d5e:	f000 fb2f 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d70:	f003 fd7c 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d7a:	f000 fb21 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000029c 	.word	0x2000029c

08001d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dae:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001db0:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <MX_TIM3_Init+0xf0>)
 8001db2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001db4:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001dc2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001dc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dd4:	4828      	ldr	r0, [pc, #160]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001dd6:	f002 fefd 	bl	8004bd4 <HAL_TIM_PWM_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001de0:	f000 faee 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4619      	mov	r1, r3
 8001df2:	4821      	ldr	r0, [pc, #132]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001df4:	f003 fd3a 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001dfe:	f000 fadf 	bl	80023c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e02:	2360      	movs	r3, #96	; 0x60
 8001e04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4817      	ldr	r0, [pc, #92]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001e1a:	f003 f8d5 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e24:	f000 facc 	bl	80023c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4812      	ldr	r0, [pc, #72]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001e30:	f003 f8ca 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e3a:	f000 fac1 	bl	80023c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2208      	movs	r2, #8
 8001e42:	4619      	mov	r1, r3
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001e46:	f003 f8bf 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001e50:	f000 fab6 	bl	80023c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	220c      	movs	r2, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001e5c:	f003 f8b4 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001e66:	f000 faab 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e6a:	4803      	ldr	r0, [pc, #12]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001e6c:	f000 fb80 	bl	8002570 <HAL_TIM_MspPostInit>

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200002e4 	.word	0x200002e4
 8001e7c:	40000400 	.word	0x40000400

08001e80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e94:	463b      	mov	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <MX_TIM4_Init+0x98>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001ea4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ea8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001eb2:	2263      	movs	r2, #99	; 0x63
 8001eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001ec4:	f002 fde4 	bl	8004a90 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ece:	f000 fa77 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4619      	mov	r1, r3
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001ee0:	f003 f934 	bl	800514c <HAL_TIM_ConfigClockSource>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001eea:	f000 fa69 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <MX_TIM4_Init+0x94>)
 8001efc:	f003 fcb6 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f06:	f000 fa5b 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000032c 	.word	0x2000032c
 8001f18:	40000800 	.word	0x40000800

08001f1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_USART1_UART_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f54:	f003 fcfa 	bl	800594c <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f000 fa2f 	bl	80023c0 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000374 	.word	0x20000374
 8001f6c:	40013800 	.word	0x40013800

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	4b45      	ldr	r3, [pc, #276]	; (800209c <MX_GPIO_Init+0x12c>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a44      	ldr	r2, [pc, #272]	; (800209c <MX_GPIO_Init+0x12c>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <MX_GPIO_Init+0x12c>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <MX_GPIO_Init+0x12c>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a3e      	ldr	r2, [pc, #248]	; (800209c <MX_GPIO_Init+0x12c>)
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	; (800209c <MX_GPIO_Init+0x12c>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <MX_GPIO_Init+0x12c>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a38      	ldr	r2, [pc, #224]	; (800209c <MX_GPIO_Init+0x12c>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <MX_GPIO_Init+0x12c>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	4b33      	ldr	r3, [pc, #204]	; (800209c <MX_GPIO_Init+0x12c>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a32      	ldr	r2, [pc, #200]	; (800209c <MX_GPIO_Init+0x12c>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <MX_GPIO_Init+0x12c>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	482d      	ldr	r0, [pc, #180]	; (80020a0 <MX_GPIO_Init+0x130>)
 8001fec:	f000 ff88 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f248 010f 	movw	r1, #32783	; 0x800f
 8001ff6:	482b      	ldr	r0, [pc, #172]	; (80020a4 <MX_GPIO_Init+0x134>)
 8001ff8:	f000 ff82 	bl	8002f00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2138      	movs	r1, #56	; 0x38
 8002000:	4829      	ldr	r0, [pc, #164]	; (80020a8 <MX_GPIO_Init+0x138>)
 8002002:	f000 ff7d 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200c:	2301      	movs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2302      	movs	r3, #2
 8002016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4619      	mov	r1, r3
 800201e:	4820      	ldr	r0, [pc, #128]	; (80020a0 <MX_GPIO_Init+0x130>)
 8002020:	f000 fdea 	bl	8002bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002024:	f248 030f 	movw	r3, #32783	; 0x800f
 8002028:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2302      	movs	r3, #2
 8002034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4619      	mov	r1, r3
 800203c:	4819      	ldr	r0, [pc, #100]	; (80020a4 <MX_GPIO_Init+0x134>)
 800203e:	f000 fddb 	bl	8002bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002042:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <MX_GPIO_Init+0x13c>)
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4619      	mov	r1, r3
 8002056:	4814      	ldr	r0, [pc, #80]	; (80020a8 <MX_GPIO_Init+0x138>)
 8002058:	f000 fdce 	bl	8002bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800205c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002066:	2302      	movs	r3, #2
 8002068:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_GPIO_Init+0x134>)
 8002072:	f000 fdc1 	bl	8002bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002076:	2338      	movs	r3, #56	; 0x38
 8002078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2302      	movs	r3, #2
 8002084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4619      	mov	r1, r3
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <MX_GPIO_Init+0x138>)
 800208e:	f000 fdb3 	bl	8002bf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002092:	bf00      	nop
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40010800 	.word	0x40010800
 80020a8:	40010c00 	.word	0x40010c00
 80020ac:	10110000 	.word	0x10110000

080020b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	b097      	sub	sp, #92	; 0x5c
 80020b4:	af0c      	add	r7, sp, #48	; 0x30
 80020b6:	61f8      	str	r0, [r7, #28]


	if(htim -> Instance  == TIM2){
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	f040 80d7 	bne.w	8002272 <HAL_TIM_PeriodElapsedCallback+0x1c2>

		pid_output_lf = PIDpwm_Compute(&pidMotor_lf, rpm_lf);
 80020c4:	4b74      	ldr	r3, [pc, #464]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fd93 	bl	8000bf4 <__aeabi_ui2f>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4619      	mov	r1, r3
 80020d2:	4872      	ldr	r0, [pc, #456]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80020d4:	f7ff f876 	bl	80011c4 <PIDpwm_Compute>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a71      	ldr	r2, [pc, #452]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80020dc:	6013      	str	r3, [r2, #0]
		pid_output_rf = PIDpwm_Compute(&pidMotor_rf, rpm_rf);
 80020de:	4b71      	ldr	r3, [pc, #452]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fd86 	bl	8000bf4 <__aeabi_ui2f>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4619      	mov	r1, r3
 80020ec:	486e      	ldr	r0, [pc, #440]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80020ee:	f7ff f869 	bl	80011c4 <PIDpwm_Compute>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a6d      	ldr	r2, [pc, #436]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80020f6:	6013      	str	r3, [r2, #0]
		pid_output_lb = PIDpwm_Compute(&pidMotor_lb, rpm_lb);
 80020f8:	4b6d      	ldr	r3, [pc, #436]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fd79 	bl	8000bf4 <__aeabi_ui2f>
 8002102:	4603      	mov	r3, r0
 8002104:	4619      	mov	r1, r3
 8002106:	486b      	ldr	r0, [pc, #428]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002108:	f7ff f85c 	bl	80011c4 <PIDpwm_Compute>
 800210c:	4603      	mov	r3, r0
 800210e:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002110:	6013      	str	r3, [r2, #0]
		pid_output_rb = PIDpwm_Compute(&pidMotor_rb, rpm_rb);
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fd6c 	bl	8000bf4 <__aeabi_ui2f>
 800211c:	4603      	mov	r3, r0
 800211e:	4619      	mov	r1, r3
 8002120:	4867      	ldr	r0, [pc, #412]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002122:	f7ff f84f 	bl	80011c4 <PIDpwm_Compute>
 8002126:	4603      	mov	r3, r0
 8002128:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800212a:	6013      	str	r3, [r2, #0]

		rpm_rf =  (current_tick_rf * 1000 * 60) / (pulsesperturn * 100);
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002136:	fb03 f202 	mul.w	r2, r3, r2
 800213a:	4b64      	ldr	r3, [pc, #400]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	2364      	movs	r3, #100	; 0x64
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	fb92 f3f3 	sdiv	r3, r2, r3
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800214e:	801a      	strh	r2, [r3, #0]
	    rpm_lf =  (current_tick_lf * 1000 * 60) / (pulsesperturn * 100);
 8002150:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	f64e 2360 	movw	r3, #60000	; 0xea60
 800215a:	fb03 f202 	mul.w	r2, r3, r2
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4619      	mov	r1, r3
 8002164:	2364      	movs	r3, #100	; 0x64
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	fb92 f3f3 	sdiv	r3, r2, r3
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002172:	801a      	strh	r2, [r3, #0]
	    rpm_rb =  (current_tick_rb * 1000 * 60) / (pulsesperturn * 100);
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800217e:	fb03 f202 	mul.w	r2, r3, r2
 8002182:	4b52      	ldr	r3, [pc, #328]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	2364      	movs	r3, #100	; 0x64
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002196:	801a      	strh	r2, [r3, #0]
	    rpm_lb =  (current_tick_lb * 1000 * 60) / (pulsesperturn * 100);
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	f64e 2360 	movw	r3, #60000	; 0xea60
 80021a2:	fb03 f202 	mul.w	r2, r3, r2
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	2364      	movs	r3, #100	; 0x64
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80021ba:	801a      	strh	r2, [r3, #0]

		current_tick_rf = 0;
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
		current_tick_lf = 0;
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
		current_tick_rb = 0;
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
		current_tick_lb = 0;
 80021ce:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]

	  uint8_t num_chars =  sprintf(rpmdata,"%lu,%.2f,%u,%u,%u,%u,%u,%u,%u,%.2f\n", 100 * time_counter, pid_output_lf, pwm_rf, pwm_lb, pwm_rb, rpm_lf, rpm_rf, rpm_lb, rpm_rb, yawangle);
 80021d4:	4b41      	ldr	r3, [pc, #260]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2264      	movs	r2, #100	; 0x64
 80021da:	fb02 f603 	mul.w	r6, r2, r3
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f920 	bl	8000428 <__aeabi_f2d>
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f904 	bl	8000428 <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	9208      	str	r2, [sp, #32]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	9207      	str	r2, [sp, #28]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	9206      	str	r2, [sp, #24]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	9205      	str	r2, [sp, #20]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	9204      	str	r2, [sp, #16]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	9203      	str	r2, [sp, #12]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	9302      	str	r3, [sp, #8]
 8002244:	e9cd 4500 	strd	r4, r5, [sp]
 8002248:	4632      	mov	r2, r6
 800224a:	4929      	ldr	r1, [pc, #164]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800224c:	4829      	ldr	r0, [pc, #164]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800224e:	f004 faff 	bl	8006850 <siprintf>
 8002252:	4603      	mov	r3, r0
 8002254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  HAL_UART_Transmit(&huart1, &rpmdata, num_chars, 100);
 8002258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800225c:	b29a      	uxth	r2, r3
 800225e:	2364      	movs	r3, #100	; 0x64
 8002260:	4924      	ldr	r1, [pc, #144]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002262:	4825      	ldr	r0, [pc, #148]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002264:	f003 fbc2 	bl	80059ec <HAL_UART_Transmit>

	  time_counter++;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002270:	6013      	str	r3, [r2, #0]

	}


	if(htim -> Instance == TIM4){
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a21      	ldr	r2, [pc, #132]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d108      	bne.n	800228e <HAL_TIM_PeriodElapsedCallback+0x1de>


		if(count == 4){
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d102      	bne.n	800228a <HAL_TIM_PeriodElapsedCallback+0x1da>
			/*Integrate  every 50ms*/
			MPU_GetYaw(50);
 8002284:	2032      	movs	r0, #50	; 0x32
 8002286:	f7ff fa1b 	bl	80016c0 <MPU_GetYaw>
			//count = 0;
		}

		/*Readd gyro value every 10ms*/
		MPU_Read_gyro();
 800228a:	f7ff f8a3 	bl	80013d4 <MPU_Read_gyro>
	}

}
 800228e:	bf00      	nop
 8002290:	372c      	adds	r7, #44	; 0x2c
 8002292:	46bd      	mov	sp, r7
 8002294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002296:	bf00      	nop
 8002298:	20000414 	.word	0x20000414
 800229c:	2000045c 	.word	0x2000045c
 80022a0:	20000420 	.word	0x20000420
 80022a4:	20000412 	.word	0x20000412
 80022a8:	20000438 	.word	0x20000438
 80022ac:	20000424 	.word	0x20000424
 80022b0:	20000418 	.word	0x20000418
 80022b4:	200004a4 	.word	0x200004a4
 80022b8:	20000428 	.word	0x20000428
 80022bc:	20000416 	.word	0x20000416
 80022c0:	20000480 	.word	0x20000480
 80022c4:	2000042c 	.word	0x2000042c
 80022c8:	2000041a 	.word	0x2000041a
 80022cc:	20000008 	.word	0x20000008
 80022d0:	2000041b 	.word	0x2000041b
 80022d4:	2000041c 	.word	0x2000041c
 80022d8:	2000041d 	.word	0x2000041d
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	20000430 	.word	0x20000430
 80022e4:	20000436 	.word	0x20000436
 80022e8:	20000434 	.word	0x20000434
 80022ec:	20000400 	.word	0x20000400
 80022f0:	08008b1c 	.word	0x08008b1c
 80022f4:	200004cc 	.word	0x200004cc
 80022f8:	20000374 	.word	0x20000374
 80022fc:	40000800 	.word	0x40000800
 8002300:	20000530 	.word	0x20000530

08002304 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
 * @pin 14 Left front wheel
 * @pin 13 Right back wheel
 * @pin 12 Left back wheel
 */

  if(GPIO_Pin == GPIO_PIN_15){
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002314:	d10c      	bne.n	8002330 <HAL_GPIO_EXTI_Callback+0x2c>
	  //Right front wheel
	  pulses_rf++;
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002322:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800232e:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_14){
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002336:	d10c      	bne.n	8002352 <HAL_GPIO_EXTI_Callback+0x4e>
	  //Left front wheel
	  pulses_lf++;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002344:	701a      	strb	r2, [r3, #0]
	  current_tick_lf++;
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8002350:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_13){
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	d10c      	bne.n	8002374 <HAL_GPIO_EXTI_Callback+0x70>
	  //Right back wheel
	  pulses_lb++;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xac>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xac>)
 8002366:	701a      	strb	r2, [r3, #0]
	  current_tick_lb++;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_GPIO_EXTI_Callback+0xb0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002372:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_12){
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d10c      	bne.n	8002396 <HAL_GPIO_EXTI_Callback+0x92>
	  //Left back wheel
	  pulses_rb++;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002388:	701a      	strb	r2, [r3, #0]
	  current_tick_rb++;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_GPIO_EXTI_Callback+0xb8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_GPIO_EXTI_Callback+0xb8>)
 8002394:	701a      	strb	r2, [r3, #0]

  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	2000040d 	.word	0x2000040d
 80023a4:	2000041a 	.word	0x2000041a
 80023a8:	2000040e 	.word	0x2000040e
 80023ac:	2000041b 	.word	0x2000041b
 80023b0:	20000410 	.word	0x20000410
 80023b4:	2000041d 	.word	0x2000041d
 80023b8:	2000040f 	.word	0x2000040f
 80023bc:	2000041c 	.word	0x2000041c

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <Error_Handler+0x8>
	...

080023cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_MspInit+0x5c>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_MspInit+0x5c>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6193      	str	r3, [r2, #24]
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_MspInit+0x5c>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_MspInit+0x5c>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_MspInit+0x5c>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_MspInit+0x5c>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_MspInit+0x60>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_MspInit+0x60>)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000

08002430 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <HAL_I2C_MspInit+0x70>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d123      	bne.n	8002498 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_I2C_MspInit+0x74>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_I2C_MspInit+0x74>)
 8002456:	f043 0308 	orr.w	r3, r3, #8
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_I2C_MspInit+0x74>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002468:	23c0      	movs	r3, #192	; 0xc0
 800246a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246c:	2312      	movs	r3, #18
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4619      	mov	r1, r3
 800247a:	480b      	ldr	r0, [pc, #44]	; (80024a8 <HAL_I2C_MspInit+0x78>)
 800247c:	f000 fbbc 	bl	8002bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_I2C_MspInit+0x74>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_I2C_MspInit+0x74>)
 8002486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800248a:	61d3      	str	r3, [r2, #28]
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_I2C_MspInit+0x74>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40005400 	.word	0x40005400
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010c00 	.word	0x40010c00

080024ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_TIM_Base_MspInit+0x7c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10c      	bne.n	80024d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4a1a      	ldr	r2, [pc, #104]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 80024c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024c8:	6193      	str	r3, [r2, #24]
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024d6:	e022      	b.n	800251e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d10c      	bne.n	80024fc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	61d3      	str	r3, [r2, #28]
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
}
 80024fa:	e010      	b.n	800251e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <HAL_TIM_Base_MspInit+0x84>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10b      	bne.n	800251e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_TIM_Base_MspInit+0x80>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40000800 	.word	0x40000800

08002534 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_TIM_PWM_MspInit+0x34>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10b      	bne.n	800255e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_TIM_PWM_MspInit+0x38>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_TIM_PWM_MspInit+0x38>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	61d3      	str	r3, [r2, #28]
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_TIM_PWM_MspInit+0x38>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40000400 	.word	0x40000400
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_TIM_MspPostInit+0x88>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d12f      	bne.n	80025f0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_TIM_MspPostInit+0x8c>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_TIM_MspPostInit+0x8c>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_TIM_MspPostInit+0x8c>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_TIM_MspPostInit+0x8c>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <HAL_TIM_MspPostInit+0x8c>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_TIM_MspPostInit+0x8c>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c0:	23c0      	movs	r3, #192	; 0xc0
 80025c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2302      	movs	r3, #2
 80025ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	4619      	mov	r1, r3
 80025d2:	480b      	ldr	r0, [pc, #44]	; (8002600 <HAL_TIM_MspPostInit+0x90>)
 80025d4:	f000 fb10 	bl	8002bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025d8:	2303      	movs	r3, #3
 80025da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	4619      	mov	r1, r3
 80025ea:	4806      	ldr	r0, [pc, #24]	; (8002604 <HAL_TIM_MspPostInit+0x94>)
 80025ec:	f000 fb04 	bl	8002bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010800 	.word	0x40010800
 8002604:	40010c00 	.word	0x40010c00

08002608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <HAL_UART_MspInit+0x8c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d131      	bne.n	800268c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_UART_MspInit+0x90>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_UART_MspInit+0x90>)
 800262e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <HAL_UART_MspInit+0x90>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_UART_MspInit+0x90>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800265c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	4619      	mov	r1, r3
 800266c:	480b      	ldr	r0, [pc, #44]	; (800269c <HAL_UART_MspInit+0x94>)
 800266e:	f000 fac3 	bl	8002bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	4619      	mov	r1, r3
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <HAL_UART_MspInit+0x94>)
 8002688:	f000 fab6 	bl	8002bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40013800 	.word	0x40013800
 8002698:	40021000 	.word	0x40021000
 800269c:	40010800 	.word	0x40010800

080026a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <NMI_Handler+0x4>

080026a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <HardFault_Handler+0x4>

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <MemManage_Handler+0x4>

080026b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <BusFault_Handler+0x4>

080026b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <UsageFault_Handler+0x4>

080026be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e6:	f000 f95d 	bl	80029a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <TIM2_IRQHandler+0x10>)
 80026f6:	f002 fb5f 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000029c 	.word	0x2000029c

08002704 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <TIM4_IRQHandler+0x10>)
 800270a:	f002 fb55 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000032c 	.word	0x2000032c

08002718 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800271c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002720:	f000 fc06 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002724:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002728:	f000 fc02 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800272c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002730:	f000 fbfe 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002734:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002738:	f000 fbfa 	bl	8002f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return 1;
 8002744:	2301      	movs	r3, #1
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <_kill>:

int _kill(int pid, int sig)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002758:	f004 f930 	bl	80069bc <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	2216      	movs	r2, #22
 8002760:	601a      	str	r2, [r3, #0]
  return -1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_exit>:

void _exit (int status)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002776:	f04f 31ff 	mov.w	r1, #4294967295
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffe7 	bl	800274e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002780:	e7fe      	b.n	8002780 <_exit+0x12>

08002782 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e00a      	b.n	80027aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002794:	f3af 8000 	nop.w
 8002798:	4601      	mov	r1, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	60ba      	str	r2, [r7, #8]
 80027a0:	b2ca      	uxtb	r2, r1
 80027a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3301      	adds	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	dbf0      	blt.n	8002794 <_read+0x12>
  }

  return len;
 80027b2:	687b      	ldr	r3, [r7, #4]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e009      	b.n	80027e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	60ba      	str	r2, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dbf1      	blt.n	80027ce <_write+0x12>
  }
  return len;
 80027ea:	687b      	ldr	r3, [r7, #4]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_close>:

int _close(int file)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800281a:	605a      	str	r2, [r3, #4]
  return 0;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <_isatty>:

int _isatty(int file)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002830:	2301      	movs	r3, #1
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <_sbrk+0x5c>)
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <_sbrk+0x60>)
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <_sbrk+0x64>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <_sbrk+0x64>)
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <_sbrk+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d207      	bcs.n	8002894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002884:	f004 f89a 	bl	80069bc <__errno>
 8002888:	4603      	mov	r3, r0
 800288a:	220c      	movs	r2, #12
 800288c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e009      	b.n	80028a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <_sbrk+0x64>)
 80028a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20005000 	.word	0x20005000
 80028b4:	00000400 	.word	0x00000400
 80028b8:	20000534 	.word	0x20000534
 80028bc:	20000688 	.word	0x20000688

080028c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028cc:	f7ff fff8 	bl	80028c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d0:	480b      	ldr	r0, [pc, #44]	; (8002900 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028d2:	490c      	ldr	r1, [pc, #48]	; (8002904 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d8:	e002      	b.n	80028e0 <LoopCopyDataInit>

080028da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028de:	3304      	adds	r3, #4

080028e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e4:	d3f9      	bcc.n	80028da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028e8:	4c09      	ldr	r4, [pc, #36]	; (8002910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ec:	e001      	b.n	80028f2 <LoopFillZerobss>

080028ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f0:	3204      	adds	r2, #4

080028f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f4:	d3fb      	bcc.n	80028ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028f6:	f004 f867 	bl	80069c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028fa:	f7fe ff5f 	bl	80017bc <main>
  bx lr
 80028fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002904:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002908:	08008ee4 	.word	0x08008ee4
  ldr r2, =_sbss
 800290c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002910:	20000688 	.word	0x20000688

08002914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002914:	e7fe      	b.n	8002914 <ADC1_2_IRQHandler>
	...

08002918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_Init+0x28>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_Init+0x28>)
 8002922:	f043 0310 	orr.w	r3, r3, #16
 8002926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002928:	2003      	movs	r0, #3
 800292a:	f000 f923 	bl	8002b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800292e:	200f      	movs	r0, #15
 8002930:	f000 f808 	bl	8002944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002934:	f7ff fd4a 	bl	80023cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40022000 	.word	0x40022000

08002944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x54>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_InitTick+0x58>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	fbb3 f3f1 	udiv	r3, r3, r1
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f93b 	bl	8002bde <HAL_SYSTICK_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e00e      	b.n	8002990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b0f      	cmp	r3, #15
 8002976:	d80a      	bhi.n	800298e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002978:	2200      	movs	r2, #0
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f000 f903 	bl	8002b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002984:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <HAL_InitTick+0x5c>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000010 	.word	0x20000010
 800299c:	20000018 	.word	0x20000018
 80029a0:	20000014 	.word	0x20000014

080029a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_IncTick+0x1c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_IncTick+0x20>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	4a03      	ldr	r2, [pc, #12]	; (80029c4 <HAL_IncTick+0x20>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000018 	.word	0x20000018
 80029c4:	20000538 	.word	0x20000538

080029c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_GetTick+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	20000538 	.word	0x20000538

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4906      	ldr	r1, [pc, #24]	; (8002a74 <__NVIC_EnableIRQ+0x34>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf28      	it	cs
 8002aea:	2304      	movcs	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <NVIC_EncodePriority+0x30>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3b03      	subs	r3, #3
 8002afa:	e000      	b.n	8002afe <NVIC_EncodePriority+0x32>
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	4313      	orrs	r3, r2
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b40:	d301      	bcc.n	8002b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00f      	b.n	8002b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <SysTick_Config+0x40>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4e:	210f      	movs	r1, #15
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	f7ff ff90 	bl	8002a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <SysTick_Config+0x40>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <SysTick_Config+0x40>)
 8002b60:	2207      	movs	r2, #7
 8002b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	e000e010 	.word	0xe000e010

08002b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff2d 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b9c:	f7ff ff42 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	6978      	ldr	r0, [r7, #20]
 8002ba8:	f7ff ff90 	bl	8002acc <NVIC_EncodePriority>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff5f 	bl	8002a78 <__NVIC_SetPriority>
}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff35 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffa2 	bl	8002b30 <SysTick_Config>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b08b      	sub	sp, #44	; 0x2c
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0a:	e169      	b.n	8002ee0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 8158 	bne.w	8002eda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4a9a      	ldr	r2, [pc, #616]	; (8002e98 <HAL_GPIO_Init+0x2a0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d05e      	beq.n	8002cf2 <HAL_GPIO_Init+0xfa>
 8002c34:	4a98      	ldr	r2, [pc, #608]	; (8002e98 <HAL_GPIO_Init+0x2a0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d875      	bhi.n	8002d26 <HAL_GPIO_Init+0x12e>
 8002c3a:	4a98      	ldr	r2, [pc, #608]	; (8002e9c <HAL_GPIO_Init+0x2a4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d058      	beq.n	8002cf2 <HAL_GPIO_Init+0xfa>
 8002c40:	4a96      	ldr	r2, [pc, #600]	; (8002e9c <HAL_GPIO_Init+0x2a4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d86f      	bhi.n	8002d26 <HAL_GPIO_Init+0x12e>
 8002c46:	4a96      	ldr	r2, [pc, #600]	; (8002ea0 <HAL_GPIO_Init+0x2a8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d052      	beq.n	8002cf2 <HAL_GPIO_Init+0xfa>
 8002c4c:	4a94      	ldr	r2, [pc, #592]	; (8002ea0 <HAL_GPIO_Init+0x2a8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d869      	bhi.n	8002d26 <HAL_GPIO_Init+0x12e>
 8002c52:	4a94      	ldr	r2, [pc, #592]	; (8002ea4 <HAL_GPIO_Init+0x2ac>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04c      	beq.n	8002cf2 <HAL_GPIO_Init+0xfa>
 8002c58:	4a92      	ldr	r2, [pc, #584]	; (8002ea4 <HAL_GPIO_Init+0x2ac>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d863      	bhi.n	8002d26 <HAL_GPIO_Init+0x12e>
 8002c5e:	4a92      	ldr	r2, [pc, #584]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d046      	beq.n	8002cf2 <HAL_GPIO_Init+0xfa>
 8002c64:	4a90      	ldr	r2, [pc, #576]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d85d      	bhi.n	8002d26 <HAL_GPIO_Init+0x12e>
 8002c6a:	2b12      	cmp	r3, #18
 8002c6c:	d82a      	bhi.n	8002cc4 <HAL_GPIO_Init+0xcc>
 8002c6e:	2b12      	cmp	r3, #18
 8002c70:	d859      	bhi.n	8002d26 <HAL_GPIO_Init+0x12e>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <HAL_GPIO_Init+0x80>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002cf3 	.word	0x08002cf3
 8002c7c:	08002ccd 	.word	0x08002ccd
 8002c80:	08002cdf 	.word	0x08002cdf
 8002c84:	08002d21 	.word	0x08002d21
 8002c88:	08002d27 	.word	0x08002d27
 8002c8c:	08002d27 	.word	0x08002d27
 8002c90:	08002d27 	.word	0x08002d27
 8002c94:	08002d27 	.word	0x08002d27
 8002c98:	08002d27 	.word	0x08002d27
 8002c9c:	08002d27 	.word	0x08002d27
 8002ca0:	08002d27 	.word	0x08002d27
 8002ca4:	08002d27 	.word	0x08002d27
 8002ca8:	08002d27 	.word	0x08002d27
 8002cac:	08002d27 	.word	0x08002d27
 8002cb0:	08002d27 	.word	0x08002d27
 8002cb4:	08002d27 	.word	0x08002d27
 8002cb8:	08002d27 	.word	0x08002d27
 8002cbc:	08002cd5 	.word	0x08002cd5
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	4a79      	ldr	r2, [pc, #484]	; (8002eac <HAL_GPIO_Init+0x2b4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cca:	e02c      	b.n	8002d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	623b      	str	r3, [r7, #32]
          break;
 8002cd2:	e029      	b.n	8002d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	623b      	str	r3, [r7, #32]
          break;
 8002cdc:	e024      	b.n	8002d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	623b      	str	r3, [r7, #32]
          break;
 8002ce6:	e01f      	b.n	8002d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	330c      	adds	r3, #12
 8002cee:	623b      	str	r3, [r7, #32]
          break;
 8002cf0:	e01a      	b.n	8002d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	623b      	str	r3, [r7, #32]
          break;
 8002cfe:	e013      	b.n	8002d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	611a      	str	r2, [r3, #16]
          break;
 8002d12:	e009      	b.n	8002d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d14:	2308      	movs	r3, #8
 8002d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	615a      	str	r2, [r3, #20]
          break;
 8002d1e:	e003      	b.n	8002d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
          break;
 8002d24:	e000      	b.n	8002d28 <HAL_GPIO_Init+0x130>
          break;
 8002d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2bff      	cmp	r3, #255	; 0xff
 8002d2c:	d801      	bhi.n	8002d32 <HAL_GPIO_Init+0x13a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	e001      	b.n	8002d36 <HAL_GPIO_Init+0x13e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3304      	adds	r3, #4
 8002d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2bff      	cmp	r3, #255	; 0xff
 8002d3c:	d802      	bhi.n	8002d44 <HAL_GPIO_Init+0x14c>
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	e002      	b.n	8002d4a <HAL_GPIO_Init+0x152>
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	3b08      	subs	r3, #8
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	210f      	movs	r1, #15
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	431a      	orrs	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80b1 	beq.w	8002eda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d78:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_GPIO_Init+0x2b8>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <HAL_GPIO_Init+0x2b8>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6193      	str	r3, [r2, #24]
 8002d84:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_GPIO_Init+0x2b8>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d90:	4a48      	ldr	r2, [pc, #288]	; (8002eb4 <HAL_GPIO_Init+0x2bc>)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a40      	ldr	r2, [pc, #256]	; (8002eb8 <HAL_GPIO_Init+0x2c0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_GPIO_Init+0x1ec>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_GPIO_Init+0x2c4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00d      	beq.n	8002de0 <HAL_GPIO_Init+0x1e8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a3e      	ldr	r2, [pc, #248]	; (8002ec0 <HAL_GPIO_Init+0x2c8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <HAL_GPIO_Init+0x1e4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a3d      	ldr	r2, [pc, #244]	; (8002ec4 <HAL_GPIO_Init+0x2cc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_GPIO_Init+0x1e0>
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e006      	b.n	8002de6 <HAL_GPIO_Init+0x1ee>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e004      	b.n	8002de6 <HAL_GPIO_Init+0x1ee>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e002      	b.n	8002de6 <HAL_GPIO_Init+0x1ee>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_GPIO_Init+0x1ee>
 8002de4:	2300      	movs	r3, #0
 8002de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de8:	f002 0203 	and.w	r2, r2, #3
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	4093      	lsls	r3, r2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002df6:	492f      	ldr	r1, [pc, #188]	; (8002eb4 <HAL_GPIO_Init+0x2bc>)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e10:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	492c      	ldr	r1, [pc, #176]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	4928      	ldr	r1, [pc, #160]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	4922      	ldr	r1, [pc, #136]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
 8002e44:	e006      	b.n	8002e54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	491e      	ldr	r1, [pc, #120]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4918      	ldr	r1, [pc, #96]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4914      	ldr	r1, [pc, #80]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d021      	beq.n	8002ecc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
 8002e94:	e021      	b.n	8002eda <HAL_GPIO_Init+0x2e2>
 8002e96:	bf00      	nop
 8002e98:	10320000 	.word	0x10320000
 8002e9c:	10310000 	.word	0x10310000
 8002ea0:	10220000 	.word	0x10220000
 8002ea4:	10210000 	.word	0x10210000
 8002ea8:	10120000 	.word	0x10120000
 8002eac:	10110000 	.word	0x10110000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40010800 	.word	0x40010800
 8002ebc:	40010c00 	.word	0x40010c00
 8002ec0:	40011000 	.word	0x40011000
 8002ec4:	40011400 	.word	0x40011400
 8002ec8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_GPIO_Init+0x304>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	4909      	ldr	r1, [pc, #36]	; (8002efc <HAL_GPIO_Init+0x304>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	3301      	adds	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f47f ae8e 	bne.w	8002c0c <HAL_GPIO_Init+0x14>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	372c      	adds	r7, #44	; 0x2c
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	40010400 	.word	0x40010400

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f1c:	e003      	b.n	8002f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f9d8 	bl	8002304 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e12b      	b.n	80031ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fa52 	bl	8002430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f001 fd1e 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a81      	ldr	r2, [pc, #516]	; (80031d4 <HAL_I2C_Init+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d807      	bhi.n	8002fe4 <HAL_I2C_Init+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <HAL_I2C_Init+0x278>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e006      	b.n	8002ff2 <HAL_I2C_Init+0x92>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a7d      	ldr	r2, [pc, #500]	; (80031dc <HAL_I2C_Init+0x27c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	bf94      	ite	ls
 8002fec:	2301      	movls	r3, #1
 8002fee:	2300      	movhi	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0e7      	b.n	80031ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a78      	ldr	r2, [pc, #480]	; (80031e0 <HAL_I2C_Init+0x280>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <HAL_I2C_Init+0x274>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d802      	bhi.n	8003034 <HAL_I2C_Init+0xd4>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3301      	adds	r3, #1
 8003032:	e009      	b.n	8003048 <HAL_I2C_Init+0xe8>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	4a69      	ldr	r2, [pc, #420]	; (80031e4 <HAL_I2C_Init+0x284>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	3301      	adds	r3, #1
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800305a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	495c      	ldr	r1, [pc, #368]	; (80031d4 <HAL_I2C_Init+0x274>)
 8003064:	428b      	cmp	r3, r1
 8003066:	d819      	bhi.n	800309c <HAL_I2C_Init+0x13c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e59      	subs	r1, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fbb1 f3f3 	udiv	r3, r1, r3
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	f640 73fc 	movw	r3, #4092	; 0xffc
 800307c:	400b      	ands	r3, r1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_I2C_Init+0x138>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	e051      	b.n	800313c <HAL_I2C_Init+0x1dc>
 8003098:	2304      	movs	r3, #4
 800309a:	e04f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <HAL_I2C_Init+0x168>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e012      	b.n	80030ee <HAL_I2C_Init+0x18e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x196>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e022      	b.n	800313c <HAL_I2C_Init+0x1dc>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <HAL_I2C_Init+0x1bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e58      	subs	r0, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	440b      	add	r3, r1
 800310c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311a:	e00f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6809      	ldr	r1, [r1, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800316a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6911      	ldr	r1, [r2, #16]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	000186a0 	.word	0x000186a0
 80031d8:	001e847f 	.word	0x001e847f
 80031dc:	003d08ff 	.word	0x003d08ff
 80031e0:	431bde83 	.word	0x431bde83
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003202:	f7ff fbe1 	bl	80029c8 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b20      	cmp	r3, #32
 8003212:	f040 80d9 	bne.w	80033c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2319      	movs	r3, #25
 800321c:	2201      	movs	r2, #1
 800321e:	496d      	ldr	r1, [pc, #436]	; (80033d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fdef 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
 800322e:	e0cc      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2C_Mem_Write+0x56>
 800323a:	2302      	movs	r3, #2
 800323c:	e0c5      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d007      	beq.n	8003264 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2221      	movs	r2, #33	; 0x21
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <HAL_I2C_Mem_Write+0x1f0>)
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032a6:	88f8      	ldrh	r0, [r7, #6]
 80032a8:	893a      	ldrh	r2, [r7, #8]
 80032aa:	8979      	ldrh	r1, [r7, #10]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4603      	mov	r3, r0
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fc26 	bl	8003b08 <I2C_RequestMemoryWrite>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d052      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e081      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 feb4 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06b      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d11b      	bne.n	8003368 <HAL_I2C_Mem_Write+0x180>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1aa      	bne.n	80032c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fea7 	bl	80040c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2b04      	cmp	r3, #4
 8003386:	d107      	bne.n	8003398 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e016      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	00100002 	.word	0x00100002
 80033d8:	ffff0000 	.word	0xffff0000

080033dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	; 0x30
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fa:	f7ff fae5 	bl	80029c8 <HAL_GetTick>
 80033fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	f040 8244 	bne.w	8003896 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2319      	movs	r3, #25
 8003414:	2201      	movs	r2, #1
 8003416:	4982      	ldr	r1, [pc, #520]	; (8003620 <HAL_I2C_Mem_Read+0x244>)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fcf3 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
 8003426:	e237      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Read+0x5a>
 8003432:	2302      	movs	r3, #2
 8003434:	e230      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d007      	beq.n	800345c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a62      	ldr	r2, [pc, #392]	; (8003624 <HAL_I2C_Mem_Read+0x248>)
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349e:	88f8      	ldrh	r0, [r7, #6]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	8979      	ldrh	r1, [r7, #10]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4603      	mov	r3, r0
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fbc0 	bl	8003c34 <I2C_RequestMemoryRead>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1ec      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e1c0      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d11e      	bne.n	8003534 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003506:	b672      	cpsid	i
}
 8003508:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003530:	b662      	cpsie	i
}
 8003532:	e035      	b.n	80035a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b02      	cmp	r3, #2
 800353a:	d11e      	bne.n	800357a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800354c:	b672      	cpsid	i
}
 800354e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003576:	b662      	cpsie	i
}
 8003578:	e012      	b.n	80035a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035a0:	e166      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	f200 811f 	bhi.w	80037ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d123      	bne.n	80035fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fdcd 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e167      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035fa:	e139      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b02      	cmp	r3, #2
 8003602:	d152      	bne.n	80036aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2200      	movs	r2, #0
 800360c:	4906      	ldr	r1, [pc, #24]	; (8003628 <HAL_I2C_Mem_Read+0x24c>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fbf8 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e13c      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
 800361e:	bf00      	nop
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000
 8003628:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800362c:	b672      	cpsid	i
}
 800362e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003672:	b662      	cpsie	i
}
 8003674:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036a8:	e0e2      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2200      	movs	r2, #0
 80036b2:	497b      	ldr	r1, [pc, #492]	; (80038a0 <HAL_I2C_Mem_Read+0x4c4>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fba5 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0e9      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036d4:	b672      	cpsid	i
}
 80036d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800370a:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_I2C_Mem_Read+0x4c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	4a65      	ldr	r2, [pc, #404]	; (80038a8 <HAL_I2C_Mem_Read+0x4cc>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a1a      	lsrs	r2, r3, #8
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00da      	lsls	r2, r3, #3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	3b01      	subs	r3, #1
 8003728:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d118      	bne.n	8003762 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003752:	b662      	cpsie	i
}
 8003754:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e09a      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d1d9      	bne.n	8003724 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037b2:	b662      	cpsie	i
}
 80037b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037e8:	e042      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fcb2 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e04c      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d118      	bne.n	8003870 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f ae94 	bne.w	80035a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	00010004 	.word	0x00010004
 80038a4:	20000010 	.word	0x20000010
 80038a8:	14f8b589 	.word	0x14f8b589

080038ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	460b      	mov	r3, r1
 80038ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff f884 	bl	80029c8 <HAL_GetTick>
 80038c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	f040 8111 	bne.w	8003af6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2319      	movs	r3, #25
 80038da:	2201      	movs	r2, #1
 80038dc:	4988      	ldr	r1, [pc, #544]	; (8003b00 <HAL_I2C_IsDeviceReady+0x254>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fa90 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	e104      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2C_IsDeviceReady+0x50>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0fd      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d007      	beq.n	8003922 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2224      	movs	r2, #36	; 0x24
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a70      	ldr	r2, [pc, #448]	; (8003b04 <HAL_I2C_IsDeviceReady+0x258>)
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa4e 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397c:	d103      	bne.n	8003986 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0b6      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800398a:	897b      	ldrh	r3, [r7, #10]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003998:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800399a:	f7ff f815 	bl	80029c8 <HAL_GetTick>
 800399e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039ce:	e025      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fe fffa 	bl	80029c8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <HAL_I2C_IsDeviceReady+0x13a>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	22a0      	movs	r2, #160	; 0xa0
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2ba0      	cmp	r3, #160	; 0xa0
 8003a26:	d005      	beq.n	8003a34 <HAL_I2C_IsDeviceReady+0x188>
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_I2C_IsDeviceReady+0x188>
 8003a2e:	7dbb      	ldrb	r3, [r7, #22]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0cd      	beq.n	80039d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d129      	bne.n	8003a9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2319      	movs	r3, #25
 8003a76:	2201      	movs	r2, #1
 8003a78:	4921      	ldr	r1, [pc, #132]	; (8003b00 <HAL_I2C_IsDeviceReady+0x254>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f9c2 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e036      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e02c      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2319      	movs	r3, #25
 8003abe:	2201      	movs	r2, #1
 8003ac0:	490f      	ldr	r1, [pc, #60]	; (8003b00 <HAL_I2C_IsDeviceReady+0x254>)
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f99e 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e012      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	f4ff af32 	bcc.w	8003946 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	00100002 	.word	0x00100002
 8003b04:	ffff0000 	.word	0xffff0000

08003b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f960 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	d103      	bne.n	8003b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e05f      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	492d      	ldr	r1, [pc, #180]	; (8003c30 <I2C_RequestMemoryWrite+0x128>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f9bb 	bl	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e04c      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fa46 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d107      	bne.n	8003bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e02b      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	e021      	b.n	8003c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fa20 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e005      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00010002 	.word	0x00010002

08003c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	460b      	mov	r3, r1
 8003c48:	813b      	strh	r3, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8c2 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c94:	d103      	bne.n	8003c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0aa      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	4952      	ldr	r1, [pc, #328]	; (8003e00 <I2C_RequestMemoryRead+0x1cc>)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f91d 	bl	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e097      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f9a8 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e076      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d10:	893b      	ldrh	r3, [r7, #8]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	e021      	b.n	8003d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f982 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d107      	bne.n	8003d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e050      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d56:	893b      	ldrh	r3, [r7, #8]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	6a39      	ldr	r1, [r7, #32]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f967 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e035      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f82b 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc2:	d103      	bne.n	8003dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e013      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd0:	897b      	ldrh	r3, [r7, #10]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <I2C_RequestMemoryRead+0x1cc>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f886 	bl	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e048      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d044      	beq.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fe fdd3 	bl	80029c8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d139      	bne.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10d      	bne.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	43da      	mvns	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	e00c      	b.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d116      	bne.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e023      	b.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10d      	bne.n	8003ece <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	e00c      	b.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d093      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f06:	e071      	b.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d123      	bne.n	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e067      	b.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d041      	beq.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f68:	f7fe fd2e 	bl	80029c8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d136      	bne.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10c      	bne.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	e00b      	b.n	8003fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e021      	b.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d10c      	bne.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e00b      	b.n	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	43da      	mvns	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	bf14      	ite	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2300      	moveq	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	f47f af6d 	bne.w	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004044:	e034      	b.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f8e3 	bl	8004212 <I2C_IsAcknowledgeFailed>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e034      	b.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d028      	beq.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe fcb3 	bl	80029c8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11d      	bne.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d016      	beq.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e007      	b.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	d1c3      	bne.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d4:	e034      	b.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f89b 	bl	8004212 <I2C_IsAcknowledgeFailed>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e034      	b.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d028      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe fc6b 	bl	80029c8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11d      	bne.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d016      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e007      	b.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b04      	cmp	r3, #4
 800414c:	d1c3      	bne.n	80040d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004164:	e049      	b.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d119      	bne.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e030      	b.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fe fc0e 	bl	80029c8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11d      	bne.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d016      	beq.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e007      	b.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d1ae      	bne.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d11b      	bne.n	8004262 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004232:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
	...

08004270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e272      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8087 	beq.w	800439e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004290:	4b92      	ldr	r3, [pc, #584]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b04      	cmp	r3, #4
 800429a:	d00c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800429c:	4b8f      	ldr	r3, [pc, #572]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d112      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
 80042a8:	4b8c      	ldr	r3, [pc, #560]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d10b      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b6:	4b89      	ldr	r3, [pc, #548]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d06c      	beq.n	800439c <HAL_RCC_OscConfig+0x12c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d168      	bne.n	800439c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e24c      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x76>
 80042d8:	4b80      	ldr	r3, [pc, #512]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a7f      	ldr	r2, [pc, #508]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e02e      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x98>
 80042ee:	4b7b      	ldr	r3, [pc, #492]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7a      	ldr	r2, [pc, #488]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b78      	ldr	r3, [pc, #480]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a77      	ldr	r2, [pc, #476]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e01d      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0xbc>
 8004312:	4b72      	ldr	r3, [pc, #456]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a71      	ldr	r2, [pc, #452]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b6f      	ldr	r3, [pc, #444]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6e      	ldr	r2, [pc, #440]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 800432c:	4b6b      	ldr	r3, [pc, #428]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6a      	ldr	r2, [pc, #424]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b68      	ldr	r3, [pc, #416]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a67      	ldr	r2, [pc, #412]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f7fe fb3c 	bl	80029c8 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fe fb38 	bl	80029c8 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e200      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	4b5d      	ldr	r3, [pc, #372]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0xe4>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe fb28 	bl	80029c8 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fe fb24 	bl	80029c8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1ec      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	4b53      	ldr	r3, [pc, #332]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x10c>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d063      	beq.n	8004472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043aa:	4b4c      	ldr	r3, [pc, #304]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043b6:	4b49      	ldr	r3, [pc, #292]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d11c      	bne.n	80043fc <HAL_RCC_OscConfig+0x18c>
 80043c2:	4b46      	ldr	r3, [pc, #280]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d116      	bne.n	80043fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ce:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_RCC_OscConfig+0x176>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e1c0      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e6:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4939      	ldr	r1, [pc, #228]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	e03a      	b.n	8004472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d020      	beq.n	8004446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004404:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fe fadd 	bl	80029c8 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fe fad9 	bl	80029c8 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e1a1      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004430:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4927      	ldr	r1, [pc, #156]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]
 8004444:	e015      	b.n	8004472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004446:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fe fabc 	bl	80029c8 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004454:	f7fe fab8 	bl	80029c8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e180      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03a      	beq.n	80044f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d019      	beq.n	80044ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fe fa9c 	bl	80029c8 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fe fa98 	bl	80029c8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e160      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <HAL_RCC_OscConfig+0x26c>)
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044b2:	2001      	movs	r0, #1
 80044b4:	f000 face 	bl	8004a54 <RCC_Delay>
 80044b8:	e01c      	b.n	80044f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_RCC_OscConfig+0x274>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c0:	f7fe fa82 	bl	80029c8 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c6:	e00f      	b.n	80044e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fe fa7e 	bl	80029c8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d908      	bls.n	80044e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e146      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	42420000 	.word	0x42420000
 80044e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	4b92      	ldr	r3, [pc, #584]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e9      	bne.n	80044c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a6 	beq.w	800464e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004506:	4b8b      	ldr	r3, [pc, #556]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4a87      	ldr	r2, [pc, #540]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451c:	61d3      	str	r3, [r2, #28]
 800451e:	4b85      	ldr	r3, [pc, #532]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452e:	4b82      	ldr	r3, [pc, #520]	; (8004738 <HAL_RCC_OscConfig+0x4c8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d118      	bne.n	800456c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453a:	4b7f      	ldr	r3, [pc, #508]	; (8004738 <HAL_RCC_OscConfig+0x4c8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7e      	ldr	r2, [pc, #504]	; (8004738 <HAL_RCC_OscConfig+0x4c8>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004546:	f7fe fa3f 	bl	80029c8 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454e:	f7fe fa3b 	bl	80029c8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b64      	cmp	r3, #100	; 0x64
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e103      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	4b75      	ldr	r3, [pc, #468]	; (8004738 <HAL_RCC_OscConfig+0x4c8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <HAL_RCC_OscConfig+0x312>
 8004574:	4b6f      	ldr	r3, [pc, #444]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a6e      	ldr	r2, [pc, #440]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	e02d      	b.n	80045de <HAL_RCC_OscConfig+0x36e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x334>
 800458a:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4a69      	ldr	r2, [pc, #420]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	6213      	str	r3, [r2, #32]
 8004596:	4b67      	ldr	r3, [pc, #412]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	4a66      	ldr	r2, [pc, #408]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	6213      	str	r3, [r2, #32]
 80045a2:	e01c      	b.n	80045de <HAL_RCC_OscConfig+0x36e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCC_OscConfig+0x356>
 80045ac:	4b61      	ldr	r3, [pc, #388]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a60      	ldr	r2, [pc, #384]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	6213      	str	r3, [r2, #32]
 80045b8:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4a5d      	ldr	r2, [pc, #372]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6213      	str	r3, [r2, #32]
 80045c4:	e00b      	b.n	80045de <HAL_RCC_OscConfig+0x36e>
 80045c6:	4b5b      	ldr	r3, [pc, #364]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a5a      	ldr	r2, [pc, #360]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6213      	str	r3, [r2, #32]
 80045d2:	4b58      	ldr	r3, [pc, #352]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	4a57      	ldr	r2, [pc, #348]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d015      	beq.n	8004612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fe f9ef 	bl	80029c8 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe f9eb 	bl	80029c8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0b1      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ee      	beq.n	80045ee <HAL_RCC_OscConfig+0x37e>
 8004610:	e014      	b.n	800463c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004612:	f7fe f9d9 	bl	80029c8 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fe f9d5 	bl	80029c8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e09b      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004630:	4b40      	ldr	r3, [pc, #256]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ee      	bne.n	800461a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b3c      	ldr	r3, [pc, #240]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4a3b      	ldr	r2, [pc, #236]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8087 	beq.w	8004766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d061      	beq.n	8004728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d146      	bne.n	80046fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b33      	ldr	r3, [pc, #204]	; (800473c <HAL_RCC_OscConfig+0x4cc>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe f9a9 	bl	80029c8 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe f9a5 	bl	80029c8 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e06d      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468c:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d108      	bne.n	80046b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4921      	ldr	r1, [pc, #132]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b4:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a19      	ldr	r1, [r3, #32]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	430b      	orrs	r3, r1
 80046c6:	491b      	ldr	r1, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCC_OscConfig+0x4cc>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fe f979 	bl	80029c8 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046da:	f7fe f975 	bl	80029c8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e03d      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x46a>
 80046f8:	e035      	b.n	8004766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_OscConfig+0x4cc>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fe f962 	bl	80029c8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004708:	f7fe f95e 	bl	80029c8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e026      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x498>
 8004726:	e01e      	b.n	8004766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e019      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
 800473c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_OscConfig+0x500>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	429a      	cmp	r2, r3
 8004752:	d106      	bne.n	8004762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0d0      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d910      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b67      	ldr	r3, [pc, #412]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 0207 	bic.w	r2, r3, #7
 800479e:	4965      	ldr	r1, [pc, #404]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b63      	ldr	r3, [pc, #396]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0b8      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d0:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a58      	ldr	r2, [pc, #352]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e8:	4b53      	ldr	r3, [pc, #332]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4a52      	ldr	r2, [pc, #328]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	494d      	ldr	r1, [pc, #308]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d040      	beq.n	8004894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b47      	ldr	r3, [pc, #284]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d115      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e07f      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e073      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e06b      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004852:	4b39      	ldr	r3, [pc, #228]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4936      	ldr	r1, [pc, #216]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fe f8b0 	bl	80029c8 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fe f8ac 	bl	80029c8 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e053      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 020c 	and.w	r2, r3, #12
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1eb      	bne.n	800486c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d210      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 0207 	bic.w	r2, r3, #7
 80048aa:	4922      	ldr	r1, [pc, #136]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b20      	ldr	r3, [pc, #128]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e032      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4916      	ldr	r1, [pc, #88]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ee:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	490e      	ldr	r1, [pc, #56]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004902:	f000 f821 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8004906:	4602      	mov	r2, r0
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	490a      	ldr	r1, [pc, #40]	; (800493c <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	5ccb      	ldrb	r3, [r1, r3]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a09      	ldr	r2, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x1cc>)
 800491c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCC_ClockConfig+0x1d0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe f80e 	bl	8002944 <HAL_InitTick>

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40022000 	.word	0x40022000
 8004938:	40021000 	.word	0x40021000
 800493c:	08008b40 	.word	0x08008b40
 8004940:	20000010 	.word	0x20000010
 8004944:	20000014 	.word	0x20000014

08004948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	2300      	movs	r3, #0
 800495c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b04      	cmp	r3, #4
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x30>
 8004972:	2b08      	cmp	r3, #8
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x36>
 8004976:	e027      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800497a:	613b      	str	r3, [r7, #16]
      break;
 800497c:	e027      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	0c9b      	lsrs	r3, r3, #18
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004988:	5cd3      	ldrb	r3, [r2, r3]
 800498a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004996:	4b11      	ldr	r3, [pc, #68]	; (80049dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	0c5b      	lsrs	r3, r3, #17
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049a2:	5cd3      	ldrb	r3, [r2, r3]
 80049a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049aa:	fb03 f202 	mul.w	r2, r3, r2
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e004      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a0c      	ldr	r2, [pc, #48]	; (80049ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80049bc:	fb02 f303 	mul.w	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	613b      	str	r3, [r7, #16]
      break;
 80049c6:	e002      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ca:	613b      	str	r3, [r7, #16]
      break;
 80049cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ce:	693b      	ldr	r3, [r7, #16]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	007a1200 	.word	0x007a1200
 80049e4:	08008b58 	.word	0x08008b58
 80049e8:	08008b68 	.word	0x08008b68
 80049ec:	003d0900 	.word	0x003d0900

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	20000010 	.word	0x20000010

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a08:	f7ff fff2 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4903      	ldr	r1, [pc, #12]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	08008b50 	.word	0x08008b50

08004a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a30:	f7ff ffde 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	0adb      	lsrs	r3, r3, #11
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	08008b50 	.word	0x08008b50

08004a54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <RCC_Delay+0x34>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <RCC_Delay+0x38>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0a5b      	lsrs	r3, r3, #9
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	fb02 f303 	mul.w	r3, r2, r3
 8004a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a70:	bf00      	nop
  }
  while (Delay --);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1e5a      	subs	r2, r3, #1
 8004a76:	60fa      	str	r2, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f9      	bne.n	8004a70 <RCC_Delay+0x1c>
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	20000010 	.word	0x20000010
 8004a8c:	10624dd3 	.word	0x10624dd3

08004a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e041      	b.n	8004b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd fcf8 	bl	80024ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 fc28 	bl	8005324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d001      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e03a      	b.n	8004bbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a18      	ldr	r2, [pc, #96]	; (8004bc8 <HAL_TIM_Base_Start_IT+0x98>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00e      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x58>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b72:	d009      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x58>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <HAL_TIM_Base_Start_IT+0x9c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x58>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d111      	bne.n	8004bac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b06      	cmp	r3, #6
 8004b98:	d010      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004baa:	e007      	b.n	8004bbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800

08004bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e041      	b.n	8004c6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd fc9a 	bl	8002534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f000 fb86 	bl	8005324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_TIM_PWM_Start+0x24>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e022      	b.n	8004cde <HAL_TIM_PWM_Start+0x6a>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d109      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x3e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e015      	b.n	8004cde <HAL_TIM_PWM_Start+0x6a>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIM_PWM_Start+0x58>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e008      	b.n	8004cde <HAL_TIM_PWM_Start+0x6a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e05e      	b.n	8004da4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0x82>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	e013      	b.n	8004d1e <HAL_TIM_PWM_Start+0xaa>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIM_PWM_Start+0x92>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	e00b      	b.n	8004d1e <HAL_TIM_PWM_Start+0xaa>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_PWM_Start+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d14:	e003      	b.n	8004d1e <HAL_TIM_PWM_Start+0xaa>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2201      	movs	r2, #1
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fd7c 	bl	8005824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <HAL_TIM_PWM_Start+0x138>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d107      	bne.n	8004d46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a18      	ldr	r2, [pc, #96]	; (8004dac <HAL_TIM_PWM_Start+0x138>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_TIM_PWM_Start+0xfa>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d009      	beq.n	8004d6e <HAL_TIM_PWM_Start+0xfa>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <HAL_TIM_PWM_Start+0x13c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIM_PWM_Start+0xfa>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_TIM_PWM_Start+0x140>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d111      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b06      	cmp	r3, #6
 8004d7e:	d010      	beq.n	8004da2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d90:	e007      	b.n	8004da2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800

08004db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0202 	mvn.w	r2, #2
 8004de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa76 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa69 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fa78 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0204 	mvn.w	r2, #4
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa4c 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fa3f 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa4e 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0208 	mvn.w	r2, #8
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2204      	movs	r2, #4
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa22 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa15 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fa24 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0210 	mvn.w	r2, #16
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9f8 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9eb 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9fa 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0201 	mvn.w	r2, #1
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fd f8ba 	bl	80020b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fce9 	bl	800593a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9be 	bl	8005310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0220 	mvn.w	r2, #32
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fcb4 	bl	8005928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0ae      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	f200 809f 	bhi.w	8005134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005135 	.word	0x08005135
 8005004:	08005135 	.word	0x08005135
 8005008:	08005135 	.word	0x08005135
 800500c:	08005071 	.word	0x08005071
 8005010:	08005135 	.word	0x08005135
 8005014:	08005135 	.word	0x08005135
 8005018:	08005135 	.word	0x08005135
 800501c:	080050b3 	.word	0x080050b3
 8005020:	08005135 	.word	0x08005135
 8005024:	08005135 	.word	0x08005135
 8005028:	08005135 	.word	0x08005135
 800502c:	080050f3 	.word	0x080050f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f9d6 	bl	80053e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0208 	orr.w	r2, r2, #8
 800504a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0204 	bic.w	r2, r2, #4
 800505a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6999      	ldr	r1, [r3, #24]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	619a      	str	r2, [r3, #24]
      break;
 800506e:	e064      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fa1c 	bl	80054b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6999      	ldr	r1, [r3, #24]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	619a      	str	r2, [r3, #24]
      break;
 80050b0:	e043      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fa65 	bl	8005588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0208 	orr.w	r2, r2, #8
 80050cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0204 	bic.w	r2, r2, #4
 80050dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69d9      	ldr	r1, [r3, #28]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	61da      	str	r2, [r3, #28]
      break;
 80050f0:	e023      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 faaf 	bl	800565c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800510c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69d9      	ldr	r1, [r3, #28]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	021a      	lsls	r2, r3, #8
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	61da      	str	r2, [r3, #28]
      break;
 8005132:	e002      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
      break;
 8005138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIM_ConfigClockSource+0x1c>
 8005164:	2302      	movs	r3, #2
 8005166:	e0b4      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x186>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d03e      	beq.n	8005220 <HAL_TIM_ConfigClockSource+0xd4>
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	f200 8087 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	f000 8086 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x172>
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b6:	d87f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051b8:	2b70      	cmp	r3, #112	; 0x70
 80051ba:	d01a      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0xa6>
 80051bc:	2b70      	cmp	r3, #112	; 0x70
 80051be:	d87b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051c0:	2b60      	cmp	r3, #96	; 0x60
 80051c2:	d050      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x11a>
 80051c4:	2b60      	cmp	r3, #96	; 0x60
 80051c6:	d877      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051c8:	2b50      	cmp	r3, #80	; 0x50
 80051ca:	d03c      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0xfa>
 80051cc:	2b50      	cmp	r3, #80	; 0x50
 80051ce:	d873      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d058      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x13a>
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d86f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	2b30      	cmp	r3, #48	; 0x30
 80051da:	d064      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051dc:	2b30      	cmp	r3, #48	; 0x30
 80051de:	d86b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d060      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d867      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d05a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	e062      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	f000 faf0 	bl	80057e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	609a      	str	r2, [r3, #8]
      break;
 800521e:	e04f      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	f000 fad9 	bl	80057e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005242:	609a      	str	r2, [r3, #8]
      break;
 8005244:	e03c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fa50 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2150      	movs	r1, #80	; 0x50
 800525e:	4618      	mov	r0, r3
 8005260:	f000 faa7 	bl	80057b2 <TIM_ITRx_SetConfig>
      break;
 8005264:	e02c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	461a      	mov	r2, r3
 8005274:	f000 fa6e 	bl	8005754 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2160      	movs	r1, #96	; 0x60
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fa97 	bl	80057b2 <TIM_ITRx_SetConfig>
      break;
 8005284:	e01c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	461a      	mov	r2, r3
 8005294:	f000 fa30 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2140      	movs	r1, #64	; 0x40
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fa87 	bl	80057b2 <TIM_ITRx_SetConfig>
      break;
 80052a4:	e00c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 fa7e 	bl	80057b2 <TIM_ITRx_SetConfig>
      break;
 80052b6:	e003      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e000      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
	...

08005324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a29      	ldr	r2, [pc, #164]	; (80053dc <TIM_Base_SetConfig+0xb8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0x30>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0x30>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a26      	ldr	r2, [pc, #152]	; (80053e0 <TIM_Base_SetConfig+0xbc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0x30>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a25      	ldr	r2, [pc, #148]	; (80053e4 <TIM_Base_SetConfig+0xc0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d108      	bne.n	8005366 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <TIM_Base_SetConfig+0xb8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0x62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0x62>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <TIM_Base_SetConfig+0xbc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0x62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <TIM_Base_SetConfig+0xc0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a07      	ldr	r2, [pc, #28]	; (80053dc <TIM_Base_SetConfig+0xb8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d103      	bne.n	80053cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800

080053e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f023 0201 	bic.w	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 0302 	bic.w	r3, r3, #2
 8005430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <TIM_OC1_SetConfig+0xc8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10c      	bne.n	800545e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0308 	bic.w	r3, r3, #8
 800544a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <TIM_OC1_SetConfig+0xc8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d111      	bne.n	800548a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00

080054b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f023 0210 	bic.w	r2, r3, #16
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0320 	bic.w	r3, r3, #32
 80054fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <TIM_OC2_SetConfig+0xd0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10d      	bne.n	8005530 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800552e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a14      	ldr	r2, [pc, #80]	; (8005584 <TIM_OC2_SetConfig+0xd0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d113      	bne.n	8005560 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800553e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00

08005588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <TIM_OC3_SetConfig+0xd0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d10d      	bne.n	8005602 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <TIM_OC3_SetConfig+0xd0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d113      	bne.n	8005632 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	621a      	str	r2, [r3, #32]
}
 800564c:	bf00      	nop
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40012c00 	.word	0x40012c00

0800565c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	031b      	lsls	r3, r3, #12
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a0f      	ldr	r2, [pc, #60]	; (80056f4 <TIM_OC4_SetConfig+0x98>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	019b      	lsls	r3, r3, #6
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr
 80056f4:	40012c00 	.word	0x40012c00

080056f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0210 	bic.w	r2, r3, #16
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	031b      	lsls	r3, r3, #12
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005790:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	621a      	str	r2, [r3, #32]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f043 0307 	orr.w	r3, r3, #7
 80057d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	609a      	str	r2, [r3, #8]
}
 80057dc:	bf00      	nop
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b087      	sub	sp, #28
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005800:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	431a      	orrs	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4313      	orrs	r3, r2
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2201      	movs	r2, #1
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e046      	b.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d009      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a10      	ldr	r2, [pc, #64]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10c      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800

08005928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr

0800593a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr

0800594c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e042      	b.n	80059e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fc fe48 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800598e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9af 	bl	8005cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d16d      	bne.n	8005ae8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_UART_Transmit+0x2c>
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e066      	b.n	8005aea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2221      	movs	r2, #33	; 0x21
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2a:	f7fc ffcd 	bl	80029c8 <HAL_GetTick>
 8005a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a44:	d108      	bne.n	8005a58 <HAL_UART_Transmit+0x6c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e003      	b.n	8005a60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a60:	e02a      	b.n	8005ab8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f8d2 	bl	8005c16 <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e036      	b.n	8005aea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3302      	adds	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e007      	b.n	8005aaa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1cf      	bne.n	8005a62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f8a2 	bl	8005c16 <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e006      	b.n	8005aea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b08a      	sub	sp, #40	; 0x28
 8005af6:	af02      	add	r7, sp, #8
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d17c      	bne.n	8005c0c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_UART_Receive+0x2c>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e075      	b.n	8005c0e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2222      	movs	r2, #34	; 0x22
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b36:	f7fc ff47 	bl	80029c8 <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b50:	d108      	bne.n	8005b64 <HAL_UART_Receive+0x72>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	e003      	b.n	8005b6c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005b6c:	e043      	b.n	8005bf6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2120      	movs	r1, #32
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f84c 	bl	8005c16 <UART_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e042      	b.n	8005c0e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e01f      	b.n	8005be8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d007      	beq.n	8005bc2 <HAL_UART_Receive+0xd0>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_UART_Receive+0xde>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e008      	b.n	8005be2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3301      	adds	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1b6      	bne.n	8005b6e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b090      	sub	sp, #64	; 0x40
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	4613      	mov	r3, r2
 8005c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c26:	e050      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d04c      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c36:	f7fc fec7 	bl	80029c8 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d241      	bcs.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c66:	637a      	str	r2, [r7, #52]	; 0x34
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e5      	bne.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3314      	adds	r3, #20
 8005c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c9a:	623a      	str	r2, [r7, #32]
 8005c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	69f9      	ldr	r1, [r7, #28]
 8005ca0:	6a3a      	ldr	r2, [r7, #32]
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e5      	bne.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e00f      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	bf0c      	ite	eq
 8005cda:	2301      	moveq	r3, #1
 8005cdc:	2300      	movne	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d09f      	beq.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3740      	adds	r7, #64	; 0x40
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d2e:	f023 030c 	bic.w	r3, r3, #12
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <UART_SetConfig+0x114>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d103      	bne.n	8005d64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d5c:	f7fe fe66 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	e002      	b.n	8005d6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fe fe4e 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8005d68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009a      	lsls	r2, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <UART_SetConfig+0x118>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	0119      	lsls	r1, r3, #4
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	009a      	lsls	r2, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <UART_SetConfig+0x118>)
 8005da2:	fba3 0302 	umull	r0, r3, r3, r2
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2064      	movs	r0, #100	; 0x64
 8005daa:	fb00 f303 	mul.w	r3, r0, r3
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	3332      	adds	r3, #50	; 0x32
 8005db4:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <UART_SetConfig+0x118>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc0:	4419      	add	r1, r3
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dd8:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <UART_SetConfig+0x118>)
 8005dda:	fba3 0302 	umull	r0, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2064      	movs	r0, #100	; 0x64
 8005de2:	fb00 f303 	mul.w	r3, r0, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	3332      	adds	r3, #50	; 0x32
 8005dec:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <UART_SetConfig+0x118>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40013800 	.word	0x40013800
 8005e0c:	51eb851f 	.word	0x51eb851f

08005e10 <__cvt>:
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e16:	461f      	mov	r7, r3
 8005e18:	bfbb      	ittet	lt
 8005e1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e1e:	461f      	movlt	r7, r3
 8005e20:	2300      	movge	r3, #0
 8005e22:	232d      	movlt	r3, #45	; 0x2d
 8005e24:	b088      	sub	sp, #32
 8005e26:	4614      	mov	r4, r2
 8005e28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e2c:	7013      	strb	r3, [r2, #0]
 8005e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e34:	f023 0820 	bic.w	r8, r3, #32
 8005e38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e3c:	d005      	beq.n	8005e4a <__cvt+0x3a>
 8005e3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e42:	d100      	bne.n	8005e46 <__cvt+0x36>
 8005e44:	3501      	adds	r5, #1
 8005e46:	2302      	movs	r3, #2
 8005e48:	e000      	b.n	8005e4c <__cvt+0x3c>
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	aa07      	add	r2, sp, #28
 8005e4e:	9204      	str	r2, [sp, #16]
 8005e50:	aa06      	add	r2, sp, #24
 8005e52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e56:	e9cd 3500 	strd	r3, r5, [sp]
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	f000 fe73 	bl	8006b48 <_dtoa_r>
 8005e62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e66:	4606      	mov	r6, r0
 8005e68:	d102      	bne.n	8005e70 <__cvt+0x60>
 8005e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e6c:	07db      	lsls	r3, r3, #31
 8005e6e:	d522      	bpl.n	8005eb6 <__cvt+0xa6>
 8005e70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e74:	eb06 0905 	add.w	r9, r6, r5
 8005e78:	d110      	bne.n	8005e9c <__cvt+0x8c>
 8005e7a:	7833      	ldrb	r3, [r6, #0]
 8005e7c:	2b30      	cmp	r3, #48	; 0x30
 8005e7e:	d10a      	bne.n	8005e96 <__cvt+0x86>
 8005e80:	2200      	movs	r2, #0
 8005e82:	2300      	movs	r3, #0
 8005e84:	4620      	mov	r0, r4
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa fd8e 	bl	80009a8 <__aeabi_dcmpeq>
 8005e8c:	b918      	cbnz	r0, 8005e96 <__cvt+0x86>
 8005e8e:	f1c5 0501 	rsb	r5, r5, #1
 8005e92:	f8ca 5000 	str.w	r5, [sl]
 8005e96:	f8da 3000 	ldr.w	r3, [sl]
 8005e9a:	4499      	add	r9, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	f7fa fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8005ea8:	b108      	cbz	r0, 8005eae <__cvt+0x9e>
 8005eaa:	f8cd 901c 	str.w	r9, [sp, #28]
 8005eae:	2230      	movs	r2, #48	; 0x30
 8005eb0:	9b07      	ldr	r3, [sp, #28]
 8005eb2:	454b      	cmp	r3, r9
 8005eb4:	d307      	bcc.n	8005ec6 <__cvt+0xb6>
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	9b07      	ldr	r3, [sp, #28]
 8005eba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ebc:	1b9b      	subs	r3, r3, r6
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	b008      	add	sp, #32
 8005ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec6:	1c59      	adds	r1, r3, #1
 8005ec8:	9107      	str	r1, [sp, #28]
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	e7f0      	b.n	8005eb0 <__cvt+0xa0>

08005ece <__exponent>:
 8005ece:	4603      	mov	r3, r0
 8005ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	f803 2b02 	strb.w	r2, [r3], #2
 8005ed8:	bfb6      	itet	lt
 8005eda:	222d      	movlt	r2, #45	; 0x2d
 8005edc:	222b      	movge	r2, #43	; 0x2b
 8005ede:	4249      	neglt	r1, r1
 8005ee0:	2909      	cmp	r1, #9
 8005ee2:	7042      	strb	r2, [r0, #1]
 8005ee4:	dd2a      	ble.n	8005f3c <__exponent+0x6e>
 8005ee6:	f10d 0207 	add.w	r2, sp, #7
 8005eea:	4617      	mov	r7, r2
 8005eec:	260a      	movs	r6, #10
 8005eee:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ef2:	4694      	mov	ip, r2
 8005ef4:	fb06 1415 	mls	r4, r6, r5, r1
 8005ef8:	3430      	adds	r4, #48	; 0x30
 8005efa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005efe:	460c      	mov	r4, r1
 8005f00:	2c63      	cmp	r4, #99	; 0x63
 8005f02:	4629      	mov	r1, r5
 8005f04:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f08:	dcf1      	bgt.n	8005eee <__exponent+0x20>
 8005f0a:	3130      	adds	r1, #48	; 0x30
 8005f0c:	f1ac 0402 	sub.w	r4, ip, #2
 8005f10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f14:	4622      	mov	r2, r4
 8005f16:	1c41      	adds	r1, r0, #1
 8005f18:	42ba      	cmp	r2, r7
 8005f1a:	d30a      	bcc.n	8005f32 <__exponent+0x64>
 8005f1c:	f10d 0209 	add.w	r2, sp, #9
 8005f20:	eba2 020c 	sub.w	r2, r2, ip
 8005f24:	42bc      	cmp	r4, r7
 8005f26:	bf88      	it	hi
 8005f28:	2200      	movhi	r2, #0
 8005f2a:	4413      	add	r3, r2
 8005f2c:	1a18      	subs	r0, r3, r0
 8005f2e:	b003      	add	sp, #12
 8005f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f3a:	e7ed      	b.n	8005f18 <__exponent+0x4a>
 8005f3c:	2330      	movs	r3, #48	; 0x30
 8005f3e:	3130      	adds	r1, #48	; 0x30
 8005f40:	7083      	strb	r3, [r0, #2]
 8005f42:	70c1      	strb	r1, [r0, #3]
 8005f44:	1d03      	adds	r3, r0, #4
 8005f46:	e7f1      	b.n	8005f2c <__exponent+0x5e>

08005f48 <_printf_float>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	b091      	sub	sp, #68	; 0x44
 8005f4e:	460c      	mov	r4, r1
 8005f50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f54:	4616      	mov	r6, r2
 8005f56:	461f      	mov	r7, r3
 8005f58:	4605      	mov	r5, r0
 8005f5a:	f000 fce5 	bl	8006928 <_localeconv_r>
 8005f5e:	6803      	ldr	r3, [r0, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	f7fa f8f4 	bl	8000150 <strlen>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	930e      	str	r3, [sp, #56]	; 0x38
 8005f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f70:	900a      	str	r0, [sp, #40]	; 0x28
 8005f72:	3307      	adds	r3, #7
 8005f74:	f023 0307 	bic.w	r3, r3, #7
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005f80:	f8d4 b000 	ldr.w	fp, [r4]
 8005f84:	f8c8 2000 	str.w	r2, [r8]
 8005f88:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4643      	mov	r3, r8
 8005f90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f94:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	4b9c      	ldr	r3, [pc, #624]	; (8006214 <_printf_float+0x2cc>)
 8005fa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fa4:	f7fa fd32 	bl	8000a0c <__aeabi_dcmpun>
 8005fa8:	bb70      	cbnz	r0, 8006008 <_printf_float+0xc0>
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	4650      	mov	r0, sl
 8005fb0:	4b98      	ldr	r3, [pc, #608]	; (8006214 <_printf_float+0x2cc>)
 8005fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fb4:	f7fa fd0c 	bl	80009d0 <__aeabi_dcmple>
 8005fb8:	bb30      	cbnz	r0, 8006008 <_printf_float+0xc0>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	f7fa fcfb 	bl	80009bc <__aeabi_dcmplt>
 8005fc6:	b110      	cbz	r0, 8005fce <_printf_float+0x86>
 8005fc8:	232d      	movs	r3, #45	; 0x2d
 8005fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fce:	4a92      	ldr	r2, [pc, #584]	; (8006218 <_printf_float+0x2d0>)
 8005fd0:	4b92      	ldr	r3, [pc, #584]	; (800621c <_printf_float+0x2d4>)
 8005fd2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005fd6:	bf94      	ite	ls
 8005fd8:	4690      	movls	r8, r2
 8005fda:	4698      	movhi	r8, r3
 8005fdc:	2303      	movs	r3, #3
 8005fde:	f04f 0a00 	mov.w	sl, #0
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	f02b 0304 	bic.w	r3, fp, #4
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	4633      	mov	r3, r6
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	9700      	str	r7, [sp, #0]
 8005ff2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ff4:	f000 f9d6 	bl	80063a4 <_printf_common>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	f040 8090 	bne.w	800611e <_printf_float+0x1d6>
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	b011      	add	sp, #68	; 0x44
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	4652      	mov	r2, sl
 800600a:	4643      	mov	r3, r8
 800600c:	4650      	mov	r0, sl
 800600e:	4641      	mov	r1, r8
 8006010:	f7fa fcfc 	bl	8000a0c <__aeabi_dcmpun>
 8006014:	b148      	cbz	r0, 800602a <_printf_float+0xe2>
 8006016:	f1b8 0f00 	cmp.w	r8, #0
 800601a:	bfb8      	it	lt
 800601c:	232d      	movlt	r3, #45	; 0x2d
 800601e:	4a80      	ldr	r2, [pc, #512]	; (8006220 <_printf_float+0x2d8>)
 8006020:	bfb8      	it	lt
 8006022:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006026:	4b7f      	ldr	r3, [pc, #508]	; (8006224 <_printf_float+0x2dc>)
 8006028:	e7d3      	b.n	8005fd2 <_printf_float+0x8a>
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	d142      	bne.n	80060ba <_printf_float+0x172>
 8006034:	2306      	movs	r3, #6
 8006036:	6063      	str	r3, [r4, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	9206      	str	r2, [sp, #24]
 800603c:	aa0e      	add	r2, sp, #56	; 0x38
 800603e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006042:	aa0d      	add	r2, sp, #52	; 0x34
 8006044:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006048:	9203      	str	r2, [sp, #12]
 800604a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800604e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	4652      	mov	r2, sl
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4628      	mov	r0, r5
 800605c:	4643      	mov	r3, r8
 800605e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006060:	f7ff fed6 	bl	8005e10 <__cvt>
 8006064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006066:	4680      	mov	r8, r0
 8006068:	2947      	cmp	r1, #71	; 0x47
 800606a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800606c:	d108      	bne.n	8006080 <_printf_float+0x138>
 800606e:	1cc8      	adds	r0, r1, #3
 8006070:	db02      	blt.n	8006078 <_printf_float+0x130>
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	4299      	cmp	r1, r3
 8006076:	dd40      	ble.n	80060fa <_printf_float+0x1b2>
 8006078:	f1a9 0902 	sub.w	r9, r9, #2
 800607c:	fa5f f989 	uxtb.w	r9, r9
 8006080:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006084:	d81f      	bhi.n	80060c6 <_printf_float+0x17e>
 8006086:	464a      	mov	r2, r9
 8006088:	3901      	subs	r1, #1
 800608a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800608e:	910d      	str	r1, [sp, #52]	; 0x34
 8006090:	f7ff ff1d 	bl	8005ece <__exponent>
 8006094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006096:	4682      	mov	sl, r0
 8006098:	1813      	adds	r3, r2, r0
 800609a:	2a01      	cmp	r2, #1
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	dc02      	bgt.n	80060a6 <_printf_float+0x15e>
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	07d2      	lsls	r2, r2, #31
 80060a4:	d501      	bpl.n	80060aa <_printf_float+0x162>
 80060a6:	3301      	adds	r3, #1
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d09b      	beq.n	8005fea <_printf_float+0xa2>
 80060b2:	232d      	movs	r3, #45	; 0x2d
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	e797      	b.n	8005fea <_printf_float+0xa2>
 80060ba:	2947      	cmp	r1, #71	; 0x47
 80060bc:	d1bc      	bne.n	8006038 <_printf_float+0xf0>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1ba      	bne.n	8006038 <_printf_float+0xf0>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e7b7      	b.n	8006036 <_printf_float+0xee>
 80060c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80060ca:	d118      	bne.n	80060fe <_printf_float+0x1b6>
 80060cc:	2900      	cmp	r1, #0
 80060ce:	6863      	ldr	r3, [r4, #4]
 80060d0:	dd0b      	ble.n	80060ea <_printf_float+0x1a2>
 80060d2:	6121      	str	r1, [r4, #16]
 80060d4:	b913      	cbnz	r3, 80060dc <_printf_float+0x194>
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	07d0      	lsls	r0, r2, #31
 80060da:	d502      	bpl.n	80060e2 <_printf_float+0x19a>
 80060dc:	3301      	adds	r3, #1
 80060de:	440b      	add	r3, r1
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	f04f 0a00 	mov.w	sl, #0
 80060e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80060e8:	e7df      	b.n	80060aa <_printf_float+0x162>
 80060ea:	b913      	cbnz	r3, 80060f2 <_printf_float+0x1aa>
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	07d2      	lsls	r2, r2, #31
 80060f0:	d501      	bpl.n	80060f6 <_printf_float+0x1ae>
 80060f2:	3302      	adds	r3, #2
 80060f4:	e7f4      	b.n	80060e0 <_printf_float+0x198>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7f2      	b.n	80060e0 <_printf_float+0x198>
 80060fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80060fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006100:	4299      	cmp	r1, r3
 8006102:	db05      	blt.n	8006110 <_printf_float+0x1c8>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	6121      	str	r1, [r4, #16]
 8006108:	07d8      	lsls	r0, r3, #31
 800610a:	d5ea      	bpl.n	80060e2 <_printf_float+0x19a>
 800610c:	1c4b      	adds	r3, r1, #1
 800610e:	e7e7      	b.n	80060e0 <_printf_float+0x198>
 8006110:	2900      	cmp	r1, #0
 8006112:	bfcc      	ite	gt
 8006114:	2201      	movgt	r2, #1
 8006116:	f1c1 0202 	rsble	r2, r1, #2
 800611a:	4413      	add	r3, r2
 800611c:	e7e0      	b.n	80060e0 <_printf_float+0x198>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	055a      	lsls	r2, r3, #21
 8006122:	d407      	bmi.n	8006134 <_printf_float+0x1ec>
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	4642      	mov	r2, r8
 8006128:	4631      	mov	r1, r6
 800612a:	4628      	mov	r0, r5
 800612c:	47b8      	blx	r7
 800612e:	3001      	adds	r0, #1
 8006130:	d12b      	bne.n	800618a <_printf_float+0x242>
 8006132:	e764      	b.n	8005ffe <_printf_float+0xb6>
 8006134:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006138:	f240 80dd 	bls.w	80062f6 <_printf_float+0x3ae>
 800613c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	f7fa fc30 	bl	80009a8 <__aeabi_dcmpeq>
 8006148:	2800      	cmp	r0, #0
 800614a:	d033      	beq.n	80061b4 <_printf_float+0x26c>
 800614c:	2301      	movs	r3, #1
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	4a35      	ldr	r2, [pc, #212]	; (8006228 <_printf_float+0x2e0>)
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f af51 	beq.w	8005ffe <_printf_float+0xb6>
 800615c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006160:	429a      	cmp	r2, r3
 8006162:	db02      	blt.n	800616a <_printf_float+0x222>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	07d8      	lsls	r0, r3, #31
 8006168:	d50f      	bpl.n	800618a <_printf_float+0x242>
 800616a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	f43f af42 	beq.w	8005ffe <_printf_float+0xb6>
 800617a:	f04f 0800 	mov.w	r8, #0
 800617e:	f104 091a 	add.w	r9, r4, #26
 8006182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006184:	3b01      	subs	r3, #1
 8006186:	4543      	cmp	r3, r8
 8006188:	dc09      	bgt.n	800619e <_printf_float+0x256>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	079b      	lsls	r3, r3, #30
 800618e:	f100 8104 	bmi.w	800639a <_printf_float+0x452>
 8006192:	68e0      	ldr	r0, [r4, #12]
 8006194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006196:	4298      	cmp	r0, r3
 8006198:	bfb8      	it	lt
 800619a:	4618      	movlt	r0, r3
 800619c:	e731      	b.n	8006002 <_printf_float+0xba>
 800619e:	2301      	movs	r3, #1
 80061a0:	464a      	mov	r2, r9
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f af28 	beq.w	8005ffe <_printf_float+0xb6>
 80061ae:	f108 0801 	add.w	r8, r8, #1
 80061b2:	e7e6      	b.n	8006182 <_printf_float+0x23a>
 80061b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dc38      	bgt.n	800622c <_printf_float+0x2e4>
 80061ba:	2301      	movs	r3, #1
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <_printf_float+0x2e0>)
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	f43f af1a 	beq.w	8005ffe <_printf_float+0xb6>
 80061ca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80061ce:	4313      	orrs	r3, r2
 80061d0:	d102      	bne.n	80061d8 <_printf_float+0x290>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	07d9      	lsls	r1, r3, #31
 80061d6:	d5d8      	bpl.n	800618a <_printf_float+0x242>
 80061d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f af0b 	beq.w	8005ffe <_printf_float+0xb6>
 80061e8:	f04f 0900 	mov.w	r9, #0
 80061ec:	f104 0a1a 	add.w	sl, r4, #26
 80061f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f2:	425b      	negs	r3, r3
 80061f4:	454b      	cmp	r3, r9
 80061f6:	dc01      	bgt.n	80061fc <_printf_float+0x2b4>
 80061f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061fa:	e794      	b.n	8006126 <_printf_float+0x1de>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4652      	mov	r2, sl
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f aef9 	beq.w	8005ffe <_printf_float+0xb6>
 800620c:	f109 0901 	add.w	r9, r9, #1
 8006210:	e7ee      	b.n	80061f0 <_printf_float+0x2a8>
 8006212:	bf00      	nop
 8006214:	7fefffff 	.word	0x7fefffff
 8006218:	08008b6a 	.word	0x08008b6a
 800621c:	08008b6e 	.word	0x08008b6e
 8006220:	08008b72 	.word	0x08008b72
 8006224:	08008b76 	.word	0x08008b76
 8006228:	08008b7a 	.word	0x08008b7a
 800622c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800622e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006230:	429a      	cmp	r2, r3
 8006232:	bfa8      	it	ge
 8006234:	461a      	movge	r2, r3
 8006236:	2a00      	cmp	r2, #0
 8006238:	4691      	mov	r9, r2
 800623a:	dc37      	bgt.n	80062ac <_printf_float+0x364>
 800623c:	f04f 0b00 	mov.w	fp, #0
 8006240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006244:	f104 021a 	add.w	r2, r4, #26
 8006248:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800624c:	ebaa 0309 	sub.w	r3, sl, r9
 8006250:	455b      	cmp	r3, fp
 8006252:	dc33      	bgt.n	80062bc <_printf_float+0x374>
 8006254:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006258:	429a      	cmp	r2, r3
 800625a:	db3b      	blt.n	80062d4 <_printf_float+0x38c>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	07da      	lsls	r2, r3, #31
 8006260:	d438      	bmi.n	80062d4 <_printf_float+0x38c>
 8006262:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006266:	eba2 0903 	sub.w	r9, r2, r3
 800626a:	eba2 020a 	sub.w	r2, r2, sl
 800626e:	4591      	cmp	r9, r2
 8006270:	bfa8      	it	ge
 8006272:	4691      	movge	r9, r2
 8006274:	f1b9 0f00 	cmp.w	r9, #0
 8006278:	dc34      	bgt.n	80062e4 <_printf_float+0x39c>
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006282:	f104 0a1a 	add.w	sl, r4, #26
 8006286:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	eba3 0309 	sub.w	r3, r3, r9
 8006290:	4543      	cmp	r3, r8
 8006292:	f77f af7a 	ble.w	800618a <_printf_float+0x242>
 8006296:	2301      	movs	r3, #1
 8006298:	4652      	mov	r2, sl
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f aeac 	beq.w	8005ffe <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	e7ec      	b.n	8006286 <_printf_float+0x33e>
 80062ac:	4613      	mov	r3, r2
 80062ae:	4631      	mov	r1, r6
 80062b0:	4642      	mov	r2, r8
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	d1c0      	bne.n	800623c <_printf_float+0x2f4>
 80062ba:	e6a0      	b.n	8005ffe <_printf_float+0xb6>
 80062bc:	2301      	movs	r3, #1
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	f43f ae99 	beq.w	8005ffe <_printf_float+0xb6>
 80062cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ce:	f10b 0b01 	add.w	fp, fp, #1
 80062d2:	e7b9      	b.n	8006248 <_printf_float+0x300>
 80062d4:	4631      	mov	r1, r6
 80062d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062da:	4628      	mov	r0, r5
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	d1bf      	bne.n	8006262 <_printf_float+0x31a>
 80062e2:	e68c      	b.n	8005ffe <_printf_float+0xb6>
 80062e4:	464b      	mov	r3, r9
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	eb08 020a 	add.w	r2, r8, sl
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	d1c2      	bne.n	800627a <_printf_float+0x332>
 80062f4:	e683      	b.n	8005ffe <_printf_float+0xb6>
 80062f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062f8:	2a01      	cmp	r2, #1
 80062fa:	dc01      	bgt.n	8006300 <_printf_float+0x3b8>
 80062fc:	07db      	lsls	r3, r3, #31
 80062fe:	d539      	bpl.n	8006374 <_printf_float+0x42c>
 8006300:	2301      	movs	r3, #1
 8006302:	4642      	mov	r2, r8
 8006304:	4631      	mov	r1, r6
 8006306:	4628      	mov	r0, r5
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	f43f ae77 	beq.w	8005ffe <_printf_float+0xb6>
 8006310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006314:	4631      	mov	r1, r6
 8006316:	4628      	mov	r0, r5
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	f43f ae6f 	beq.w	8005ffe <_printf_float+0xb6>
 8006320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006324:	2200      	movs	r2, #0
 8006326:	2300      	movs	r3, #0
 8006328:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800632c:	f7fa fb3c 	bl	80009a8 <__aeabi_dcmpeq>
 8006330:	b9d8      	cbnz	r0, 800636a <_printf_float+0x422>
 8006332:	f109 33ff 	add.w	r3, r9, #4294967295
 8006336:	f108 0201 	add.w	r2, r8, #1
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	d10e      	bne.n	8006362 <_printf_float+0x41a>
 8006344:	e65b      	b.n	8005ffe <_printf_float+0xb6>
 8006346:	2301      	movs	r3, #1
 8006348:	464a      	mov	r2, r9
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae54 	beq.w	8005ffe <_printf_float+0xb6>
 8006356:	f108 0801 	add.w	r8, r8, #1
 800635a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800635c:	3b01      	subs	r3, #1
 800635e:	4543      	cmp	r3, r8
 8006360:	dcf1      	bgt.n	8006346 <_printf_float+0x3fe>
 8006362:	4653      	mov	r3, sl
 8006364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006368:	e6de      	b.n	8006128 <_printf_float+0x1e0>
 800636a:	f04f 0800 	mov.w	r8, #0
 800636e:	f104 091a 	add.w	r9, r4, #26
 8006372:	e7f2      	b.n	800635a <_printf_float+0x412>
 8006374:	2301      	movs	r3, #1
 8006376:	4642      	mov	r2, r8
 8006378:	e7df      	b.n	800633a <_printf_float+0x3f2>
 800637a:	2301      	movs	r3, #1
 800637c:	464a      	mov	r2, r9
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	f43f ae3a 	beq.w	8005ffe <_printf_float+0xb6>
 800638a:	f108 0801 	add.w	r8, r8, #1
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006392:	1a5b      	subs	r3, r3, r1
 8006394:	4543      	cmp	r3, r8
 8006396:	dcf0      	bgt.n	800637a <_printf_float+0x432>
 8006398:	e6fb      	b.n	8006192 <_printf_float+0x24a>
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	f104 0919 	add.w	r9, r4, #25
 80063a2:	e7f4      	b.n	800638e <_printf_float+0x446>

080063a4 <_printf_common>:
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	4616      	mov	r6, r2
 80063aa:	4699      	mov	r9, r3
 80063ac:	688a      	ldr	r2, [r1, #8]
 80063ae:	690b      	ldr	r3, [r1, #16]
 80063b0:	4607      	mov	r7, r0
 80063b2:	4293      	cmp	r3, r2
 80063b4:	bfb8      	it	lt
 80063b6:	4613      	movlt	r3, r2
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063be:	460c      	mov	r4, r1
 80063c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c4:	b10a      	cbz	r2, 80063ca <_printf_common+0x26>
 80063c6:	3301      	adds	r3, #1
 80063c8:	6033      	str	r3, [r6, #0]
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	0699      	lsls	r1, r3, #26
 80063ce:	bf42      	ittt	mi
 80063d0:	6833      	ldrmi	r3, [r6, #0]
 80063d2:	3302      	addmi	r3, #2
 80063d4:	6033      	strmi	r3, [r6, #0]
 80063d6:	6825      	ldr	r5, [r4, #0]
 80063d8:	f015 0506 	ands.w	r5, r5, #6
 80063dc:	d106      	bne.n	80063ec <_printf_common+0x48>
 80063de:	f104 0a19 	add.w	sl, r4, #25
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	6832      	ldr	r2, [r6, #0]
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	dc2b      	bgt.n	8006444 <_printf_common+0xa0>
 80063ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063f0:	1e13      	subs	r3, r2, #0
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	bf18      	it	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	0692      	lsls	r2, r2, #26
 80063fa:	d430      	bmi.n	800645e <_printf_common+0xba>
 80063fc:	4649      	mov	r1, r9
 80063fe:	4638      	mov	r0, r7
 8006400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006404:	47c0      	blx	r8
 8006406:	3001      	adds	r0, #1
 8006408:	d023      	beq.n	8006452 <_printf_common+0xae>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	6922      	ldr	r2, [r4, #16]
 800640e:	f003 0306 	and.w	r3, r3, #6
 8006412:	2b04      	cmp	r3, #4
 8006414:	bf14      	ite	ne
 8006416:	2500      	movne	r5, #0
 8006418:	6833      	ldreq	r3, [r6, #0]
 800641a:	f04f 0600 	mov.w	r6, #0
 800641e:	bf08      	it	eq
 8006420:	68e5      	ldreq	r5, [r4, #12]
 8006422:	f104 041a 	add.w	r4, r4, #26
 8006426:	bf08      	it	eq
 8006428:	1aed      	subeq	r5, r5, r3
 800642a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800642e:	bf08      	it	eq
 8006430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006434:	4293      	cmp	r3, r2
 8006436:	bfc4      	itt	gt
 8006438:	1a9b      	subgt	r3, r3, r2
 800643a:	18ed      	addgt	r5, r5, r3
 800643c:	42b5      	cmp	r5, r6
 800643e:	d11a      	bne.n	8006476 <_printf_common+0xd2>
 8006440:	2000      	movs	r0, #0
 8006442:	e008      	b.n	8006456 <_printf_common+0xb2>
 8006444:	2301      	movs	r3, #1
 8006446:	4652      	mov	r2, sl
 8006448:	4649      	mov	r1, r9
 800644a:	4638      	mov	r0, r7
 800644c:	47c0      	blx	r8
 800644e:	3001      	adds	r0, #1
 8006450:	d103      	bne.n	800645a <_printf_common+0xb6>
 8006452:	f04f 30ff 	mov.w	r0, #4294967295
 8006456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645a:	3501      	adds	r5, #1
 800645c:	e7c1      	b.n	80063e2 <_printf_common+0x3e>
 800645e:	2030      	movs	r0, #48	; 0x30
 8006460:	18e1      	adds	r1, r4, r3
 8006462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800646c:	4422      	add	r2, r4
 800646e:	3302      	adds	r3, #2
 8006470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006474:	e7c2      	b.n	80063fc <_printf_common+0x58>
 8006476:	2301      	movs	r3, #1
 8006478:	4622      	mov	r2, r4
 800647a:	4649      	mov	r1, r9
 800647c:	4638      	mov	r0, r7
 800647e:	47c0      	blx	r8
 8006480:	3001      	adds	r0, #1
 8006482:	d0e6      	beq.n	8006452 <_printf_common+0xae>
 8006484:	3601      	adds	r6, #1
 8006486:	e7d9      	b.n	800643c <_printf_common+0x98>

08006488 <_printf_i>:
 8006488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	7e0f      	ldrb	r7, [r1, #24]
 800648e:	4691      	mov	r9, r2
 8006490:	2f78      	cmp	r7, #120	; 0x78
 8006492:	4680      	mov	r8, r0
 8006494:	460c      	mov	r4, r1
 8006496:	469a      	mov	sl, r3
 8006498:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800649a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800649e:	d807      	bhi.n	80064b0 <_printf_i+0x28>
 80064a0:	2f62      	cmp	r7, #98	; 0x62
 80064a2:	d80a      	bhi.n	80064ba <_printf_i+0x32>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	f000 80d5 	beq.w	8006654 <_printf_i+0x1cc>
 80064aa:	2f58      	cmp	r7, #88	; 0x58
 80064ac:	f000 80c1 	beq.w	8006632 <_printf_i+0x1aa>
 80064b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064b8:	e03a      	b.n	8006530 <_printf_i+0xa8>
 80064ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064be:	2b15      	cmp	r3, #21
 80064c0:	d8f6      	bhi.n	80064b0 <_printf_i+0x28>
 80064c2:	a101      	add	r1, pc, #4	; (adr r1, 80064c8 <_printf_i+0x40>)
 80064c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006535 	.word	0x08006535
 80064d0:	080064b1 	.word	0x080064b1
 80064d4:	080064b1 	.word	0x080064b1
 80064d8:	080064b1 	.word	0x080064b1
 80064dc:	080064b1 	.word	0x080064b1
 80064e0:	08006535 	.word	0x08006535
 80064e4:	080064b1 	.word	0x080064b1
 80064e8:	080064b1 	.word	0x080064b1
 80064ec:	080064b1 	.word	0x080064b1
 80064f0:	080064b1 	.word	0x080064b1
 80064f4:	0800663b 	.word	0x0800663b
 80064f8:	08006561 	.word	0x08006561
 80064fc:	080065f5 	.word	0x080065f5
 8006500:	080064b1 	.word	0x080064b1
 8006504:	080064b1 	.word	0x080064b1
 8006508:	0800665d 	.word	0x0800665d
 800650c:	080064b1 	.word	0x080064b1
 8006510:	08006561 	.word	0x08006561
 8006514:	080064b1 	.word	0x080064b1
 8006518:	080064b1 	.word	0x080064b1
 800651c:	080065fd 	.word	0x080065fd
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	602a      	str	r2, [r5, #0]
 8006528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e0a0      	b.n	8006676 <_printf_i+0x1ee>
 8006534:	6820      	ldr	r0, [r4, #0]
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	0607      	lsls	r7, r0, #24
 800653a:	f103 0104 	add.w	r1, r3, #4
 800653e:	6029      	str	r1, [r5, #0]
 8006540:	d501      	bpl.n	8006546 <_printf_i+0xbe>
 8006542:	681e      	ldr	r6, [r3, #0]
 8006544:	e003      	b.n	800654e <_printf_i+0xc6>
 8006546:	0646      	lsls	r6, r0, #25
 8006548:	d5fb      	bpl.n	8006542 <_printf_i+0xba>
 800654a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800654e:	2e00      	cmp	r6, #0
 8006550:	da03      	bge.n	800655a <_printf_i+0xd2>
 8006552:	232d      	movs	r3, #45	; 0x2d
 8006554:	4276      	negs	r6, r6
 8006556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655a:	230a      	movs	r3, #10
 800655c:	4859      	ldr	r0, [pc, #356]	; (80066c4 <_printf_i+0x23c>)
 800655e:	e012      	b.n	8006586 <_printf_i+0xfe>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	1d19      	adds	r1, r3, #4
 8006566:	6029      	str	r1, [r5, #0]
 8006568:	0605      	lsls	r5, r0, #24
 800656a:	d501      	bpl.n	8006570 <_printf_i+0xe8>
 800656c:	681e      	ldr	r6, [r3, #0]
 800656e:	e002      	b.n	8006576 <_printf_i+0xee>
 8006570:	0641      	lsls	r1, r0, #25
 8006572:	d5fb      	bpl.n	800656c <_printf_i+0xe4>
 8006574:	881e      	ldrh	r6, [r3, #0]
 8006576:	2f6f      	cmp	r7, #111	; 0x6f
 8006578:	bf0c      	ite	eq
 800657a:	2308      	moveq	r3, #8
 800657c:	230a      	movne	r3, #10
 800657e:	4851      	ldr	r0, [pc, #324]	; (80066c4 <_printf_i+0x23c>)
 8006580:	2100      	movs	r1, #0
 8006582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006586:	6865      	ldr	r5, [r4, #4]
 8006588:	2d00      	cmp	r5, #0
 800658a:	bfa8      	it	ge
 800658c:	6821      	ldrge	r1, [r4, #0]
 800658e:	60a5      	str	r5, [r4, #8]
 8006590:	bfa4      	itt	ge
 8006592:	f021 0104 	bicge.w	r1, r1, #4
 8006596:	6021      	strge	r1, [r4, #0]
 8006598:	b90e      	cbnz	r6, 800659e <_printf_i+0x116>
 800659a:	2d00      	cmp	r5, #0
 800659c:	d04b      	beq.n	8006636 <_printf_i+0x1ae>
 800659e:	4615      	mov	r5, r2
 80065a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80065a4:	fb03 6711 	mls	r7, r3, r1, r6
 80065a8:	5dc7      	ldrb	r7, [r0, r7]
 80065aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065ae:	4637      	mov	r7, r6
 80065b0:	42bb      	cmp	r3, r7
 80065b2:	460e      	mov	r6, r1
 80065b4:	d9f4      	bls.n	80065a0 <_printf_i+0x118>
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d10b      	bne.n	80065d2 <_printf_i+0x14a>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	07de      	lsls	r6, r3, #31
 80065be:	d508      	bpl.n	80065d2 <_printf_i+0x14a>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	6861      	ldr	r1, [r4, #4]
 80065c4:	4299      	cmp	r1, r3
 80065c6:	bfde      	ittt	le
 80065c8:	2330      	movle	r3, #48	; 0x30
 80065ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065d2:	1b52      	subs	r2, r2, r5
 80065d4:	6122      	str	r2, [r4, #16]
 80065d6:	464b      	mov	r3, r9
 80065d8:	4621      	mov	r1, r4
 80065da:	4640      	mov	r0, r8
 80065dc:	f8cd a000 	str.w	sl, [sp]
 80065e0:	aa03      	add	r2, sp, #12
 80065e2:	f7ff fedf 	bl	80063a4 <_printf_common>
 80065e6:	3001      	adds	r0, #1
 80065e8:	d14a      	bne.n	8006680 <_printf_i+0x1f8>
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295
 80065ee:	b004      	add	sp, #16
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	f043 0320 	orr.w	r3, r3, #32
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	2778      	movs	r7, #120	; 0x78
 80065fe:	4832      	ldr	r0, [pc, #200]	; (80066c8 <_printf_i+0x240>)
 8006600:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	6829      	ldr	r1, [r5, #0]
 8006608:	061f      	lsls	r7, r3, #24
 800660a:	f851 6b04 	ldr.w	r6, [r1], #4
 800660e:	d402      	bmi.n	8006616 <_printf_i+0x18e>
 8006610:	065f      	lsls	r7, r3, #25
 8006612:	bf48      	it	mi
 8006614:	b2b6      	uxthmi	r6, r6
 8006616:	07df      	lsls	r7, r3, #31
 8006618:	bf48      	it	mi
 800661a:	f043 0320 	orrmi.w	r3, r3, #32
 800661e:	6029      	str	r1, [r5, #0]
 8006620:	bf48      	it	mi
 8006622:	6023      	strmi	r3, [r4, #0]
 8006624:	b91e      	cbnz	r6, 800662e <_printf_i+0x1a6>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	f023 0320 	bic.w	r3, r3, #32
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	2310      	movs	r3, #16
 8006630:	e7a6      	b.n	8006580 <_printf_i+0xf8>
 8006632:	4824      	ldr	r0, [pc, #144]	; (80066c4 <_printf_i+0x23c>)
 8006634:	e7e4      	b.n	8006600 <_printf_i+0x178>
 8006636:	4615      	mov	r5, r2
 8006638:	e7bd      	b.n	80065b6 <_printf_i+0x12e>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	6826      	ldr	r6, [r4, #0]
 800663e:	1d18      	adds	r0, r3, #4
 8006640:	6961      	ldr	r1, [r4, #20]
 8006642:	6028      	str	r0, [r5, #0]
 8006644:	0635      	lsls	r5, r6, #24
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	d501      	bpl.n	800664e <_printf_i+0x1c6>
 800664a:	6019      	str	r1, [r3, #0]
 800664c:	e002      	b.n	8006654 <_printf_i+0x1cc>
 800664e:	0670      	lsls	r0, r6, #25
 8006650:	d5fb      	bpl.n	800664a <_printf_i+0x1c2>
 8006652:	8019      	strh	r1, [r3, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	4615      	mov	r5, r2
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	e7bc      	b.n	80065d6 <_printf_i+0x14e>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	2100      	movs	r1, #0
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	602a      	str	r2, [r5, #0]
 8006664:	681d      	ldr	r5, [r3, #0]
 8006666:	6862      	ldr	r2, [r4, #4]
 8006668:	4628      	mov	r0, r5
 800666a:	f000 f9d4 	bl	8006a16 <memchr>
 800666e:	b108      	cbz	r0, 8006674 <_printf_i+0x1ec>
 8006670:	1b40      	subs	r0, r0, r5
 8006672:	6060      	str	r0, [r4, #4]
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	2300      	movs	r3, #0
 800667a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667e:	e7aa      	b.n	80065d6 <_printf_i+0x14e>
 8006680:	462a      	mov	r2, r5
 8006682:	4649      	mov	r1, r9
 8006684:	4640      	mov	r0, r8
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	47d0      	blx	sl
 800668a:	3001      	adds	r0, #1
 800668c:	d0ad      	beq.n	80065ea <_printf_i+0x162>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	079b      	lsls	r3, r3, #30
 8006692:	d413      	bmi.n	80066bc <_printf_i+0x234>
 8006694:	68e0      	ldr	r0, [r4, #12]
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	4298      	cmp	r0, r3
 800669a:	bfb8      	it	lt
 800669c:	4618      	movlt	r0, r3
 800669e:	e7a6      	b.n	80065ee <_printf_i+0x166>
 80066a0:	2301      	movs	r3, #1
 80066a2:	4632      	mov	r2, r6
 80066a4:	4649      	mov	r1, r9
 80066a6:	4640      	mov	r0, r8
 80066a8:	47d0      	blx	sl
 80066aa:	3001      	adds	r0, #1
 80066ac:	d09d      	beq.n	80065ea <_printf_i+0x162>
 80066ae:	3501      	adds	r5, #1
 80066b0:	68e3      	ldr	r3, [r4, #12]
 80066b2:	9903      	ldr	r1, [sp, #12]
 80066b4:	1a5b      	subs	r3, r3, r1
 80066b6:	42ab      	cmp	r3, r5
 80066b8:	dcf2      	bgt.n	80066a0 <_printf_i+0x218>
 80066ba:	e7eb      	b.n	8006694 <_printf_i+0x20c>
 80066bc:	2500      	movs	r5, #0
 80066be:	f104 0619 	add.w	r6, r4, #25
 80066c2:	e7f5      	b.n	80066b0 <_printf_i+0x228>
 80066c4:	08008b7c 	.word	0x08008b7c
 80066c8:	08008b8d 	.word	0x08008b8d

080066cc <std>:
 80066cc:	2300      	movs	r3, #0
 80066ce:	b510      	push	{r4, lr}
 80066d0:	4604      	mov	r4, r0
 80066d2:	e9c0 3300 	strd	r3, r3, [r0]
 80066d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066da:	6083      	str	r3, [r0, #8]
 80066dc:	8181      	strh	r1, [r0, #12]
 80066de:	6643      	str	r3, [r0, #100]	; 0x64
 80066e0:	81c2      	strh	r2, [r0, #14]
 80066e2:	6183      	str	r3, [r0, #24]
 80066e4:	4619      	mov	r1, r3
 80066e6:	2208      	movs	r2, #8
 80066e8:	305c      	adds	r0, #92	; 0x5c
 80066ea:	f000 f914 	bl	8006916 <memset>
 80066ee:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <std+0x58>)
 80066f0:	6224      	str	r4, [r4, #32]
 80066f2:	6263      	str	r3, [r4, #36]	; 0x24
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <std+0x5c>)
 80066f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <std+0x60>)
 80066fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <std+0x64>)
 80066fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <std+0x68>)
 8006702:	429c      	cmp	r4, r3
 8006704:	d006      	beq.n	8006714 <std+0x48>
 8006706:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800670a:	4294      	cmp	r4, r2
 800670c:	d002      	beq.n	8006714 <std+0x48>
 800670e:	33d0      	adds	r3, #208	; 0xd0
 8006710:	429c      	cmp	r4, r3
 8006712:	d105      	bne.n	8006720 <std+0x54>
 8006714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800671c:	f000 b978 	b.w	8006a10 <__retarget_lock_init_recursive>
 8006720:	bd10      	pop	{r4, pc}
 8006722:	bf00      	nop
 8006724:	08006891 	.word	0x08006891
 8006728:	080068b3 	.word	0x080068b3
 800672c:	080068eb 	.word	0x080068eb
 8006730:	0800690f 	.word	0x0800690f
 8006734:	2000053c 	.word	0x2000053c

08006738 <stdio_exit_handler>:
 8006738:	4a02      	ldr	r2, [pc, #8]	; (8006744 <stdio_exit_handler+0xc>)
 800673a:	4903      	ldr	r1, [pc, #12]	; (8006748 <stdio_exit_handler+0x10>)
 800673c:	4803      	ldr	r0, [pc, #12]	; (800674c <stdio_exit_handler+0x14>)
 800673e:	f000 b869 	b.w	8006814 <_fwalk_sglue>
 8006742:	bf00      	nop
 8006744:	2000001c 	.word	0x2000001c
 8006748:	080083ad 	.word	0x080083ad
 800674c:	20000028 	.word	0x20000028

08006750 <cleanup_stdio>:
 8006750:	6841      	ldr	r1, [r0, #4]
 8006752:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <cleanup_stdio+0x34>)
 8006754:	b510      	push	{r4, lr}
 8006756:	4299      	cmp	r1, r3
 8006758:	4604      	mov	r4, r0
 800675a:	d001      	beq.n	8006760 <cleanup_stdio+0x10>
 800675c:	f001 fe26 	bl	80083ac <_fflush_r>
 8006760:	68a1      	ldr	r1, [r4, #8]
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <cleanup_stdio+0x38>)
 8006764:	4299      	cmp	r1, r3
 8006766:	d002      	beq.n	800676e <cleanup_stdio+0x1e>
 8006768:	4620      	mov	r0, r4
 800676a:	f001 fe1f 	bl	80083ac <_fflush_r>
 800676e:	68e1      	ldr	r1, [r4, #12]
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <cleanup_stdio+0x3c>)
 8006772:	4299      	cmp	r1, r3
 8006774:	d004      	beq.n	8006780 <cleanup_stdio+0x30>
 8006776:	4620      	mov	r0, r4
 8006778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800677c:	f001 be16 	b.w	80083ac <_fflush_r>
 8006780:	bd10      	pop	{r4, pc}
 8006782:	bf00      	nop
 8006784:	2000053c 	.word	0x2000053c
 8006788:	200005a4 	.word	0x200005a4
 800678c:	2000060c 	.word	0x2000060c

08006790 <global_stdio_init.part.0>:
 8006790:	b510      	push	{r4, lr}
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <global_stdio_init.part.0+0x30>)
 8006794:	4c0b      	ldr	r4, [pc, #44]	; (80067c4 <global_stdio_init.part.0+0x34>)
 8006796:	4a0c      	ldr	r2, [pc, #48]	; (80067c8 <global_stdio_init.part.0+0x38>)
 8006798:	4620      	mov	r0, r4
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	2104      	movs	r1, #4
 800679e:	2200      	movs	r2, #0
 80067a0:	f7ff ff94 	bl	80066cc <std>
 80067a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067a8:	2201      	movs	r2, #1
 80067aa:	2109      	movs	r1, #9
 80067ac:	f7ff ff8e 	bl	80066cc <std>
 80067b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067b4:	2202      	movs	r2, #2
 80067b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ba:	2112      	movs	r1, #18
 80067bc:	f7ff bf86 	b.w	80066cc <std>
 80067c0:	20000674 	.word	0x20000674
 80067c4:	2000053c 	.word	0x2000053c
 80067c8:	08006739 	.word	0x08006739

080067cc <__sfp_lock_acquire>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__sfp_lock_acquire+0x8>)
 80067ce:	f000 b920 	b.w	8006a12 <__retarget_lock_acquire_recursive>
 80067d2:	bf00      	nop
 80067d4:	2000067d 	.word	0x2000067d

080067d8 <__sfp_lock_release>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__sfp_lock_release+0x8>)
 80067da:	f000 b91b 	b.w	8006a14 <__retarget_lock_release_recursive>
 80067de:	bf00      	nop
 80067e0:	2000067d 	.word	0x2000067d

080067e4 <__sinit>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	4604      	mov	r4, r0
 80067e8:	f7ff fff0 	bl	80067cc <__sfp_lock_acquire>
 80067ec:	6a23      	ldr	r3, [r4, #32]
 80067ee:	b11b      	cbz	r3, 80067f8 <__sinit+0x14>
 80067f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f4:	f7ff bff0 	b.w	80067d8 <__sfp_lock_release>
 80067f8:	4b04      	ldr	r3, [pc, #16]	; (800680c <__sinit+0x28>)
 80067fa:	6223      	str	r3, [r4, #32]
 80067fc:	4b04      	ldr	r3, [pc, #16]	; (8006810 <__sinit+0x2c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f5      	bne.n	80067f0 <__sinit+0xc>
 8006804:	f7ff ffc4 	bl	8006790 <global_stdio_init.part.0>
 8006808:	e7f2      	b.n	80067f0 <__sinit+0xc>
 800680a:	bf00      	nop
 800680c:	08006751 	.word	0x08006751
 8006810:	20000674 	.word	0x20000674

08006814 <_fwalk_sglue>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	4607      	mov	r7, r0
 800681a:	4688      	mov	r8, r1
 800681c:	4614      	mov	r4, r2
 800681e:	2600      	movs	r6, #0
 8006820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006824:	f1b9 0901 	subs.w	r9, r9, #1
 8006828:	d505      	bpl.n	8006836 <_fwalk_sglue+0x22>
 800682a:	6824      	ldr	r4, [r4, #0]
 800682c:	2c00      	cmp	r4, #0
 800682e:	d1f7      	bne.n	8006820 <_fwalk_sglue+0xc>
 8006830:	4630      	mov	r0, r6
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d907      	bls.n	800684c <_fwalk_sglue+0x38>
 800683c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006840:	3301      	adds	r3, #1
 8006842:	d003      	beq.n	800684c <_fwalk_sglue+0x38>
 8006844:	4629      	mov	r1, r5
 8006846:	4638      	mov	r0, r7
 8006848:	47c0      	blx	r8
 800684a:	4306      	orrs	r6, r0
 800684c:	3568      	adds	r5, #104	; 0x68
 800684e:	e7e9      	b.n	8006824 <_fwalk_sglue+0x10>

08006850 <siprintf>:
 8006850:	b40e      	push	{r1, r2, r3}
 8006852:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006856:	b500      	push	{lr}
 8006858:	b09c      	sub	sp, #112	; 0x70
 800685a:	ab1d      	add	r3, sp, #116	; 0x74
 800685c:	9002      	str	r0, [sp, #8]
 800685e:	9006      	str	r0, [sp, #24]
 8006860:	9107      	str	r1, [sp, #28]
 8006862:	9104      	str	r1, [sp, #16]
 8006864:	4808      	ldr	r0, [pc, #32]	; (8006888 <siprintf+0x38>)
 8006866:	4909      	ldr	r1, [pc, #36]	; (800688c <siprintf+0x3c>)
 8006868:	f853 2b04 	ldr.w	r2, [r3], #4
 800686c:	9105      	str	r1, [sp, #20]
 800686e:	6800      	ldr	r0, [r0, #0]
 8006870:	a902      	add	r1, sp, #8
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	f001 fc1a 	bl	80080ac <_svfiprintf_r>
 8006878:	2200      	movs	r2, #0
 800687a:	9b02      	ldr	r3, [sp, #8]
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	b01c      	add	sp, #112	; 0x70
 8006880:	f85d eb04 	ldr.w	lr, [sp], #4
 8006884:	b003      	add	sp, #12
 8006886:	4770      	bx	lr
 8006888:	20000074 	.word	0x20000074
 800688c:	ffff0208 	.word	0xffff0208

08006890 <__sread>:
 8006890:	b510      	push	{r4, lr}
 8006892:	460c      	mov	r4, r1
 8006894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006898:	f000 f86c 	bl	8006974 <_read_r>
 800689c:	2800      	cmp	r0, #0
 800689e:	bfab      	itete	ge
 80068a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068a2:	89a3      	ldrhlt	r3, [r4, #12]
 80068a4:	181b      	addge	r3, r3, r0
 80068a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068aa:	bfac      	ite	ge
 80068ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ae:	81a3      	strhlt	r3, [r4, #12]
 80068b0:	bd10      	pop	{r4, pc}

080068b2 <__swrite>:
 80068b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b6:	461f      	mov	r7, r3
 80068b8:	898b      	ldrh	r3, [r1, #12]
 80068ba:	4605      	mov	r5, r0
 80068bc:	05db      	lsls	r3, r3, #23
 80068be:	460c      	mov	r4, r1
 80068c0:	4616      	mov	r6, r2
 80068c2:	d505      	bpl.n	80068d0 <__swrite+0x1e>
 80068c4:	2302      	movs	r3, #2
 80068c6:	2200      	movs	r2, #0
 80068c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068cc:	f000 f840 	bl	8006950 <_lseek_r>
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	4632      	mov	r2, r6
 80068d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	4628      	mov	r0, r5
 80068dc:	463b      	mov	r3, r7
 80068de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068e6:	f000 b857 	b.w	8006998 <_write_r>

080068ea <__sseek>:
 80068ea:	b510      	push	{r4, lr}
 80068ec:	460c      	mov	r4, r1
 80068ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f2:	f000 f82d 	bl	8006950 <_lseek_r>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	bf15      	itete	ne
 80068fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80068fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006906:	81a3      	strheq	r3, [r4, #12]
 8006908:	bf18      	it	ne
 800690a:	81a3      	strhne	r3, [r4, #12]
 800690c:	bd10      	pop	{r4, pc}

0800690e <__sclose>:
 800690e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006912:	f000 b80d 	b.w	8006930 <_close_r>

08006916 <memset>:
 8006916:	4603      	mov	r3, r0
 8006918:	4402      	add	r2, r0
 800691a:	4293      	cmp	r3, r2
 800691c:	d100      	bne.n	8006920 <memset+0xa>
 800691e:	4770      	bx	lr
 8006920:	f803 1b01 	strb.w	r1, [r3], #1
 8006924:	e7f9      	b.n	800691a <memset+0x4>
	...

08006928 <_localeconv_r>:
 8006928:	4800      	ldr	r0, [pc, #0]	; (800692c <_localeconv_r+0x4>)
 800692a:	4770      	bx	lr
 800692c:	20000168 	.word	0x20000168

08006930 <_close_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	2300      	movs	r3, #0
 8006934:	4d05      	ldr	r5, [pc, #20]	; (800694c <_close_r+0x1c>)
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fb ff5a 	bl	80027f4 <_close>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_close_r+0x1a>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_close_r+0x1a>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000678 	.word	0x20000678

08006950 <_lseek_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4604      	mov	r4, r0
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	2200      	movs	r2, #0
 800695a:	4d05      	ldr	r5, [pc, #20]	; (8006970 <_lseek_r+0x20>)
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	f7fb ff6c 	bl	800283c <_lseek>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_lseek_r+0x1e>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_lseek_r+0x1e>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000678 	.word	0x20000678

08006974 <_read_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	4611      	mov	r1, r2
 800697c:	2200      	movs	r2, #0
 800697e:	4d05      	ldr	r5, [pc, #20]	; (8006994 <_read_r+0x20>)
 8006980:	602a      	str	r2, [r5, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f7fb fefd 	bl	8002782 <_read>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_read_r+0x1e>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_read_r+0x1e>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20000678 	.word	0x20000678

08006998 <_write_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	2200      	movs	r2, #0
 80069a2:	4d05      	ldr	r5, [pc, #20]	; (80069b8 <_write_r+0x20>)
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7fb ff08 	bl	80027bc <_write>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_write_r+0x1e>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_write_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	20000678 	.word	0x20000678

080069bc <__errno>:
 80069bc:	4b01      	ldr	r3, [pc, #4]	; (80069c4 <__errno+0x8>)
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000074 	.word	0x20000074

080069c8 <__libc_init_array>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	2600      	movs	r6, #0
 80069cc:	4d0c      	ldr	r5, [pc, #48]	; (8006a00 <__libc_init_array+0x38>)
 80069ce:	4c0d      	ldr	r4, [pc, #52]	; (8006a04 <__libc_init_array+0x3c>)
 80069d0:	1b64      	subs	r4, r4, r5
 80069d2:	10a4      	asrs	r4, r4, #2
 80069d4:	42a6      	cmp	r6, r4
 80069d6:	d109      	bne.n	80069ec <__libc_init_array+0x24>
 80069d8:	f002 f888 	bl	8008aec <_init>
 80069dc:	2600      	movs	r6, #0
 80069de:	4d0a      	ldr	r5, [pc, #40]	; (8006a08 <__libc_init_array+0x40>)
 80069e0:	4c0a      	ldr	r4, [pc, #40]	; (8006a0c <__libc_init_array+0x44>)
 80069e2:	1b64      	subs	r4, r4, r5
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	42a6      	cmp	r6, r4
 80069e8:	d105      	bne.n	80069f6 <__libc_init_array+0x2e>
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f0:	4798      	blx	r3
 80069f2:	3601      	adds	r6, #1
 80069f4:	e7ee      	b.n	80069d4 <__libc_init_array+0xc>
 80069f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fa:	4798      	blx	r3
 80069fc:	3601      	adds	r6, #1
 80069fe:	e7f2      	b.n	80069e6 <__libc_init_array+0x1e>
 8006a00:	08008edc 	.word	0x08008edc
 8006a04:	08008edc 	.word	0x08008edc
 8006a08:	08008edc 	.word	0x08008edc
 8006a0c:	08008ee0 	.word	0x08008ee0

08006a10 <__retarget_lock_init_recursive>:
 8006a10:	4770      	bx	lr

08006a12 <__retarget_lock_acquire_recursive>:
 8006a12:	4770      	bx	lr

08006a14 <__retarget_lock_release_recursive>:
 8006a14:	4770      	bx	lr

08006a16 <memchr>:
 8006a16:	4603      	mov	r3, r0
 8006a18:	b510      	push	{r4, lr}
 8006a1a:	b2c9      	uxtb	r1, r1
 8006a1c:	4402      	add	r2, r0
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	d101      	bne.n	8006a28 <memchr+0x12>
 8006a24:	2000      	movs	r0, #0
 8006a26:	e003      	b.n	8006a30 <memchr+0x1a>
 8006a28:	7804      	ldrb	r4, [r0, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	428c      	cmp	r4, r1
 8006a2e:	d1f6      	bne.n	8006a1e <memchr+0x8>
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <quorem>:
 8006a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a36:	6903      	ldr	r3, [r0, #16]
 8006a38:	690c      	ldr	r4, [r1, #16]
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	db7f      	blt.n	8006b40 <quorem+0x10e>
 8006a40:	3c01      	subs	r4, #1
 8006a42:	f100 0514 	add.w	r5, r0, #20
 8006a46:	f101 0814 	add.w	r8, r1, #20
 8006a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a68:	d331      	bcc.n	8006ace <quorem+0x9c>
 8006a6a:	f04f 0e00 	mov.w	lr, #0
 8006a6e:	4640      	mov	r0, r8
 8006a70:	46ac      	mov	ip, r5
 8006a72:	46f2      	mov	sl, lr
 8006a74:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a78:	b293      	uxth	r3, r2
 8006a7a:	fb06 e303 	mla	r3, r6, r3, lr
 8006a7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a82:	0c1a      	lsrs	r2, r3, #16
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	fb06 220e 	mla	r2, r6, lr, r2
 8006a8a:	ebaa 0303 	sub.w	r3, sl, r3
 8006a8e:	f8dc a000 	ldr.w	sl, [ip]
 8006a92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a96:	fa1f fa8a 	uxth.w	sl, sl
 8006a9a:	4453      	add	r3, sl
 8006a9c:	f8dc a000 	ldr.w	sl, [ip]
 8006aa0:	b292      	uxth	r2, r2
 8006aa2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006aa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ab0:	4581      	cmp	r9, r0
 8006ab2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ab6:	f84c 3b04 	str.w	r3, [ip], #4
 8006aba:	d2db      	bcs.n	8006a74 <quorem+0x42>
 8006abc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ac0:	b92b      	cbnz	r3, 8006ace <quorem+0x9c>
 8006ac2:	9b01      	ldr	r3, [sp, #4]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	461a      	mov	r2, r3
 8006aca:	d32d      	bcc.n	8006b28 <quorem+0xf6>
 8006acc:	613c      	str	r4, [r7, #16]
 8006ace:	4638      	mov	r0, r7
 8006ad0:	f001 f994 	bl	8007dfc <__mcmp>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	db23      	blt.n	8006b20 <quorem+0xee>
 8006ad8:	4629      	mov	r1, r5
 8006ada:	2000      	movs	r0, #0
 8006adc:	3601      	adds	r6, #1
 8006ade:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ae2:	f8d1 c000 	ldr.w	ip, [r1]
 8006ae6:	b293      	uxth	r3, r2
 8006ae8:	1ac3      	subs	r3, r0, r3
 8006aea:	0c12      	lsrs	r2, r2, #16
 8006aec:	fa1f f08c 	uxth.w	r0, ip
 8006af0:	4403      	add	r3, r0
 8006af2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006af6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b00:	45c1      	cmp	r9, r8
 8006b02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b06:	f841 3b04 	str.w	r3, [r1], #4
 8006b0a:	d2e8      	bcs.n	8006ade <quorem+0xac>
 8006b0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b14:	b922      	cbnz	r2, 8006b20 <quorem+0xee>
 8006b16:	3b04      	subs	r3, #4
 8006b18:	429d      	cmp	r5, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	d30a      	bcc.n	8006b34 <quorem+0x102>
 8006b1e:	613c      	str	r4, [r7, #16]
 8006b20:	4630      	mov	r0, r6
 8006b22:	b003      	add	sp, #12
 8006b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	3b04      	subs	r3, #4
 8006b2c:	2a00      	cmp	r2, #0
 8006b2e:	d1cd      	bne.n	8006acc <quorem+0x9a>
 8006b30:	3c01      	subs	r4, #1
 8006b32:	e7c8      	b.n	8006ac6 <quorem+0x94>
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	3b04      	subs	r3, #4
 8006b38:	2a00      	cmp	r2, #0
 8006b3a:	d1f0      	bne.n	8006b1e <quorem+0xec>
 8006b3c:	3c01      	subs	r4, #1
 8006b3e:	e7eb      	b.n	8006b18 <quorem+0xe6>
 8006b40:	2000      	movs	r0, #0
 8006b42:	e7ee      	b.n	8006b22 <quorem+0xf0>
 8006b44:	0000      	movs	r0, r0
	...

08006b48 <_dtoa_r>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	4616      	mov	r6, r2
 8006b4e:	461f      	mov	r7, r3
 8006b50:	69c4      	ldr	r4, [r0, #28]
 8006b52:	b099      	sub	sp, #100	; 0x64
 8006b54:	4605      	mov	r5, r0
 8006b56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006b5e:	b974      	cbnz	r4, 8006b7e <_dtoa_r+0x36>
 8006b60:	2010      	movs	r0, #16
 8006b62:	f000 fe1d 	bl	80077a0 <malloc>
 8006b66:	4602      	mov	r2, r0
 8006b68:	61e8      	str	r0, [r5, #28]
 8006b6a:	b920      	cbnz	r0, 8006b76 <_dtoa_r+0x2e>
 8006b6c:	21ef      	movs	r1, #239	; 0xef
 8006b6e:	4bac      	ldr	r3, [pc, #688]	; (8006e20 <_dtoa_r+0x2d8>)
 8006b70:	48ac      	ldr	r0, [pc, #688]	; (8006e24 <_dtoa_r+0x2dc>)
 8006b72:	f001 fc7b 	bl	800846c <__assert_func>
 8006b76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b7a:	6004      	str	r4, [r0, #0]
 8006b7c:	60c4      	str	r4, [r0, #12]
 8006b7e:	69eb      	ldr	r3, [r5, #28]
 8006b80:	6819      	ldr	r1, [r3, #0]
 8006b82:	b151      	cbz	r1, 8006b9a <_dtoa_r+0x52>
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	2301      	movs	r3, #1
 8006b88:	4093      	lsls	r3, r2
 8006b8a:	604a      	str	r2, [r1, #4]
 8006b8c:	608b      	str	r3, [r1, #8]
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 fefa 	bl	8007988 <_Bfree>
 8006b94:	2200      	movs	r2, #0
 8006b96:	69eb      	ldr	r3, [r5, #28]
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	1e3b      	subs	r3, r7, #0
 8006b9c:	bfaf      	iteee	ge
 8006b9e:	2300      	movge	r3, #0
 8006ba0:	2201      	movlt	r2, #1
 8006ba2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ba6:	9305      	strlt	r3, [sp, #20]
 8006ba8:	bfa8      	it	ge
 8006baa:	f8c8 3000 	strge.w	r3, [r8]
 8006bae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006bb2:	4b9d      	ldr	r3, [pc, #628]	; (8006e28 <_dtoa_r+0x2e0>)
 8006bb4:	bfb8      	it	lt
 8006bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8006bba:	ea33 0309 	bics.w	r3, r3, r9
 8006bbe:	d119      	bne.n	8006bf4 <_dtoa_r+0xac>
 8006bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bcc:	4333      	orrs	r3, r6
 8006bce:	f000 8589 	beq.w	80076e4 <_dtoa_r+0xb9c>
 8006bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bd4:	b953      	cbnz	r3, 8006bec <_dtoa_r+0xa4>
 8006bd6:	4b95      	ldr	r3, [pc, #596]	; (8006e2c <_dtoa_r+0x2e4>)
 8006bd8:	e023      	b.n	8006c22 <_dtoa_r+0xda>
 8006bda:	4b95      	ldr	r3, [pc, #596]	; (8006e30 <_dtoa_r+0x2e8>)
 8006bdc:	9303      	str	r3, [sp, #12]
 8006bde:	3308      	adds	r3, #8
 8006be0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	9803      	ldr	r0, [sp, #12]
 8006be6:	b019      	add	sp, #100	; 0x64
 8006be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bec:	4b8f      	ldr	r3, [pc, #572]	; (8006e2c <_dtoa_r+0x2e4>)
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	e7f5      	b.n	8006be0 <_dtoa_r+0x98>
 8006bf4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006bf8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c00:	2200      	movs	r2, #0
 8006c02:	2300      	movs	r3, #0
 8006c04:	f7f9 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8006c08:	4680      	mov	r8, r0
 8006c0a:	b160      	cbz	r0, 8006c26 <_dtoa_r+0xde>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8562 	beq.w	80076de <_dtoa_r+0xb96>
 8006c1a:	4b86      	ldr	r3, [pc, #536]	; (8006e34 <_dtoa_r+0x2ec>)
 8006c1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	9303      	str	r3, [sp, #12]
 8006c24:	e7de      	b.n	8006be4 <_dtoa_r+0x9c>
 8006c26:	ab16      	add	r3, sp, #88	; 0x58
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	ab17      	add	r3, sp, #92	; 0x5c
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4628      	mov	r0, r5
 8006c30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c34:	f001 f98a 	bl	8007f4c <__d2b>
 8006c38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	2c00      	cmp	r4, #0
 8006c40:	d07e      	beq.n	8006d40 <_dtoa_r+0x1f8>
 8006c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4b75      	ldr	r3, [pc, #468]	; (8006e38 <_dtoa_r+0x2f0>)
 8006c62:	f7f9 fa81 	bl	8000168 <__aeabi_dsub>
 8006c66:	a368      	add	r3, pc, #416	; (adr r3, 8006e08 <_dtoa_r+0x2c0>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fc34 	bl	80004d8 <__aeabi_dmul>
 8006c70:	a367      	add	r3, pc, #412	; (adr r3, 8006e10 <_dtoa_r+0x2c8>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f7f9 fa79 	bl	800016c <__adddf3>
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	460f      	mov	r7, r1
 8006c80:	f7f9 fbc0 	bl	8000404 <__aeabi_i2d>
 8006c84:	a364      	add	r3, pc, #400	; (adr r3, 8006e18 <_dtoa_r+0x2d0>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fc25 	bl	80004d8 <__aeabi_dmul>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 fa69 	bl	800016c <__adddf3>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	f7f9 fecb 	bl	8000a38 <__aeabi_d2iz>
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4683      	mov	fp, r0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 fe86 	bl	80009bc <__aeabi_dcmplt>
 8006cb0:	b148      	cbz	r0, 8006cc6 <_dtoa_r+0x17e>
 8006cb2:	4658      	mov	r0, fp
 8006cb4:	f7f9 fba6 	bl	8000404 <__aeabi_i2d>
 8006cb8:	4632      	mov	r2, r6
 8006cba:	463b      	mov	r3, r7
 8006cbc:	f7f9 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc0:	b908      	cbnz	r0, 8006cc6 <_dtoa_r+0x17e>
 8006cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cc6:	f1bb 0f16 	cmp.w	fp, #22
 8006cca:	d857      	bhi.n	8006d7c <_dtoa_r+0x234>
 8006ccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cd0:	4b5a      	ldr	r3, [pc, #360]	; (8006e3c <_dtoa_r+0x2f4>)
 8006cd2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 fe6f 	bl	80009bc <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d04e      	beq.n	8006d80 <_dtoa_r+0x238>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cec:	1b1b      	subs	r3, r3, r4
 8006cee:	1e5a      	subs	r2, r3, #1
 8006cf0:	bf46      	itte	mi
 8006cf2:	f1c3 0901 	rsbmi	r9, r3, #1
 8006cf6:	2300      	movmi	r3, #0
 8006cf8:	f04f 0900 	movpl.w	r9, #0
 8006cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cfe:	bf48      	it	mi
 8006d00:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d02:	f1bb 0f00 	cmp.w	fp, #0
 8006d06:	db3d      	blt.n	8006d84 <_dtoa_r+0x23c>
 8006d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006d0e:	445b      	add	r3, fp
 8006d10:	9309      	str	r3, [sp, #36]	; 0x24
 8006d12:	2300      	movs	r3, #0
 8006d14:	930a      	str	r3, [sp, #40]	; 0x28
 8006d16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d18:	2b09      	cmp	r3, #9
 8006d1a:	d867      	bhi.n	8006dec <_dtoa_r+0x2a4>
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	bfc4      	itt	gt
 8006d20:	3b04      	subgt	r3, #4
 8006d22:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d26:	bfc8      	it	gt
 8006d28:	2400      	movgt	r4, #0
 8006d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8006d2e:	bfd8      	it	le
 8006d30:	2401      	movle	r4, #1
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f200 8086 	bhi.w	8006e44 <_dtoa_r+0x2fc>
 8006d38:	e8df f003 	tbb	[pc, r3]
 8006d3c:	5637392c 	.word	0x5637392c
 8006d40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d44:	441c      	add	r4, r3
 8006d46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	bfc1      	itttt	gt
 8006d4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d52:	fa09 f903 	lslgt.w	r9, r9, r3
 8006d56:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006d5a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d5e:	bfd6      	itet	le
 8006d60:	f1c3 0320 	rsble	r3, r3, #32
 8006d64:	ea49 0003 	orrgt.w	r0, r9, r3
 8006d68:	fa06 f003 	lslle.w	r0, r6, r3
 8006d6c:	f7f9 fb3a 	bl	80003e4 <__aeabi_ui2d>
 8006d70:	2201      	movs	r2, #1
 8006d72:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d76:	3c01      	subs	r4, #1
 8006d78:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d7a:	e76f      	b.n	8006c5c <_dtoa_r+0x114>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e7b3      	b.n	8006ce8 <_dtoa_r+0x1a0>
 8006d80:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d82:	e7b2      	b.n	8006cea <_dtoa_r+0x1a2>
 8006d84:	f1cb 0300 	rsb	r3, fp, #0
 8006d88:	930a      	str	r3, [sp, #40]	; 0x28
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	eba9 090b 	sub.w	r9, r9, fp
 8006d90:	930e      	str	r3, [sp, #56]	; 0x38
 8006d92:	e7c0      	b.n	8006d16 <_dtoa_r+0x1ce>
 8006d94:	2300      	movs	r3, #0
 8006d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dc55      	bgt.n	8006e4a <_dtoa_r+0x302>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	461a      	mov	r2, r3
 8006da2:	9306      	str	r3, [sp, #24]
 8006da4:	9308      	str	r3, [sp, #32]
 8006da6:	9223      	str	r2, [sp, #140]	; 0x8c
 8006da8:	e00b      	b.n	8006dc2 <_dtoa_r+0x27a>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e7f3      	b.n	8006d96 <_dtoa_r+0x24e>
 8006dae:	2300      	movs	r3, #0
 8006db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006db4:	445b      	add	r3, fp
 8006db6:	9306      	str	r3, [sp, #24]
 8006db8:	3301      	adds	r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	9308      	str	r3, [sp, #32]
 8006dbe:	bfb8      	it	lt
 8006dc0:	2301      	movlt	r3, #1
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	69e8      	ldr	r0, [r5, #28]
 8006dc8:	f102 0614 	add.w	r6, r2, #20
 8006dcc:	429e      	cmp	r6, r3
 8006dce:	d940      	bls.n	8006e52 <_dtoa_r+0x30a>
 8006dd0:	6041      	str	r1, [r0, #4]
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 fd98 	bl	8007908 <_Balloc>
 8006dd8:	9003      	str	r0, [sp, #12]
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d13c      	bne.n	8006e58 <_dtoa_r+0x310>
 8006dde:	4602      	mov	r2, r0
 8006de0:	f240 11af 	movw	r1, #431	; 0x1af
 8006de4:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <_dtoa_r+0x2f8>)
 8006de6:	e6c3      	b.n	8006b70 <_dtoa_r+0x28>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e7e1      	b.n	8006db0 <_dtoa_r+0x268>
 8006dec:	2401      	movs	r4, #1
 8006dee:	2300      	movs	r3, #0
 8006df0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006df2:	9322      	str	r3, [sp, #136]	; 0x88
 8006df4:	f04f 33ff 	mov.w	r3, #4294967295
 8006df8:	2200      	movs	r2, #0
 8006dfa:	9306      	str	r3, [sp, #24]
 8006dfc:	9308      	str	r3, [sp, #32]
 8006dfe:	2312      	movs	r3, #18
 8006e00:	e7d1      	b.n	8006da6 <_dtoa_r+0x25e>
 8006e02:	bf00      	nop
 8006e04:	f3af 8000 	nop.w
 8006e08:	636f4361 	.word	0x636f4361
 8006e0c:	3fd287a7 	.word	0x3fd287a7
 8006e10:	8b60c8b3 	.word	0x8b60c8b3
 8006e14:	3fc68a28 	.word	0x3fc68a28
 8006e18:	509f79fb 	.word	0x509f79fb
 8006e1c:	3fd34413 	.word	0x3fd34413
 8006e20:	08008bab 	.word	0x08008bab
 8006e24:	08008bc2 	.word	0x08008bc2
 8006e28:	7ff00000 	.word	0x7ff00000
 8006e2c:	08008ba7 	.word	0x08008ba7
 8006e30:	08008b9e 	.word	0x08008b9e
 8006e34:	08008b7b 	.word	0x08008b7b
 8006e38:	3ff80000 	.word	0x3ff80000
 8006e3c:	08008cb0 	.word	0x08008cb0
 8006e40:	08008c1a 	.word	0x08008c1a
 8006e44:	2301      	movs	r3, #1
 8006e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e48:	e7d4      	b.n	8006df4 <_dtoa_r+0x2ac>
 8006e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e4c:	9306      	str	r3, [sp, #24]
 8006e4e:	9308      	str	r3, [sp, #32]
 8006e50:	e7b7      	b.n	8006dc2 <_dtoa_r+0x27a>
 8006e52:	3101      	adds	r1, #1
 8006e54:	0052      	lsls	r2, r2, #1
 8006e56:	e7b7      	b.n	8006dc8 <_dtoa_r+0x280>
 8006e58:	69eb      	ldr	r3, [r5, #28]
 8006e5a:	9a03      	ldr	r2, [sp, #12]
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	9b08      	ldr	r3, [sp, #32]
 8006e60:	2b0e      	cmp	r3, #14
 8006e62:	f200 80a8 	bhi.w	8006fb6 <_dtoa_r+0x46e>
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	f000 80a5 	beq.w	8006fb6 <_dtoa_r+0x46e>
 8006e6c:	f1bb 0f00 	cmp.w	fp, #0
 8006e70:	dd34      	ble.n	8006edc <_dtoa_r+0x394>
 8006e72:	4b9a      	ldr	r3, [pc, #616]	; (80070dc <_dtoa_r+0x594>)
 8006e74:	f00b 020f 	and.w	r2, fp, #15
 8006e78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e88:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006e8c:	d016      	beq.n	8006ebc <_dtoa_r+0x374>
 8006e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e92:	4b93      	ldr	r3, [pc, #588]	; (80070e0 <_dtoa_r+0x598>)
 8006e94:	2703      	movs	r7, #3
 8006e96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e9a:	f7f9 fc47 	bl	800072c <__aeabi_ddiv>
 8006e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ea2:	f004 040f 	and.w	r4, r4, #15
 8006ea6:	4e8e      	ldr	r6, [pc, #568]	; (80070e0 <_dtoa_r+0x598>)
 8006ea8:	b954      	cbnz	r4, 8006ec0 <_dtoa_r+0x378>
 8006eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb2:	f7f9 fc3b 	bl	800072c <__aeabi_ddiv>
 8006eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eba:	e029      	b.n	8006f10 <_dtoa_r+0x3c8>
 8006ebc:	2702      	movs	r7, #2
 8006ebe:	e7f2      	b.n	8006ea6 <_dtoa_r+0x35e>
 8006ec0:	07e1      	lsls	r1, r4, #31
 8006ec2:	d508      	bpl.n	8006ed6 <_dtoa_r+0x38e>
 8006ec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ec8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ecc:	f7f9 fb04 	bl	80004d8 <__aeabi_dmul>
 8006ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ed4:	3701      	adds	r7, #1
 8006ed6:	1064      	asrs	r4, r4, #1
 8006ed8:	3608      	adds	r6, #8
 8006eda:	e7e5      	b.n	8006ea8 <_dtoa_r+0x360>
 8006edc:	f000 80a5 	beq.w	800702a <_dtoa_r+0x4e2>
 8006ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ee4:	f1cb 0400 	rsb	r4, fp, #0
 8006ee8:	4b7c      	ldr	r3, [pc, #496]	; (80070dc <_dtoa_r+0x594>)
 8006eea:	f004 020f 	and.w	r2, r4, #15
 8006eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 faef 	bl	80004d8 <__aeabi_dmul>
 8006efa:	2702      	movs	r7, #2
 8006efc:	2300      	movs	r3, #0
 8006efe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f02:	4e77      	ldr	r6, [pc, #476]	; (80070e0 <_dtoa_r+0x598>)
 8006f04:	1124      	asrs	r4, r4, #4
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	f040 8084 	bne.w	8007014 <_dtoa_r+0x4cc>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1d2      	bne.n	8006eb6 <_dtoa_r+0x36e>
 8006f10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8087 	beq.w	800702e <_dtoa_r+0x4e6>
 8006f20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f24:	2200      	movs	r2, #0
 8006f26:	4b6f      	ldr	r3, [pc, #444]	; (80070e4 <_dtoa_r+0x59c>)
 8006f28:	f7f9 fd48 	bl	80009bc <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d07e      	beq.n	800702e <_dtoa_r+0x4e6>
 8006f30:	9b08      	ldr	r3, [sp, #32]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d07b      	beq.n	800702e <_dtoa_r+0x4e6>
 8006f36:	9b06      	ldr	r3, [sp, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	dd38      	ble.n	8006fae <_dtoa_r+0x466>
 8006f3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f40:	2200      	movs	r2, #0
 8006f42:	4b69      	ldr	r3, [pc, #420]	; (80070e8 <_dtoa_r+0x5a0>)
 8006f44:	f7f9 fac8 	bl	80004d8 <__aeabi_dmul>
 8006f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f4c:	9c06      	ldr	r4, [sp, #24]
 8006f4e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006f52:	3701      	adds	r7, #1
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7f9 fa55 	bl	8000404 <__aeabi_i2d>
 8006f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f5e:	f7f9 fabb 	bl	80004d8 <__aeabi_dmul>
 8006f62:	2200      	movs	r2, #0
 8006f64:	4b61      	ldr	r3, [pc, #388]	; (80070ec <_dtoa_r+0x5a4>)
 8006f66:	f7f9 f901 	bl	800016c <__adddf3>
 8006f6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f72:	9611      	str	r6, [sp, #68]	; 0x44
 8006f74:	2c00      	cmp	r4, #0
 8006f76:	d15d      	bne.n	8007034 <_dtoa_r+0x4ec>
 8006f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4b5c      	ldr	r3, [pc, #368]	; (80070f0 <_dtoa_r+0x5a8>)
 8006f80:	f7f9 f8f2 	bl	8000168 <__aeabi_dsub>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f90:	f7f9 fd32 	bl	80009f8 <__aeabi_dcmpgt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 8295 	bne.w	80074c4 <_dtoa_r+0x97c>
 8006f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fa0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006fa4:	f7f9 fd0a 	bl	80009bc <__aeabi_dcmplt>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f040 8289 	bne.w	80074c0 <_dtoa_r+0x978>
 8006fae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006fb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f2c0 8151 	blt.w	8007260 <_dtoa_r+0x718>
 8006fbe:	f1bb 0f0e 	cmp.w	fp, #14
 8006fc2:	f300 814d 	bgt.w	8007260 <_dtoa_r+0x718>
 8006fc6:	4b45      	ldr	r3, [pc, #276]	; (80070dc <_dtoa_r+0x594>)
 8006fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fd0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006fd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f280 80da 	bge.w	8007190 <_dtoa_r+0x648>
 8006fdc:	9b08      	ldr	r3, [sp, #32]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f300 80d6 	bgt.w	8007190 <_dtoa_r+0x648>
 8006fe4:	f040 826b 	bne.w	80074be <_dtoa_r+0x976>
 8006fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fec:	2200      	movs	r2, #0
 8006fee:	4b40      	ldr	r3, [pc, #256]	; (80070f0 <_dtoa_r+0x5a8>)
 8006ff0:	f7f9 fa72 	bl	80004d8 <__aeabi_dmul>
 8006ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff8:	f7f9 fcf4 	bl	80009e4 <__aeabi_dcmpge>
 8006ffc:	9c08      	ldr	r4, [sp, #32]
 8006ffe:	4626      	mov	r6, r4
 8007000:	2800      	cmp	r0, #0
 8007002:	f040 8241 	bne.w	8007488 <_dtoa_r+0x940>
 8007006:	2331      	movs	r3, #49	; 0x31
 8007008:	9f03      	ldr	r7, [sp, #12]
 800700a:	f10b 0b01 	add.w	fp, fp, #1
 800700e:	f807 3b01 	strb.w	r3, [r7], #1
 8007012:	e23d      	b.n	8007490 <_dtoa_r+0x948>
 8007014:	07e2      	lsls	r2, r4, #31
 8007016:	d505      	bpl.n	8007024 <_dtoa_r+0x4dc>
 8007018:	e9d6 2300 	ldrd	r2, r3, [r6]
 800701c:	f7f9 fa5c 	bl	80004d8 <__aeabi_dmul>
 8007020:	2301      	movs	r3, #1
 8007022:	3701      	adds	r7, #1
 8007024:	1064      	asrs	r4, r4, #1
 8007026:	3608      	adds	r6, #8
 8007028:	e76d      	b.n	8006f06 <_dtoa_r+0x3be>
 800702a:	2702      	movs	r7, #2
 800702c:	e770      	b.n	8006f10 <_dtoa_r+0x3c8>
 800702e:	46d8      	mov	r8, fp
 8007030:	9c08      	ldr	r4, [sp, #32]
 8007032:	e78f      	b.n	8006f54 <_dtoa_r+0x40c>
 8007034:	9903      	ldr	r1, [sp, #12]
 8007036:	4b29      	ldr	r3, [pc, #164]	; (80070dc <_dtoa_r+0x594>)
 8007038:	4421      	add	r1, r4
 800703a:	9112      	str	r1, [sp, #72]	; 0x48
 800703c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800703e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007042:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007046:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800704a:	2900      	cmp	r1, #0
 800704c:	d054      	beq.n	80070f8 <_dtoa_r+0x5b0>
 800704e:	2000      	movs	r0, #0
 8007050:	4928      	ldr	r1, [pc, #160]	; (80070f4 <_dtoa_r+0x5ac>)
 8007052:	f7f9 fb6b 	bl	800072c <__aeabi_ddiv>
 8007056:	463b      	mov	r3, r7
 8007058:	4632      	mov	r2, r6
 800705a:	f7f9 f885 	bl	8000168 <__aeabi_dsub>
 800705e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007062:	9f03      	ldr	r7, [sp, #12]
 8007064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007068:	f7f9 fce6 	bl	8000a38 <__aeabi_d2iz>
 800706c:	4604      	mov	r4, r0
 800706e:	f7f9 f9c9 	bl	8000404 <__aeabi_i2d>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800707a:	f7f9 f875 	bl	8000168 <__aeabi_dsub>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	3430      	adds	r4, #48	; 0x30
 8007084:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800708c:	f807 4b01 	strb.w	r4, [r7], #1
 8007090:	f7f9 fc94 	bl	80009bc <__aeabi_dcmplt>
 8007094:	2800      	cmp	r0, #0
 8007096:	d173      	bne.n	8007180 <_dtoa_r+0x638>
 8007098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800709c:	2000      	movs	r0, #0
 800709e:	4911      	ldr	r1, [pc, #68]	; (80070e4 <_dtoa_r+0x59c>)
 80070a0:	f7f9 f862 	bl	8000168 <__aeabi_dsub>
 80070a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070a8:	f7f9 fc88 	bl	80009bc <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f040 80b6 	bne.w	800721e <_dtoa_r+0x6d6>
 80070b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070b4:	429f      	cmp	r7, r3
 80070b6:	f43f af7a 	beq.w	8006fae <_dtoa_r+0x466>
 80070ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070be:	2200      	movs	r2, #0
 80070c0:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <_dtoa_r+0x5a0>)
 80070c2:	f7f9 fa09 	bl	80004d8 <__aeabi_dmul>
 80070c6:	2200      	movs	r2, #0
 80070c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <_dtoa_r+0x5a0>)
 80070d2:	f7f9 fa01 	bl	80004d8 <__aeabi_dmul>
 80070d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070da:	e7c3      	b.n	8007064 <_dtoa_r+0x51c>
 80070dc:	08008cb0 	.word	0x08008cb0
 80070e0:	08008c88 	.word	0x08008c88
 80070e4:	3ff00000 	.word	0x3ff00000
 80070e8:	40240000 	.word	0x40240000
 80070ec:	401c0000 	.word	0x401c0000
 80070f0:	40140000 	.word	0x40140000
 80070f4:	3fe00000 	.word	0x3fe00000
 80070f8:	4630      	mov	r0, r6
 80070fa:	4639      	mov	r1, r7
 80070fc:	f7f9 f9ec 	bl	80004d8 <__aeabi_dmul>
 8007100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007102:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007106:	9c03      	ldr	r4, [sp, #12]
 8007108:	9314      	str	r3, [sp, #80]	; 0x50
 800710a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800710e:	f7f9 fc93 	bl	8000a38 <__aeabi_d2iz>
 8007112:	9015      	str	r0, [sp, #84]	; 0x54
 8007114:	f7f9 f976 	bl	8000404 <__aeabi_i2d>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007120:	f7f9 f822 	bl	8000168 <__aeabi_dsub>
 8007124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007126:	4606      	mov	r6, r0
 8007128:	3330      	adds	r3, #48	; 0x30
 800712a:	f804 3b01 	strb.w	r3, [r4], #1
 800712e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007130:	460f      	mov	r7, r1
 8007132:	429c      	cmp	r4, r3
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	d124      	bne.n	8007184 <_dtoa_r+0x63c>
 800713a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800713e:	4baf      	ldr	r3, [pc, #700]	; (80073fc <_dtoa_r+0x8b4>)
 8007140:	f7f9 f814 	bl	800016c <__adddf3>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4630      	mov	r0, r6
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 fc54 	bl	80009f8 <__aeabi_dcmpgt>
 8007150:	2800      	cmp	r0, #0
 8007152:	d163      	bne.n	800721c <_dtoa_r+0x6d4>
 8007154:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007158:	2000      	movs	r0, #0
 800715a:	49a8      	ldr	r1, [pc, #672]	; (80073fc <_dtoa_r+0x8b4>)
 800715c:	f7f9 f804 	bl	8000168 <__aeabi_dsub>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fc28 	bl	80009bc <__aeabi_dcmplt>
 800716c:	2800      	cmp	r0, #0
 800716e:	f43f af1e 	beq.w	8006fae <_dtoa_r+0x466>
 8007172:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007174:	1e7b      	subs	r3, r7, #1
 8007176:	9314      	str	r3, [sp, #80]	; 0x50
 8007178:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800717c:	2b30      	cmp	r3, #48	; 0x30
 800717e:	d0f8      	beq.n	8007172 <_dtoa_r+0x62a>
 8007180:	46c3      	mov	fp, r8
 8007182:	e03b      	b.n	80071fc <_dtoa_r+0x6b4>
 8007184:	4b9e      	ldr	r3, [pc, #632]	; (8007400 <_dtoa_r+0x8b8>)
 8007186:	f7f9 f9a7 	bl	80004d8 <__aeabi_dmul>
 800718a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800718e:	e7bc      	b.n	800710a <_dtoa_r+0x5c2>
 8007190:	9f03      	ldr	r7, [sp, #12]
 8007192:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800719a:	4640      	mov	r0, r8
 800719c:	4649      	mov	r1, r9
 800719e:	f7f9 fac5 	bl	800072c <__aeabi_ddiv>
 80071a2:	f7f9 fc49 	bl	8000a38 <__aeabi_d2iz>
 80071a6:	4604      	mov	r4, r0
 80071a8:	f7f9 f92c 	bl	8000404 <__aeabi_i2d>
 80071ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071b0:	f7f9 f992 	bl	80004d8 <__aeabi_dmul>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4640      	mov	r0, r8
 80071ba:	4649      	mov	r1, r9
 80071bc:	f7f8 ffd4 	bl	8000168 <__aeabi_dsub>
 80071c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80071c4:	f807 6b01 	strb.w	r6, [r7], #1
 80071c8:	9e03      	ldr	r6, [sp, #12]
 80071ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80071ce:	1bbe      	subs	r6, r7, r6
 80071d0:	45b4      	cmp	ip, r6
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	d136      	bne.n	8007246 <_dtoa_r+0x6fe>
 80071d8:	f7f8 ffc8 	bl	800016c <__adddf3>
 80071dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	f7f9 fc08 	bl	80009f8 <__aeabi_dcmpgt>
 80071e8:	bb58      	cbnz	r0, 8007242 <_dtoa_r+0x6fa>
 80071ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071ee:	4640      	mov	r0, r8
 80071f0:	4649      	mov	r1, r9
 80071f2:	f7f9 fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80071f6:	b108      	cbz	r0, 80071fc <_dtoa_r+0x6b4>
 80071f8:	07e3      	lsls	r3, r4, #31
 80071fa:	d422      	bmi.n	8007242 <_dtoa_r+0x6fa>
 80071fc:	4651      	mov	r1, sl
 80071fe:	4628      	mov	r0, r5
 8007200:	f000 fbc2 	bl	8007988 <_Bfree>
 8007204:	2300      	movs	r3, #0
 8007206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007208:	703b      	strb	r3, [r7, #0]
 800720a:	f10b 0301 	add.w	r3, fp, #1
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007212:	2b00      	cmp	r3, #0
 8007214:	f43f ace6 	beq.w	8006be4 <_dtoa_r+0x9c>
 8007218:	601f      	str	r7, [r3, #0]
 800721a:	e4e3      	b.n	8006be4 <_dtoa_r+0x9c>
 800721c:	4627      	mov	r7, r4
 800721e:	463b      	mov	r3, r7
 8007220:	461f      	mov	r7, r3
 8007222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007226:	2a39      	cmp	r2, #57	; 0x39
 8007228:	d107      	bne.n	800723a <_dtoa_r+0x6f2>
 800722a:	9a03      	ldr	r2, [sp, #12]
 800722c:	429a      	cmp	r2, r3
 800722e:	d1f7      	bne.n	8007220 <_dtoa_r+0x6d8>
 8007230:	2230      	movs	r2, #48	; 0x30
 8007232:	9903      	ldr	r1, [sp, #12]
 8007234:	f108 0801 	add.w	r8, r8, #1
 8007238:	700a      	strb	r2, [r1, #0]
 800723a:	781a      	ldrb	r2, [r3, #0]
 800723c:	3201      	adds	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e79e      	b.n	8007180 <_dtoa_r+0x638>
 8007242:	46d8      	mov	r8, fp
 8007244:	e7eb      	b.n	800721e <_dtoa_r+0x6d6>
 8007246:	2200      	movs	r2, #0
 8007248:	4b6d      	ldr	r3, [pc, #436]	; (8007400 <_dtoa_r+0x8b8>)
 800724a:	f7f9 f945 	bl	80004d8 <__aeabi_dmul>
 800724e:	2200      	movs	r2, #0
 8007250:	2300      	movs	r3, #0
 8007252:	4680      	mov	r8, r0
 8007254:	4689      	mov	r9, r1
 8007256:	f7f9 fba7 	bl	80009a8 <__aeabi_dcmpeq>
 800725a:	2800      	cmp	r0, #0
 800725c:	d09b      	beq.n	8007196 <_dtoa_r+0x64e>
 800725e:	e7cd      	b.n	80071fc <_dtoa_r+0x6b4>
 8007260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007262:	2a00      	cmp	r2, #0
 8007264:	f000 80c4 	beq.w	80073f0 <_dtoa_r+0x8a8>
 8007268:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800726a:	2a01      	cmp	r2, #1
 800726c:	f300 80a8 	bgt.w	80073c0 <_dtoa_r+0x878>
 8007270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007272:	2a00      	cmp	r2, #0
 8007274:	f000 80a0 	beq.w	80073b8 <_dtoa_r+0x870>
 8007278:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800727c:	464f      	mov	r7, r9
 800727e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007282:	2101      	movs	r1, #1
 8007284:	441a      	add	r2, r3
 8007286:	4628      	mov	r0, r5
 8007288:	4499      	add	r9, r3
 800728a:	9209      	str	r2, [sp, #36]	; 0x24
 800728c:	f000 fc32 	bl	8007af4 <__i2b>
 8007290:	4606      	mov	r6, r0
 8007292:	b15f      	cbz	r7, 80072ac <_dtoa_r+0x764>
 8007294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	dd08      	ble.n	80072ac <_dtoa_r+0x764>
 800729a:	42bb      	cmp	r3, r7
 800729c:	bfa8      	it	ge
 800729e:	463b      	movge	r3, r7
 80072a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a2:	eba9 0903 	sub.w	r9, r9, r3
 80072a6:	1aff      	subs	r7, r7, r3
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	9309      	str	r3, [sp, #36]	; 0x24
 80072ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ae:	b1f3      	cbz	r3, 80072ee <_dtoa_r+0x7a6>
 80072b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80a0 	beq.w	80073f8 <_dtoa_r+0x8b0>
 80072b8:	2c00      	cmp	r4, #0
 80072ba:	dd10      	ble.n	80072de <_dtoa_r+0x796>
 80072bc:	4631      	mov	r1, r6
 80072be:	4622      	mov	r2, r4
 80072c0:	4628      	mov	r0, r5
 80072c2:	f000 fcd5 	bl	8007c70 <__pow5mult>
 80072c6:	4652      	mov	r2, sl
 80072c8:	4601      	mov	r1, r0
 80072ca:	4606      	mov	r6, r0
 80072cc:	4628      	mov	r0, r5
 80072ce:	f000 fc27 	bl	8007b20 <__multiply>
 80072d2:	4680      	mov	r8, r0
 80072d4:	4651      	mov	r1, sl
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 fb56 	bl	8007988 <_Bfree>
 80072dc:	46c2      	mov	sl, r8
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	1b1a      	subs	r2, r3, r4
 80072e2:	d004      	beq.n	80072ee <_dtoa_r+0x7a6>
 80072e4:	4651      	mov	r1, sl
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fcc2 	bl	8007c70 <__pow5mult>
 80072ec:	4682      	mov	sl, r0
 80072ee:	2101      	movs	r1, #1
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 fbff 	bl	8007af4 <__i2b>
 80072f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072f8:	4604      	mov	r4, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f340 8082 	ble.w	8007404 <_dtoa_r+0x8bc>
 8007300:	461a      	mov	r2, r3
 8007302:	4601      	mov	r1, r0
 8007304:	4628      	mov	r0, r5
 8007306:	f000 fcb3 	bl	8007c70 <__pow5mult>
 800730a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800730c:	4604      	mov	r4, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	dd7b      	ble.n	800740a <_dtoa_r+0x8c2>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800731c:	6918      	ldr	r0, [r3, #16]
 800731e:	f000 fb9b 	bl	8007a58 <__hi0bits>
 8007322:	f1c0 0020 	rsb	r0, r0, #32
 8007326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007328:	4418      	add	r0, r3
 800732a:	f010 001f 	ands.w	r0, r0, #31
 800732e:	f000 8092 	beq.w	8007456 <_dtoa_r+0x90e>
 8007332:	f1c0 0320 	rsb	r3, r0, #32
 8007336:	2b04      	cmp	r3, #4
 8007338:	f340 8085 	ble.w	8007446 <_dtoa_r+0x8fe>
 800733c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733e:	f1c0 001c 	rsb	r0, r0, #28
 8007342:	4403      	add	r3, r0
 8007344:	4481      	add	r9, r0
 8007346:	4407      	add	r7, r0
 8007348:	9309      	str	r3, [sp, #36]	; 0x24
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	dd05      	ble.n	800735c <_dtoa_r+0x814>
 8007350:	4651      	mov	r1, sl
 8007352:	464a      	mov	r2, r9
 8007354:	4628      	mov	r0, r5
 8007356:	f000 fce5 	bl	8007d24 <__lshift>
 800735a:	4682      	mov	sl, r0
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	dd05      	ble.n	800736e <_dtoa_r+0x826>
 8007362:	4621      	mov	r1, r4
 8007364:	461a      	mov	r2, r3
 8007366:	4628      	mov	r0, r5
 8007368:	f000 fcdc 	bl	8007d24 <__lshift>
 800736c:	4604      	mov	r4, r0
 800736e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d072      	beq.n	800745a <_dtoa_r+0x912>
 8007374:	4621      	mov	r1, r4
 8007376:	4650      	mov	r0, sl
 8007378:	f000 fd40 	bl	8007dfc <__mcmp>
 800737c:	2800      	cmp	r0, #0
 800737e:	da6c      	bge.n	800745a <_dtoa_r+0x912>
 8007380:	2300      	movs	r3, #0
 8007382:	4651      	mov	r1, sl
 8007384:	220a      	movs	r2, #10
 8007386:	4628      	mov	r0, r5
 8007388:	f000 fb20 	bl	80079cc <__multadd>
 800738c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738e:	4682      	mov	sl, r0
 8007390:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 81ac 	beq.w	80076f2 <_dtoa_r+0xbaa>
 800739a:	2300      	movs	r3, #0
 800739c:	4631      	mov	r1, r6
 800739e:	220a      	movs	r2, #10
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 fb13 	bl	80079cc <__multadd>
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	4606      	mov	r6, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f300 8093 	bgt.w	80074d6 <_dtoa_r+0x98e>
 80073b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	dc59      	bgt.n	800746a <_dtoa_r+0x922>
 80073b6:	e08e      	b.n	80074d6 <_dtoa_r+0x98e>
 80073b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073be:	e75d      	b.n	800727c <_dtoa_r+0x734>
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	1e5c      	subs	r4, r3, #1
 80073c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	bfbf      	itttt	lt
 80073ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80073ce:	1ae3      	sublt	r3, r4, r3
 80073d0:	18d2      	addlt	r2, r2, r3
 80073d2:	bfa8      	it	ge
 80073d4:	1b1c      	subge	r4, r3, r4
 80073d6:	9b08      	ldr	r3, [sp, #32]
 80073d8:	bfbe      	ittt	lt
 80073da:	940a      	strlt	r4, [sp, #40]	; 0x28
 80073dc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80073de:	2400      	movlt	r4, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfb5      	itete	lt
 80073e4:	eba9 0703 	sublt.w	r7, r9, r3
 80073e8:	464f      	movge	r7, r9
 80073ea:	2300      	movlt	r3, #0
 80073ec:	9b08      	ldrge	r3, [sp, #32]
 80073ee:	e747      	b.n	8007280 <_dtoa_r+0x738>
 80073f0:	464f      	mov	r7, r9
 80073f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80073f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073f6:	e74c      	b.n	8007292 <_dtoa_r+0x74a>
 80073f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073fa:	e773      	b.n	80072e4 <_dtoa_r+0x79c>
 80073fc:	3fe00000 	.word	0x3fe00000
 8007400:	40240000 	.word	0x40240000
 8007404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007406:	2b01      	cmp	r3, #1
 8007408:	dc18      	bgt.n	800743c <_dtoa_r+0x8f4>
 800740a:	9b04      	ldr	r3, [sp, #16]
 800740c:	b9b3      	cbnz	r3, 800743c <_dtoa_r+0x8f4>
 800740e:	9b05      	ldr	r3, [sp, #20]
 8007410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007414:	b993      	cbnz	r3, 800743c <_dtoa_r+0x8f4>
 8007416:	9b05      	ldr	r3, [sp, #20]
 8007418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800741c:	0d1b      	lsrs	r3, r3, #20
 800741e:	051b      	lsls	r3, r3, #20
 8007420:	b17b      	cbz	r3, 8007442 <_dtoa_r+0x8fa>
 8007422:	f04f 0801 	mov.w	r8, #1
 8007426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007428:	f109 0901 	add.w	r9, r9, #1
 800742c:	3301      	adds	r3, #1
 800742e:	9309      	str	r3, [sp, #36]	; 0x24
 8007430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007432:	2b00      	cmp	r3, #0
 8007434:	f47f af6f 	bne.w	8007316 <_dtoa_r+0x7ce>
 8007438:	2001      	movs	r0, #1
 800743a:	e774      	b.n	8007326 <_dtoa_r+0x7de>
 800743c:	f04f 0800 	mov.w	r8, #0
 8007440:	e7f6      	b.n	8007430 <_dtoa_r+0x8e8>
 8007442:	4698      	mov	r8, r3
 8007444:	e7f4      	b.n	8007430 <_dtoa_r+0x8e8>
 8007446:	d080      	beq.n	800734a <_dtoa_r+0x802>
 8007448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800744a:	331c      	adds	r3, #28
 800744c:	441a      	add	r2, r3
 800744e:	4499      	add	r9, r3
 8007450:	441f      	add	r7, r3
 8007452:	9209      	str	r2, [sp, #36]	; 0x24
 8007454:	e779      	b.n	800734a <_dtoa_r+0x802>
 8007456:	4603      	mov	r3, r0
 8007458:	e7f6      	b.n	8007448 <_dtoa_r+0x900>
 800745a:	9b08      	ldr	r3, [sp, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dc34      	bgt.n	80074ca <_dtoa_r+0x982>
 8007460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007462:	2b02      	cmp	r3, #2
 8007464:	dd31      	ble.n	80074ca <_dtoa_r+0x982>
 8007466:	9b08      	ldr	r3, [sp, #32]
 8007468:	9306      	str	r3, [sp, #24]
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	b963      	cbnz	r3, 8007488 <_dtoa_r+0x940>
 800746e:	4621      	mov	r1, r4
 8007470:	2205      	movs	r2, #5
 8007472:	4628      	mov	r0, r5
 8007474:	f000 faaa 	bl	80079cc <__multadd>
 8007478:	4601      	mov	r1, r0
 800747a:	4604      	mov	r4, r0
 800747c:	4650      	mov	r0, sl
 800747e:	f000 fcbd 	bl	8007dfc <__mcmp>
 8007482:	2800      	cmp	r0, #0
 8007484:	f73f adbf 	bgt.w	8007006 <_dtoa_r+0x4be>
 8007488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800748a:	9f03      	ldr	r7, [sp, #12]
 800748c:	ea6f 0b03 	mvn.w	fp, r3
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	4621      	mov	r1, r4
 8007496:	4628      	mov	r0, r5
 8007498:	f000 fa76 	bl	8007988 <_Bfree>
 800749c:	2e00      	cmp	r6, #0
 800749e:	f43f aead 	beq.w	80071fc <_dtoa_r+0x6b4>
 80074a2:	f1b8 0f00 	cmp.w	r8, #0
 80074a6:	d005      	beq.n	80074b4 <_dtoa_r+0x96c>
 80074a8:	45b0      	cmp	r8, r6
 80074aa:	d003      	beq.n	80074b4 <_dtoa_r+0x96c>
 80074ac:	4641      	mov	r1, r8
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fa6a 	bl	8007988 <_Bfree>
 80074b4:	4631      	mov	r1, r6
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fa66 	bl	8007988 <_Bfree>
 80074bc:	e69e      	b.n	80071fc <_dtoa_r+0x6b4>
 80074be:	2400      	movs	r4, #0
 80074c0:	4626      	mov	r6, r4
 80074c2:	e7e1      	b.n	8007488 <_dtoa_r+0x940>
 80074c4:	46c3      	mov	fp, r8
 80074c6:	4626      	mov	r6, r4
 80074c8:	e59d      	b.n	8007006 <_dtoa_r+0x4be>
 80074ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 80c8 	beq.w	8007662 <_dtoa_r+0xb1a>
 80074d2:	9b08      	ldr	r3, [sp, #32]
 80074d4:	9306      	str	r3, [sp, #24]
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	dd05      	ble.n	80074e6 <_dtoa_r+0x99e>
 80074da:	4631      	mov	r1, r6
 80074dc:	463a      	mov	r2, r7
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fc20 	bl	8007d24 <__lshift>
 80074e4:	4606      	mov	r6, r0
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	d05b      	beq.n	80075a4 <_dtoa_r+0xa5c>
 80074ec:	4628      	mov	r0, r5
 80074ee:	6871      	ldr	r1, [r6, #4]
 80074f0:	f000 fa0a 	bl	8007908 <_Balloc>
 80074f4:	4607      	mov	r7, r0
 80074f6:	b928      	cbnz	r0, 8007504 <_dtoa_r+0x9bc>
 80074f8:	4602      	mov	r2, r0
 80074fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80074fe:	4b81      	ldr	r3, [pc, #516]	; (8007704 <_dtoa_r+0xbbc>)
 8007500:	f7ff bb36 	b.w	8006b70 <_dtoa_r+0x28>
 8007504:	6932      	ldr	r2, [r6, #16]
 8007506:	f106 010c 	add.w	r1, r6, #12
 800750a:	3202      	adds	r2, #2
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	300c      	adds	r0, #12
 8007510:	f000 ff9e 	bl	8008450 <memcpy>
 8007514:	2201      	movs	r2, #1
 8007516:	4639      	mov	r1, r7
 8007518:	4628      	mov	r0, r5
 800751a:	f000 fc03 	bl	8007d24 <__lshift>
 800751e:	46b0      	mov	r8, r6
 8007520:	4606      	mov	r6, r0
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	9a03      	ldr	r2, [sp, #12]
 8007526:	3301      	adds	r3, #1
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	9b06      	ldr	r3, [sp, #24]
 800752c:	4413      	add	r3, r2
 800752e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007530:	9b04      	ldr	r3, [sp, #16]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	930a      	str	r3, [sp, #40]	; 0x28
 8007538:	9b08      	ldr	r3, [sp, #32]
 800753a:	4621      	mov	r1, r4
 800753c:	3b01      	subs	r3, #1
 800753e:	4650      	mov	r0, sl
 8007540:	9304      	str	r3, [sp, #16]
 8007542:	f7ff fa76 	bl	8006a32 <quorem>
 8007546:	4641      	mov	r1, r8
 8007548:	9006      	str	r0, [sp, #24]
 800754a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800754e:	4650      	mov	r0, sl
 8007550:	f000 fc54 	bl	8007dfc <__mcmp>
 8007554:	4632      	mov	r2, r6
 8007556:	9009      	str	r0, [sp, #36]	; 0x24
 8007558:	4621      	mov	r1, r4
 800755a:	4628      	mov	r0, r5
 800755c:	f000 fc6a 	bl	8007e34 <__mdiff>
 8007560:	68c2      	ldr	r2, [r0, #12]
 8007562:	4607      	mov	r7, r0
 8007564:	bb02      	cbnz	r2, 80075a8 <_dtoa_r+0xa60>
 8007566:	4601      	mov	r1, r0
 8007568:	4650      	mov	r0, sl
 800756a:	f000 fc47 	bl	8007dfc <__mcmp>
 800756e:	4602      	mov	r2, r0
 8007570:	4639      	mov	r1, r7
 8007572:	4628      	mov	r0, r5
 8007574:	920c      	str	r2, [sp, #48]	; 0x30
 8007576:	f000 fa07 	bl	8007988 <_Bfree>
 800757a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800757c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800757e:	9f08      	ldr	r7, [sp, #32]
 8007580:	ea43 0102 	orr.w	r1, r3, r2
 8007584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007586:	4319      	orrs	r1, r3
 8007588:	d110      	bne.n	80075ac <_dtoa_r+0xa64>
 800758a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800758e:	d029      	beq.n	80075e4 <_dtoa_r+0xa9c>
 8007590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd02      	ble.n	800759c <_dtoa_r+0xa54>
 8007596:	9b06      	ldr	r3, [sp, #24]
 8007598:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	f883 9000 	strb.w	r9, [r3]
 80075a2:	e777      	b.n	8007494 <_dtoa_r+0x94c>
 80075a4:	4630      	mov	r0, r6
 80075a6:	e7ba      	b.n	800751e <_dtoa_r+0x9d6>
 80075a8:	2201      	movs	r2, #1
 80075aa:	e7e1      	b.n	8007570 <_dtoa_r+0xa28>
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	db04      	blt.n	80075bc <_dtoa_r+0xa74>
 80075b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80075b4:	430b      	orrs	r3, r1
 80075b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075b8:	430b      	orrs	r3, r1
 80075ba:	d120      	bne.n	80075fe <_dtoa_r+0xab6>
 80075bc:	2a00      	cmp	r2, #0
 80075be:	dded      	ble.n	800759c <_dtoa_r+0xa54>
 80075c0:	4651      	mov	r1, sl
 80075c2:	2201      	movs	r2, #1
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 fbad 	bl	8007d24 <__lshift>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4682      	mov	sl, r0
 80075ce:	f000 fc15 	bl	8007dfc <__mcmp>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	dc03      	bgt.n	80075de <_dtoa_r+0xa96>
 80075d6:	d1e1      	bne.n	800759c <_dtoa_r+0xa54>
 80075d8:	f019 0f01 	tst.w	r9, #1
 80075dc:	d0de      	beq.n	800759c <_dtoa_r+0xa54>
 80075de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075e2:	d1d8      	bne.n	8007596 <_dtoa_r+0xa4e>
 80075e4:	2339      	movs	r3, #57	; 0x39
 80075e6:	9a04      	ldr	r2, [sp, #16]
 80075e8:	7013      	strb	r3, [r2, #0]
 80075ea:	463b      	mov	r3, r7
 80075ec:	461f      	mov	r7, r3
 80075ee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	2a39      	cmp	r2, #57	; 0x39
 80075f6:	d06b      	beq.n	80076d0 <_dtoa_r+0xb88>
 80075f8:	3201      	adds	r2, #1
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e74a      	b.n	8007494 <_dtoa_r+0x94c>
 80075fe:	2a00      	cmp	r2, #0
 8007600:	dd07      	ble.n	8007612 <_dtoa_r+0xaca>
 8007602:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007606:	d0ed      	beq.n	80075e4 <_dtoa_r+0xa9c>
 8007608:	9a04      	ldr	r2, [sp, #16]
 800760a:	f109 0301 	add.w	r3, r9, #1
 800760e:	7013      	strb	r3, [r2, #0]
 8007610:	e740      	b.n	8007494 <_dtoa_r+0x94c>
 8007612:	9b08      	ldr	r3, [sp, #32]
 8007614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007616:	f803 9c01 	strb.w	r9, [r3, #-1]
 800761a:	4293      	cmp	r3, r2
 800761c:	d042      	beq.n	80076a4 <_dtoa_r+0xb5c>
 800761e:	4651      	mov	r1, sl
 8007620:	2300      	movs	r3, #0
 8007622:	220a      	movs	r2, #10
 8007624:	4628      	mov	r0, r5
 8007626:	f000 f9d1 	bl	80079cc <__multadd>
 800762a:	45b0      	cmp	r8, r6
 800762c:	4682      	mov	sl, r0
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	f04f 020a 	mov.w	r2, #10
 8007636:	4641      	mov	r1, r8
 8007638:	4628      	mov	r0, r5
 800763a:	d107      	bne.n	800764c <_dtoa_r+0xb04>
 800763c:	f000 f9c6 	bl	80079cc <__multadd>
 8007640:	4680      	mov	r8, r0
 8007642:	4606      	mov	r6, r0
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	3301      	adds	r3, #1
 8007648:	9308      	str	r3, [sp, #32]
 800764a:	e775      	b.n	8007538 <_dtoa_r+0x9f0>
 800764c:	f000 f9be 	bl	80079cc <__multadd>
 8007650:	4631      	mov	r1, r6
 8007652:	4680      	mov	r8, r0
 8007654:	2300      	movs	r3, #0
 8007656:	220a      	movs	r2, #10
 8007658:	4628      	mov	r0, r5
 800765a:	f000 f9b7 	bl	80079cc <__multadd>
 800765e:	4606      	mov	r6, r0
 8007660:	e7f0      	b.n	8007644 <_dtoa_r+0xafc>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	9306      	str	r3, [sp, #24]
 8007666:	9f03      	ldr	r7, [sp, #12]
 8007668:	4621      	mov	r1, r4
 800766a:	4650      	mov	r0, sl
 800766c:	f7ff f9e1 	bl	8006a32 <quorem>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007676:	f807 9b01 	strb.w	r9, [r7], #1
 800767a:	1afa      	subs	r2, r7, r3
 800767c:	9b06      	ldr	r3, [sp, #24]
 800767e:	4293      	cmp	r3, r2
 8007680:	dd07      	ble.n	8007692 <_dtoa_r+0xb4a>
 8007682:	4651      	mov	r1, sl
 8007684:	2300      	movs	r3, #0
 8007686:	220a      	movs	r2, #10
 8007688:	4628      	mov	r0, r5
 800768a:	f000 f99f 	bl	80079cc <__multadd>
 800768e:	4682      	mov	sl, r0
 8007690:	e7ea      	b.n	8007668 <_dtoa_r+0xb20>
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	f04f 0800 	mov.w	r8, #0
 8007698:	2b00      	cmp	r3, #0
 800769a:	bfcc      	ite	gt
 800769c:	461f      	movgt	r7, r3
 800769e:	2701      	movle	r7, #1
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	441f      	add	r7, r3
 80076a4:	4651      	mov	r1, sl
 80076a6:	2201      	movs	r2, #1
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 fb3b 	bl	8007d24 <__lshift>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4682      	mov	sl, r0
 80076b2:	f000 fba3 	bl	8007dfc <__mcmp>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	dc97      	bgt.n	80075ea <_dtoa_r+0xaa2>
 80076ba:	d102      	bne.n	80076c2 <_dtoa_r+0xb7a>
 80076bc:	f019 0f01 	tst.w	r9, #1
 80076c0:	d193      	bne.n	80075ea <_dtoa_r+0xaa2>
 80076c2:	463b      	mov	r3, r7
 80076c4:	461f      	mov	r7, r3
 80076c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ca:	2a30      	cmp	r2, #48	; 0x30
 80076cc:	d0fa      	beq.n	80076c4 <_dtoa_r+0xb7c>
 80076ce:	e6e1      	b.n	8007494 <_dtoa_r+0x94c>
 80076d0:	9a03      	ldr	r2, [sp, #12]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d18a      	bne.n	80075ec <_dtoa_r+0xaa4>
 80076d6:	2331      	movs	r3, #49	; 0x31
 80076d8:	f10b 0b01 	add.w	fp, fp, #1
 80076dc:	e797      	b.n	800760e <_dtoa_r+0xac6>
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <_dtoa_r+0xbc0>)
 80076e0:	f7ff ba9f 	b.w	8006c22 <_dtoa_r+0xda>
 80076e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f47f aa77 	bne.w	8006bda <_dtoa_r+0x92>
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <_dtoa_r+0xbc4>)
 80076ee:	f7ff ba98 	b.w	8006c22 <_dtoa_r+0xda>
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dcb6      	bgt.n	8007666 <_dtoa_r+0xb1e>
 80076f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	f73f aeb5 	bgt.w	800746a <_dtoa_r+0x922>
 8007700:	e7b1      	b.n	8007666 <_dtoa_r+0xb1e>
 8007702:	bf00      	nop
 8007704:	08008c1a 	.word	0x08008c1a
 8007708:	08008b7a 	.word	0x08008b7a
 800770c:	08008b9e 	.word	0x08008b9e

08007710 <_free_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4605      	mov	r5, r0
 8007714:	2900      	cmp	r1, #0
 8007716:	d040      	beq.n	800779a <_free_r+0x8a>
 8007718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771c:	1f0c      	subs	r4, r1, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	18e4      	addlt	r4, r4, r3
 8007724:	f000 f8e4 	bl	80078f0 <__malloc_lock>
 8007728:	4a1c      	ldr	r2, [pc, #112]	; (800779c <_free_r+0x8c>)
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	b933      	cbnz	r3, 800773c <_free_r+0x2c>
 800772e:	6063      	str	r3, [r4, #4]
 8007730:	6014      	str	r4, [r2, #0]
 8007732:	4628      	mov	r0, r5
 8007734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007738:	f000 b8e0 	b.w	80078fc <__malloc_unlock>
 800773c:	42a3      	cmp	r3, r4
 800773e:	d908      	bls.n	8007752 <_free_r+0x42>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	1821      	adds	r1, r4, r0
 8007744:	428b      	cmp	r3, r1
 8007746:	bf01      	itttt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	1809      	addeq	r1, r1, r0
 800774e:	6021      	streq	r1, [r4, #0]
 8007750:	e7ed      	b.n	800772e <_free_r+0x1e>
 8007752:	461a      	mov	r2, r3
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b10b      	cbz	r3, 800775c <_free_r+0x4c>
 8007758:	42a3      	cmp	r3, r4
 800775a:	d9fa      	bls.n	8007752 <_free_r+0x42>
 800775c:	6811      	ldr	r1, [r2, #0]
 800775e:	1850      	adds	r0, r2, r1
 8007760:	42a0      	cmp	r0, r4
 8007762:	d10b      	bne.n	800777c <_free_r+0x6c>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	4401      	add	r1, r0
 8007768:	1850      	adds	r0, r2, r1
 800776a:	4283      	cmp	r3, r0
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	d1e0      	bne.n	8007732 <_free_r+0x22>
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	4408      	add	r0, r1
 8007776:	6010      	str	r0, [r2, #0]
 8007778:	6053      	str	r3, [r2, #4]
 800777a:	e7da      	b.n	8007732 <_free_r+0x22>
 800777c:	d902      	bls.n	8007784 <_free_r+0x74>
 800777e:	230c      	movs	r3, #12
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	e7d6      	b.n	8007732 <_free_r+0x22>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	1821      	adds	r1, r4, r0
 8007788:	428b      	cmp	r3, r1
 800778a:	bf01      	itttt	eq
 800778c:	6819      	ldreq	r1, [r3, #0]
 800778e:	685b      	ldreq	r3, [r3, #4]
 8007790:	1809      	addeq	r1, r1, r0
 8007792:	6021      	streq	r1, [r4, #0]
 8007794:	6063      	str	r3, [r4, #4]
 8007796:	6054      	str	r4, [r2, #4]
 8007798:	e7cb      	b.n	8007732 <_free_r+0x22>
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20000680 	.word	0x20000680

080077a0 <malloc>:
 80077a0:	4b02      	ldr	r3, [pc, #8]	; (80077ac <malloc+0xc>)
 80077a2:	4601      	mov	r1, r0
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	f000 b823 	b.w	80077f0 <_malloc_r>
 80077aa:	bf00      	nop
 80077ac:	20000074 	.word	0x20000074

080077b0 <sbrk_aligned>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	4e0e      	ldr	r6, [pc, #56]	; (80077ec <sbrk_aligned+0x3c>)
 80077b4:	460c      	mov	r4, r1
 80077b6:	6831      	ldr	r1, [r6, #0]
 80077b8:	4605      	mov	r5, r0
 80077ba:	b911      	cbnz	r1, 80077c2 <sbrk_aligned+0x12>
 80077bc:	f000 fe38 	bl	8008430 <_sbrk_r>
 80077c0:	6030      	str	r0, [r6, #0]
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 fe33 	bl	8008430 <_sbrk_r>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d00a      	beq.n	80077e4 <sbrk_aligned+0x34>
 80077ce:	1cc4      	adds	r4, r0, #3
 80077d0:	f024 0403 	bic.w	r4, r4, #3
 80077d4:	42a0      	cmp	r0, r4
 80077d6:	d007      	beq.n	80077e8 <sbrk_aligned+0x38>
 80077d8:	1a21      	subs	r1, r4, r0
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 fe28 	bl	8008430 <_sbrk_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d101      	bne.n	80077e8 <sbrk_aligned+0x38>
 80077e4:	f04f 34ff 	mov.w	r4, #4294967295
 80077e8:	4620      	mov	r0, r4
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	20000684 	.word	0x20000684

080077f0 <_malloc_r>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	1ccd      	adds	r5, r1, #3
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	2d00      	cmp	r5, #0
 8007804:	4607      	mov	r7, r0
 8007806:	db01      	blt.n	800780c <_malloc_r+0x1c>
 8007808:	42a9      	cmp	r1, r5
 800780a:	d905      	bls.n	8007818 <_malloc_r+0x28>
 800780c:	230c      	movs	r3, #12
 800780e:	2600      	movs	r6, #0
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4630      	mov	r0, r6
 8007814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007818:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078ec <_malloc_r+0xfc>
 800781c:	f000 f868 	bl	80078f0 <__malloc_lock>
 8007820:	f8d8 3000 	ldr.w	r3, [r8]
 8007824:	461c      	mov	r4, r3
 8007826:	bb5c      	cbnz	r4, 8007880 <_malloc_r+0x90>
 8007828:	4629      	mov	r1, r5
 800782a:	4638      	mov	r0, r7
 800782c:	f7ff ffc0 	bl	80077b0 <sbrk_aligned>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	4604      	mov	r4, r0
 8007834:	d155      	bne.n	80078e2 <_malloc_r+0xf2>
 8007836:	f8d8 4000 	ldr.w	r4, [r8]
 800783a:	4626      	mov	r6, r4
 800783c:	2e00      	cmp	r6, #0
 800783e:	d145      	bne.n	80078cc <_malloc_r+0xdc>
 8007840:	2c00      	cmp	r4, #0
 8007842:	d048      	beq.n	80078d6 <_malloc_r+0xe6>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	4631      	mov	r1, r6
 8007848:	4638      	mov	r0, r7
 800784a:	eb04 0903 	add.w	r9, r4, r3
 800784e:	f000 fdef 	bl	8008430 <_sbrk_r>
 8007852:	4581      	cmp	r9, r0
 8007854:	d13f      	bne.n	80078d6 <_malloc_r+0xe6>
 8007856:	6821      	ldr	r1, [r4, #0]
 8007858:	4638      	mov	r0, r7
 800785a:	1a6d      	subs	r5, r5, r1
 800785c:	4629      	mov	r1, r5
 800785e:	f7ff ffa7 	bl	80077b0 <sbrk_aligned>
 8007862:	3001      	adds	r0, #1
 8007864:	d037      	beq.n	80078d6 <_malloc_r+0xe6>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	442b      	add	r3, r5
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	f8d8 3000 	ldr.w	r3, [r8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d038      	beq.n	80078e6 <_malloc_r+0xf6>
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	42a2      	cmp	r2, r4
 8007878:	d12b      	bne.n	80078d2 <_malloc_r+0xe2>
 800787a:	2200      	movs	r2, #0
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	e00f      	b.n	80078a0 <_malloc_r+0xb0>
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	1b52      	subs	r2, r2, r5
 8007884:	d41f      	bmi.n	80078c6 <_malloc_r+0xd6>
 8007886:	2a0b      	cmp	r2, #11
 8007888:	d917      	bls.n	80078ba <_malloc_r+0xca>
 800788a:	1961      	adds	r1, r4, r5
 800788c:	42a3      	cmp	r3, r4
 800788e:	6025      	str	r5, [r4, #0]
 8007890:	bf18      	it	ne
 8007892:	6059      	strne	r1, [r3, #4]
 8007894:	6863      	ldr	r3, [r4, #4]
 8007896:	bf08      	it	eq
 8007898:	f8c8 1000 	streq.w	r1, [r8]
 800789c:	5162      	str	r2, [r4, r5]
 800789e:	604b      	str	r3, [r1, #4]
 80078a0:	4638      	mov	r0, r7
 80078a2:	f104 060b 	add.w	r6, r4, #11
 80078a6:	f000 f829 	bl	80078fc <__malloc_unlock>
 80078aa:	f026 0607 	bic.w	r6, r6, #7
 80078ae:	1d23      	adds	r3, r4, #4
 80078b0:	1af2      	subs	r2, r6, r3
 80078b2:	d0ae      	beq.n	8007812 <_malloc_r+0x22>
 80078b4:	1b9b      	subs	r3, r3, r6
 80078b6:	50a3      	str	r3, [r4, r2]
 80078b8:	e7ab      	b.n	8007812 <_malloc_r+0x22>
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	6862      	ldr	r2, [r4, #4]
 80078be:	d1dd      	bne.n	800787c <_malloc_r+0x8c>
 80078c0:	f8c8 2000 	str.w	r2, [r8]
 80078c4:	e7ec      	b.n	80078a0 <_malloc_r+0xb0>
 80078c6:	4623      	mov	r3, r4
 80078c8:	6864      	ldr	r4, [r4, #4]
 80078ca:	e7ac      	b.n	8007826 <_malloc_r+0x36>
 80078cc:	4634      	mov	r4, r6
 80078ce:	6876      	ldr	r6, [r6, #4]
 80078d0:	e7b4      	b.n	800783c <_malloc_r+0x4c>
 80078d2:	4613      	mov	r3, r2
 80078d4:	e7cc      	b.n	8007870 <_malloc_r+0x80>
 80078d6:	230c      	movs	r3, #12
 80078d8:	4638      	mov	r0, r7
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	f000 f80e 	bl	80078fc <__malloc_unlock>
 80078e0:	e797      	b.n	8007812 <_malloc_r+0x22>
 80078e2:	6025      	str	r5, [r4, #0]
 80078e4:	e7dc      	b.n	80078a0 <_malloc_r+0xb0>
 80078e6:	605b      	str	r3, [r3, #4]
 80078e8:	deff      	udf	#255	; 0xff
 80078ea:	bf00      	nop
 80078ec:	20000680 	.word	0x20000680

080078f0 <__malloc_lock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__malloc_lock+0x8>)
 80078f2:	f7ff b88e 	b.w	8006a12 <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	2000067c 	.word	0x2000067c

080078fc <__malloc_unlock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	; (8007904 <__malloc_unlock+0x8>)
 80078fe:	f7ff b889 	b.w	8006a14 <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	2000067c 	.word	0x2000067c

08007908 <_Balloc>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	69c6      	ldr	r6, [r0, #28]
 800790c:	4604      	mov	r4, r0
 800790e:	460d      	mov	r5, r1
 8007910:	b976      	cbnz	r6, 8007930 <_Balloc+0x28>
 8007912:	2010      	movs	r0, #16
 8007914:	f7ff ff44 	bl	80077a0 <malloc>
 8007918:	4602      	mov	r2, r0
 800791a:	61e0      	str	r0, [r4, #28]
 800791c:	b920      	cbnz	r0, 8007928 <_Balloc+0x20>
 800791e:	216b      	movs	r1, #107	; 0x6b
 8007920:	4b17      	ldr	r3, [pc, #92]	; (8007980 <_Balloc+0x78>)
 8007922:	4818      	ldr	r0, [pc, #96]	; (8007984 <_Balloc+0x7c>)
 8007924:	f000 fda2 	bl	800846c <__assert_func>
 8007928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800792c:	6006      	str	r6, [r0, #0]
 800792e:	60c6      	str	r6, [r0, #12]
 8007930:	69e6      	ldr	r6, [r4, #28]
 8007932:	68f3      	ldr	r3, [r6, #12]
 8007934:	b183      	cbz	r3, 8007958 <_Balloc+0x50>
 8007936:	69e3      	ldr	r3, [r4, #28]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800793e:	b9b8      	cbnz	r0, 8007970 <_Balloc+0x68>
 8007940:	2101      	movs	r1, #1
 8007942:	fa01 f605 	lsl.w	r6, r1, r5
 8007946:	1d72      	adds	r2, r6, #5
 8007948:	4620      	mov	r0, r4
 800794a:	0092      	lsls	r2, r2, #2
 800794c:	f000 fdac 	bl	80084a8 <_calloc_r>
 8007950:	b160      	cbz	r0, 800796c <_Balloc+0x64>
 8007952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007956:	e00e      	b.n	8007976 <_Balloc+0x6e>
 8007958:	2221      	movs	r2, #33	; 0x21
 800795a:	2104      	movs	r1, #4
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fda3 	bl	80084a8 <_calloc_r>
 8007962:	69e3      	ldr	r3, [r4, #28]
 8007964:	60f0      	str	r0, [r6, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e4      	bne.n	8007936 <_Balloc+0x2e>
 800796c:	2000      	movs	r0, #0
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	6802      	ldr	r2, [r0, #0]
 8007972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007976:	2300      	movs	r3, #0
 8007978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800797c:	e7f7      	b.n	800796e <_Balloc+0x66>
 800797e:	bf00      	nop
 8007980:	08008bab 	.word	0x08008bab
 8007984:	08008c2b 	.word	0x08008c2b

08007988 <_Bfree>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	69c6      	ldr	r6, [r0, #28]
 800798c:	4605      	mov	r5, r0
 800798e:	460c      	mov	r4, r1
 8007990:	b976      	cbnz	r6, 80079b0 <_Bfree+0x28>
 8007992:	2010      	movs	r0, #16
 8007994:	f7ff ff04 	bl	80077a0 <malloc>
 8007998:	4602      	mov	r2, r0
 800799a:	61e8      	str	r0, [r5, #28]
 800799c:	b920      	cbnz	r0, 80079a8 <_Bfree+0x20>
 800799e:	218f      	movs	r1, #143	; 0x8f
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <_Bfree+0x3c>)
 80079a2:	4809      	ldr	r0, [pc, #36]	; (80079c8 <_Bfree+0x40>)
 80079a4:	f000 fd62 	bl	800846c <__assert_func>
 80079a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079ac:	6006      	str	r6, [r0, #0]
 80079ae:	60c6      	str	r6, [r0, #12]
 80079b0:	b13c      	cbz	r4, 80079c2 <_Bfree+0x3a>
 80079b2:	69eb      	ldr	r3, [r5, #28]
 80079b4:	6862      	ldr	r2, [r4, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079bc:	6021      	str	r1, [r4, #0]
 80079be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	08008bab 	.word	0x08008bab
 80079c8:	08008c2b 	.word	0x08008c2b

080079cc <__multadd>:
 80079cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d0:	4607      	mov	r7, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	461e      	mov	r6, r3
 80079d6:	2000      	movs	r0, #0
 80079d8:	690d      	ldr	r5, [r1, #16]
 80079da:	f101 0c14 	add.w	ip, r1, #20
 80079de:	f8dc 3000 	ldr.w	r3, [ip]
 80079e2:	3001      	adds	r0, #1
 80079e4:	b299      	uxth	r1, r3
 80079e6:	fb02 6101 	mla	r1, r2, r1, r6
 80079ea:	0c1e      	lsrs	r6, r3, #16
 80079ec:	0c0b      	lsrs	r3, r1, #16
 80079ee:	fb02 3306 	mla	r3, r2, r6, r3
 80079f2:	b289      	uxth	r1, r1
 80079f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079f8:	4285      	cmp	r5, r0
 80079fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007a02:	dcec      	bgt.n	80079de <__multadd+0x12>
 8007a04:	b30e      	cbz	r6, 8007a4a <__multadd+0x7e>
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	42ab      	cmp	r3, r5
 8007a0a:	dc19      	bgt.n	8007a40 <__multadd+0x74>
 8007a0c:	6861      	ldr	r1, [r4, #4]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	3101      	adds	r1, #1
 8007a12:	f7ff ff79 	bl	8007908 <_Balloc>
 8007a16:	4680      	mov	r8, r0
 8007a18:	b928      	cbnz	r0, 8007a26 <__multadd+0x5a>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	21ba      	movs	r1, #186	; 0xba
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <__multadd+0x84>)
 8007a20:	480c      	ldr	r0, [pc, #48]	; (8007a54 <__multadd+0x88>)
 8007a22:	f000 fd23 	bl	800846c <__assert_func>
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	f104 010c 	add.w	r1, r4, #12
 8007a2c:	3202      	adds	r2, #2
 8007a2e:	0092      	lsls	r2, r2, #2
 8007a30:	300c      	adds	r0, #12
 8007a32:	f000 fd0d 	bl	8008450 <memcpy>
 8007a36:	4621      	mov	r1, r4
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff ffa5 	bl	8007988 <_Bfree>
 8007a3e:	4644      	mov	r4, r8
 8007a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a44:	3501      	adds	r5, #1
 8007a46:	615e      	str	r6, [r3, #20]
 8007a48:	6125      	str	r5, [r4, #16]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a50:	08008c1a 	.word	0x08008c1a
 8007a54:	08008c2b 	.word	0x08008c2b

08007a58 <__hi0bits>:
 8007a58:	0c02      	lsrs	r2, r0, #16
 8007a5a:	0412      	lsls	r2, r2, #16
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	b9ca      	cbnz	r2, 8007a94 <__hi0bits+0x3c>
 8007a60:	0403      	lsls	r3, r0, #16
 8007a62:	2010      	movs	r0, #16
 8007a64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a68:	bf04      	itt	eq
 8007a6a:	021b      	lsleq	r3, r3, #8
 8007a6c:	3008      	addeq	r0, #8
 8007a6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a72:	bf04      	itt	eq
 8007a74:	011b      	lsleq	r3, r3, #4
 8007a76:	3004      	addeq	r0, #4
 8007a78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a7c:	bf04      	itt	eq
 8007a7e:	009b      	lsleq	r3, r3, #2
 8007a80:	3002      	addeq	r0, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	db05      	blt.n	8007a92 <__hi0bits+0x3a>
 8007a86:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a8a:	f100 0001 	add.w	r0, r0, #1
 8007a8e:	bf08      	it	eq
 8007a90:	2020      	moveq	r0, #32
 8007a92:	4770      	bx	lr
 8007a94:	2000      	movs	r0, #0
 8007a96:	e7e5      	b.n	8007a64 <__hi0bits+0xc>

08007a98 <__lo0bits>:
 8007a98:	6803      	ldr	r3, [r0, #0]
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	f013 0007 	ands.w	r0, r3, #7
 8007aa0:	d00b      	beq.n	8007aba <__lo0bits+0x22>
 8007aa2:	07d9      	lsls	r1, r3, #31
 8007aa4:	d421      	bmi.n	8007aea <__lo0bits+0x52>
 8007aa6:	0798      	lsls	r0, r3, #30
 8007aa8:	bf49      	itett	mi
 8007aaa:	085b      	lsrmi	r3, r3, #1
 8007aac:	089b      	lsrpl	r3, r3, #2
 8007aae:	2001      	movmi	r0, #1
 8007ab0:	6013      	strmi	r3, [r2, #0]
 8007ab2:	bf5c      	itt	pl
 8007ab4:	2002      	movpl	r0, #2
 8007ab6:	6013      	strpl	r3, [r2, #0]
 8007ab8:	4770      	bx	lr
 8007aba:	b299      	uxth	r1, r3
 8007abc:	b909      	cbnz	r1, 8007ac2 <__lo0bits+0x2a>
 8007abe:	2010      	movs	r0, #16
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	b2d9      	uxtb	r1, r3
 8007ac4:	b909      	cbnz	r1, 8007aca <__lo0bits+0x32>
 8007ac6:	3008      	adds	r0, #8
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	0719      	lsls	r1, r3, #28
 8007acc:	bf04      	itt	eq
 8007ace:	091b      	lsreq	r3, r3, #4
 8007ad0:	3004      	addeq	r0, #4
 8007ad2:	0799      	lsls	r1, r3, #30
 8007ad4:	bf04      	itt	eq
 8007ad6:	089b      	lsreq	r3, r3, #2
 8007ad8:	3002      	addeq	r0, #2
 8007ada:	07d9      	lsls	r1, r3, #31
 8007adc:	d403      	bmi.n	8007ae6 <__lo0bits+0x4e>
 8007ade:	085b      	lsrs	r3, r3, #1
 8007ae0:	f100 0001 	add.w	r0, r0, #1
 8007ae4:	d003      	beq.n	8007aee <__lo0bits+0x56>
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	4770      	bx	lr
 8007aea:	2000      	movs	r0, #0
 8007aec:	4770      	bx	lr
 8007aee:	2020      	movs	r0, #32
 8007af0:	4770      	bx	lr
	...

08007af4 <__i2b>:
 8007af4:	b510      	push	{r4, lr}
 8007af6:	460c      	mov	r4, r1
 8007af8:	2101      	movs	r1, #1
 8007afa:	f7ff ff05 	bl	8007908 <_Balloc>
 8007afe:	4602      	mov	r2, r0
 8007b00:	b928      	cbnz	r0, 8007b0e <__i2b+0x1a>
 8007b02:	f240 1145 	movw	r1, #325	; 0x145
 8007b06:	4b04      	ldr	r3, [pc, #16]	; (8007b18 <__i2b+0x24>)
 8007b08:	4804      	ldr	r0, [pc, #16]	; (8007b1c <__i2b+0x28>)
 8007b0a:	f000 fcaf 	bl	800846c <__assert_func>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	6144      	str	r4, [r0, #20]
 8007b12:	6103      	str	r3, [r0, #16]
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	bf00      	nop
 8007b18:	08008c1a 	.word	0x08008c1a
 8007b1c:	08008c2b 	.word	0x08008c2b

08007b20 <__multiply>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4691      	mov	r9, r2
 8007b26:	690a      	ldr	r2, [r1, #16]
 8007b28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	bfbe      	ittt	lt
 8007b32:	460b      	movlt	r3, r1
 8007b34:	464c      	movlt	r4, r9
 8007b36:	4699      	movlt	r9, r3
 8007b38:	6927      	ldr	r7, [r4, #16]
 8007b3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	6861      	ldr	r1, [r4, #4]
 8007b42:	eb07 060a 	add.w	r6, r7, sl
 8007b46:	42b3      	cmp	r3, r6
 8007b48:	b085      	sub	sp, #20
 8007b4a:	bfb8      	it	lt
 8007b4c:	3101      	addlt	r1, #1
 8007b4e:	f7ff fedb 	bl	8007908 <_Balloc>
 8007b52:	b930      	cbnz	r0, 8007b62 <__multiply+0x42>
 8007b54:	4602      	mov	r2, r0
 8007b56:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007b5a:	4b43      	ldr	r3, [pc, #268]	; (8007c68 <__multiply+0x148>)
 8007b5c:	4843      	ldr	r0, [pc, #268]	; (8007c6c <__multiply+0x14c>)
 8007b5e:	f000 fc85 	bl	800846c <__assert_func>
 8007b62:	f100 0514 	add.w	r5, r0, #20
 8007b66:	462b      	mov	r3, r5
 8007b68:	2200      	movs	r2, #0
 8007b6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b6e:	4543      	cmp	r3, r8
 8007b70:	d321      	bcc.n	8007bb6 <__multiply+0x96>
 8007b72:	f104 0314 	add.w	r3, r4, #20
 8007b76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b7a:	f109 0314 	add.w	r3, r9, #20
 8007b7e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b82:	9202      	str	r2, [sp, #8]
 8007b84:	1b3a      	subs	r2, r7, r4
 8007b86:	3a15      	subs	r2, #21
 8007b88:	f022 0203 	bic.w	r2, r2, #3
 8007b8c:	3204      	adds	r2, #4
 8007b8e:	f104 0115 	add.w	r1, r4, #21
 8007b92:	428f      	cmp	r7, r1
 8007b94:	bf38      	it	cc
 8007b96:	2204      	movcc	r2, #4
 8007b98:	9201      	str	r2, [sp, #4]
 8007b9a:	9a02      	ldr	r2, [sp, #8]
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d80c      	bhi.n	8007bbc <__multiply+0x9c>
 8007ba2:	2e00      	cmp	r6, #0
 8007ba4:	dd03      	ble.n	8007bae <__multiply+0x8e>
 8007ba6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d05a      	beq.n	8007c64 <__multiply+0x144>
 8007bae:	6106      	str	r6, [r0, #16]
 8007bb0:	b005      	add	sp, #20
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	f843 2b04 	str.w	r2, [r3], #4
 8007bba:	e7d8      	b.n	8007b6e <__multiply+0x4e>
 8007bbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bc0:	f1ba 0f00 	cmp.w	sl, #0
 8007bc4:	d023      	beq.n	8007c0e <__multiply+0xee>
 8007bc6:	46a9      	mov	r9, r5
 8007bc8:	f04f 0c00 	mov.w	ip, #0
 8007bcc:	f104 0e14 	add.w	lr, r4, #20
 8007bd0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bd4:	f8d9 1000 	ldr.w	r1, [r9]
 8007bd8:	fa1f fb82 	uxth.w	fp, r2
 8007bdc:	b289      	uxth	r1, r1
 8007bde:	fb0a 110b 	mla	r1, sl, fp, r1
 8007be2:	4461      	add	r1, ip
 8007be4:	f8d9 c000 	ldr.w	ip, [r9]
 8007be8:	0c12      	lsrs	r2, r2, #16
 8007bea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007bee:	fb0a c202 	mla	r2, sl, r2, ip
 8007bf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bf6:	b289      	uxth	r1, r1
 8007bf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bfc:	4577      	cmp	r7, lr
 8007bfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c02:	f849 1b04 	str.w	r1, [r9], #4
 8007c06:	d8e3      	bhi.n	8007bd0 <__multiply+0xb0>
 8007c08:	9a01      	ldr	r2, [sp, #4]
 8007c0a:	f845 c002 	str.w	ip, [r5, r2]
 8007c0e:	9a03      	ldr	r2, [sp, #12]
 8007c10:	3304      	adds	r3, #4
 8007c12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c16:	f1b9 0f00 	cmp.w	r9, #0
 8007c1a:	d021      	beq.n	8007c60 <__multiply+0x140>
 8007c1c:	46ae      	mov	lr, r5
 8007c1e:	f04f 0a00 	mov.w	sl, #0
 8007c22:	6829      	ldr	r1, [r5, #0]
 8007c24:	f104 0c14 	add.w	ip, r4, #20
 8007c28:	f8bc b000 	ldrh.w	fp, [ip]
 8007c2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c30:	b289      	uxth	r1, r1
 8007c32:	fb09 220b 	mla	r2, r9, fp, r2
 8007c36:	4452      	add	r2, sl
 8007c38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c3c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c48:	f8be 1000 	ldrh.w	r1, [lr]
 8007c4c:	4567      	cmp	r7, ip
 8007c4e:	fb09 110a 	mla	r1, r9, sl, r1
 8007c52:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007c56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c5a:	d8e5      	bhi.n	8007c28 <__multiply+0x108>
 8007c5c:	9a01      	ldr	r2, [sp, #4]
 8007c5e:	50a9      	str	r1, [r5, r2]
 8007c60:	3504      	adds	r5, #4
 8007c62:	e79a      	b.n	8007b9a <__multiply+0x7a>
 8007c64:	3e01      	subs	r6, #1
 8007c66:	e79c      	b.n	8007ba2 <__multiply+0x82>
 8007c68:	08008c1a 	.word	0x08008c1a
 8007c6c:	08008c2b 	.word	0x08008c2b

08007c70 <__pow5mult>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	4615      	mov	r5, r2
 8007c76:	f012 0203 	ands.w	r2, r2, #3
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	d007      	beq.n	8007c90 <__pow5mult+0x20>
 8007c80:	4c25      	ldr	r4, [pc, #148]	; (8007d18 <__pow5mult+0xa8>)
 8007c82:	3a01      	subs	r2, #1
 8007c84:	2300      	movs	r3, #0
 8007c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c8a:	f7ff fe9f 	bl	80079cc <__multadd>
 8007c8e:	4607      	mov	r7, r0
 8007c90:	10ad      	asrs	r5, r5, #2
 8007c92:	d03d      	beq.n	8007d10 <__pow5mult+0xa0>
 8007c94:	69f4      	ldr	r4, [r6, #28]
 8007c96:	b97c      	cbnz	r4, 8007cb8 <__pow5mult+0x48>
 8007c98:	2010      	movs	r0, #16
 8007c9a:	f7ff fd81 	bl	80077a0 <malloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	61f0      	str	r0, [r6, #28]
 8007ca2:	b928      	cbnz	r0, 8007cb0 <__pow5mult+0x40>
 8007ca4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007ca8:	4b1c      	ldr	r3, [pc, #112]	; (8007d1c <__pow5mult+0xac>)
 8007caa:	481d      	ldr	r0, [pc, #116]	; (8007d20 <__pow5mult+0xb0>)
 8007cac:	f000 fbde 	bl	800846c <__assert_func>
 8007cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cb4:	6004      	str	r4, [r0, #0]
 8007cb6:	60c4      	str	r4, [r0, #12]
 8007cb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cc0:	b94c      	cbnz	r4, 8007cd6 <__pow5mult+0x66>
 8007cc2:	f240 2171 	movw	r1, #625	; 0x271
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7ff ff14 	bl	8007af4 <__i2b>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cd4:	6003      	str	r3, [r0, #0]
 8007cd6:	f04f 0900 	mov.w	r9, #0
 8007cda:	07eb      	lsls	r3, r5, #31
 8007cdc:	d50a      	bpl.n	8007cf4 <__pow5mult+0x84>
 8007cde:	4639      	mov	r1, r7
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff ff1c 	bl	8007b20 <__multiply>
 8007ce8:	4680      	mov	r8, r0
 8007cea:	4639      	mov	r1, r7
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff fe4b 	bl	8007988 <_Bfree>
 8007cf2:	4647      	mov	r7, r8
 8007cf4:	106d      	asrs	r5, r5, #1
 8007cf6:	d00b      	beq.n	8007d10 <__pow5mult+0xa0>
 8007cf8:	6820      	ldr	r0, [r4, #0]
 8007cfa:	b938      	cbnz	r0, 8007d0c <__pow5mult+0x9c>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7ff ff0d 	bl	8007b20 <__multiply>
 8007d06:	6020      	str	r0, [r4, #0]
 8007d08:	f8c0 9000 	str.w	r9, [r0]
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	e7e4      	b.n	8007cda <__pow5mult+0x6a>
 8007d10:	4638      	mov	r0, r7
 8007d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d16:	bf00      	nop
 8007d18:	08008d78 	.word	0x08008d78
 8007d1c:	08008bab 	.word	0x08008bab
 8007d20:	08008c2b 	.word	0x08008c2b

08007d24 <__lshift>:
 8007d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	460c      	mov	r4, r1
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	4691      	mov	r9, r2
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	6849      	ldr	r1, [r1, #4]
 8007d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d3c:	f108 0601 	add.w	r6, r8, #1
 8007d40:	42b3      	cmp	r3, r6
 8007d42:	db0b      	blt.n	8007d5c <__lshift+0x38>
 8007d44:	4638      	mov	r0, r7
 8007d46:	f7ff fddf 	bl	8007908 <_Balloc>
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	b948      	cbnz	r0, 8007d62 <__lshift+0x3e>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007d54:	4b27      	ldr	r3, [pc, #156]	; (8007df4 <__lshift+0xd0>)
 8007d56:	4828      	ldr	r0, [pc, #160]	; (8007df8 <__lshift+0xd4>)
 8007d58:	f000 fb88 	bl	800846c <__assert_func>
 8007d5c:	3101      	adds	r1, #1
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	e7ee      	b.n	8007d40 <__lshift+0x1c>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f100 0114 	add.w	r1, r0, #20
 8007d68:	f100 0210 	add.w	r2, r0, #16
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	4553      	cmp	r3, sl
 8007d70:	db33      	blt.n	8007dda <__lshift+0xb6>
 8007d72:	6920      	ldr	r0, [r4, #16]
 8007d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d78:	f104 0314 	add.w	r3, r4, #20
 8007d7c:	f019 091f 	ands.w	r9, r9, #31
 8007d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d88:	d02b      	beq.n	8007de2 <__lshift+0xbe>
 8007d8a:	468a      	mov	sl, r1
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	fa00 f009 	lsl.w	r0, r0, r9
 8007d98:	4310      	orrs	r0, r2
 8007d9a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da2:	459c      	cmp	ip, r3
 8007da4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007da8:	d8f3      	bhi.n	8007d92 <__lshift+0x6e>
 8007daa:	ebac 0304 	sub.w	r3, ip, r4
 8007dae:	3b15      	subs	r3, #21
 8007db0:	f023 0303 	bic.w	r3, r3, #3
 8007db4:	3304      	adds	r3, #4
 8007db6:	f104 0015 	add.w	r0, r4, #21
 8007dba:	4584      	cmp	ip, r0
 8007dbc:	bf38      	it	cc
 8007dbe:	2304      	movcc	r3, #4
 8007dc0:	50ca      	str	r2, [r1, r3]
 8007dc2:	b10a      	cbz	r2, 8007dc8 <__lshift+0xa4>
 8007dc4:	f108 0602 	add.w	r6, r8, #2
 8007dc8:	3e01      	subs	r6, #1
 8007dca:	4638      	mov	r0, r7
 8007dcc:	4621      	mov	r1, r4
 8007dce:	612e      	str	r6, [r5, #16]
 8007dd0:	f7ff fdda 	bl	8007988 <_Bfree>
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dda:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dde:	3301      	adds	r3, #1
 8007de0:	e7c5      	b.n	8007d6e <__lshift+0x4a>
 8007de2:	3904      	subs	r1, #4
 8007de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de8:	459c      	cmp	ip, r3
 8007dea:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dee:	d8f9      	bhi.n	8007de4 <__lshift+0xc0>
 8007df0:	e7ea      	b.n	8007dc8 <__lshift+0xa4>
 8007df2:	bf00      	nop
 8007df4:	08008c1a 	.word	0x08008c1a
 8007df8:	08008c2b 	.word	0x08008c2b

08007dfc <__mcmp>:
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	690a      	ldr	r2, [r1, #16]
 8007e00:	6900      	ldr	r0, [r0, #16]
 8007e02:	b530      	push	{r4, r5, lr}
 8007e04:	1a80      	subs	r0, r0, r2
 8007e06:	d10d      	bne.n	8007e24 <__mcmp+0x28>
 8007e08:	3314      	adds	r3, #20
 8007e0a:	3114      	adds	r1, #20
 8007e0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e1c:	4295      	cmp	r5, r2
 8007e1e:	d002      	beq.n	8007e26 <__mcmp+0x2a>
 8007e20:	d304      	bcc.n	8007e2c <__mcmp+0x30>
 8007e22:	2001      	movs	r0, #1
 8007e24:	bd30      	pop	{r4, r5, pc}
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	d3f4      	bcc.n	8007e14 <__mcmp+0x18>
 8007e2a:	e7fb      	b.n	8007e24 <__mcmp+0x28>
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e7f8      	b.n	8007e24 <__mcmp+0x28>
	...

08007e34 <__mdiff>:
 8007e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	460d      	mov	r5, r1
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4628      	mov	r0, r5
 8007e40:	4614      	mov	r4, r2
 8007e42:	f7ff ffdb 	bl	8007dfc <__mcmp>
 8007e46:	1e06      	subs	r6, r0, #0
 8007e48:	d111      	bne.n	8007e6e <__mdiff+0x3a>
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f7ff fd5b 	bl	8007908 <_Balloc>
 8007e52:	4602      	mov	r2, r0
 8007e54:	b928      	cbnz	r0, 8007e62 <__mdiff+0x2e>
 8007e56:	f240 2137 	movw	r1, #567	; 0x237
 8007e5a:	4b3a      	ldr	r3, [pc, #232]	; (8007f44 <__mdiff+0x110>)
 8007e5c:	483a      	ldr	r0, [pc, #232]	; (8007f48 <__mdiff+0x114>)
 8007e5e:	f000 fb05 	bl	800846c <__assert_func>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e68:	4610      	mov	r0, r2
 8007e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6e:	bfa4      	itt	ge
 8007e70:	4623      	movge	r3, r4
 8007e72:	462c      	movge	r4, r5
 8007e74:	4638      	mov	r0, r7
 8007e76:	6861      	ldr	r1, [r4, #4]
 8007e78:	bfa6      	itte	ge
 8007e7a:	461d      	movge	r5, r3
 8007e7c:	2600      	movge	r6, #0
 8007e7e:	2601      	movlt	r6, #1
 8007e80:	f7ff fd42 	bl	8007908 <_Balloc>
 8007e84:	4602      	mov	r2, r0
 8007e86:	b918      	cbnz	r0, 8007e90 <__mdiff+0x5c>
 8007e88:	f240 2145 	movw	r1, #581	; 0x245
 8007e8c:	4b2d      	ldr	r3, [pc, #180]	; (8007f44 <__mdiff+0x110>)
 8007e8e:	e7e5      	b.n	8007e5c <__mdiff+0x28>
 8007e90:	f102 0814 	add.w	r8, r2, #20
 8007e94:	46c2      	mov	sl, r8
 8007e96:	f04f 0c00 	mov.w	ip, #0
 8007e9a:	6927      	ldr	r7, [r4, #16]
 8007e9c:	60c6      	str	r6, [r0, #12]
 8007e9e:	692e      	ldr	r6, [r5, #16]
 8007ea0:	f104 0014 	add.w	r0, r4, #20
 8007ea4:	f105 0914 	add.w	r9, r5, #20
 8007ea8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007eac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007eb0:	3410      	adds	r4, #16
 8007eb2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007eb6:	f859 3b04 	ldr.w	r3, [r9], #4
 8007eba:	fa1f f18b 	uxth.w	r1, fp
 8007ebe:	4461      	add	r1, ip
 8007ec0:	fa1f fc83 	uxth.w	ip, r3
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	eba1 010c 	sub.w	r1, r1, ip
 8007eca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ece:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ed2:	b289      	uxth	r1, r1
 8007ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007ed8:	454e      	cmp	r6, r9
 8007eda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007ede:	f84a 1b04 	str.w	r1, [sl], #4
 8007ee2:	d8e6      	bhi.n	8007eb2 <__mdiff+0x7e>
 8007ee4:	1b73      	subs	r3, r6, r5
 8007ee6:	3b15      	subs	r3, #21
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	3515      	adds	r5, #21
 8007eee:	3304      	adds	r3, #4
 8007ef0:	42ae      	cmp	r6, r5
 8007ef2:	bf38      	it	cc
 8007ef4:	2304      	movcc	r3, #4
 8007ef6:	4418      	add	r0, r3
 8007ef8:	4443      	add	r3, r8
 8007efa:	461e      	mov	r6, r3
 8007efc:	4605      	mov	r5, r0
 8007efe:	4575      	cmp	r5, lr
 8007f00:	d30e      	bcc.n	8007f20 <__mdiff+0xec>
 8007f02:	f10e 0103 	add.w	r1, lr, #3
 8007f06:	1a09      	subs	r1, r1, r0
 8007f08:	f021 0103 	bic.w	r1, r1, #3
 8007f0c:	3803      	subs	r0, #3
 8007f0e:	4586      	cmp	lr, r0
 8007f10:	bf38      	it	cc
 8007f12:	2100      	movcc	r1, #0
 8007f14:	440b      	add	r3, r1
 8007f16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f1a:	b189      	cbz	r1, 8007f40 <__mdiff+0x10c>
 8007f1c:	6117      	str	r7, [r2, #16]
 8007f1e:	e7a3      	b.n	8007e68 <__mdiff+0x34>
 8007f20:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f24:	fa1f f188 	uxth.w	r1, r8
 8007f28:	4461      	add	r1, ip
 8007f2a:	140c      	asrs	r4, r1, #16
 8007f2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f30:	b289      	uxth	r1, r1
 8007f32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f36:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007f3a:	f846 1b04 	str.w	r1, [r6], #4
 8007f3e:	e7de      	b.n	8007efe <__mdiff+0xca>
 8007f40:	3f01      	subs	r7, #1
 8007f42:	e7e8      	b.n	8007f16 <__mdiff+0xe2>
 8007f44:	08008c1a 	.word	0x08008c1a
 8007f48:	08008c2b 	.word	0x08008c2b

08007f4c <__d2b>:
 8007f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4617      	mov	r7, r2
 8007f52:	461c      	mov	r4, r3
 8007f54:	9e08      	ldr	r6, [sp, #32]
 8007f56:	f7ff fcd7 	bl	8007908 <_Balloc>
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	b930      	cbnz	r0, 8007f6c <__d2b+0x20>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	f240 310f 	movw	r1, #783	; 0x30f
 8007f64:	4b22      	ldr	r3, [pc, #136]	; (8007ff0 <__d2b+0xa4>)
 8007f66:	4823      	ldr	r0, [pc, #140]	; (8007ff4 <__d2b+0xa8>)
 8007f68:	f000 fa80 	bl	800846c <__assert_func>
 8007f6c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007f70:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007f74:	bb24      	cbnz	r4, 8007fc0 <__d2b+0x74>
 8007f76:	2f00      	cmp	r7, #0
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	d026      	beq.n	8007fca <__d2b+0x7e>
 8007f7c:	4668      	mov	r0, sp
 8007f7e:	9700      	str	r7, [sp, #0]
 8007f80:	f7ff fd8a 	bl	8007a98 <__lo0bits>
 8007f84:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f88:	b1e8      	cbz	r0, 8007fc6 <__d2b+0x7a>
 8007f8a:	f1c0 0320 	rsb	r3, r0, #32
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	430b      	orrs	r3, r1
 8007f94:	40c2      	lsrs	r2, r0
 8007f96:	616b      	str	r3, [r5, #20]
 8007f98:	9201      	str	r2, [sp, #4]
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bf14      	ite	ne
 8007fa0:	2102      	movne	r1, #2
 8007fa2:	2101      	moveq	r1, #1
 8007fa4:	61ab      	str	r3, [r5, #24]
 8007fa6:	6129      	str	r1, [r5, #16]
 8007fa8:	b1bc      	cbz	r4, 8007fda <__d2b+0x8e>
 8007faa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007fae:	4404      	add	r4, r0
 8007fb0:	6034      	str	r4, [r6, #0]
 8007fb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	6018      	str	r0, [r3, #0]
 8007fba:	4628      	mov	r0, r5
 8007fbc:	b003      	add	sp, #12
 8007fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc4:	e7d7      	b.n	8007f76 <__d2b+0x2a>
 8007fc6:	6169      	str	r1, [r5, #20]
 8007fc8:	e7e7      	b.n	8007f9a <__d2b+0x4e>
 8007fca:	a801      	add	r0, sp, #4
 8007fcc:	f7ff fd64 	bl	8007a98 <__lo0bits>
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	616b      	str	r3, [r5, #20]
 8007fd6:	3020      	adds	r0, #32
 8007fd8:	e7e5      	b.n	8007fa6 <__d2b+0x5a>
 8007fda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fde:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007fe2:	6030      	str	r0, [r6, #0]
 8007fe4:	6918      	ldr	r0, [r3, #16]
 8007fe6:	f7ff fd37 	bl	8007a58 <__hi0bits>
 8007fea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007fee:	e7e2      	b.n	8007fb6 <__d2b+0x6a>
 8007ff0:	08008c1a 	.word	0x08008c1a
 8007ff4:	08008c2b 	.word	0x08008c2b

08007ff8 <__ssputs_r>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	461f      	mov	r7, r3
 8007ffe:	688e      	ldr	r6, [r1, #8]
 8008000:	4682      	mov	sl, r0
 8008002:	42be      	cmp	r6, r7
 8008004:	460c      	mov	r4, r1
 8008006:	4690      	mov	r8, r2
 8008008:	680b      	ldr	r3, [r1, #0]
 800800a:	d82c      	bhi.n	8008066 <__ssputs_r+0x6e>
 800800c:	898a      	ldrh	r2, [r1, #12]
 800800e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008012:	d026      	beq.n	8008062 <__ssputs_r+0x6a>
 8008014:	6965      	ldr	r5, [r4, #20]
 8008016:	6909      	ldr	r1, [r1, #16]
 8008018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800801c:	eba3 0901 	sub.w	r9, r3, r1
 8008020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008024:	1c7b      	adds	r3, r7, #1
 8008026:	444b      	add	r3, r9
 8008028:	106d      	asrs	r5, r5, #1
 800802a:	429d      	cmp	r5, r3
 800802c:	bf38      	it	cc
 800802e:	461d      	movcc	r5, r3
 8008030:	0553      	lsls	r3, r2, #21
 8008032:	d527      	bpl.n	8008084 <__ssputs_r+0x8c>
 8008034:	4629      	mov	r1, r5
 8008036:	f7ff fbdb 	bl	80077f0 <_malloc_r>
 800803a:	4606      	mov	r6, r0
 800803c:	b360      	cbz	r0, 8008098 <__ssputs_r+0xa0>
 800803e:	464a      	mov	r2, r9
 8008040:	6921      	ldr	r1, [r4, #16]
 8008042:	f000 fa05 	bl	8008450 <memcpy>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	81a3      	strh	r3, [r4, #12]
 8008052:	6126      	str	r6, [r4, #16]
 8008054:	444e      	add	r6, r9
 8008056:	6026      	str	r6, [r4, #0]
 8008058:	463e      	mov	r6, r7
 800805a:	6165      	str	r5, [r4, #20]
 800805c:	eba5 0509 	sub.w	r5, r5, r9
 8008060:	60a5      	str	r5, [r4, #8]
 8008062:	42be      	cmp	r6, r7
 8008064:	d900      	bls.n	8008068 <__ssputs_r+0x70>
 8008066:	463e      	mov	r6, r7
 8008068:	4632      	mov	r2, r6
 800806a:	4641      	mov	r1, r8
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	f000 f9c5 	bl	80083fc <memmove>
 8008072:	2000      	movs	r0, #0
 8008074:	68a3      	ldr	r3, [r4, #8]
 8008076:	1b9b      	subs	r3, r3, r6
 8008078:	60a3      	str	r3, [r4, #8]
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	4433      	add	r3, r6
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008084:	462a      	mov	r2, r5
 8008086:	f000 fa35 	bl	80084f4 <_realloc_r>
 800808a:	4606      	mov	r6, r0
 800808c:	2800      	cmp	r0, #0
 800808e:	d1e0      	bne.n	8008052 <__ssputs_r+0x5a>
 8008090:	4650      	mov	r0, sl
 8008092:	6921      	ldr	r1, [r4, #16]
 8008094:	f7ff fb3c 	bl	8007710 <_free_r>
 8008098:	230c      	movs	r3, #12
 800809a:	f8ca 3000 	str.w	r3, [sl]
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	e7e9      	b.n	8008080 <__ssputs_r+0x88>

080080ac <_svfiprintf_r>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	4698      	mov	r8, r3
 80080b2:	898b      	ldrh	r3, [r1, #12]
 80080b4:	4607      	mov	r7, r0
 80080b6:	061b      	lsls	r3, r3, #24
 80080b8:	460d      	mov	r5, r1
 80080ba:	4614      	mov	r4, r2
 80080bc:	b09d      	sub	sp, #116	; 0x74
 80080be:	d50e      	bpl.n	80080de <_svfiprintf_r+0x32>
 80080c0:	690b      	ldr	r3, [r1, #16]
 80080c2:	b963      	cbnz	r3, 80080de <_svfiprintf_r+0x32>
 80080c4:	2140      	movs	r1, #64	; 0x40
 80080c6:	f7ff fb93 	bl	80077f0 <_malloc_r>
 80080ca:	6028      	str	r0, [r5, #0]
 80080cc:	6128      	str	r0, [r5, #16]
 80080ce:	b920      	cbnz	r0, 80080da <_svfiprintf_r+0x2e>
 80080d0:	230c      	movs	r3, #12
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295
 80080d8:	e0d0      	b.n	800827c <_svfiprintf_r+0x1d0>
 80080da:	2340      	movs	r3, #64	; 0x40
 80080dc:	616b      	str	r3, [r5, #20]
 80080de:	2300      	movs	r3, #0
 80080e0:	9309      	str	r3, [sp, #36]	; 0x24
 80080e2:	2320      	movs	r3, #32
 80080e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e8:	2330      	movs	r3, #48	; 0x30
 80080ea:	f04f 0901 	mov.w	r9, #1
 80080ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008294 <_svfiprintf_r+0x1e8>
 80080f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080fa:	4623      	mov	r3, r4
 80080fc:	469a      	mov	sl, r3
 80080fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008102:	b10a      	cbz	r2, 8008108 <_svfiprintf_r+0x5c>
 8008104:	2a25      	cmp	r2, #37	; 0x25
 8008106:	d1f9      	bne.n	80080fc <_svfiprintf_r+0x50>
 8008108:	ebba 0b04 	subs.w	fp, sl, r4
 800810c:	d00b      	beq.n	8008126 <_svfiprintf_r+0x7a>
 800810e:	465b      	mov	r3, fp
 8008110:	4622      	mov	r2, r4
 8008112:	4629      	mov	r1, r5
 8008114:	4638      	mov	r0, r7
 8008116:	f7ff ff6f 	bl	8007ff8 <__ssputs_r>
 800811a:	3001      	adds	r0, #1
 800811c:	f000 80a9 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008122:	445a      	add	r2, fp
 8008124:	9209      	str	r2, [sp, #36]	; 0x24
 8008126:	f89a 3000 	ldrb.w	r3, [sl]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80a1 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008130:	2300      	movs	r3, #0
 8008132:	f04f 32ff 	mov.w	r2, #4294967295
 8008136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800813a:	f10a 0a01 	add.w	sl, sl, #1
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	9307      	str	r3, [sp, #28]
 8008142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008146:	931a      	str	r3, [sp, #104]	; 0x68
 8008148:	4654      	mov	r4, sl
 800814a:	2205      	movs	r2, #5
 800814c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008150:	4850      	ldr	r0, [pc, #320]	; (8008294 <_svfiprintf_r+0x1e8>)
 8008152:	f7fe fc60 	bl	8006a16 <memchr>
 8008156:	9a04      	ldr	r2, [sp, #16]
 8008158:	b9d8      	cbnz	r0, 8008192 <_svfiprintf_r+0xe6>
 800815a:	06d0      	lsls	r0, r2, #27
 800815c:	bf44      	itt	mi
 800815e:	2320      	movmi	r3, #32
 8008160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008164:	0711      	lsls	r1, r2, #28
 8008166:	bf44      	itt	mi
 8008168:	232b      	movmi	r3, #43	; 0x2b
 800816a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816e:	f89a 3000 	ldrb.w	r3, [sl]
 8008172:	2b2a      	cmp	r3, #42	; 0x2a
 8008174:	d015      	beq.n	80081a2 <_svfiprintf_r+0xf6>
 8008176:	4654      	mov	r4, sl
 8008178:	2000      	movs	r0, #0
 800817a:	f04f 0c0a 	mov.w	ip, #10
 800817e:	9a07      	ldr	r2, [sp, #28]
 8008180:	4621      	mov	r1, r4
 8008182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008186:	3b30      	subs	r3, #48	; 0x30
 8008188:	2b09      	cmp	r3, #9
 800818a:	d94d      	bls.n	8008228 <_svfiprintf_r+0x17c>
 800818c:	b1b0      	cbz	r0, 80081bc <_svfiprintf_r+0x110>
 800818e:	9207      	str	r2, [sp, #28]
 8008190:	e014      	b.n	80081bc <_svfiprintf_r+0x110>
 8008192:	eba0 0308 	sub.w	r3, r0, r8
 8008196:	fa09 f303 	lsl.w	r3, r9, r3
 800819a:	4313      	orrs	r3, r2
 800819c:	46a2      	mov	sl, r4
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	e7d2      	b.n	8008148 <_svfiprintf_r+0x9c>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	1d19      	adds	r1, r3, #4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	9103      	str	r1, [sp, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfbb      	ittet	lt
 80081ae:	425b      	neglt	r3, r3
 80081b0:	f042 0202 	orrlt.w	r2, r2, #2
 80081b4:	9307      	strge	r3, [sp, #28]
 80081b6:	9307      	strlt	r3, [sp, #28]
 80081b8:	bfb8      	it	lt
 80081ba:	9204      	strlt	r2, [sp, #16]
 80081bc:	7823      	ldrb	r3, [r4, #0]
 80081be:	2b2e      	cmp	r3, #46	; 0x2e
 80081c0:	d10c      	bne.n	80081dc <_svfiprintf_r+0x130>
 80081c2:	7863      	ldrb	r3, [r4, #1]
 80081c4:	2b2a      	cmp	r3, #42	; 0x2a
 80081c6:	d134      	bne.n	8008232 <_svfiprintf_r+0x186>
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	3402      	adds	r4, #2
 80081cc:	1d1a      	adds	r2, r3, #4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	9203      	str	r2, [sp, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfb8      	it	lt
 80081d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80081da:	9305      	str	r3, [sp, #20]
 80081dc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008298 <_svfiprintf_r+0x1ec>
 80081e0:	2203      	movs	r2, #3
 80081e2:	4650      	mov	r0, sl
 80081e4:	7821      	ldrb	r1, [r4, #0]
 80081e6:	f7fe fc16 	bl	8006a16 <memchr>
 80081ea:	b138      	cbz	r0, 80081fc <_svfiprintf_r+0x150>
 80081ec:	2240      	movs	r2, #64	; 0x40
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	eba0 000a 	sub.w	r0, r0, sl
 80081f4:	4082      	lsls	r2, r0
 80081f6:	4313      	orrs	r3, r2
 80081f8:	3401      	adds	r4, #1
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	2206      	movs	r2, #6
 8008202:	4826      	ldr	r0, [pc, #152]	; (800829c <_svfiprintf_r+0x1f0>)
 8008204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008208:	f7fe fc05 	bl	8006a16 <memchr>
 800820c:	2800      	cmp	r0, #0
 800820e:	d038      	beq.n	8008282 <_svfiprintf_r+0x1d6>
 8008210:	4b23      	ldr	r3, [pc, #140]	; (80082a0 <_svfiprintf_r+0x1f4>)
 8008212:	bb1b      	cbnz	r3, 800825c <_svfiprintf_r+0x1b0>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	3307      	adds	r3, #7
 8008218:	f023 0307 	bic.w	r3, r3, #7
 800821c:	3308      	adds	r3, #8
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008222:	4433      	add	r3, r6
 8008224:	9309      	str	r3, [sp, #36]	; 0x24
 8008226:	e768      	b.n	80080fa <_svfiprintf_r+0x4e>
 8008228:	460c      	mov	r4, r1
 800822a:	2001      	movs	r0, #1
 800822c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008230:	e7a6      	b.n	8008180 <_svfiprintf_r+0xd4>
 8008232:	2300      	movs	r3, #0
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	4619      	mov	r1, r3
 800823a:	3401      	adds	r4, #1
 800823c:	9305      	str	r3, [sp, #20]
 800823e:	4620      	mov	r0, r4
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	3a30      	subs	r2, #48	; 0x30
 8008246:	2a09      	cmp	r2, #9
 8008248:	d903      	bls.n	8008252 <_svfiprintf_r+0x1a6>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0c6      	beq.n	80081dc <_svfiprintf_r+0x130>
 800824e:	9105      	str	r1, [sp, #20]
 8008250:	e7c4      	b.n	80081dc <_svfiprintf_r+0x130>
 8008252:	4604      	mov	r4, r0
 8008254:	2301      	movs	r3, #1
 8008256:	fb0c 2101 	mla	r1, ip, r1, r2
 800825a:	e7f0      	b.n	800823e <_svfiprintf_r+0x192>
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4638      	mov	r0, r7
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <_svfiprintf_r+0x1f8>)
 8008266:	a904      	add	r1, sp, #16
 8008268:	f7fd fe6e 	bl	8005f48 <_printf_float>
 800826c:	1c42      	adds	r2, r0, #1
 800826e:	4606      	mov	r6, r0
 8008270:	d1d6      	bne.n	8008220 <_svfiprintf_r+0x174>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	065b      	lsls	r3, r3, #25
 8008276:	f53f af2d 	bmi.w	80080d4 <_svfiprintf_r+0x28>
 800827a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800827c:	b01d      	add	sp, #116	; 0x74
 800827e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008282:	ab03      	add	r3, sp, #12
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	462a      	mov	r2, r5
 8008288:	4638      	mov	r0, r7
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <_svfiprintf_r+0x1f8>)
 800828c:	a904      	add	r1, sp, #16
 800828e:	f7fe f8fb 	bl	8006488 <_printf_i>
 8008292:	e7eb      	b.n	800826c <_svfiprintf_r+0x1c0>
 8008294:	08008d84 	.word	0x08008d84
 8008298:	08008d8a 	.word	0x08008d8a
 800829c:	08008d8e 	.word	0x08008d8e
 80082a0:	08005f49 	.word	0x08005f49
 80082a4:	08007ff9 	.word	0x08007ff9

080082a8 <__sflush_r>:
 80082a8:	898a      	ldrh	r2, [r1, #12]
 80082aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ac:	4605      	mov	r5, r0
 80082ae:	0710      	lsls	r0, r2, #28
 80082b0:	460c      	mov	r4, r1
 80082b2:	d457      	bmi.n	8008364 <__sflush_r+0xbc>
 80082b4:	684b      	ldr	r3, [r1, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dc04      	bgt.n	80082c4 <__sflush_r+0x1c>
 80082ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dc01      	bgt.n	80082c4 <__sflush_r+0x1c>
 80082c0:	2000      	movs	r0, #0
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082c6:	2e00      	cmp	r6, #0
 80082c8:	d0fa      	beq.n	80082c0 <__sflush_r+0x18>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d0:	682f      	ldr	r7, [r5, #0]
 80082d2:	6a21      	ldr	r1, [r4, #32]
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	d032      	beq.n	800833e <__sflush_r+0x96>
 80082d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	075a      	lsls	r2, r3, #29
 80082de:	d505      	bpl.n	80082ec <__sflush_r+0x44>
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	1ac0      	subs	r0, r0, r3
 80082e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082e6:	b10b      	cbz	r3, 80082ec <__sflush_r+0x44>
 80082e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082ea:	1ac0      	subs	r0, r0, r3
 80082ec:	2300      	movs	r3, #0
 80082ee:	4602      	mov	r2, r0
 80082f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f2:	4628      	mov	r0, r5
 80082f4:	6a21      	ldr	r1, [r4, #32]
 80082f6:	47b0      	blx	r6
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	d106      	bne.n	800830c <__sflush_r+0x64>
 80082fe:	6829      	ldr	r1, [r5, #0]
 8008300:	291d      	cmp	r1, #29
 8008302:	d82b      	bhi.n	800835c <__sflush_r+0xb4>
 8008304:	4a28      	ldr	r2, [pc, #160]	; (80083a8 <__sflush_r+0x100>)
 8008306:	410a      	asrs	r2, r1
 8008308:	07d6      	lsls	r6, r2, #31
 800830a:	d427      	bmi.n	800835c <__sflush_r+0xb4>
 800830c:	2200      	movs	r2, #0
 800830e:	6062      	str	r2, [r4, #4]
 8008310:	6922      	ldr	r2, [r4, #16]
 8008312:	04d9      	lsls	r1, r3, #19
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	d504      	bpl.n	8008322 <__sflush_r+0x7a>
 8008318:	1c42      	adds	r2, r0, #1
 800831a:	d101      	bne.n	8008320 <__sflush_r+0x78>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b903      	cbnz	r3, 8008322 <__sflush_r+0x7a>
 8008320:	6560      	str	r0, [r4, #84]	; 0x54
 8008322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008324:	602f      	str	r7, [r5, #0]
 8008326:	2900      	cmp	r1, #0
 8008328:	d0ca      	beq.n	80082c0 <__sflush_r+0x18>
 800832a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800832e:	4299      	cmp	r1, r3
 8008330:	d002      	beq.n	8008338 <__sflush_r+0x90>
 8008332:	4628      	mov	r0, r5
 8008334:	f7ff f9ec 	bl	8007710 <_free_r>
 8008338:	2000      	movs	r0, #0
 800833a:	6360      	str	r0, [r4, #52]	; 0x34
 800833c:	e7c1      	b.n	80082c2 <__sflush_r+0x1a>
 800833e:	2301      	movs	r3, #1
 8008340:	4628      	mov	r0, r5
 8008342:	47b0      	blx	r6
 8008344:	1c41      	adds	r1, r0, #1
 8008346:	d1c8      	bne.n	80082da <__sflush_r+0x32>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0c5      	beq.n	80082da <__sflush_r+0x32>
 800834e:	2b1d      	cmp	r3, #29
 8008350:	d001      	beq.n	8008356 <__sflush_r+0xae>
 8008352:	2b16      	cmp	r3, #22
 8008354:	d101      	bne.n	800835a <__sflush_r+0xb2>
 8008356:	602f      	str	r7, [r5, #0]
 8008358:	e7b2      	b.n	80082c0 <__sflush_r+0x18>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	e7ae      	b.n	80082c2 <__sflush_r+0x1a>
 8008364:	690f      	ldr	r7, [r1, #16]
 8008366:	2f00      	cmp	r7, #0
 8008368:	d0aa      	beq.n	80082c0 <__sflush_r+0x18>
 800836a:	0793      	lsls	r3, r2, #30
 800836c:	bf18      	it	ne
 800836e:	2300      	movne	r3, #0
 8008370:	680e      	ldr	r6, [r1, #0]
 8008372:	bf08      	it	eq
 8008374:	694b      	ldreq	r3, [r1, #20]
 8008376:	1bf6      	subs	r6, r6, r7
 8008378:	600f      	str	r7, [r1, #0]
 800837a:	608b      	str	r3, [r1, #8]
 800837c:	2e00      	cmp	r6, #0
 800837e:	dd9f      	ble.n	80082c0 <__sflush_r+0x18>
 8008380:	4633      	mov	r3, r6
 8008382:	463a      	mov	r2, r7
 8008384:	4628      	mov	r0, r5
 8008386:	6a21      	ldr	r1, [r4, #32]
 8008388:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800838c:	47e0      	blx	ip
 800838e:	2800      	cmp	r0, #0
 8008390:	dc06      	bgt.n	80083a0 <__sflush_r+0xf8>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	e790      	b.n	80082c2 <__sflush_r+0x1a>
 80083a0:	4407      	add	r7, r0
 80083a2:	1a36      	subs	r6, r6, r0
 80083a4:	e7ea      	b.n	800837c <__sflush_r+0xd4>
 80083a6:	bf00      	nop
 80083a8:	dfbffffe 	.word	0xdfbffffe

080083ac <_fflush_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	4605      	mov	r5, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	b913      	cbnz	r3, 80083bc <_fflush_r+0x10>
 80083b6:	2500      	movs	r5, #0
 80083b8:	4628      	mov	r0, r5
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	b118      	cbz	r0, 80083c6 <_fflush_r+0x1a>
 80083be:	6a03      	ldr	r3, [r0, #32]
 80083c0:	b90b      	cbnz	r3, 80083c6 <_fflush_r+0x1a>
 80083c2:	f7fe fa0f 	bl	80067e4 <__sinit>
 80083c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f3      	beq.n	80083b6 <_fflush_r+0xa>
 80083ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083d0:	07d0      	lsls	r0, r2, #31
 80083d2:	d404      	bmi.n	80083de <_fflush_r+0x32>
 80083d4:	0599      	lsls	r1, r3, #22
 80083d6:	d402      	bmi.n	80083de <_fflush_r+0x32>
 80083d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083da:	f7fe fb1a 	bl	8006a12 <__retarget_lock_acquire_recursive>
 80083de:	4628      	mov	r0, r5
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7ff ff61 	bl	80082a8 <__sflush_r>
 80083e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083e8:	4605      	mov	r5, r0
 80083ea:	07da      	lsls	r2, r3, #31
 80083ec:	d4e4      	bmi.n	80083b8 <_fflush_r+0xc>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	059b      	lsls	r3, r3, #22
 80083f2:	d4e1      	bmi.n	80083b8 <_fflush_r+0xc>
 80083f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083f6:	f7fe fb0d 	bl	8006a14 <__retarget_lock_release_recursive>
 80083fa:	e7dd      	b.n	80083b8 <_fflush_r+0xc>

080083fc <memmove>:
 80083fc:	4288      	cmp	r0, r1
 80083fe:	b510      	push	{r4, lr}
 8008400:	eb01 0402 	add.w	r4, r1, r2
 8008404:	d902      	bls.n	800840c <memmove+0x10>
 8008406:	4284      	cmp	r4, r0
 8008408:	4623      	mov	r3, r4
 800840a:	d807      	bhi.n	800841c <memmove+0x20>
 800840c:	1e43      	subs	r3, r0, #1
 800840e:	42a1      	cmp	r1, r4
 8008410:	d008      	beq.n	8008424 <memmove+0x28>
 8008412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800841a:	e7f8      	b.n	800840e <memmove+0x12>
 800841c:	4601      	mov	r1, r0
 800841e:	4402      	add	r2, r0
 8008420:	428a      	cmp	r2, r1
 8008422:	d100      	bne.n	8008426 <memmove+0x2a>
 8008424:	bd10      	pop	{r4, pc}
 8008426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800842a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800842e:	e7f7      	b.n	8008420 <memmove+0x24>

08008430 <_sbrk_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d05      	ldr	r5, [pc, #20]	; (800844c <_sbrk_r+0x1c>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7fa fa0a 	bl	8002854 <_sbrk>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_sbrk_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_sbrk_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000678 	.word	0x20000678

08008450 <memcpy>:
 8008450:	440a      	add	r2, r1
 8008452:	4291      	cmp	r1, r2
 8008454:	f100 33ff 	add.w	r3, r0, #4294967295
 8008458:	d100      	bne.n	800845c <memcpy+0xc>
 800845a:	4770      	bx	lr
 800845c:	b510      	push	{r4, lr}
 800845e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008462:	4291      	cmp	r1, r2
 8008464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008468:	d1f9      	bne.n	800845e <memcpy+0xe>
 800846a:	bd10      	pop	{r4, pc}

0800846c <__assert_func>:
 800846c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800846e:	4614      	mov	r4, r2
 8008470:	461a      	mov	r2, r3
 8008472:	4b09      	ldr	r3, [pc, #36]	; (8008498 <__assert_func+0x2c>)
 8008474:	4605      	mov	r5, r0
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68d8      	ldr	r0, [r3, #12]
 800847a:	b14c      	cbz	r4, 8008490 <__assert_func+0x24>
 800847c:	4b07      	ldr	r3, [pc, #28]	; (800849c <__assert_func+0x30>)
 800847e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008482:	9100      	str	r1, [sp, #0]
 8008484:	462b      	mov	r3, r5
 8008486:	4906      	ldr	r1, [pc, #24]	; (80084a0 <__assert_func+0x34>)
 8008488:	f000 f870 	bl	800856c <fiprintf>
 800848c:	f000 f880 	bl	8008590 <abort>
 8008490:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <__assert_func+0x38>)
 8008492:	461c      	mov	r4, r3
 8008494:	e7f3      	b.n	800847e <__assert_func+0x12>
 8008496:	bf00      	nop
 8008498:	20000074 	.word	0x20000074
 800849c:	08008d9f 	.word	0x08008d9f
 80084a0:	08008dac 	.word	0x08008dac
 80084a4:	08008dda 	.word	0x08008dda

080084a8 <_calloc_r>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	fba1 5402 	umull	r5, r4, r1, r2
 80084ae:	b934      	cbnz	r4, 80084be <_calloc_r+0x16>
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7ff f99d 	bl	80077f0 <_malloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	b928      	cbnz	r0, 80084c6 <_calloc_r+0x1e>
 80084ba:	4630      	mov	r0, r6
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
 80084be:	220c      	movs	r2, #12
 80084c0:	2600      	movs	r6, #0
 80084c2:	6002      	str	r2, [r0, #0]
 80084c4:	e7f9      	b.n	80084ba <_calloc_r+0x12>
 80084c6:	462a      	mov	r2, r5
 80084c8:	4621      	mov	r1, r4
 80084ca:	f7fe fa24 	bl	8006916 <memset>
 80084ce:	e7f4      	b.n	80084ba <_calloc_r+0x12>

080084d0 <__ascii_mbtowc>:
 80084d0:	b082      	sub	sp, #8
 80084d2:	b901      	cbnz	r1, 80084d6 <__ascii_mbtowc+0x6>
 80084d4:	a901      	add	r1, sp, #4
 80084d6:	b142      	cbz	r2, 80084ea <__ascii_mbtowc+0x1a>
 80084d8:	b14b      	cbz	r3, 80084ee <__ascii_mbtowc+0x1e>
 80084da:	7813      	ldrb	r3, [r2, #0]
 80084dc:	600b      	str	r3, [r1, #0]
 80084de:	7812      	ldrb	r2, [r2, #0]
 80084e0:	1e10      	subs	r0, r2, #0
 80084e2:	bf18      	it	ne
 80084e4:	2001      	movne	r0, #1
 80084e6:	b002      	add	sp, #8
 80084e8:	4770      	bx	lr
 80084ea:	4610      	mov	r0, r2
 80084ec:	e7fb      	b.n	80084e6 <__ascii_mbtowc+0x16>
 80084ee:	f06f 0001 	mvn.w	r0, #1
 80084f2:	e7f8      	b.n	80084e6 <__ascii_mbtowc+0x16>

080084f4 <_realloc_r>:
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	4680      	mov	r8, r0
 80084fa:	4614      	mov	r4, r2
 80084fc:	460e      	mov	r6, r1
 80084fe:	b921      	cbnz	r1, 800850a <_realloc_r+0x16>
 8008500:	4611      	mov	r1, r2
 8008502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	f7ff b973 	b.w	80077f0 <_malloc_r>
 800850a:	b92a      	cbnz	r2, 8008518 <_realloc_r+0x24>
 800850c:	f7ff f900 	bl	8007710 <_free_r>
 8008510:	4625      	mov	r5, r4
 8008512:	4628      	mov	r0, r5
 8008514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008518:	f000 f841 	bl	800859e <_malloc_usable_size_r>
 800851c:	4284      	cmp	r4, r0
 800851e:	4607      	mov	r7, r0
 8008520:	d802      	bhi.n	8008528 <_realloc_r+0x34>
 8008522:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008526:	d812      	bhi.n	800854e <_realloc_r+0x5a>
 8008528:	4621      	mov	r1, r4
 800852a:	4640      	mov	r0, r8
 800852c:	f7ff f960 	bl	80077f0 <_malloc_r>
 8008530:	4605      	mov	r5, r0
 8008532:	2800      	cmp	r0, #0
 8008534:	d0ed      	beq.n	8008512 <_realloc_r+0x1e>
 8008536:	42bc      	cmp	r4, r7
 8008538:	4622      	mov	r2, r4
 800853a:	4631      	mov	r1, r6
 800853c:	bf28      	it	cs
 800853e:	463a      	movcs	r2, r7
 8008540:	f7ff ff86 	bl	8008450 <memcpy>
 8008544:	4631      	mov	r1, r6
 8008546:	4640      	mov	r0, r8
 8008548:	f7ff f8e2 	bl	8007710 <_free_r>
 800854c:	e7e1      	b.n	8008512 <_realloc_r+0x1e>
 800854e:	4635      	mov	r5, r6
 8008550:	e7df      	b.n	8008512 <_realloc_r+0x1e>

08008552 <__ascii_wctomb>:
 8008552:	4603      	mov	r3, r0
 8008554:	4608      	mov	r0, r1
 8008556:	b141      	cbz	r1, 800856a <__ascii_wctomb+0x18>
 8008558:	2aff      	cmp	r2, #255	; 0xff
 800855a:	d904      	bls.n	8008566 <__ascii_wctomb+0x14>
 800855c:	228a      	movs	r2, #138	; 0x8a
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	4770      	bx	lr
 8008566:	2001      	movs	r0, #1
 8008568:	700a      	strb	r2, [r1, #0]
 800856a:	4770      	bx	lr

0800856c <fiprintf>:
 800856c:	b40e      	push	{r1, r2, r3}
 800856e:	b503      	push	{r0, r1, lr}
 8008570:	4601      	mov	r1, r0
 8008572:	ab03      	add	r3, sp, #12
 8008574:	4805      	ldr	r0, [pc, #20]	; (800858c <fiprintf+0x20>)
 8008576:	f853 2b04 	ldr.w	r2, [r3], #4
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	f000 f83d 	bl	80085fc <_vfiprintf_r>
 8008582:	b002      	add	sp, #8
 8008584:	f85d eb04 	ldr.w	lr, [sp], #4
 8008588:	b003      	add	sp, #12
 800858a:	4770      	bx	lr
 800858c:	20000074 	.word	0x20000074

08008590 <abort>:
 8008590:	2006      	movs	r0, #6
 8008592:	b508      	push	{r3, lr}
 8008594:	f000 fa0a 	bl	80089ac <raise>
 8008598:	2001      	movs	r0, #1
 800859a:	f7fa f8e8 	bl	800276e <_exit>

0800859e <_malloc_usable_size_r>:
 800859e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a2:	1f18      	subs	r0, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bfbc      	itt	lt
 80085a8:	580b      	ldrlt	r3, [r1, r0]
 80085aa:	18c0      	addlt	r0, r0, r3
 80085ac:	4770      	bx	lr

080085ae <__sfputc_r>:
 80085ae:	6893      	ldr	r3, [r2, #8]
 80085b0:	b410      	push	{r4}
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	6093      	str	r3, [r2, #8]
 80085b8:	da07      	bge.n	80085ca <__sfputc_r+0x1c>
 80085ba:	6994      	ldr	r4, [r2, #24]
 80085bc:	42a3      	cmp	r3, r4
 80085be:	db01      	blt.n	80085c4 <__sfputc_r+0x16>
 80085c0:	290a      	cmp	r1, #10
 80085c2:	d102      	bne.n	80085ca <__sfputc_r+0x1c>
 80085c4:	bc10      	pop	{r4}
 80085c6:	f000 b933 	b.w	8008830 <__swbuf_r>
 80085ca:	6813      	ldr	r3, [r2, #0]
 80085cc:	1c58      	adds	r0, r3, #1
 80085ce:	6010      	str	r0, [r2, #0]
 80085d0:	7019      	strb	r1, [r3, #0]
 80085d2:	4608      	mov	r0, r1
 80085d4:	bc10      	pop	{r4}
 80085d6:	4770      	bx	lr

080085d8 <__sfputs_r>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	4606      	mov	r6, r0
 80085dc:	460f      	mov	r7, r1
 80085de:	4614      	mov	r4, r2
 80085e0:	18d5      	adds	r5, r2, r3
 80085e2:	42ac      	cmp	r4, r5
 80085e4:	d101      	bne.n	80085ea <__sfputs_r+0x12>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e007      	b.n	80085fa <__sfputs_r+0x22>
 80085ea:	463a      	mov	r2, r7
 80085ec:	4630      	mov	r0, r6
 80085ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f2:	f7ff ffdc 	bl	80085ae <__sfputc_r>
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	d1f3      	bne.n	80085e2 <__sfputs_r+0xa>
 80085fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085fc <_vfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	460d      	mov	r5, r1
 8008602:	4614      	mov	r4, r2
 8008604:	4698      	mov	r8, r3
 8008606:	4606      	mov	r6, r0
 8008608:	b09d      	sub	sp, #116	; 0x74
 800860a:	b118      	cbz	r0, 8008614 <_vfiprintf_r+0x18>
 800860c:	6a03      	ldr	r3, [r0, #32]
 800860e:	b90b      	cbnz	r3, 8008614 <_vfiprintf_r+0x18>
 8008610:	f7fe f8e8 	bl	80067e4 <__sinit>
 8008614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	d405      	bmi.n	8008626 <_vfiprintf_r+0x2a>
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	059a      	lsls	r2, r3, #22
 800861e:	d402      	bmi.n	8008626 <_vfiprintf_r+0x2a>
 8008620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008622:	f7fe f9f6 	bl	8006a12 <__retarget_lock_acquire_recursive>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	071b      	lsls	r3, r3, #28
 800862a:	d501      	bpl.n	8008630 <_vfiprintf_r+0x34>
 800862c:	692b      	ldr	r3, [r5, #16]
 800862e:	b99b      	cbnz	r3, 8008658 <_vfiprintf_r+0x5c>
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f93a 	bl	80088ac <__swsetup_r>
 8008638:	b170      	cbz	r0, 8008658 <_vfiprintf_r+0x5c>
 800863a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800863c:	07dc      	lsls	r4, r3, #31
 800863e:	d504      	bpl.n	800864a <_vfiprintf_r+0x4e>
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	b01d      	add	sp, #116	; 0x74
 8008646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864a:	89ab      	ldrh	r3, [r5, #12]
 800864c:	0598      	lsls	r0, r3, #22
 800864e:	d4f7      	bmi.n	8008640 <_vfiprintf_r+0x44>
 8008650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008652:	f7fe f9df 	bl	8006a14 <__retarget_lock_release_recursive>
 8008656:	e7f3      	b.n	8008640 <_vfiprintf_r+0x44>
 8008658:	2300      	movs	r3, #0
 800865a:	9309      	str	r3, [sp, #36]	; 0x24
 800865c:	2320      	movs	r3, #32
 800865e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008662:	2330      	movs	r3, #48	; 0x30
 8008664:	f04f 0901 	mov.w	r9, #1
 8008668:	f8cd 800c 	str.w	r8, [sp, #12]
 800866c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800881c <_vfiprintf_r+0x220>
 8008670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008674:	4623      	mov	r3, r4
 8008676:	469a      	mov	sl, r3
 8008678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800867c:	b10a      	cbz	r2, 8008682 <_vfiprintf_r+0x86>
 800867e:	2a25      	cmp	r2, #37	; 0x25
 8008680:	d1f9      	bne.n	8008676 <_vfiprintf_r+0x7a>
 8008682:	ebba 0b04 	subs.w	fp, sl, r4
 8008686:	d00b      	beq.n	80086a0 <_vfiprintf_r+0xa4>
 8008688:	465b      	mov	r3, fp
 800868a:	4622      	mov	r2, r4
 800868c:	4629      	mov	r1, r5
 800868e:	4630      	mov	r0, r6
 8008690:	f7ff ffa2 	bl	80085d8 <__sfputs_r>
 8008694:	3001      	adds	r0, #1
 8008696:	f000 80a9 	beq.w	80087ec <_vfiprintf_r+0x1f0>
 800869a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800869c:	445a      	add	r2, fp
 800869e:	9209      	str	r2, [sp, #36]	; 0x24
 80086a0:	f89a 3000 	ldrb.w	r3, [sl]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80a1 	beq.w	80087ec <_vfiprintf_r+0x1f0>
 80086aa:	2300      	movs	r3, #0
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086b4:	f10a 0a01 	add.w	sl, sl, #1
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	9307      	str	r3, [sp, #28]
 80086bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086c0:	931a      	str	r3, [sp, #104]	; 0x68
 80086c2:	4654      	mov	r4, sl
 80086c4:	2205      	movs	r2, #5
 80086c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ca:	4854      	ldr	r0, [pc, #336]	; (800881c <_vfiprintf_r+0x220>)
 80086cc:	f7fe f9a3 	bl	8006a16 <memchr>
 80086d0:	9a04      	ldr	r2, [sp, #16]
 80086d2:	b9d8      	cbnz	r0, 800870c <_vfiprintf_r+0x110>
 80086d4:	06d1      	lsls	r1, r2, #27
 80086d6:	bf44      	itt	mi
 80086d8:	2320      	movmi	r3, #32
 80086da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086de:	0713      	lsls	r3, r2, #28
 80086e0:	bf44      	itt	mi
 80086e2:	232b      	movmi	r3, #43	; 0x2b
 80086e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e8:	f89a 3000 	ldrb.w	r3, [sl]
 80086ec:	2b2a      	cmp	r3, #42	; 0x2a
 80086ee:	d015      	beq.n	800871c <_vfiprintf_r+0x120>
 80086f0:	4654      	mov	r4, sl
 80086f2:	2000      	movs	r0, #0
 80086f4:	f04f 0c0a 	mov.w	ip, #10
 80086f8:	9a07      	ldr	r2, [sp, #28]
 80086fa:	4621      	mov	r1, r4
 80086fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008700:	3b30      	subs	r3, #48	; 0x30
 8008702:	2b09      	cmp	r3, #9
 8008704:	d94d      	bls.n	80087a2 <_vfiprintf_r+0x1a6>
 8008706:	b1b0      	cbz	r0, 8008736 <_vfiprintf_r+0x13a>
 8008708:	9207      	str	r2, [sp, #28]
 800870a:	e014      	b.n	8008736 <_vfiprintf_r+0x13a>
 800870c:	eba0 0308 	sub.w	r3, r0, r8
 8008710:	fa09 f303 	lsl.w	r3, r9, r3
 8008714:	4313      	orrs	r3, r2
 8008716:	46a2      	mov	sl, r4
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	e7d2      	b.n	80086c2 <_vfiprintf_r+0xc6>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	1d19      	adds	r1, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	9103      	str	r1, [sp, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	bfbb      	ittet	lt
 8008728:	425b      	neglt	r3, r3
 800872a:	f042 0202 	orrlt.w	r2, r2, #2
 800872e:	9307      	strge	r3, [sp, #28]
 8008730:	9307      	strlt	r3, [sp, #28]
 8008732:	bfb8      	it	lt
 8008734:	9204      	strlt	r2, [sp, #16]
 8008736:	7823      	ldrb	r3, [r4, #0]
 8008738:	2b2e      	cmp	r3, #46	; 0x2e
 800873a:	d10c      	bne.n	8008756 <_vfiprintf_r+0x15a>
 800873c:	7863      	ldrb	r3, [r4, #1]
 800873e:	2b2a      	cmp	r3, #42	; 0x2a
 8008740:	d134      	bne.n	80087ac <_vfiprintf_r+0x1b0>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	3402      	adds	r4, #2
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	9203      	str	r2, [sp, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfb8      	it	lt
 8008750:	f04f 33ff 	movlt.w	r3, #4294967295
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008820 <_vfiprintf_r+0x224>
 800875a:	2203      	movs	r2, #3
 800875c:	4650      	mov	r0, sl
 800875e:	7821      	ldrb	r1, [r4, #0]
 8008760:	f7fe f959 	bl	8006a16 <memchr>
 8008764:	b138      	cbz	r0, 8008776 <_vfiprintf_r+0x17a>
 8008766:	2240      	movs	r2, #64	; 0x40
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	eba0 000a 	sub.w	r0, r0, sl
 800876e:	4082      	lsls	r2, r0
 8008770:	4313      	orrs	r3, r2
 8008772:	3401      	adds	r4, #1
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877a:	2206      	movs	r2, #6
 800877c:	4829      	ldr	r0, [pc, #164]	; (8008824 <_vfiprintf_r+0x228>)
 800877e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008782:	f7fe f948 	bl	8006a16 <memchr>
 8008786:	2800      	cmp	r0, #0
 8008788:	d03f      	beq.n	800880a <_vfiprintf_r+0x20e>
 800878a:	4b27      	ldr	r3, [pc, #156]	; (8008828 <_vfiprintf_r+0x22c>)
 800878c:	bb1b      	cbnz	r3, 80087d6 <_vfiprintf_r+0x1da>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	3307      	adds	r3, #7
 8008792:	f023 0307 	bic.w	r3, r3, #7
 8008796:	3308      	adds	r3, #8
 8008798:	9303      	str	r3, [sp, #12]
 800879a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879c:	443b      	add	r3, r7
 800879e:	9309      	str	r3, [sp, #36]	; 0x24
 80087a0:	e768      	b.n	8008674 <_vfiprintf_r+0x78>
 80087a2:	460c      	mov	r4, r1
 80087a4:	2001      	movs	r0, #1
 80087a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087aa:	e7a6      	b.n	80086fa <_vfiprintf_r+0xfe>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f04f 0c0a 	mov.w	ip, #10
 80087b2:	4619      	mov	r1, r3
 80087b4:	3401      	adds	r4, #1
 80087b6:	9305      	str	r3, [sp, #20]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087be:	3a30      	subs	r2, #48	; 0x30
 80087c0:	2a09      	cmp	r2, #9
 80087c2:	d903      	bls.n	80087cc <_vfiprintf_r+0x1d0>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0c6      	beq.n	8008756 <_vfiprintf_r+0x15a>
 80087c8:	9105      	str	r1, [sp, #20]
 80087ca:	e7c4      	b.n	8008756 <_vfiprintf_r+0x15a>
 80087cc:	4604      	mov	r4, r0
 80087ce:	2301      	movs	r3, #1
 80087d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087d4:	e7f0      	b.n	80087b8 <_vfiprintf_r+0x1bc>
 80087d6:	ab03      	add	r3, sp, #12
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	462a      	mov	r2, r5
 80087dc:	4630      	mov	r0, r6
 80087de:	4b13      	ldr	r3, [pc, #76]	; (800882c <_vfiprintf_r+0x230>)
 80087e0:	a904      	add	r1, sp, #16
 80087e2:	f7fd fbb1 	bl	8005f48 <_printf_float>
 80087e6:	4607      	mov	r7, r0
 80087e8:	1c78      	adds	r0, r7, #1
 80087ea:	d1d6      	bne.n	800879a <_vfiprintf_r+0x19e>
 80087ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ee:	07d9      	lsls	r1, r3, #31
 80087f0:	d405      	bmi.n	80087fe <_vfiprintf_r+0x202>
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	059a      	lsls	r2, r3, #22
 80087f6:	d402      	bmi.n	80087fe <_vfiprintf_r+0x202>
 80087f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087fa:	f7fe f90b 	bl	8006a14 <__retarget_lock_release_recursive>
 80087fe:	89ab      	ldrh	r3, [r5, #12]
 8008800:	065b      	lsls	r3, r3, #25
 8008802:	f53f af1d 	bmi.w	8008640 <_vfiprintf_r+0x44>
 8008806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008808:	e71c      	b.n	8008644 <_vfiprintf_r+0x48>
 800880a:	ab03      	add	r3, sp, #12
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	462a      	mov	r2, r5
 8008810:	4630      	mov	r0, r6
 8008812:	4b06      	ldr	r3, [pc, #24]	; (800882c <_vfiprintf_r+0x230>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	f7fd fe37 	bl	8006488 <_printf_i>
 800881a:	e7e4      	b.n	80087e6 <_vfiprintf_r+0x1ea>
 800881c:	08008d84 	.word	0x08008d84
 8008820:	08008d8a 	.word	0x08008d8a
 8008824:	08008d8e 	.word	0x08008d8e
 8008828:	08005f49 	.word	0x08005f49
 800882c:	080085d9 	.word	0x080085d9

08008830 <__swbuf_r>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	460e      	mov	r6, r1
 8008834:	4614      	mov	r4, r2
 8008836:	4605      	mov	r5, r0
 8008838:	b118      	cbz	r0, 8008842 <__swbuf_r+0x12>
 800883a:	6a03      	ldr	r3, [r0, #32]
 800883c:	b90b      	cbnz	r3, 8008842 <__swbuf_r+0x12>
 800883e:	f7fd ffd1 	bl	80067e4 <__sinit>
 8008842:	69a3      	ldr	r3, [r4, #24]
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	071a      	lsls	r2, r3, #28
 800884a:	d525      	bpl.n	8008898 <__swbuf_r+0x68>
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	b31b      	cbz	r3, 8008898 <__swbuf_r+0x68>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	6922      	ldr	r2, [r4, #16]
 8008854:	b2f6      	uxtb	r6, r6
 8008856:	1a98      	subs	r0, r3, r2
 8008858:	6963      	ldr	r3, [r4, #20]
 800885a:	4637      	mov	r7, r6
 800885c:	4283      	cmp	r3, r0
 800885e:	dc04      	bgt.n	800886a <__swbuf_r+0x3a>
 8008860:	4621      	mov	r1, r4
 8008862:	4628      	mov	r0, r5
 8008864:	f7ff fda2 	bl	80083ac <_fflush_r>
 8008868:	b9e0      	cbnz	r0, 80088a4 <__swbuf_r+0x74>
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	3b01      	subs	r3, #1
 800886e:	60a3      	str	r3, [r4, #8]
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	6022      	str	r2, [r4, #0]
 8008876:	701e      	strb	r6, [r3, #0]
 8008878:	6962      	ldr	r2, [r4, #20]
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	429a      	cmp	r2, r3
 800887e:	d004      	beq.n	800888a <__swbuf_r+0x5a>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	07db      	lsls	r3, r3, #31
 8008884:	d506      	bpl.n	8008894 <__swbuf_r+0x64>
 8008886:	2e0a      	cmp	r6, #10
 8008888:	d104      	bne.n	8008894 <__swbuf_r+0x64>
 800888a:	4621      	mov	r1, r4
 800888c:	4628      	mov	r0, r5
 800888e:	f7ff fd8d 	bl	80083ac <_fflush_r>
 8008892:	b938      	cbnz	r0, 80088a4 <__swbuf_r+0x74>
 8008894:	4638      	mov	r0, r7
 8008896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f806 	bl	80088ac <__swsetup_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d0d5      	beq.n	8008850 <__swbuf_r+0x20>
 80088a4:	f04f 37ff 	mov.w	r7, #4294967295
 80088a8:	e7f4      	b.n	8008894 <__swbuf_r+0x64>
	...

080088ac <__swsetup_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <__swsetup_r+0xac>)
 80088b0:	4605      	mov	r5, r0
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	460c      	mov	r4, r1
 80088b6:	b118      	cbz	r0, 80088c0 <__swsetup_r+0x14>
 80088b8:	6a03      	ldr	r3, [r0, #32]
 80088ba:	b90b      	cbnz	r3, 80088c0 <__swsetup_r+0x14>
 80088bc:	f7fd ff92 	bl	80067e4 <__sinit>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088c6:	0718      	lsls	r0, r3, #28
 80088c8:	d422      	bmi.n	8008910 <__swsetup_r+0x64>
 80088ca:	06d9      	lsls	r1, r3, #27
 80088cc:	d407      	bmi.n	80088de <__swsetup_r+0x32>
 80088ce:	2309      	movs	r3, #9
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	e034      	b.n	8008948 <__swsetup_r+0x9c>
 80088de:	0758      	lsls	r0, r3, #29
 80088e0:	d512      	bpl.n	8008908 <__swsetup_r+0x5c>
 80088e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e4:	b141      	cbz	r1, 80088f8 <__swsetup_r+0x4c>
 80088e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d002      	beq.n	80088f4 <__swsetup_r+0x48>
 80088ee:	4628      	mov	r0, r5
 80088f0:	f7fe ff0e 	bl	8007710 <_free_r>
 80088f4:	2300      	movs	r3, #0
 80088f6:	6363      	str	r3, [r4, #52]	; 0x34
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	2300      	movs	r3, #0
 8008902:	6063      	str	r3, [r4, #4]
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f043 0308 	orr.w	r3, r3, #8
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	b94b      	cbnz	r3, 8008928 <__swsetup_r+0x7c>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800891a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891e:	d003      	beq.n	8008928 <__swsetup_r+0x7c>
 8008920:	4621      	mov	r1, r4
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f883 	bl	8008a2e <__smakebuf_r>
 8008928:	89a0      	ldrh	r0, [r4, #12]
 800892a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800892e:	f010 0301 	ands.w	r3, r0, #1
 8008932:	d00a      	beq.n	800894a <__swsetup_r+0x9e>
 8008934:	2300      	movs	r3, #0
 8008936:	60a3      	str	r3, [r4, #8]
 8008938:	6963      	ldr	r3, [r4, #20]
 800893a:	425b      	negs	r3, r3
 800893c:	61a3      	str	r3, [r4, #24]
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	b943      	cbnz	r3, 8008954 <__swsetup_r+0xa8>
 8008942:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008946:	d1c4      	bne.n	80088d2 <__swsetup_r+0x26>
 8008948:	bd38      	pop	{r3, r4, r5, pc}
 800894a:	0781      	lsls	r1, r0, #30
 800894c:	bf58      	it	pl
 800894e:	6963      	ldrpl	r3, [r4, #20]
 8008950:	60a3      	str	r3, [r4, #8]
 8008952:	e7f4      	b.n	800893e <__swsetup_r+0x92>
 8008954:	2000      	movs	r0, #0
 8008956:	e7f7      	b.n	8008948 <__swsetup_r+0x9c>
 8008958:	20000074 	.word	0x20000074

0800895c <_raise_r>:
 800895c:	291f      	cmp	r1, #31
 800895e:	b538      	push	{r3, r4, r5, lr}
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	d904      	bls.n	8008970 <_raise_r+0x14>
 8008966:	2316      	movs	r3, #22
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008972:	b112      	cbz	r2, 800897a <_raise_r+0x1e>
 8008974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008978:	b94b      	cbnz	r3, 800898e <_raise_r+0x32>
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f830 	bl	80089e0 <_getpid_r>
 8008980:	462a      	mov	r2, r5
 8008982:	4601      	mov	r1, r0
 8008984:	4620      	mov	r0, r4
 8008986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800898a:	f000 b817 	b.w	80089bc <_kill_r>
 800898e:	2b01      	cmp	r3, #1
 8008990:	d00a      	beq.n	80089a8 <_raise_r+0x4c>
 8008992:	1c59      	adds	r1, r3, #1
 8008994:	d103      	bne.n	800899e <_raise_r+0x42>
 8008996:	2316      	movs	r3, #22
 8008998:	6003      	str	r3, [r0, #0]
 800899a:	2001      	movs	r0, #1
 800899c:	e7e7      	b.n	800896e <_raise_r+0x12>
 800899e:	2400      	movs	r4, #0
 80089a0:	4628      	mov	r0, r5
 80089a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089a6:	4798      	blx	r3
 80089a8:	2000      	movs	r0, #0
 80089aa:	e7e0      	b.n	800896e <_raise_r+0x12>

080089ac <raise>:
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <raise+0xc>)
 80089ae:	4601      	mov	r1, r0
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	f7ff bfd3 	b.w	800895c <_raise_r>
 80089b6:	bf00      	nop
 80089b8:	20000074 	.word	0x20000074

080089bc <_kill_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	2300      	movs	r3, #0
 80089c0:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_kill_r+0x20>)
 80089c2:	4604      	mov	r4, r0
 80089c4:	4608      	mov	r0, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	f7f9 fec0 	bl	800274e <_kill>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d102      	bne.n	80089d8 <_kill_r+0x1c>
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	b103      	cbz	r3, 80089d8 <_kill_r+0x1c>
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	bd38      	pop	{r3, r4, r5, pc}
 80089da:	bf00      	nop
 80089dc:	20000678 	.word	0x20000678

080089e0 <_getpid_r>:
 80089e0:	f7f9 beae 	b.w	8002740 <_getpid>

080089e4 <__swhatbuf_r>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	460c      	mov	r4, r1
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	4615      	mov	r5, r2
 80089ee:	2900      	cmp	r1, #0
 80089f0:	461e      	mov	r6, r3
 80089f2:	b096      	sub	sp, #88	; 0x58
 80089f4:	da0c      	bge.n	8008a10 <__swhatbuf_r+0x2c>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	2100      	movs	r1, #0
 80089fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80089fe:	bf0c      	ite	eq
 8008a00:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a04:	2340      	movne	r3, #64	; 0x40
 8008a06:	2000      	movs	r0, #0
 8008a08:	6031      	str	r1, [r6, #0]
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	b016      	add	sp, #88	; 0x58
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	466a      	mov	r2, sp
 8008a12:	f000 f849 	bl	8008aa8 <_fstat_r>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	dbed      	blt.n	80089f6 <__swhatbuf_r+0x12>
 8008a1a:	9901      	ldr	r1, [sp, #4]
 8008a1c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a20:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a24:	4259      	negs	r1, r3
 8008a26:	4159      	adcs	r1, r3
 8008a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a2c:	e7eb      	b.n	8008a06 <__swhatbuf_r+0x22>

08008a2e <__smakebuf_r>:
 8008a2e:	898b      	ldrh	r3, [r1, #12]
 8008a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a32:	079d      	lsls	r5, r3, #30
 8008a34:	4606      	mov	r6, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	d507      	bpl.n	8008a4a <__smakebuf_r+0x1c>
 8008a3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	2301      	movs	r3, #1
 8008a44:	6163      	str	r3, [r4, #20]
 8008a46:	b002      	add	sp, #8
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
 8008a4a:	466a      	mov	r2, sp
 8008a4c:	ab01      	add	r3, sp, #4
 8008a4e:	f7ff ffc9 	bl	80089e4 <__swhatbuf_r>
 8008a52:	9900      	ldr	r1, [sp, #0]
 8008a54:	4605      	mov	r5, r0
 8008a56:	4630      	mov	r0, r6
 8008a58:	f7fe feca 	bl	80077f0 <_malloc_r>
 8008a5c:	b948      	cbnz	r0, 8008a72 <__smakebuf_r+0x44>
 8008a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a62:	059a      	lsls	r2, r3, #22
 8008a64:	d4ef      	bmi.n	8008a46 <__smakebuf_r+0x18>
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	f043 0302 	orr.w	r3, r3, #2
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	e7e3      	b.n	8008a3a <__smakebuf_r+0xc>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	6020      	str	r0, [r4, #0]
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	9b00      	ldr	r3, [sp, #0]
 8008a7e:	6120      	str	r0, [r4, #16]
 8008a80:	6163      	str	r3, [r4, #20]
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	b15b      	cbz	r3, 8008a9e <__smakebuf_r+0x70>
 8008a86:	4630      	mov	r0, r6
 8008a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a8c:	f000 f81e 	bl	8008acc <_isatty_r>
 8008a90:	b128      	cbz	r0, 8008a9e <__smakebuf_r+0x70>
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	f023 0303 	bic.w	r3, r3, #3
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	81a3      	strh	r3, [r4, #12]
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	431d      	orrs	r5, r3
 8008aa2:	81a5      	strh	r5, [r4, #12]
 8008aa4:	e7cf      	b.n	8008a46 <__smakebuf_r+0x18>
	...

08008aa8 <_fstat_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4d06      	ldr	r5, [pc, #24]	; (8008ac8 <_fstat_r+0x20>)
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	f7f9 fea8 	bl	800280a <_fstat>
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	d102      	bne.n	8008ac4 <_fstat_r+0x1c>
 8008abe:	682b      	ldr	r3, [r5, #0]
 8008ac0:	b103      	cbz	r3, 8008ac4 <_fstat_r+0x1c>
 8008ac2:	6023      	str	r3, [r4, #0]
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000678 	.word	0x20000678

08008acc <_isatty_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4d05      	ldr	r5, [pc, #20]	; (8008ae8 <_isatty_r+0x1c>)
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	f7f9 fea6 	bl	8002828 <_isatty>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_isatty_r+0x1a>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_isatty_r+0x1a>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	20000678 	.word	0x20000678

08008aec <_init>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr

08008af8 <_fini>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr
